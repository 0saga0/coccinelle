exception Error

type token = 
  | Tvolatile of (
# 54 "parser_cocci_menhir.mly"
      (Data.clt)
# 8 "parser_cocci_menhir.ml"
)
  | Tvoid of (
# 50 "parser_cocci_menhir.mly"
      (Data.clt)
# 13 "parser_cocci_menhir.ml"
)
  | Tunsigned of (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 18 "parser_cocci_menhir.ml"
)
  | Tunion of (
# 50 "parser_cocci_menhir.mly"
      (Data.clt)
# 23 "parser_cocci_menhir.ml"
)
  | Ttypedef of (
# 53 "parser_cocci_menhir.mly"
      (Data.clt)
# 28 "parser_cocci_menhir.ml"
)
  | Tstruct of (
# 50 "parser_cocci_menhir.mly"
      (Data.clt)
# 33 "parser_cocci_menhir.ml"
)
  | Tstatic of (
# 53 "parser_cocci_menhir.mly"
      (Data.clt)
# 38 "parser_cocci_menhir.ml"
)
  | Tsigned of (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 43 "parser_cocci_menhir.ml"
)
  | Tshort of (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 48 "parser_cocci_menhir.ml"
)
  | Tregister of (
# 53 "parser_cocci_menhir.mly"
      (Data.clt)
# 53 "parser_cocci_menhir.ml"
)
  | Tlong of (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 58 "parser_cocci_menhir.ml"
)
  | Tlist
  | Tint of (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 64 "parser_cocci_menhir.ml"
)
  | Tinline of (
# 53 "parser_cocci_menhir.mly"
      (Data.clt)
# 69 "parser_cocci_menhir.ml"
)
  | Tfloat of (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 74 "parser_cocci_menhir.ml"
)
  | Textern of (
# 53 "parser_cocci_menhir.mly"
      (Data.clt)
# 79 "parser_cocci_menhir.ml"
)
  | Tenum of (
# 50 "parser_cocci_menhir.mly"
      (Data.clt)
# 84 "parser_cocci_menhir.ml"
)
  | Tdouble of (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 89 "parser_cocci_menhir.ml"
)
  | Tconst of (
# 54 "parser_cocci_menhir.mly"
      (Data.clt)
# 94 "parser_cocci_menhir.ml"
)
  | Tchar of (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 99 "parser_cocci_menhir.ml"
)
  | Tauto of (
# 53 "parser_cocci_menhir.mly"
      (Data.clt)
# 104 "parser_cocci_menhir.ml"
)
  | Tattr of (
# 55 "parser_cocci_menhir.mly"
      (string * Data.clt)
# 109 "parser_cocci_menhir.ml"
)
  | TXor of (
# 92 "parser_cocci_menhir.mly"
       (Data.clt)
# 114 "parser_cocci_menhir.ml"
)
  | TWords
  | TWhy0
  | TWhy of (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 121 "parser_cocci_menhir.ml"
)
  | TWhile of (
# 57 "parser_cocci_menhir.mly"
       (Data.clt)
# 126 "parser_cocci_menhir.ml"
)
  | TWhenTrue of (
# 74 "parser_cocci_menhir.mly"
       (Data.clt)
# 131 "parser_cocci_menhir.ml"
)
  | TWhenFalse of (
# 74 "parser_cocci_menhir.mly"
       (Data.clt)
# 136 "parser_cocci_menhir.ml"
)
  | TWhen of (
# 74 "parser_cocci_menhir.mly"
       (Data.clt)
# 141 "parser_cocci_menhir.ml"
)
  | TVirtual
  | TUsing
  | TTypedef
  | TTypeId of (
# 59 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 149 "parser_cocci_menhir.ml"
)
  | TType
  | TTildeExclEq of (
# 94 "parser_cocci_menhir.mly"
       (Data.clt)
# 155 "parser_cocci_menhir.ml"
)
  | TTildeEq of (
# 94 "parser_cocci_menhir.mly"
       (Data.clt)
# 160 "parser_cocci_menhir.ml"
)
  | TTilde of (
# 99 "parser_cocci_menhir.mly"
       (Data.clt)
# 165 "parser_cocci_menhir.ml"
)
  | TSwitch of (
# 57 "parser_cocci_menhir.mly"
       (Data.clt)
# 170 "parser_cocci_menhir.ml"
)
  | TString of (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 175 "parser_cocci_menhir.ml"
)
  | TStrict of (
# 74 "parser_cocci_menhir.mly"
       (Data.clt)
# 180 "parser_cocci_menhir.ml"
)
  | TStatement
  | TSizeof of (
# 58 "parser_cocci_menhir.mly"
       (Data.clt)
# 186 "parser_cocci_menhir.ml"
)
  | TShOp of (
# 96 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 191 "parser_cocci_menhir.ml"
)
  | TScriptData of (
# 71 "parser_cocci_menhir.mly"
       (string)
# 196 "parser_cocci_menhir.ml"
)
  | TScript
  | TRuleName of (
# 47 "parser_cocci_menhir.mly"
      (string)
# 202 "parser_cocci_menhir.ml"
)
  | TRightIso
  | TReturn of (
# 57 "parser_cocci_menhir.mly"
       (Data.clt)
# 208 "parser_cocci_menhir.ml"
)
  | TPure
  | TPtrOp of (
# 104 "parser_cocci_menhir.mly"
       (Data.clt)
# 214 "parser_cocci_menhir.ml"
)
  | TPtVirg of (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 219 "parser_cocci_menhir.ml"
)
  | TPragma of (
# 59 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 224 "parser_cocci_menhir.ml"
)
  | TPosition
  | TPosAny
  | TPlusFile of (
# 83 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 231 "parser_cocci_menhir.ml"
)
  | TPlus0
  | TPlus of (
# 98 "parser_cocci_menhir.mly"
       (Data.clt)
# 237 "parser_cocci_menhir.ml"
)
  | TPathIsoFile of (
# 79 "parser_cocci_menhir.mly"
       (string)
# 242 "parser_cocci_menhir.ml"
)
  | TParameter
  | TPOEllipsis of (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 248 "parser_cocci_menhir.ml"
)
  | TPCEllipsis of (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 253 "parser_cocci_menhir.ml"
)
  | TPArob
  | TOrLog of (
# 89 "parser_cocci_menhir.mly"
       (Data.clt)
# 259 "parser_cocci_menhir.ml"
)
  | TOr of (
# 91 "parser_cocci_menhir.mly"
       (Data.clt)
# 264 "parser_cocci_menhir.ml"
)
  | TOn
  | TOPar0 of (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 270 "parser_cocci_menhir.ml"
)
  | TOPar of (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 275 "parser_cocci_menhir.ml"
)
  | TOInit of (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 280 "parser_cocci_menhir.ml"
)
  | TOEllipsis of (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 285 "parser_cocci_menhir.ml"
)
  | TOCro of (
# 102 "parser_cocci_menhir.mly"
       (Data.clt)
# 290 "parser_cocci_menhir.ml"
)
  | TOBrace of (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 295 "parser_cocci_menhir.ml"
)
  | TNothing
  | TNotEq of (
# 94 "parser_cocci_menhir.mly"
       (Data.clt)
# 301 "parser_cocci_menhir.ml"
)
  | TNever
  | TName
  | TMul of (
# 99 "parser_cocci_menhir.mly"
       (Data.clt)
# 308 "parser_cocci_menhir.ml"
)
  | TMinusFile of (
# 83 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 313 "parser_cocci_menhir.ml"
)
  | TMinus of (
# 98 "parser_cocci_menhir.mly"
       (Data.clt)
# 318 "parser_cocci_menhir.ml"
)
  | TMid0 of (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 323 "parser_cocci_menhir.ml"
)
  | TMetaType of (
# 64 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 328 "parser_cocci_menhir.ml"
)
  | TMetaStmList of (
# 64 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 333 "parser_cocci_menhir.ml"
)
  | TMetaStm of (
# 64 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 338 "parser_cocci_menhir.ml"
)
  | TMetaPos of (
# 68 "parser_cocci_menhir.mly"
       (Parse_aux.pos_info)
# 343 "parser_cocci_menhir.ml"
)
  | TMetaParamList of (
# 66 "parser_cocci_menhir.mly"
       (Parse_aux.list_info)
# 348 "parser_cocci_menhir.ml"
)
  | TMetaParam of (
# 64 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 353 "parser_cocci_menhir.ml"
)
  | TMetaLocalIdExp of (
# 67 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 358 "parser_cocci_menhir.ml"
)
  | TMetaLocalFunc of (
# 61 "parser_cocci_menhir.mly"
       (Parse_aux.idinfo)
# 363 "parser_cocci_menhir.ml"
)
  | TMetaIterator of (
# 62 "parser_cocci_menhir.mly"
       (Parse_aux.idinfo)
# 368 "parser_cocci_menhir.ml"
)
  | TMetaInit of (
# 65 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 373 "parser_cocci_menhir.ml"
)
  | TMetaIdExp of (
# 67 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 378 "parser_cocci_menhir.ml"
)
  | TMetaId of (
# 61 "parser_cocci_menhir.mly"
       (Parse_aux.idinfo)
# 383 "parser_cocci_menhir.ml"
)
  | TMetaFunc of (
# 61 "parser_cocci_menhir.mly"
       (Parse_aux.idinfo)
# 388 "parser_cocci_menhir.ml"
)
  | TMetaExpList of (
# 66 "parser_cocci_menhir.mly"
       (Parse_aux.list_info)
# 393 "parser_cocci_menhir.ml"
)
  | TMetaExp of (
# 67 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 398 "parser_cocci_menhir.ml"
)
  | TMetaErr of (
# 63 "parser_cocci_menhir.mly"
       (Parse_aux.expinfo)
# 403 "parser_cocci_menhir.ml"
)
  | TMetaDeclarer of (
# 62 "parser_cocci_menhir.mly"
       (Parse_aux.idinfo)
# 408 "parser_cocci_menhir.ml"
)
  | TMetaConst of (
# 67 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 413 "parser_cocci_menhir.ml"
)
  | TMPtVirg
  | TLogOp of (
# 95 "parser_cocci_menhir.mly"
       (Ast_cocci.logicalOp * Data.clt)
# 419 "parser_cocci_menhir.ml"
)
  | TLocal
  | TLineEnd of (
# 74 "parser_cocci_menhir.mly"
       (Data.clt)
# 425 "parser_cocci_menhir.ml"
)
  | TIteratorId of (
# 59 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 430 "parser_cocci_menhir.ml"
)
  | TIterator
  | TIsoType
  | TIsoTopLevel
  | TIsoTestExpression
  | TIsoStatement
  | TIsoExpression
  | TIsoDeclaration
  | TIsoArgExpression
  | TIso
  | TInvalid
  | TInt of (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 445 "parser_cocci_menhir.ml"
)
  | TInitialize
  | TInitialiser
  | TIncludeNL of (
# 80 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 452 "parser_cocci_menhir.ml"
)
  | TIncludeL of (
# 80 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 457 "parser_cocci_menhir.ml"
)
  | TInc of (
# 85 "parser_cocci_menhir.mly"
       (Data.clt)
# 462 "parser_cocci_menhir.ml"
)
  | TIf of (
# 57 "parser_cocci_menhir.mly"
       (Data.clt)
# 467 "parser_cocci_menhir.ml"
)
  | TIdentifier
  | TIdent of (
# 59 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 473 "parser_cocci_menhir.ml"
)
  | TIdExpression
  | TGoto of (
# 58 "parser_cocci_menhir.mly"
       (Data.clt)
# 479 "parser_cocci_menhir.ml"
)
  | TGenerated
  | TFunction
  | TFunDecl of (
# 58 "parser_cocci_menhir.mly"
       (Data.clt)
# 486 "parser_cocci_menhir.ml"
)
  | TFresh
  | TForall
  | TFor of (
# 57 "parser_cocci_menhir.mly"
       (Data.clt)
# 493 "parser_cocci_menhir.ml"
)
  | TFloat of (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 498 "parser_cocci_menhir.ml"
)
  | TFinalize
  | TExtends
  | TExpression
  | TExists
  | TEver
  | TError
  | TEqEq of (
# 94 "parser_cocci_menhir.mly"
       (Data.clt)
# 509 "parser_cocci_menhir.ml"
)
  | TEq of (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 514 "parser_cocci_menhir.ml"
)
  | TElse of (
# 57 "parser_cocci_menhir.mly"
       (Data.clt)
# 519 "parser_cocci_menhir.ml"
)
  | TEllipsis of (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 524 "parser_cocci_menhir.ml"
)
  | TDotDot of (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 529 "parser_cocci_menhir.ml"
)
  | TDot of (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 534 "parser_cocci_menhir.ml"
)
  | TDo of (
# 57 "parser_cocci_menhir.mly"
       (Data.clt)
# 539 "parser_cocci_menhir.ml"
)
  | TDmOp of (
# 97 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 544 "parser_cocci_menhir.ml"
)
  | TDisable
  | TDepends
  | TDefineParam of (
# 82 "parser_cocci_menhir.mly"
       (Data.clt * token * int * int)
# 551 "parser_cocci_menhir.ml"
)
  | TDefine of (
# 81 "parser_cocci_menhir.mly"
       (Data.clt * token)
# 556 "parser_cocci_menhir.ml"
)
  | TDefault of (
# 57 "parser_cocci_menhir.mly"
       (Data.clt)
# 561 "parser_cocci_menhir.ml"
)
  | TDeclarerId of (
# 59 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 566 "parser_cocci_menhir.ml"
)
  | TDeclarer
  | TDec of (
# 85 "parser_cocci_menhir.mly"
       (Data.clt)
# 572 "parser_cocci_menhir.ml"
)
  | TCppConcatOp
  | TContinue of (
# 58 "parser_cocci_menhir.mly"
       (Data.clt)
# 578 "parser_cocci_menhir.ml"
)
  | TContext
  | TConstant
  | TComma of (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 585 "parser_cocci_menhir.ml"
)
  | TChar of (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 590 "parser_cocci_menhir.ml"
)
  | TCase of (
# 57 "parser_cocci_menhir.mly"
       (Data.clt)
# 595 "parser_cocci_menhir.ml"
)
  | TCPar0 of (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 600 "parser_cocci_menhir.ml"
)
  | TCPar of (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 605 "parser_cocci_menhir.ml"
)
  | TCEllipsis of (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 610 "parser_cocci_menhir.ml"
)
  | TCCro of (
# 102 "parser_cocci_menhir.mly"
       (Data.clt)
# 615 "parser_cocci_menhir.ml"
)
  | TCBrace of (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 620 "parser_cocci_menhir.ml"
)
  | TBreak of (
# 58 "parser_cocci_menhir.mly"
       (Data.clt)
# 625 "parser_cocci_menhir.ml"
)
  | TBang0
  | TBang of (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 631 "parser_cocci_menhir.ml"
)
  | TAssign of (
# 108 "parser_cocci_menhir.mly"
       (Ast_cocci.assignOp * Data.clt)
# 636 "parser_cocci_menhir.ml"
)
  | TArobArob
  | TArob
  | TAny of (
# 74 "parser_cocci_menhir.mly"
       (Data.clt)
# 643 "parser_cocci_menhir.ml"
)
  | TAndLog of (
# 90 "parser_cocci_menhir.mly"
       (Data.clt)
# 648 "parser_cocci_menhir.ml"
)
  | TAnd of (
# 93 "parser_cocci_menhir.mly"
       (Data.clt)
# 653 "parser_cocci_menhir.ml"
)
  | EOF

and _menhir_jeton = token


# 23 "parser_cocci_menhir.mly"
  

(* Not clear how to allow function declarations to specify a return type
and how to allow both to be specified as static, because they are in
different rules.  The rules seem to have to be combined, which would allow
functions to be declared as local variables *)

(* Not clear how to let a function have a parameter of type void.  At the
moment, void is allowed to be the type of a variable, which is wrong, and a
parameter needs both a type and an identifier *)
module Ast0 = Ast0_cocci
module Ast = Ast_cocci
module P = Parse_aux

# 675 "parser_cocci_menhir.ml"
let _eRR =
  Error

module MenhirInterpreter = MenhirLib.TableInterpreter.Make (struct
  
  exception Error = Error
  
  type token = _menhir_jeton
  
  let token2terminal : token -> int =
    fun _tok ->
      match _tok with
      | EOF ->
          175
      | TAnd _ ->
          174
      | TAndLog _ ->
          173
      | TAny _ ->
          172
      | TArob ->
          171
      | TArobArob ->
          170
      | TAssign _ ->
          169
      | TBang _ ->
          168
      | TBang0 ->
          167
      | TBreak _ ->
          166
      | TCBrace _ ->
          165
      | TCCro _ ->
          164
      | TCEllipsis _ ->
          163
      | TCPar _ ->
          162
      | TCPar0 _ ->
          161
      | TCase _ ->
          160
      | TChar _ ->
          159
      | TComma _ ->
          158
      | TConstant ->
          157
      | TContext ->
          156
      | TContinue _ ->
          155
      | TCppConcatOp ->
          154
      | TDec _ ->
          153
      | TDeclarer ->
          152
      | TDeclarerId _ ->
          151
      | TDefault _ ->
          150
      | TDefine _ ->
          149
      | TDefineParam _ ->
          148
      | TDepends ->
          147
      | TDisable ->
          146
      | TDmOp _ ->
          145
      | TDo _ ->
          144
      | TDot _ ->
          143
      | TDotDot _ ->
          142
      | TEllipsis _ ->
          141
      | TElse _ ->
          140
      | TEq _ ->
          139
      | TEqEq _ ->
          138
      | TError ->
          137
      | TEver ->
          136
      | TExists ->
          135
      | TExpression ->
          134
      | TExtends ->
          133
      | TFinalize ->
          132
      | TFloat _ ->
          131
      | TFor _ ->
          130
      | TForall ->
          129
      | TFresh ->
          128
      | TFunDecl _ ->
          127
      | TFunction ->
          126
      | TGenerated ->
          125
      | TGoto _ ->
          124
      | TIdExpression ->
          123
      | TIdent _ ->
          122
      | TIdentifier ->
          121
      | TIf _ ->
          120
      | TInc _ ->
          119
      | TIncludeL _ ->
          118
      | TIncludeNL _ ->
          117
      | TInitialiser ->
          116
      | TInitialize ->
          115
      | TInt _ ->
          114
      | TInvalid ->
          113
      | TIso ->
          112
      | TIsoArgExpression ->
          111
      | TIsoDeclaration ->
          110
      | TIsoExpression ->
          109
      | TIsoStatement ->
          108
      | TIsoTestExpression ->
          107
      | TIsoTopLevel ->
          106
      | TIsoType ->
          105
      | TIterator ->
          104
      | TIteratorId _ ->
          103
      | TLineEnd _ ->
          102
      | TLocal ->
          101
      | TLogOp _ ->
          100
      | TMPtVirg ->
          99
      | TMetaConst _ ->
          98
      | TMetaDeclarer _ ->
          97
      | TMetaErr _ ->
          96
      | TMetaExp _ ->
          95
      | TMetaExpList _ ->
          94
      | TMetaFunc _ ->
          93
      | TMetaId _ ->
          92
      | TMetaIdExp _ ->
          91
      | TMetaInit _ ->
          90
      | TMetaIterator _ ->
          89
      | TMetaLocalFunc _ ->
          88
      | TMetaLocalIdExp _ ->
          87
      | TMetaParam _ ->
          86
      | TMetaParamList _ ->
          85
      | TMetaPos _ ->
          84
      | TMetaStm _ ->
          83
      | TMetaStmList _ ->
          82
      | TMetaType _ ->
          81
      | TMid0 _ ->
          80
      | TMinus _ ->
          79
      | TMinusFile _ ->
          78
      | TMul _ ->
          77
      | TName ->
          76
      | TNever ->
          75
      | TNotEq _ ->
          74
      | TNothing ->
          73
      | TOBrace _ ->
          72
      | TOCro _ ->
          71
      | TOEllipsis _ ->
          70
      | TOInit _ ->
          69
      | TOPar _ ->
          68
      | TOPar0 _ ->
          67
      | TOn ->
          66
      | TOr _ ->
          65
      | TOrLog _ ->
          64
      | TPArob ->
          63
      | TPCEllipsis _ ->
          62
      | TPOEllipsis _ ->
          61
      | TParameter ->
          60
      | TPathIsoFile _ ->
          59
      | TPlus _ ->
          58
      | TPlus0 ->
          57
      | TPlusFile _ ->
          56
      | TPosAny ->
          55
      | TPosition ->
          54
      | TPragma _ ->
          53
      | TPtVirg _ ->
          52
      | TPtrOp _ ->
          51
      | TPure ->
          50
      | TReturn _ ->
          49
      | TRightIso ->
          48
      | TRuleName _ ->
          47
      | TScript ->
          46
      | TScriptData _ ->
          45
      | TShOp _ ->
          44
      | TSizeof _ ->
          43
      | TStatement ->
          42
      | TStrict _ ->
          41
      | TString _ ->
          40
      | TSwitch _ ->
          39
      | TTilde _ ->
          38
      | TTildeEq _ ->
          37
      | TTildeExclEq _ ->
          36
      | TType ->
          35
      | TTypeId _ ->
          34
      | TTypedef ->
          33
      | TUsing ->
          32
      | TVirtual ->
          31
      | TWhen _ ->
          30
      | TWhenFalse _ ->
          29
      | TWhenTrue _ ->
          28
      | TWhile _ ->
          27
      | TWhy _ ->
          26
      | TWhy0 ->
          25
      | TWords ->
          24
      | TXor _ ->
          23
      | Tattr _ ->
          22
      | Tauto _ ->
          21
      | Tchar _ ->
          20
      | Tconst _ ->
          19
      | Tdouble _ ->
          18
      | Tenum _ ->
          17
      | Textern _ ->
          16
      | Tfloat _ ->
          15
      | Tinline _ ->
          14
      | Tint _ ->
          13
      | Tlist ->
          12
      | Tlong _ ->
          11
      | Tregister _ ->
          10
      | Tshort _ ->
          9
      | Tsigned _ ->
          8
      | Tstatic _ ->
          7
      | Tstruct _ ->
          6
      | Ttypedef _ ->
          5
      | Tunion _ ->
          4
      | Tunsigned _ ->
          3
      | Tvoid _ ->
          2
      | Tvolatile _ ->
          1
  
  let error_terminal =
    0
  
  let token2value : token -> Obj.t =
    fun _tok ->
      match _tok with
      | EOF ->
          Obj.repr ()
      | TAnd _v ->
          Obj.repr _v
      | TAndLog _v ->
          Obj.repr _v
      | TAny _v ->
          Obj.repr _v
      | TArob ->
          Obj.repr ()
      | TArobArob ->
          Obj.repr ()
      | TAssign _v ->
          Obj.repr _v
      | TBang _v ->
          Obj.repr _v
      | TBang0 ->
          Obj.repr ()
      | TBreak _v ->
          Obj.repr _v
      | TCBrace _v ->
          Obj.repr _v
      | TCCro _v ->
          Obj.repr _v
      | TCEllipsis _v ->
          Obj.repr _v
      | TCPar _v ->
          Obj.repr _v
      | TCPar0 _v ->
          Obj.repr _v
      | TCase _v ->
          Obj.repr _v
      | TChar _v ->
          Obj.repr _v
      | TComma _v ->
          Obj.repr _v
      | TConstant ->
          Obj.repr ()
      | TContext ->
          Obj.repr ()
      | TContinue _v ->
          Obj.repr _v
      | TCppConcatOp ->
          Obj.repr ()
      | TDec _v ->
          Obj.repr _v
      | TDeclarer ->
          Obj.repr ()
      | TDeclarerId _v ->
          Obj.repr _v
      | TDefault _v ->
          Obj.repr _v
      | TDefine _v ->
          Obj.repr _v
      | TDefineParam _v ->
          Obj.repr _v
      | TDepends ->
          Obj.repr ()
      | TDisable ->
          Obj.repr ()
      | TDmOp _v ->
          Obj.repr _v
      | TDo _v ->
          Obj.repr _v
      | TDot _v ->
          Obj.repr _v
      | TDotDot _v ->
          Obj.repr _v
      | TEllipsis _v ->
          Obj.repr _v
      | TElse _v ->
          Obj.repr _v
      | TEq _v ->
          Obj.repr _v
      | TEqEq _v ->
          Obj.repr _v
      | TError ->
          Obj.repr ()
      | TEver ->
          Obj.repr ()
      | TExists ->
          Obj.repr ()
      | TExpression ->
          Obj.repr ()
      | TExtends ->
          Obj.repr ()
      | TFinalize ->
          Obj.repr ()
      | TFloat _v ->
          Obj.repr _v
      | TFor _v ->
          Obj.repr _v
      | TForall ->
          Obj.repr ()
      | TFresh ->
          Obj.repr ()
      | TFunDecl _v ->
          Obj.repr _v
      | TFunction ->
          Obj.repr ()
      | TGenerated ->
          Obj.repr ()
      | TGoto _v ->
          Obj.repr _v
      | TIdExpression ->
          Obj.repr ()
      | TIdent _v ->
          Obj.repr _v
      | TIdentifier ->
          Obj.repr ()
      | TIf _v ->
          Obj.repr _v
      | TInc _v ->
          Obj.repr _v
      | TIncludeL _v ->
          Obj.repr _v
      | TIncludeNL _v ->
          Obj.repr _v
      | TInitialiser ->
          Obj.repr ()
      | TInitialize ->
          Obj.repr ()
      | TInt _v ->
          Obj.repr _v
      | TInvalid ->
          Obj.repr ()
      | TIso ->
          Obj.repr ()
      | TIsoArgExpression ->
          Obj.repr ()
      | TIsoDeclaration ->
          Obj.repr ()
      | TIsoExpression ->
          Obj.repr ()
      | TIsoStatement ->
          Obj.repr ()
      | TIsoTestExpression ->
          Obj.repr ()
      | TIsoTopLevel ->
          Obj.repr ()
      | TIsoType ->
          Obj.repr ()
      | TIterator ->
          Obj.repr ()
      | TIteratorId _v ->
          Obj.repr _v
      | TLineEnd _v ->
          Obj.repr _v
      | TLocal ->
          Obj.repr ()
      | TLogOp _v ->
          Obj.repr _v
      | TMPtVirg ->
          Obj.repr ()
      | TMetaConst _v ->
          Obj.repr _v
      | TMetaDeclarer _v ->
          Obj.repr _v
      | TMetaErr _v ->
          Obj.repr _v
      | TMetaExp _v ->
          Obj.repr _v
      | TMetaExpList _v ->
          Obj.repr _v
      | TMetaFunc _v ->
          Obj.repr _v
      | TMetaId _v ->
          Obj.repr _v
      | TMetaIdExp _v ->
          Obj.repr _v
      | TMetaInit _v ->
          Obj.repr _v
      | TMetaIterator _v ->
          Obj.repr _v
      | TMetaLocalFunc _v ->
          Obj.repr _v
      | TMetaLocalIdExp _v ->
          Obj.repr _v
      | TMetaParam _v ->
          Obj.repr _v
      | TMetaParamList _v ->
          Obj.repr _v
      | TMetaPos _v ->
          Obj.repr _v
      | TMetaStm _v ->
          Obj.repr _v
      | TMetaStmList _v ->
          Obj.repr _v
      | TMetaType _v ->
          Obj.repr _v
      | TMid0 _v ->
          Obj.repr _v
      | TMinus _v ->
          Obj.repr _v
      | TMinusFile _v ->
          Obj.repr _v
      | TMul _v ->
          Obj.repr _v
      | TName ->
          Obj.repr ()
      | TNever ->
          Obj.repr ()
      | TNotEq _v ->
          Obj.repr _v
      | TNothing ->
          Obj.repr ()
      | TOBrace _v ->
          Obj.repr _v
      | TOCro _v ->
          Obj.repr _v
      | TOEllipsis _v ->
          Obj.repr _v
      | TOInit _v ->
          Obj.repr _v
      | TOPar _v ->
          Obj.repr _v
      | TOPar0 _v ->
          Obj.repr _v
      | TOn ->
          Obj.repr ()
      | TOr _v ->
          Obj.repr _v
      | TOrLog _v ->
          Obj.repr _v
      | TPArob ->
          Obj.repr ()
      | TPCEllipsis _v ->
          Obj.repr _v
      | TPOEllipsis _v ->
          Obj.repr _v
      | TParameter ->
          Obj.repr ()
      | TPathIsoFile _v ->
          Obj.repr _v
      | TPlus _v ->
          Obj.repr _v
      | TPlus0 ->
          Obj.repr ()
      | TPlusFile _v ->
          Obj.repr _v
      | TPosAny ->
          Obj.repr ()
      | TPosition ->
          Obj.repr ()
      | TPragma _v ->
          Obj.repr _v
      | TPtVirg _v ->
          Obj.repr _v
      | TPtrOp _v ->
          Obj.repr _v
      | TPure ->
          Obj.repr ()
      | TReturn _v ->
          Obj.repr _v
      | TRightIso ->
          Obj.repr ()
      | TRuleName _v ->
          Obj.repr _v
      | TScript ->
          Obj.repr ()
      | TScriptData _v ->
          Obj.repr _v
      | TShOp _v ->
          Obj.repr _v
      | TSizeof _v ->
          Obj.repr _v
      | TStatement ->
          Obj.repr ()
      | TStrict _v ->
          Obj.repr _v
      | TString _v ->
          Obj.repr _v
      | TSwitch _v ->
          Obj.repr _v
      | TTilde _v ->
          Obj.repr _v
      | TTildeEq _v ->
          Obj.repr _v
      | TTildeExclEq _v ->
          Obj.repr _v
      | TType ->
          Obj.repr ()
      | TTypeId _v ->
          Obj.repr _v
      | TTypedef ->
          Obj.repr ()
      | TUsing ->
          Obj.repr ()
      | TVirtual ->
          Obj.repr ()
      | TWhen _v ->
          Obj.repr _v
      | TWhenFalse _v ->
          Obj.repr _v
      | TWhenTrue _v ->
          Obj.repr _v
      | TWhile _v ->
          Obj.repr _v
      | TWhy _v ->
          Obj.repr _v
      | TWhy0 ->
          Obj.repr ()
      | TWords ->
          Obj.repr ()
      | TXor _v ->
          Obj.repr _v
      | Tattr _v ->
          Obj.repr _v
      | Tauto _v ->
          Obj.repr _v
      | Tchar _v ->
          Obj.repr _v
      | Tconst _v ->
          Obj.repr _v
      | Tdouble _v ->
          Obj.repr _v
      | Tenum _v ->
          Obj.repr _v
      | Textern _v ->
          Obj.repr _v
      | Tfloat _v ->
          Obj.repr _v
      | Tinline _v ->
          Obj.repr _v
      | Tint _v ->
          Obj.repr _v
      | Tlist ->
          Obj.repr ()
      | Tlong _v ->
          Obj.repr _v
      | Tregister _v ->
          Obj.repr _v
      | Tshort _v ->
          Obj.repr _v
      | Tsigned _v ->
          Obj.repr _v
      | Tstatic _v ->
          Obj.repr _v
      | Tstruct _v ->
          Obj.repr _v
      | Ttypedef _v ->
          Obj.repr _v
      | Tunion _v ->
          Obj.repr _v
      | Tunsigned _v ->
          Obj.repr _v
      | Tvoid _v ->
          Obj.repr _v
      | Tvolatile _v ->
          Obj.repr _v
  
  let default_reduction =
    (16, "\000\000\000\000\002\154\000z\000\000\000\000\002\226\001J\000\000\001H\001I\001G\000\000\001L\001K\000\001\000\000\001\135\000\000\000\000\000\138\000\000\000\000\001w\000\163\000\000\000\000\000\150\000\000\000\000\000\155\000\154\000\000\000\151\000\000\000\149\000\000\000\000\000\000\000\153\000\000\000\152\003\025\003\024\000\000\000\000\000\143\000\000\000\000\000\148\000\147\000\000\000\144\000\000\000\142\000\000\000\000\000\000\000\146\000\000\000\145\000\000\000\157\000\000\000\000\000\162\000\161\000\000\000\158\000\000\000\165\000\000\001D\001C\000\000\000\166\000\000\000\164\000\137\000\000\000\156\000\000\000\171\000\000\000\000\000\000\000\160\000\000\000\000\000\000\003\015\000\000\000\000\000\000\000\000\000\000\003\020\000\000\000\000\000\168\000\000\003\022\000\000\000\000\000\000\003\145\002d\000\000\003\143\000\000\002~\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\142\003\144\002j\001?\002i\001=\001>\002h\002g\002f\002b\000\000\000\000\002c\001\012\000\000\002e\000\000\003\141\000\000\000c\001<\002E\000\000\000\000\002H\000\000\000\015\000\000\000\000\000\000\000\000\001\013\002a\002mt\000\209\000\000\000\000\000n\000o\002\008\001\235\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\220\000\215\000\000\001\236\000\000\000\000\000\000\000\000\000\208\000\206\000\221\000\000\001\127\000\000\000\000\003\017\000\000\003\016\000\000\000\000\000\000\000\000\000\000\000\198\000\000\000\000\000\000\000\000\000\199\000\197\000\000\000\000\003\019\003\023\000\189\000\000\000\000\001\027\000\000\000\000\002F\002I\000\000\002G\002J\003t\003u\003s\000\000\002k\003r\000\000\002\133\000\000\000\000\002\132\002\131\002\130\002\129\002\128\002|\000\000\000\000\002}\000\000\002\127\000\000\000\000\000g\002S\000\000\000\000\002V\000\000\000\000\002Y\000\000\000\000\002T\002W\000\000\002U\002X\002\135\002{\003\130\003\131\003\129\003\128\000h\000\000\000\000\000W\000\000\000V\001 \000\000\001\245\000\000\000\000\000\000\000\000\000\000\001\017\001\251\000\000\000\000\001\159\000U\0001\001\n\000_\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0002\000\000\0003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\134\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002l\000\000\000\204\000\000\000\000\001\230\000\000\001\149\001\211\000\000\000\000\001\229\000\000\001\147\001\210\000\000\000\000\000d\000\000\002\134\000\000\000\000\003\133\003\132\000\000\001\246\000\000\000\000\003w\003v\000\000\000Q\000\205\000\000\001y\000\000\003\018\000\000\000\000\000\000\000\000\000\169\000\167\000\000\001\021\000\000\000\000\000\170\000\159\000\000\000\000\001b\000\000\001a\000\000\001o\000\000\001\137\000\000\000\000\000\000\003G\000\000\000\000\003:\000\000\000\000\003?\003>\000\000\003;\000\000\0039\000\000\000\000\000\000\003=\000\000\003<\000\000\000\000\0033\000\000\000\000\0038\0037\000\000\0034\000\000\0032\000\000\000\000\000\000\0036\000\000\0035\000\000\003A\000\000\000\000\003F\003E\000\000\003B\000\000\003I\000\000\000\000\003J\000\000\003H\000\000\003@\000\000\003O\000\000\000\000\000\000\003D\000\000\000\000\003n\000\000\000\000\000\000\000\000\003N\003C\000\000\003p\000\000\000\000\002\242\003o\000\130\000\000\000\249\000\000\000\000\000\000\000\000\003L\000\000\000\000\000\000\000\000\003M\003K\000\000\000\000\003e\000\000\000\000\003X\000\000\000\000\003]\003\\\000\000\003Y\000\000\003W\000\000\000\000\000\000\003[\000\000\003Z\000\000\000\000\003Q\000\000\000\000\003V\003U\000\000\003R\000\000\003P\000\000\000\000\000\000\003T\000\000\003S\000\000\003_\000\000\000\000\003d\003c\000\000\003`\000\000\003g\000\000\000\000\003h\000\000\003f\000\000\003^\000\000\003m\000\000\000\000\000\000\003b\000\000\000\000\000\000\000\000\003l\003a\000\000\000\000\000\000\000\000\003j\000\000\000\000\000\000\000\000\003k\003i\003\011\003\013\003\014\003\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\211\000\210\000\000\000\000\000w\000\000\000\000\000\000\002q\000\000\000\000\000\000\002y\000\000\000\000\002x\000\000\003~\002w\002v\002u\002t\002s\001^\002o\000\000\000\000\002p\000\000\002r\000\000\000\000\000\000\000\000\000\000\000e\002L\000\000\000\000\002O\000\000\000\000\002R\000\000\000\000\002M\002P\000\000\002N\002Q\002z\002n\000f\003{\003|\003z\003y\003}\000\000\000\000\000\000\000\000\001\t\001\008\000\000\000\000\000\000\000\000\000\000\001T\000\000\001\019\001Q\000\000\001\007\001W\000\000\000\000\000\000\001X\000\000\000\000\001Y\000\000\001\131\000#\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\000\000%\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001Z\000\000\001V\000\000\000\000\001\\\000\000\000\000\000\000\000\000\000\000\000\000\000t\000q\000ri\002Z\000\000\000\000\002]\000\000\000\000\002`\000\000\000\000\002[\002^\000\000\002\\\002_\002\148\002\136\003\137\003\138\003\136\003\135\000j\000\000\000\000\000Z\000\000\000Y\000\000\002\147\000\000\001\212\000X\000?\001\031\000`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000A\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\140\003\139\000\000\003\002\000\000\003\001\000\000\000\000\000\000\000\000\003\152\000\000\000\000\000\000\003\153\000\000\000\018\000\000\000\000\000\000\003\148\000\000\001\161\000\000\000\000\000\000\000\222\002\248\001u\001ttn\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\024\000\000\000\000\002\027\000\000\002\011\000\000\000\000\002\014\000\000\000\000\000\000\002\017\000\000\000\000\002\021\000\000\001\155\001\215\000\000\002\201\000\000\000\000\000\000\003\150\000\017\000u\000\000\003\151\000\000\000\000\002\216\000\000\000\000\003\n\000a\000\000\000\000\000\000\000b\000\000\003\000\000\000\001{\000\000\001\129\002\253\000\000\000\000\001h\000\000\001g\000\000\001p\000\000\001\143\000\000\000\000\000\000\001f\000\000\001e\000\000\001m\000\000\001\141\000\000\000\000\000\000\001j\000\000\001i\000\000\001n\000\000\001\145\000\000\000\000\000\000\001k\000\000\000\000\000\000\001d\000\000\001c\000\000\001q\000\000\001\139\000\000\000\000\000\000\001l\000\002\000\000\000N\000O\000\000\000\000\002\164\002\168\002\172\002\160\002\157\000\000\000\000\002\169\002\176\002\161\002\175\002\159\002\174\002\163\002\155\002\162\002\171\002\158\002\165\002\156\002\167\002\173\002\170\002\166\001\179\001\178\000\127\000\000\000\000\002\236\000\000\000\000\002\210\000\000\000\000\002\212\002\211\002\185\000\000\000\000\002\244\002\178\002\177\002\179\000\000\001\191\000M\001r\000\003\000\000\000\000\002\151\000\000\002 \000\000\000\129\000\000\000\000\002\240\000\000\000\000\000\000\000y\000\000\000\000\002\224\000\000\002\005\002\004\001\173\002\187\000\000\001\207\000\000\002\152\000\000\000\000\000{\000\000\000\000\002\228\000\000\001\188\000\000\000\000\001\184\000\000\000\000\000\000\001\187\000\000\001\186\000\000\000\000\000\000\000\000\000\000\000\000\001\208\000\000\001\182\000\000\001\181\000\000\000v\000\000\000\000\002\218\000\000\000\000\001\177\000\000\000\000\000}\000\000\000\000\002\232\000\000\000\000\002\193\000\000\002\192\000\000\000\000\000\000\002\003\002\002\002\190\002&\002\181\002\191\000\000\001\194\000\000\000\000\000\000\001\190\000\000\001\196\000\000\000\000\001\185\000\000\000\000\000\000\002\183\000~\000\000\000\000\002\234\000\000\002\182\000\000\001\192\000\000\000\000\001\193\000\000\000\000\000\000\000\000\000\000\000\000\001\209\000\000\001\183\000\000\001\253\000\128\000\000\000\000\002\238\000\000\000\000\000\000\001F\000x\001E\000\000\000\000\002\222\000\000\001\255\001\254\001\171\002\186\000\000\000|\000\000\000\000\002\230\000\000\000\000\000\000\000\000\002\001\002\000\002\188\002$\002\180\002\189\000\000\001\201\000\000\001\205\000\000\000\000\001\197\000\000\000\000\000\000\001\189\000\000\001\195\000\000\000\000\000\000\000\000\001\176\000\000\000\000\001\204\000\000\001\203\000\000\000\000\000\000\000\000\001\200\000\000\000\000\001\199\000\000\001\198\000\000\000\000\000\000\000\000\001\202\000\000\001\206\000\000\000\000\001sl\000m\002\006\000\000\000\000\000\000\000\218\000\000\001}\000\000\000\000\000\217\000\213\000\000\000\000\000\000\000\000\001@\000\000\0030\000\000\0031\000\000\000\000\001\250\001\248\000\000\001\249\000\008\000\000\000\t\000\000\0025\0026\0024\000\000\0023\000\000\000\nk\000\000\000\000\001\011\000\000\001\029\001\028\000\000\001`\000\000\002\204\001\165\001\163\000\000\000\000\000\000\002\207\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\203\000\000\000\000\000\000\000\000\000\000\000\000\002\202\000\000\000\013\000\000\000\000\000\000\000\000\000\000\002\209\000\000\000\000\000\000\002\208")
  
  let error =
z\213x\000 \001\000\000\016\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\001*\134\128P!\170\008\t\012\192\140\006\128\136w\130@\000\142d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001v\142\000\000\001\136\000\008\000\192\140\002\000\128!\000\000\000\002d1\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0012\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001v\142\000\000\001\136\000\008\000\192\140\002\000\128!\000\000\000\002d1\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0012\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0012\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000z\213x\000 \001\000\000\016\000@\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\132\128\140\002\000\128!\000\000\000\002d1z\213x\000 \001\000\000\016@@\000\000\000\000 \000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000z\213x\002 \001\000\000\016@@\000\000\000\000 \000\000\000\000\004\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000z\213x\000 \001\000\000\016@@\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\008\000\000\000 \000\000\000\000\000\000z\213x\000 \001\000\000\016@@\000\000\000\000 \000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000z\213x\000 \001\000\000\016@@\000\000\000\000 \000\004\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\008\000\001\000\000\000\000\000\000\000\000\016\000\002 \000\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\004\000A\008\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\004\000A\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\000\000A\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\000\000A\000\130\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\004\000A\000\130\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\004\000A\000\130z\213x\000\"\145\000$\026\005A\157\160\000! \016\004\000A\000\130z\213x\000\"\145\000$\026\005A\157\160\000! \016\004\000A\000\130\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\000\000A\000\130z\213xn\000\129\000\0007@Bxw\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000z\213x\000\"\145\000$\026\005A\159\160\000! \016\004\000A \130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \000\008\008 \192%\128\000\n\000\000\000\0006@\002hw\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\004\000A\000\130\000\000\001 \000\008\136&\194%\128\000\n\000\128\000\0006@\002xwn\000\128\000\000&@\002x7\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\004\000A\000\130\000\000\001 \000\008\136&\194%\128\000\n\000\128\000\000&@\002x7\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\004\000A\000\130\000\000\001 \000\008\136&\194%\128\000\n\000\128\000\000&@\002x7\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\004\000A\000\130\000\000\001 \000\008\136&\194%\128\000\n\000\128\000\000&@\002x7\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\004\000A\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\004\000A\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\004\000A\000\130\000\000\001 \000\008\136&\194%\128\000\n\000\128\000\000&@\002x7\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\004\000A\000\130\000\000\001 \000\008\136&\194%\128\000\n\000\128\000\000&@\002x7\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\004\000A\000\130\000\000\001 \000\008\136&\194%\128\000\n\000\128\000\000&@\002x7\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\004\000A\000\130\000\000\001 \000\008\136&\194%\128\000\n\000\128\000\000&@\002x7\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\004\000A\000\130\000\000\001 \000\008\136&\194%\128\000\n\000\128\000\000&@\002xn\000\128\000\000&@\002x7\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\004\000A\000\130\000\000\001 \000\008\136&\194%\128\000\n\000\128\000\000&@\002x7\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\004\000A\000\130\000\000\001 \000\008\136&\194%\128\000\n\000\128\000\000&@\002xh\000 \001\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000T\008\000\000\001\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0012\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000T\008\000\000\001\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0012\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0012\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000 \000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\132\128\140\002\000\128!\000\000\000\002d1z\213x\000 \001\000\000\016@@\000\000\000\000 \000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000z\213x\000 \001\000\000\016@@\000\000\000\000 \000\000\000\000\004\000z\213xz\213x\000 \001\000\000\016\000F\000\000\000\000\000\000\004\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002 \000z\213xz\213x\000 \001\000\000\016\000F\000\000\000\000\000\000\004\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002 \000z\213xz\213xh\000 \001\000\000\000\000@\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\008\000\000\000 \000\000\000\000\000\000z\213x\000 \001\000\000\016@@\000\000\000\000 \000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\136\000\008\132\128\140\002\000\128!\000\000\000\002d1z\213x\000 \001\000\000\016@@\000\000\000\000 \000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002dz\213xz\213xz\213xz\213x\000\"\145\000$\026\005A\157\160\000! \016\004\000A\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000z\213xd1z\213x\000 \001\000\000\016@@\000\000\000\000 \000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\001\"\134\000\000\000\136\000\008\004\128\140\002\000\128!\000\000\000\002d1\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\128\000\000\000\000\000\000\001z\213x\000 \001\000\000\016\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000z\213xq\221\225\000g\1680\000\141Q\002\130z\213x\000 \001\000\000\016\000@\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000T\008\000\000\001\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000T\008\000\000\001\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000 \000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000z\213x\000 \001\000\000\016\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\140@\000\004\128\008v\130@\000\140\000\000z\213x\000 \001\000\000\016@@\000\000\000\000 \000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\008\000\128P!\"\008\001\012@\000\004\128\008vz\213x\000 \001\000\000\016@@\000\000\000\000 \000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\140@\000\004\128\008v\130@\000\140\000\000z\213x\000 \001\000\000\016@@\000\000\000\000 \000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000:\213h\000 \001\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000T\008\000\000\001\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000T\008\000\000\001\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000 \000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\140@\000\004\128\008v\130@\000\140\000\000z\213x\000 \001\000\000\016@@\000\000\000\000 \000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\008\000\000\000 \000\000\000\000\000\000z\213x\000 \001\000\000\016@@\000\000\000\000 \000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\008\000\128P!\"\008\001\012@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\140@\000\004\128\008v\130@\000\140\000\000z\213x\000 \001\000\000\016@@\000\000\000\000 \000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\008\000\128P!\"\008\001\012@\000\004\128\008vgz\213x\000 \001\000\000\016\000@\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\000\000\000\016\000\002\000\000\000\000\000\000\002\144\000$\026\133\001\189\160\000! \016\004\000A\000\130\000\000\000\000\002\144\000 \025\133\001\157\160\000a \016\021\000A\004\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\004\000A\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000z\213xa \016\000\000A\000\130\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\004\000A\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130z\213x\000\"\145\000$\026\005A\157\160\000! \016\004\000A\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\008\016 \201%\000\000\008\000\001\000\000!@B\000\006\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000z\213xa \016\021\000A\004\130\000\000\001 \000\008\152&\203%\128\000\n\000\129\000\0007@BPw\000\000\000\002\002\144\000 \025\133\001\157\160\000aa \016\017\000A\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\002\144\000 \025\133\001\157\160\000aa \016\000\000A\000\130\000\000\001\000\000\008\000 \192%\000\000\008\000\000\000\000 @\002\000\006\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\001\000\000\008\000 \192%\000\000\008\000\000\000\000 @\002\000\006\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\001\000\000\008\000 \192%\000\000\008\000\000\000\000 @\002\000\006\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\001\000\000\008\000 \192%\000\000\008\000\000\000\000 @\002\000\006\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\001\000\000\008\000 \192%\000\000\008\000\000\000\000 @\002\000\006\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\001\000\000\008\000 \192%\000\000\008\000\000\000\000 @\002\000\006\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\001\000\000\008\000 \192%\000\000\008\000\000\000\000 @\002\000\006\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\001\000\000\008\000 \192%\000\000\008\000\000\000\000 @\002\000\006\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\001\000\000\008\000 \192%\000\000\008\000\000\000\000 @\002\000\006\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\001\000\000\008\000 \192%\000\000\008\000\000\000\000 @\002\000\006\000\000\000\000\002\144\000 \024\005\001\157\160\000aa \016\021\000A\004\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\144\000 \025\133\001\157\160\000a \016\021\000A\004\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\002\144\000 \025\133\001\157\160\000a \016\021\000A\004\130\000\000\000\000\002\144\000 \025\133\001\157\160\000a \016\017\000A\004\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\002\144\000 \025\133\001\157\160\000az\213xt\000\000\000\000\000\000\000\000\016\000\002\000\000\000\000\000\000\000\000\008\000\t\000\000\000\000\000\000\000\000\016\000\002\000\000\000\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000z\213x\000 \001\000\000\016\000F\000\000\000\000\000\000\004\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\000\000\000\016\000\002\000\000\000\000\000\000\002\144\000$\026\133\001\189\160\000! \016\004\000A\000\130\000\000\000\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000:\213hq\221\225\000g\1680\004\143Q\134\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130z\213x\000\"\145\000$\026\005A\157\160\000! \016\004\000A\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\002\144\000 \024\005\001\157\160\000aa \016\000\000A\000\130\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\004\000A\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \000\008\152&\203%\128\000\n\000\129\000\0005@@Pw\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000z\213xn\000\128\000\0004@\000Pwn\000\128\000\000$@\000P7\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\001 \000\008\136&\194%\128\000\n\000\128\000\000$@\000P7\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\001 \000\008\136&\194%\128\000\n\000\128\000\000$@\000P7\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\001 \000\008\136&\194%\128\000\n\000\128\000\000$@\000P7\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\001 \000\008\136&\194%\128\000\n\000\128\000\000$@\000P7\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\001 \000\008\136&\194%\128\000\n\000\128\000\000$@\000P7\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\001 \000\008\136&\194%\128\000\n\000\128\000\000$@\000P7\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\001 \000\008\136&\194%\128\000\n\000\128\000\000$@\000P7\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\001 \000\008\136&\194%\128\000\n\000\128\000\000$@\000P7\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\006\000A\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\001 \000\008\136&\194%\128\000\n\000\128\000\000$@\000P7\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\001 \000\008\136&\194%\128\000\n\000\128\000\000$@\000P7\000\000\000\000\002\144\000 \024\005\001\157\160\000a \016\000\000A\000\130\000\000\001 \000\008\136&\194%\128\000\n\000\128\000\000$@\000P7z\213xq\221\225\000gq\221\225\000g\1680\000\141Q\002\130\127\245\252\016#\145@$\026\133\241\221\225\000g\1680\004\141QB\130\127\245\252\030#\145@ \024\197q\221\225\000g\1680\000\141Q\002\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\247\254\030#\145@ \024\197\241\221\227\000g\1690\000\143Q\198\179\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\245\252\016#\145@ \024\197q\221\225\000g\1680\000\141Q\002\130\127\245\252\016#\145@$\026\133\241\221\225\000g\1680\004\141QB\130\127\245\252\016#\145@$\026\133q\221\225\000gg\1680\000\140Q\002\130\000\000\000\016\003\144@ \024\133\017\221\161\000gg\1680\000\140Q\002\130\000\000\000\016\003\144@ \024\133\017\221\161\000gz\213x\000\"\145\000$\026\005A\159\160\000! \016\004\000A \130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\016\003\144@ \024\133\017\221\161\000g\1680\000\140Q\002\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\245\252\016#\145@$\026\133q\221\225\000g\1680\004\141Q\002\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\247\254\030#\145@ \024\197\241\221\227\000g\1690\000\143Q\198\179\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\245\252\016#\145@ \024\197q\221\227\000g\1680\000\141Q\002\130\000\000\000\000\000\000\000\004\002\000\000\000\002\000\000\000\000\004\000\000\0001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\245\252\016#\145@ \024\197q\221\227\000g\1680\000\141Q\002\179\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \000\008\152&\203%\128\008\n\000\129 \0007@@Pw\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\004\002\000\000\000\002\000\000\000\000\004\000\000\0001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\245\252\016#\145@$\026\133q\221\227\000g\1680\004\141Q\002\179\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\245\252\016#\145@ \024\197q\221\227\000g\1680\000\141Q\002\179\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000z\213xz\213xz\213xhq\221\227\000g\1680\004\141Q\002\179\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\004\002\000\000\000\002\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\245\252\016#\145@$\026\133q\221\227\000ggg\1680\000\140Q\002\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\245\252\016#\145@ \024\197\241\221\225\000g\1680\000\143Q\198\130\000\000\000\000\000\000\000\004\002\000\000\000\000\000\000\000\000\004\000\000\000\000\127\245\252\016#\145@ \024\197\241\221\225\000g\1680\000\143Q\198\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\004\002\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\245\252\016#\145@$\026\133\241\221\225\000g\1680\004\143Q\198\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\245\252\016#\145@$\026\133\241\221\225\000gg\1680\000\141QB\130\000\000\000\000\000\000\000\004\002\000\128\000\000\000\000\000\000\004\000\000@\000\127\245\252\016#\145@ \024\197\241\221\225\000ggq\221\225\000g\1680\000\141Q\002\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136\006\002\000\000\000\000\000\128\000\000\004\000\000\016\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\245\252\016#\145\192&\026\133q\221\225\000\231\1680\004\141Q\018\131\127\245\252\016#\145@ \024\197q\221\225\000g\1680\000\141Q\002\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\245\252\016#\145\192&\026\133qgq\221\227\000g\1680\004\141Q\002\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000{\245\252\000\"\145@ \024\005A\157\224\000a \016\000\001Q\002\130\000\000\000\000\002\144\008$\026\005\001\157\160\000! \016\004\000A\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000{\245\252\000\"\145@ \024\005A\157\224\000a \016\000\001Q\002\130\000\000\000\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000z\213xz\213x\000 \001\000\000\016\000F\000\000\000\000\000\000\004\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\144\000$\026\133\001\189\160\000! \016\004\000A\000\130\000\000\000\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\144\000$\026\133\001\189\160\000! \016\004\000A\000\130\000\000\000\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000:\213h{\245\252\000\"\145@ \024\005A\157\224\000az\213xz\213xhq\221\225\000g\1680\000\141Q\002\130\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\004\000A\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\127\245\252\016#\145@$\026\133q\221\225\000gq\221\225\000g\1680\000\141Q\002\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\245\252\016#\145@ \024\197q\221\225\000g\1680\000\141Q\002\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\128\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\000\000A\000\130\000\000\000\000\000\000\128\000\000\000\000\000\000\000\128\000\000\000\000\000\000\001\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\000\000A\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\144\000$\026\005\001\157\160\000! \016\000\000A\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\128\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\003\144@ \024\133\017\221\161\000g\1680\000\140Q\002\130\000\000\000\000\000\000\128\000\000\000\000\000\000\000\128\000\000\000\000\000\000\001\000\000\000\016\003\144@ \024\133\017\221\161\000g\1680\000\140Q\002\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\003\144@ \024\133\017\221\161\000gz\213x@p!\"H\016\128@\000\004\128\008R\130@\000\140\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\008\000\128P!\"\008\000\008\000\000\004\128\008vvvz\213x\000p!\"\008\016\128@\000\004\128\008R\002@\000\140\000\000z\213x\000p!\000\008\016\128@\000\004\128\008R\002@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!#\008\000\008\000\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\000\008\000\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\002\000\000\000\008\000\128P!\"\008\000\008\000\000\004\128\008vz\213x\000p! \008\016\128@\000\004\128\008R\002@\000\132\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000z\213x\000p!\000\008\016\128@\000\004\128\008R\002@\000\132\000\000\000\008\000\128P!\"\008\000\008\000\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\002\000\000\000\008\000\128P!\"\008\000\008\000\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\000\008\000\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\000\008\000\000\004\128\008v\130@\000\140\000\000\000\008\000\128P!\"\008\000\008\000\000\020\128\008v\130@\000\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\000\008\000\000\004\128\008v\130@\000\140\000\000\000\008\000\128P!\"\008\001\008\000\000\020\128\008v\130@\000\142\000\000\000\008\000\128P!\"\008\000\008\000\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\008\000\128P!\"\008\000\008\000\000\004\128\008vz\213x\000 \001\000\000\016\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\004\000z\213x\000 \001\000\000\016\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\008\000\128P!\"\008\001\012\000\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\000\000\000\000\000\000\008\000\128P!\"\008\000\008\000\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\002\000\000\000\008\000\128P!\"\008\000\008\000\000\004\128\008vv\130@\000\140\000\000\000\008\000\128\\!\"\008\000(\000\000\020\128\008v\130@\000\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\000\008\000\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\129P!\"\008\000\008\000\000\004\128\008vvv\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\000\012\000\000\004\128\008v\130@\000\140\000\000\000\008\000\128P!\"\008\001(\000\000\020\128\008v\130@\000\142\000\000\000\008\000\128P!\"\008\000\008\000\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\008\000\128P!\"\008\000\008\000\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\000\012\000\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\002\000\000\000\008\000\128P!\"\008\000\008\000\000\004\128\008vv\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\002\000\000\000\008\000\128P!\"\008\000\008\000\000\004\128\008vv\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\000\008\000\000\004\128\008v\130@\000\140\000\000\000\008\000\128\\!\"\008\000(\000\000\020\128\008v\130@\000\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000z\221x\128p!\"\008\016\136@\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\008\000\128P \"\008\000\008\000\000\004\128\008v\130@\000\140\000\000\000\008\000\128\\!\"\008\000,\000\000\020\128\008v\130@\000\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\000\008\000\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000z\221x\128p!\"\008\016\140@\000\004\128\008v\130@\000\140\000\000\000\008\000\128P!\"\008\000\008\000\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\000\008\000\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\128P!\"\008\001\008\000\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\000\008\000\128P!\"\008\000\008\000\000\004\128\008v\130@\000\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000z\213x@pq\221\225\000g\1690\004\141Q\002\179\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\247\254\016#\145@$\030\133q\221\225\000g\1690\004\141Q\002\179{\247\254\000 \001\000\000\016\000@\000\000\000\000\001\000\000\000\000\000\000{\247\254\000 \001\000\000\016\000@\000\000\000\000\001\000\000\000\000\000\000{q\221\225\000g\1680\000\141Q\002\130\127\245\252\016#\145@ \024\197q\221\225\000g\1680\000\141Q\002\130\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\245\252\016#\145@ \024\197q\221\225\000g\1680\000\141Q\002\179\000\000\000\000\000\000\000\004\002\000\000\000\000\000\000\000\000\004\000\000\0001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\004\002\000\000\000\000\000\000\000\000\004\000\000\0001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\245\252\016#\145@$\026\133q\221\225\000g\1680\004\141Q\002\179\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\144\000 \025\133\001\157\160\000a \016\021\000A\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\245\252\030#\145@ \024\197q\221\225\000g\1680\000\141Q\002\130\127\245\252\016#\145@ \024\197q\221\225\000g\1680\000\141Q\002\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\127\245\252\016#\145@ \024\197q\221\225\000g\1680\000\141Q\002\179\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\245\252\030#\145@ \024\197q\221\225\000g\1680\000\141Q\002\130\127\245\252\016#\145@ \024\197q\221\225\000g\1680\000\141Q\002\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000{z\213x\000 \001\000\000\016\000F\000\000\000\000\000\000\004\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002 \000z\213xz\213x\000 \001\000\000\016\000F\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\127\245\252\016#\145@$\026\133q\221\225\000g\1680\004\141Q\006\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\004\002\000\000\000\000\000\000\000\000\004\000\000\0001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\245\252\016#\145@$\026\133q\221\225\000gq\221\225\000g\1690\004\141Q\002\179\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\247\254\016#\145@$\030\133q\221\225\000g\1690\004\141Q\002\179\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\247\254\016#\145@ \024\197q\221\225\000g\1690\000\141Q\002\179\000\000\000\000\000\000\000\004\002\000\000\000\000\000\000\000\000\004\000\000\0001\127\247\254\016#\145@ \024\197q\221\225\000g\1690\000\141Q\002\179\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\247\254\016#\145@$\026\133q\221\225\000g\1690\004\141Q\002\179\127\247\254\016#\145@ \024\197q\221\225\000g\1690\000\141Q\002\179\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\004\002\000\000\000\000\000\000\000\000\004\000\000\0001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\247\254\016#\145@$\026\133q\221\225\000g\1690\004\141Q\002\179\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\247\254\016#\145@$\026\133q\221\225\000g\1690\004\141Q\002\179\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\247\254\016#\145@$\026\133q\221\225\000g\1690\004\141Q\002\179\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\134\000\000\000\008\000\008\000\000\140\000\000\000!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\247\254\016#\145@$\026\133q\221\225\000g\1690\004\141Q\002\179\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\004\002\000\000\000\000\000\000\000\000\004\000\000\0001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\247\254\016#\145@$\026\133q\221\225\000g
  
  let action =
c\000\000\000\000\018\174\000\000\018\174\000\000\000\000\018\174\000\000\018\174\000\000\000\188\000\232\018\174\000\000.\160;^?\140\000\000G\142\001d.\160\000F?\140\000\000\001\014\018\174\000\000G\212\000\000\000c\004\024.\128\000\000\000\00094\000\000<r\000\000<\232.\128.\128\020\012\020\012<r\020\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0009\170.\128\000\000\000\0009\170\000\0009\170\000\000.\128\000\000\000\000\000\000\023z\000c\000\000\020\012\000\000/|.\128\0286.\128\000\000\000\000\000\000\000\000\000\000\000\000\031\n.\128 \002.\128 p.\128!h.\128\000\000.\128\000\000.\128!\214.\128\"\206.\128#<.\128$4.\128$\162.\128\001B.\128\000\000\000\000\000\000\000\000\000\000.\128%\154.\128&\008.\128'\000.\128\000\000\000\000.\128\000\000\000\000\001\226\000\000\000\000\000\000\000\000\018\012\018\174\000\000\003\182\018\174\000\000=h\018\174\000\000\000\000\018\174\000\000\018\174\000\000\002d\002\166\018\174\000\000\018\174\000\000\005\166\018\174\000\000=\168\018\174\000\000\000\000\018\174\000\000\018\174\000\000\002\142\002\188\018\174\000\000\018\174\000\000\018\174\000\000=\202\018\174\000\000\000\000\018\174\000\000\018\174\000\000\000c\018\174\000\000\018\174\000\000\018\174\000\000\018\174\000\000\002\152\002\250\018\174\000\000;\158?\140\002\184\018\174\000\000H\254H\000\000\000\001\164\003\208\000c\003F\004\012HF\000\000\000\000\000bI*\000\000\000\000\000\000\000\000\005V\0042\001\164\004bHF\000\134HF\000\000\000\000\003\186\000\000\003\242\004\196HF\004J\000\000\000\000\000\000\000b\000\000\004f\005L\000\000\005N\000\000\018\012\001\164?\140\004\146\018\174\000\000;\172?\140\005\030\018\174\000\000\000\000\000c\006\004\000\000\000\000\000\000\000\156\020\012\000\000.\128\005*\000\000\000\000\000c\000\000\000\000\000\000\000\000\000\000\005J\000\000\000\000\005n\000\000\005v<r\000\000\000\000\000\000\000\000\000\000\000\000>\144.\128\000\000>\144\000\000>\144<r\000\000\000\0000(\000c\000\000\020\012\005\168\000\000.\128\005\192\000\000\000\000\000c\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000&\146.\128\000\000.\128\000\000\000\000\005\198\000\000\000\021: \006\128.\128\006h\000\000\000\000<r\000\021\000\000\000\000\000\000\000\000\000\000I\182<rJ\018<rJB<rJ\182<r\000\000<r\000\000<rK\018<rK\132<rK\246<rLR<rL\196.\128\006\028<r\000\000<rM6<rM\146<rN\004\005\248\000\000\005\252\000\000\000o.\128\000\000\000o\000\000\000\000\002z.\160\000\000\002z\000\000\000\000\005\252.\128\000\000\006\002\000\000\020\012\006\002\000\000\000\000\006\206\000\000\020\012\006\008\000\000\000\000\006\n\000\000\000\000\004\024\000\000\006\236\000\000=h?\140\006\020\018\174\000\000\000\000\006\154\000\000\006 \018\174\000\000\000\000\000\t.\160\000\000.\160\000\000\006\"\000\000\000\t\000\000\016f\031\n\018\158\000\000\006p\018\158\000\000\018\158\018\158\000\000\000\000\018\158\000\000\018\158\000\000\006j\006\156\018\158\000\000\018\158\000\000\007\004\018\158\000\000\018\174\018\158\000\000\000\000\018\158\000\000\018\158\000\000\006~\006\170\018\158\000\000\018\158\000\000\018\158\000\000\018\178\018\158\000\000\000\000\018\158\000\000\018\158\000\000\000c\018\158\000\000\018\158\000\000\018\158\000\000\018\158\000\000\006\138\006\182\018\158\000\000.\160\006j\000\000\018\158?\140\006d\018\158\000\000\000\000\000m\000\000\003\024\000m\000\000\000\000\000\000\007H\000\000\001\194?\140\006h\018\158\000\000\018\174?\140\006r\018\158\000\000\000\000\024\024\018\158\000\000\007V\018\158\000\000\018\188\018\158\000\000\000\000\018\158\000\000\018\158\000\000\006\168\006\218\018\158\000\000\018\158\000\000\007\206\018\158\000\0000\200\018\158\000\000\000\000\018\158\000\000\018\158\000\000\006\178\006\224\018\158\000\000\018\158\000\000\018\158\000\0000\220\018\158\000\000\000\000\018\158\000\000\018\158\000\000\000c\018\158\000\000\018\158\000\000\018\158\000\000\018\158\000\000\006\184\006\232\018\158\000\000\018\178?\140\006\156\018\158\000\000\000\000\002\152?\140\006\168\018\158\000\0000\200?\140\006\176\018\158\000\000\000\000\000\000\000\000\000\000\000\000\007\128.\128\006\200\021\160\007\134.\128\006\204\007\136.\160\000\000\000\000.\160\000c\000\000\000\007.\128(\028\000\000?|.\128\006\216\000\000\020\012\006\216\000\000\006\222\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000?\242.\128\000\000?\242\000\000?\242@h\020\012\006\234@h\000\000\000\000NH\000c\000\000\020\012\007\026\000\000.\128\007\024\000\000\000\000\000c\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000.\128\000,.\128\007\026\000\000\000\000(\208\025\216'L\007\208.\128\000\000\007\154\000\000\000\000\000c\000\000\000\000\024\216\007T(\028\000\000\007P(\028\000\000\0018\000\000\000\000\n\014@h\012\202@h\014(@h\015\134@h\000\000@h\000\000@h\0264@h\028\160@hD\246@hF\028@hJ\134@hKR@hL\146@hN\160\000\000\007*\000\000\007<)\132\000\000*8\007@*8,\028\007H*8\000\000\000\000\000\000\000\000\000\000\007@\000\000\008$\000\000\000c\000\000\000\007\0080\000\000\000s\008\000\000c\007X\008\026HF\007`\000\003\000\000.\128\008B\000\000\006\180\006\200\008(HF\007x\008X\000\000\002\208.\128\008\\\000\000\008^\000\000\018\012\000c\003Z.\128\008`\000\000\008f\000\000\000c\003p.\128\008j\000\000\008t\000\000\000\177\007\194\006\212\000\000@\222AT\020\012\007\162\000\000\007\170AT\000\000\000\000\000\000\000\000\000\000\000\000A\202.\128\000\000A\202\000\000A\202AT\000\000\000\000\026\216\000c\000\000\020\012\007\180\000\000.\128\007\178\000\000\000\000\000c\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000,\196.\128\000\000.\128\000\000\007\192\000\000\000o\000\000\000\000\000\000\000\000\000\0001\176AT2\012AT2\168AT3\004AT\000\000AT\000\000AT3\160AT3\252AT4\152AT4\244AT5\144.\128\007\232AT\000\000AT5\236AT6\136AT6\228\020\012\007\196\000\000\000\000.\128\000\000\008\162\000\000\001\\\008x.\128\008B\000\000\008|.\128\008N\000\000\000\174\000\000\006\212\006\212\001\\\000\000\001\\\000\000\016f\006\212\006\212\000\000\000\000\000\000\000\000\000\000\000\000\008\156.\128\007\234\021\160\022\140\000c\008\200\000\000\008\1707\170\008\2187\170\008\220.\128\008\002\021\160\021\160\003\168\001P\002z\000\000\000\000\000\000\001P\000\000\002J\003\148\000\000\000\000\008\004\000\000\000\000\000\000\008\226\000\000\008\230\000\000\000\000\t\026\008\204.\128\008\026\008\250\000\000\008\222\020\012\008&\021\160\000\000\000\000\008P\000\000\000\015\000\000\005v\000\000\001\\\000\000\008\162\000\000\012L\000M\000\000\012L\000\000\000\000\024\216\000\000\002\170\000\000\000\000\t\144\000\000\012L\000\000\008\234\020\012\0080\t\014\000\000\000%\000\000\008\224\000c\0088\008\248HF\008@\002(\000\000.\128\t\030\000\000\t\002HF\008H\t@\000\000\003x.\128\tT\000\000\tV\000\000\018\012\000c\004\246.\128\tX\000\000\tZ\000\000\000\000\000\000\t\144\000\000\000\000\001(\000\000\006\212\000\000\000%\000\000\000\000\002\144\022\140\000\000\002\144\000\000\000\000\008\130\000\000\0012\000\003\021\160\000\000\004\024\000M\004\024\000\000\000\015\000\000\006\212\000\000\006\212\000\000\000\000\000\000\008~\000\000\000\000\008\136\000\000\002\168\005v\002\194\004\024\000\000\000\000\000\000\002\194\000\000\006\212\000\000\002\168\000\000\000\000\007\230\000\015\016f\000\000\000\015\000\000\0082\016f\000\000\000\000\0082\000\000\000\000\008\136\000\000\000\000\008\142\000\000\003V\006\212\000\000\003V\000\000\000\000\t\006\000\000\001(\000\000\006\212\000\000\000\000\000\000\017\1848 \000\000\tn\000\000\017\184\tp\000\000\tr\000\000.\160\000c\004\\\000\000.\128\tz\000\000\001\028\tN\000c\008\166\tdHF\008\172\004\186\000\000.\128\t\142\000\000\004\204\000\000.\128\t\144\000\000\018\012\000c\005@\000\000.\128\t\146\000\000\003\222\017\184\000\000\024\216\005r\000\000.\128\t\152\000\000\000\000\000\000\003\250\000\000\tz\020\012\008\194\t\160\000\000\0072\000\000\tr\000c\008\202\t\136HF\008\206\005\134\000\000.\128\t\172\000\000\005\144\000\000.\128\t\178\000\000\018\012\000c\005\186\000\000.\128\t\182\000\000\003\222\000\000\000\000\008\224\000\000\003\250\tD\tX\000\000\000\000\000\000\tZ\000\000\002\154\000\174\000\000\016f\t\172\000\000\000\000.\128\t\016\006\212\000\000\008\230\000\000\000\177\000\000.\160\000\000\000\000\001\194\016f\000\000\016f\000\000\008\220\000\000\001\194\000\000<r\003\146<r\000\000<r\000\000\008\230\000\000\003\146\000\000\021\160\005\000\021\160\000\000\021\160\000\000\008\238\000\000\005\000\000\000<r\003\146\008\248\000\000.\160\005^.\160\000\000.\160\000\000\008\250\000\000\005^\000\000<r\003\146\008\252\000\000\000\000\024\216\000\000\000\000\tn/B\000\000\000\000\000\000\000\000\000\000\tD\004\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\200/B\000\000\001h\002\162\000\000\tF\000\201\000\000\000\000\000\000\000\139\002\162\000\000\000\000\000\000\000\000\t\162\000\000\000\000\000\000\000\000\0286\029\148\000\000B\134\000\000/B\000\000\003\132/B\000\000\003\188\003:\003:\000\000\004\214\003:\000\000\t \000\000\000\000\000\000\000\000\t\166\000\000\030\012\000\000\031\n/B\000\000\005X/B\000\000\t\168\000\000/B\t\170\000\000D\1468\164\t\176\000\000\t\178\000\000D\220:\164/B\tB/B\t\198\000\000\t\204\000\000\t\210\000\000.\160\000\000\0054.\160\000\000\tP\018\158\000\000\000\141/B\000\000\005\136/B\000\000\003\178\nL\000\000\nN\000\000\005\\\000\201\tV\000\000\000\000\000\000\000\000\000\000\000\000\t\222\000\000E\152/B\t\224\000\000\t\232\000\000/B\t\236\000\000/B\t\150\000\201\000\000\000\000\005\198/B\000\000\003\178\000\000\t\240\000\000/B\t\246\000\000B\2088\164/B\tx/B\t\254\000\000\n\002\000\000C\140\000\000\000\000\006@/B\000\000\005\016\002\016\002\016\000\000\000\000\000\000\005f\002\016\000\000\t\128\000\000\000\000\000\000\000\000/B\000\000\006h/B\000\000\004\170\005\182\000\201\t\130\000\000\000\000\000\000\000\000\000\000\000\000\n\n\000\000\n\012\000\000/B\n\014\000\000E\226/B\n\018\000\000\n\020\000\000\021\018\t\192FT-d\000\000/B\n\028\000\000\n\"\000\000\t\244\021\018/B\n@\000\000/B\nV\000\000\nX\000\000C\214\t\216/B\n`\000\000\nb\000\000\000\201\t\212\000\000\000\000\024\216\000\000\000\000\002^\n\188\000\000\000\000\000b\000\000\000\000\000\000.\128\000\000\000\000\000\000\002\186\000\000\001\152\000\000\000\000\000\000\004\024?\140?\140?\140\000\000\003v\003v\003v\003v\000\000\000\000\000\000\000\000\000\000\000\000\001\\\016f\n\178\013\170\000M\000\000\000\000\001\"\000\000\t\144\000\000(\028\t\234\000\000\001\\\016f\t\240\015\008\000\000\001\\\013\170\000\000\000\000\000\000?\140\011\220\000\000\000\000\000\000\n:\000\129\n\184H\254\000\000\002\138I\214\000\000\000\000\000\000\007\194\n\168\000c\000\000\002\138\000\000\005rH\254\000\000\000\000\n\002\n\184\006\212\n\004\000\000\001\"\000\000\t\144\000\000\020\148\002\024\000\000\000\000\n\170\000\000\000\000\002^\000\000\004\254\000\000\000\000\000\000.\128\000\000\002\186\000\000\005\"\000\000\000\000\000\000\005v\000\000\n\238\005j\n\238\000\000\006\212\n\238\000\000\005j\000\000\006\212\000\000\006\212\000\000\006\212\000\000\020\148\000\000\000\000\000\000\000\000\000\000\006\212\000\000\005j\000\000\006\212\000\000\023\012\000\000\000\000\0082\n8\000\201\004\020\n\210\002\164\000\000\002\164\n\250\000\000\n\252\000\000\n\254\000\000\000\000\003\214\002\164\004\230\002\164\000\000\000\000\003\210\n\008\000\000\nD\000\201\n\014\000\000\004\164\011\008\000\000\006\002\000\228\011\028\000I\011\028\000\000\000\000\007\166\000\201\000\000\000)\000\000\000\000\000g\000\000\n\024\000\000\000\000\000\000\nT\000\201\n\028\000\000\000\000\004\164\006\002\000\228\007\166\000)\000g\n\"\000\000\006\002\000\228\007\166\000)\000g\n$\000\000\000\201\000\000\011$\001\230\nd\000\201\n\190\000\000\nh\000\201\n\196\000\000"), (16, "\011\229\011\229\011\229\011\229\011\229\011\229\011\229\011\229\011\229\011\229\011\229\012\182\011\229\011\229\011\229\011\229\011\229\011\229\011\229\011\229\011\229\011\229\000\n\014\218\001\230\006\222\011\229\008\210\001\238\001\242\011\201\001\230\015\014\011\229\016\134\012\226\001\242\011\229\011\229\011\229\000&\007\189\011\229\001\"\007\150\016\022\011\229\011\229\011\229\011i\016\138\012\210\006u\008u\014\218\007\189\022\190\011\229\000\n\000*\011\229\011\229\013V\015\014\012\137\000\n\011\229\011\229\000\n\011\229\001\230\011\229\019\254\000\n\012\226\001\242\011\229\005\229\011\229\011\229\011\229\011\229\011\229\027\210\017*\021\154\011\229\011\229\011\229\011\201\011\229\011\229\011\229\011Q\011\229\011\229\011\229\011\229\011Q\011Q\000\150\011\229\011\229\016\"\000\n\007\189\006M\001~\007\158\027\198\011Q\011\229\011\229\011\229\004u\027\202\011\229\011\229\011\229\011\229\005y\011\229\027\170\011\229\0007\000;\011\229\001\"\015\002\011\229\011\229\006\026\012\137\012\137\016\"\011Q\n\158\012\137\012\214\017Z\011\229\011\129\011\129\011\229\000\006\000\"\027\162\011\229\011\229\011\229\011\229\004u\011\229\006u\011\229\012\158\007\189\000\n\011\229\011\229\011\229\015\006\011\229\011v\011\229\011\229\000\154\011\229\007\189\011\229\011\229\006\029\000\226\011\229\011\229\006}\006}\006}\006}\006}\006}\006}\006}\006}\006}\006}\011\130\006}\006}\006}\006}\006}\006}\006}\006}\006}\006}\016\022\000\230\011\169\016\022\006}\014\222\014\238\014\254\016\022\014\218\004^\006}\014\218\018\166\005\245\006}\006}\006}\015\014\018V\006}\015\014\024\243\024\247\006}\018Z\006}\024\251\004\138\018^\011n\011\129\003i\001\230\000.\006}\006\222\012\226\001\242\005\030\001R\001V\011\129\004e\006}\006}\006\133\011\129\011\129\006}\006}\006\133\006\133\012\137\006}\001v\006}\006}\006}\006}\006}\021n\019\210\006\133\006}\006}\006}\000\n\006}\006}\006}\000\022\006}\006}\006}\006}\020.\028F\011\129\006}\006}\004>\n\221\011\129\011\129\004\222\006\021\006\021\006\133\016\"\006}\006}\016\"\028V\006}\006}\006}\006}\006\005\006}\008\246\006}\011\170\001\138\006}\001\"\002\206\006}\006}\000N\007\182\020N\020v\020\158\020\174\020\214\026S\006M\012\137\012\137\001\"\006}\021z\012\137\026W\006}\006}\006}\006}\015\142\006}\016\166\006}\006\013\026Z\000\n\006}\006}\006}\023\182\0206\n\221\006}\006}\006\149\006}\006\149\006}\006}\006\149\000\n\006}\006}\006\149\006\149\006\149\006\149\006\149\006\149\006\149\006\149\006\149\006\149\006\149\006\149\006\149\006\149\006\149\006\149\006\149\006\149\006\149\006\149\006\149\006\149\004~\006\149\025\027\025\031\006\149\021~\023\186\025#\006\149\024\226\006\149\006\149\021\130\0276\000\n\006\149\006\149\006\149\006\149\006\149\006\149\016\022\006\149\006\149\006\149\006\246\006\149\006\149\0065\006\149\014\218\003\026\n*\016\022\027:\006\149\0176\001\"\006\149\015\014\011i\027>\014\218\016\170\006\149\006\149\006\149\006\149\017\170\006\149\006\149\015\014\001\"\006\149\006\149\024\226\006\149\021\142\006\149\006\149\006\149\004\213\006\149\011Y\006\149\006\149\006\149\000\n\006\149\006\149\006\149\012\137\006\149\006\149\006\149\006\149\011\193\003f\nR\015\170\006\149\nV\000\n\003\241\006\149\025>\015\146\nZ\021\018\003j\006\149\006\149\n^\025B\006\149\006\149\006\149\006\149\003\170\006\149\003\174\006\149\027F\004\014\006\149\006\149\006E\006\149\006\149\011i\016\"\025\238\003:\021\242\003B\005\237\003R\006m\006\149\019\230\011i\006\149\016\"\003Z\011i\006\149\006\149\013\002\006\149\006U\006\149\004\018\006\149\020V\027N\018*\006\149\022\214\022\222\012\137\012\137\004&\004\213\006\149\012\137\006\149\012\158\006\149\006\149\004\021\003b\006\149\006\149\000R\000V\000f\000\170\007\186\000\174\nR\000\178\000\246\nV\000\254\020\254\001\014\025*\001\022\nZ\001\030\0012\001:\001>\n^\025.\022\230\021\002\011\185\001\"\nb\021\238\027^\008\218\027^\003r\021\006\001F\021\n\001\"\0192\001\166\nr\013^\004B\021\014\013b\013\"\020^\004\161\001N\008\145\014\202\021\026\019\006\005\221\006\173\021\030\013>\000\n\004J\001\178\016\206\021\"\025b\004N\012\158\006]\006\222\000\n\015\"\013j\025\142\025\154\001\162\015&\017f\012\158\015\138\021&\001\218\012\158\001\222\004\177\001b\016\030\015.\021\226\015\138\018\146\013~\001\230\0152\004z\013\130\011\138\001\242\004\021\013\134\013\138\n\134\013\142\004\021\004\021\021*\004\129\0156\021.\004\130\003\237\008\145\006-\022\214\022\222\004\021\006\173\n\226\013\146\004\154\0212\015:\015>\013\150\015B\0216\000\n\021:\015V\021>\021B\004\141\021F\027n\015b\013\158\006e\018\194\021J\004\013\004\021\021N\027f\005\221\027f\025\174\018\214\004\162\015\130\027.\006M\023\254\015\134\015\194\004\177\n\138\021R\013\162\004\166\015\198\021V\021Z\005\221\013\166\004\177\004\177\005\221\011i\020~\004\177\015\206\004\013\013\170\004\017\006\157\006\157\008\137\018\150\002\"\006\157\000R\000V\000f\000\170\007\186\000\174\nR\000\178\000\246\nV\000\254\004\174\001\014\025*\001\022\nZ\001\030\0012\001:\001>\n^\025.\023\178\004\129\018\242\004\198\nb\027\146\004\129\004\129\004\202\004\210\003~\001F\003\134\020\182\003\150\001\166\nr\013^\004\129\004\129\013b\003\158\018\198\016\022\001N\006\165\014\202\019\022\004\230\004v\020\134\018\218\014\218\008\137\004\013\001\178\022\234\019n\014\218\004\013\004\013\015\014\019\130\004\129\015\"\013j\025\142\015\014\003\166\015&\017\174\004\013\016\238\001\"\001\218\021\254\001\222\004\193\001b\016\030\015.\011\137\011y\019\158\013~\001\230\0152\004\013\013\130\011\138\001\242\012\158\013\134\013\138\n\134\013\142\004\013\020\190\027f\004\017\0156\024\002\003\182\000\n\006\165\011\153\000\n\026s\026w\018\246\n\226\013\146\026{\006=\015:\015>\013\150\015B\004\250\000\n\005\014\015V\022\166\005.\004\141\026\147\026\151\015b\013\158\011a\026\155\007\202\016\"\007\210\019\026\007\226\011\161\005R\016\"\0039\022:\015\130\007\234\0039\019r\015\134\015\194\023\202\n\138\019\134\013\162\000\n\015\198\026\026\011q\005^\013\166\003]\004\193\005f\006%\008\173\008\173\015\206\022\202\013\170\008\173\006\181\006\181\007\242\019\162\002\"\006\181\000R\000V\000f\000\170\007\186\000\174\nR\000\178\000\246\nV\000\254\005\186\001\014\025*\001\022\nZ\001\030\0012\001:\001>\n^\025.\023N\004\017\011\177\005\198\nb\006\018\004\017\004\017\008\002\006\"\008\014\001F\008\022\005\013\008&\001\166\nr\013^\004\017\027.\013b\008.\011\145\005\t\001N\006*\014\202\006\170\006\206\004\241\006\214\007\014\005\013\007\026\007&\001\178\0072\007>\014\218\004\237\007J\007^\005\t\004\017\015\n\013j\007n\015\014\0086\015&\007~\t.\007\134\t6\001\218\tF\001\222\004\221\001b\015*\015.\023\166\tN\007\171\013~\001\230\0152\007\246\013\130\011\138\001\242\007\250\013\134\013\138\n\134\013\142\019N\008:\008>\012\145\0156\023\242\008F\008\158\008\162\008\178\008\194\008\238\008\254\tV\n\226\013\146\019R\t\018\015:\015>\013\150\015B\tZ\000\n\005\013\015V\t^\t\158\004\141\t\162\n\002\015b\013\158\n\006\005\t\tr\001\230\tz\n\026\t\138\012\226\001\242\016\"\005\013\n2\015\130\t\146\tf\nF\015\134\015\194\004\221\n\138\005\t\013\162\nf\015\198\nn\nv\n~\013\166\004\221\004\221\n\130\n\182\n\194\004\221\015\206\n\202\013\170\000\n\008\181\008\181\t\154\011\014\002\"\008\181\000R\000V\000f\000\170\007\186\000\174\nR\000\178\000\246\nV\000\254\026\002\001\014\016\134\001\022\nZ\001\030\0012\001:\001>\n^\011.\011:\011~\011\150\011\162\nb\011\190\011\202\016\138\t\170\004\129\012R\001F\012Z\001\"\012j\001\166\nr\013^\012v\006\246\013b\012\146\012\154\027\"\001N\007\197\014\202\001\230\012\174\012\186\012\194\012\226\001\242\012\198\012\206\001\178\006\141\012\222\014\218\007\197\012\238\006\141\006\141\000\n\015\n\013j\012\246\015\014\012\250\015&\013\n\013\018\013*\027\186\001\218\0132\001\222\013F\001b\015*\015.\000\n\013N\013Z\013~\001\230\0152\013r\013\130\011\138\001\242\013z\013\134\013\138\n\134\013\142\013\206\013\218\006\141\0039\0156\014\"\014\154\0039\014\194\014\214\014\226\014\234\014\242\007\197\n\226\013\146\027~\014\250\015:\015>\013\150\015B\015F\000\n\006E\015V\027\142\015N\015^\015f\004\129\015b\013\158\027\230\027\146\004\129\004\129\015n\015v\015~\015\186\015\202\016\"\015\210\015\222\015\130\015\226\004\129\004\129\015\134\015\194\015\234\n\138\015\238\013\162\015\246\015\198\015\254\016\014\016.\013\166\016r\016z\016~\007\197\016\142\016\150\015\206\016\154\013\170\016\162\016\178\004\129\016\186\016\194\002\"\007\197\000R\000V\000f\000\170\007\186\000\174\nR\000\178\000\246\nV\000\254\016\198\001\014\019N\001\022\nZ\001\030\0012\001:\001>\n^\016\214\016\222\016\246\016\254\017N\nb\017\150\017\162\019R\018\022\018\"\018B\001F\018n\018z\018\130\001\166\nr\013^\018\158\006\246\013b\018\170\018\178\018\182\001N\018\190\014\202\001\230\018\206\018\226\018\254\012\226\001\242\019\"\019:\001\178\019B\019F\014\218\019V\019^\019b\019j\019z\015\n\013j\019\142\015\014\019\170\015&\019\190\019\206\019\222\019\246\001\218\020\006\001\222\020\018\001b\015*\015.\000\n\020C\011\226\013~\001\230\0152\020k\013\130\011\138\001\242\020\147\013\134\013\138\n\134\013\142\020\171\020\203\020\227\012\145\0156\020\250\021\022\021\134\011\234\021\179\022\n\022\031\022G\022S\n\226\013\146\022c\022k\015:\015>\013\150\015B\011\242\000\n\006E\015V\022~\022\135\0122\012:\022\143\015b\013\158\022\151\022\178\022\218\022\226\022\242\012\018\023\015\023\031\011\250\016\"\012\n\023'\015\130\0233\023>\023c\015\134\015\194\023o\n\138\023\130\013\162\023\139\015\198\023\147\023\214\024\n\013\166\024'\024/\024;\012\026\024K\024S\015\206\024^\013\170\024s\012\145\012\145\024{\024\130\002\"\012\145\000R\000V\000f\000\170\007\186\000\174\nR\000\178\000\246\nV\000\254\024\143\001\014\025*\001\022\nZ\001\030\0012\001:\001>\n^\025.\024\155\024\163\024\174\012\"\nb\024\183\024\191\024\203\024\230\025n\012\002\001F\025\150\025\166\025\218\001\166\nr\013^\025\226\026\006\013b\026*\026.\005Q\001N\0266\014\202\026_\027&\0272\027B\027J\027R\027{\027\130\001\178\027\139\027\150\012B\012*\027\166\027\219\027\234\027\243\015\"\013j\028\023\0283\028B\015&\026\170\028J\028S\028Z\001\218\028c\001\222\000\000\001b\016\030\015.\000\000\000\000\000\000\013~\001\230\0152\000\000\013\130\011\138\001\242\000\000\013\134\013\138\n\134\013\142\000\000\000\000\000\000\000\000\0156\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\226\013\146\000\000\000\000\015:\015>\013\150\015B\000\000\000\n\000\000\015V\000\000\nR\004\141\000\000\nV\015b\013\158\000\000\025>\000\000\nZ\000\000\000\000\000\000\000\000\n^\025B\000\000\000\000\015\130\000\000\000\000\000\000\015\134\015\194\000\000\n\138\000\000\013\162\000\000\015\198\000\000\000\000\000\000\013\166\000\000\000\000\000\000\000\000\000\000\000\000\015\206\000\000\013\170\000\000\008\153\008\153\000\000\000\000\002\"\008\153\000R\000V\000f\000\170\007\186\000\174\nR\000\178\000\246\nV\000\254\012\182\001\014\000\000\001\022\nZ\001\030\0012\001:\001>\n^\000\000\000\000\000\000\000\000\000\000\nb\000\000\000\000\000\000\000\000\001\230\000\000\001F\000\000\012\226\001\242\001\166\nr\013^\000\000\000\000\013b\000\000\000\000\000\000\001N\000\000\014\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\178\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\015\"\013j\000\000\000\000\004\161\015&\0166\000\000\000\000\000\000\001\218\000\000\001\222\000\000\001b\016\030\015.\000\000\000\000\000\181\013~\001\230\0152\000\000\013\130\011\138\001\242\000\000\013\134\013\138\n\134\013\142\000\000\000\000\000\000\012m\0156\000\000\000\000\000\000\011\234\000\000\000\000\000\000\000\000\000\000\n\226\013\146\000\000\000\000\015:\015>\013\150\015B\011\242\000\n\000\000\015V\000\000\000\000\000\181\000\181\000\000\015b\013\158\000\000\000\000\000\000\000\000\000\000\012\018\000\000\000\000\011\250\000\000\012\n\000\000\015\130\000\000\000\000\000\000\015\134\015\194\000\000\n\138\000\000\013\162\000\000\015\198\000\000\000\000\000\000\013\166\000\000\000\000\000\000\012\026\000\000\000\000\015\206\000\000\013\170\000\000\012m\012m\000\000\000\000\002\"\012m\000R\000V\000f\000\170\007\186\000\174\nR\000\178\000\246\nV\000\254\000\000\001\014\000\000\001\022\nZ\001\030\0012\001:\001>\n^\000\000\000\000\000\000\000\000\012\"\nb\000\000\000\000\000\000\000\000\000\000\012\002\001F\000\000\000\000\000\000\001\166\nr\013^\000\000\000\000\013b\000\000\000\000\000\181\001N\000\000\014\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\178\000\000\000\000\000\181\012*\000\000\000\000\000\000\000\000\015\"\013j\000\000\000\000\000\000\015&\025r\000\000\000\000\000\000\001\218\000\000\001\222\000\000\001b\016\030\015.\000\000\000\000\000\157\013~\001\230\0152\000\000\013\130\011\138\001\242\000\000\013\134\013\138\n\134\013\142\000\000\000\000\000\000\000\000\0156\000\000\000\000\000\000\000\157\000\000\000\000\000\000\000\000\000\000\n\226\013\146\000\000\000\000\015:\015>\013\150\015B\011\242\000\n\000\000\015V\000\000\000\000\000\157\000\157\000\000\015b\013\158\000\000\000\000\000\000\000\000\000\000\000\157\000\000\000\000\011\250\000\000\012\n\000\000\015\130\000\000\000\000\000\000\015\134\015\194\000\000\n\138\000\000\013\162\000\000\015\198\000\000\000\000\000\000\013\166\000\000\000\000\000\000\000\157\000\000\000\000\015\206\000\000\013\170\000\000\012\185\012\185\000\000\000\000\002\"\012\185\000R\000V\000f\000\170\007\186\000\174\nR\000\178\000\246\nV\000\254\000\000\001\014\000\000\001\022\nZ\001\030\0012\001:\001>\n^\000\000\000\000\000\000\000\000\000\157\nb\000\000\000\000\000\000\000\000\000\000\012\002\001F\000\000\000\000\000\000\001\166\nr\013^\000\000\000\000\013b\000\000\000\000\000\157\001N\000\000\014\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\178\000\000\000\000\000\157\000\157\000\000\000\000\000\000\000\000\015\"\013j\000\000\000\000\000\000\015&\025r\000\000\000\000\000\000\001\218\000\000\001\222\000\000\001b\016\030\015.\000\000\000\000\000\149\013~\001\230\0152\000\000\013\130\011\138\001\242\000\000\013\134\013\138\n\134\013\142\000\000\000\000\000\000\000\000\0156\000\000\000\000\000\000\000\149\000\000\000\000\000\000\000\000\000\000\n\226\013\146\000\000\000\000\015:\015>\013\150\015B\000\149\000\n\000\000\015V\000\000\000\000\000\149\000\149\000\000\015b\013\158\000\000\000\000\000\000\000\000\000\000\000\149\000\000\000\000\011\250\000\000\000\149\000\000\015\130\000\000\000\000\000\000\015\134\015\194\000\000\n\138\000\000\013\162\000\000\015\198\000\000\000\000\000\000\013\166\000\000\000\000\000\000\000\149\000\000\000\000\015\206\000\000\013\170\000\000\012\181\012\181\000\000\000\000\002\"\012\181\000R\000V\000f\000\170\007\186\000\174\nR\000\178\000\246\nV\000\254\000\000\001\014\000\000\001\022\nZ\001\030\0012\001:\001>\n^\000\000\000\000\000\000\000\000\000\149\nb\000\000\000\000\000\000\000\000\000\000\012\002\001F\000\000\000\000\000\000\001\166\nr\013^\000\000\000\000\013b\000\000\000\000\000\149\001N\000\000\014\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\178\000\000\000\000\000\149\000\149\000\000\000\000\000\000\000\000\015\"\013j\000\000\000\000\000\000\015&\017\226\000\000\000\000\000\000\001\218\000\000\001\222\000\000\001b\016\030\015.\000\000\000\000\000\000\013~\001\230\0152\000\000\013\130\011\138\001\242\000\000\013\134\013\138\n\134\013\142\000\000\000\000\000\000\000\000\0156\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\226\013\146\000\000\000\000\015:\015>\013\150\015B\000\000\000\n\000\000\015V\000\000\000\000\000\000\000\000\000\000\015b\013\158\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\130\000\000\000\000\000\000\015\134\015\194\000\000\n\138\000\000\013\162\000\000\015\198\000\000\000\000\000\000\013\166\000\000\000\000\000\000\000\000\000\000\000\000\015\206\000\000\013\170\000\000\000R\000V\000f\000\170\002\"\000\174\nR\000\178\000\246\nV\000\254\000\000\001\014\000\000\001\022\nZ\001\030\0012\001:\001>\n^\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001F\000\000\000\000\000\000\001\166\000\000\013^\000\000\000\000\013b\003.\0036\000\170\001N\000\174\018b\003z\003\190\000\000\003\198\000\000\003\214\000\000\003\222\001\178\003\230\003\242\000\000\003\250\000\000\000\000\000\000\000\000\018r\013j\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\002\001\218\000\000\001\222\000\000\001b\000\000\000\000\000\000\000\000\000\000\013~\001\230\004\n\000\000\013\130\001\238\001\242\000\000\013\134\013\138\n\134\013\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\226\013\146\000\000\000\000\000\000\000\000\013\150\000\000\000\000\000\n\004\026\000\000\000\000\007\214\005\213\000\000\000\000\005\213\013\158\000\000\005\213\008\026\005\213\008Z\005\213\000\000\005\213\000\000\t:\005\213\000\000\005\213\005\213\000\000\005\213\005\213\005\213\005\213\n\138\000\000\013\162\005\213\018v\005\213\005\213\005\213\013\166\005\213\000\000\005\213\005\213\000\n\005\213\018~\005\213\013\170\005\213\005\213\005\213\005\213\005\213\002\"\005\213\000\000\005\213\000\000\005\213\005\213\000\000\000\000\005\213\005\213\005\213\005\213\008\186\000\000\000\000\005\213\005\213\000Z\000\000\005\213\t\n\005\213\nfnR\000\000\001\218\nV\001\222\000\000\001b\025>\000\000\nZ\000\000\000\000\001\226\001\230\n^\025B\001\234\001\238\001\242\002F\001\246\001\250\000\000\001\254\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\002\000\000\000\000\000\000\000\000\002\006\016\134\000\000\000\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\014\000R\007\190\007\198\000\170\016\138\000\174\000\000\008\n\008N\002\018\008V\020\254\008f\000\000\008n\000\000\008v\008\130\001:\008\138\000\000\002\022\000\000\021\002\001\230\000\000\000\000\002\026\012\226\001\242\004a\000\000\021\006\008\146\021\n\000\000\002\030\000\000\000\000\000\000\000\000\021\014\002\"\000\000\000\000\000\000\024Z\000\000\000\000\021\026\000\000\000\000\000\000\021\030\000\000\000\000\000\000\000\000\000\n\021\"\000\000\000\000\000\000\004\161\000\000\000\000\008\170\000\000\000\000\000\000\000\000\022\154\000\000\000\000\000\000\021&\023\150\000\000\000\000\000\000\008\182\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nb\000\000\000\000\021*\000\000\000\000\021.\000\000\000\000\007\133\007\133\001\166\nr\013^\007\133\000\000\013b\000\000\0212\000\000\000\000\000\000\014\202\0216\000\n\021:\000\000\021>\021B\000\000\021F\001\178\000\000\000\000\000\000\000\000\021J\000\000\000\000\021N\015R\013j\000\000\000\000\000\000\015&\000\000\000\000\000\000\000\000\001\218\000\000\001\222\000\000\021R\000\000\015.\000\000\021V\021Z\013~\001\230\0152\000\000\013\130\011\138\001\242\000\000\013\134\013\138\000\000\013\142\000\000\000\000\000\000\000\000\0156\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\226\013\146\000\000\000\000\015:\015>\013\150\015B\000\000\000\n\000\000\015V\000\000\000\000\000\000\000\000\000\000\015b\013\158\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\130\nb\000\000\000\000\015\134\015\194\000\000\000\000\000\000\013\162\000\000\015\198\001\166\nr\013^\013\166\000\000\013b\000\000\000\000\000\000\000\000\015\206\014\202\013\170\000\000\000\000\000\000\000\000\000\000\002\"\000\000\001\178\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013f\013j\000\000\000\000\nR\015&\000\000\nV\000\000\000\000\001\218\025>\001\222\nZ\000\000\000\000\015.\000\000\n^\025B\013~\001\230\0152\000\000\013\130\011\138\001\242\000\000\013\134\013\138\000\000\013\142\000\000\000\000\000\000\000\000\0156\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\226\013\146\000\000\016\134\015:\015>\013\150\015B\000\000\000\n\000\000\015V\000\000\000\000\000\000\000\000\000\000\015b\013\158\016\138\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\193\000\000\015\130\013\193\000\000\000\000\015\134\015\194\000\000\000\000\001\230\013\162\000\000\015\198\012\226\001\242\000\000\013\166\000\000\000\000\000\000\013\193\000\000\000\000\015\206\013\193\013\170\000\000\002:\013\193\000\000\000\000\002\"\000\000\000\000\013\193\000\000\000\000\013\193\013\193\000\000\013\193\013\193\000\000\000\n\002B\000\000\013\193\005&\004\161\000\000\013\193\000\000\000\000\013\193\000\000\013\193\013\193\t\"\t*\000\170\000\000\000\174\000\000\tn\t\178\000\000\t\186\000\000\t\202\000\000\t\210\000\000\t\218\t\230\000\000\t\238\013\193\000\000\013\193\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\193\t\246\000\000\008\229\008\229\000\000\000\000\0052\008\229\000\000\000\000\000\000\000\000\000\000\t\254\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\193\013\193\000\000\013\193\013\193\0056\000\000\013\193\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005>\000\000\000\000\000\000\000\000\013\193\000\000\nn\001=\000\000\000\000\001=\000\000\020\246\000\000\000\000\000\000\000\000\000\000\001=\000\000\000\000\001=\004\237\004\237\000\000\004\237\005\tna\na\na\na\000\000\na\000\000\na\na\000\000\na\000\000\na\000\000\na\000\000\na\na\na\na\000\000\000\000\001\137\000\000\000\000\001\137\000\000\000\000\000\000\000\000\000\000\000\000\na\na\na\000\000\000\000\000\000\000\000\000\000\000\000\na\000\000\001\137\000\000\000\000\na\001\137\000\000\021\198\000\000\001\137\000\000\021\206\000\000\000\000\000\000\001\137\000\000\na\001\137\001\137\000\000\001\137\001\137\000\000\na\000\000\000\000\001\137\000\000\na\000\000\001\137\000\000\000\169\001\137\000\000\001\137\001\137\na\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\234\000\000\000\000\001\137\na\001\137\000\000\na\000\000\000\000\000\000\000\000\000\000\000\000\011\242\001\137\000\000\000\000\000\000\na\000\169\000\169\000\000\000\000\na\000\000\na\000\000\000\000\na\000\169\000\000\000\000\011\250\000\000\012\n\000\000\na\000\000\000\000\na\001\137\002V\000\000\001\137\001\137\000\000\000\000\001\137\000\000\000\000\000\000\000\000\000\000\000\000\na\012\026\000\000\000\000\022\"\na\001\137\000\000\000\000\001\137\001\137\001\137\001\137\000\000\000\000\000\000\000\000\002\254\001\137\001\137\000\000\001\137\001\137\001\137\nQ\nQ\nQ\nQ\000\000\nQ\000\000\nQ\nQ\000\000\nQ\000\000\nQ\000\000\nQ\000\169\nQ\nQ\nQ\nQ\000\000\000\000\012\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nQ\nQ\nQ\000\169\000\000\000\000\000\000\000\000\000\000\nQ\000\000\000\000\000\000\000\000\nQ\000\000\000\000\000\000\000\169\000\169\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nQ\nU\nU\nU\nU\000\000\nU\nQ\nU\nU\000\000\nU\nQ\nU\000\000\nU\000\000\nU\nU\nU\nU\nQ\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nU\nU\nU\000\000\000\000\000\000\000\000\000\000\nQ\nU\000\000\nQ\000\000\000\000\nU\000\000\000\000\022&\000\000\000\000\000\000\000\000\000\000\nQ\000\000\000\000\000\000\nU\nQ\000\000\nQ\000\000\000\000\nQ\nU\000\000\000\000\000\000\000\000\nU\000\000\nQ\000\000\000\000\nQ\000\000\000\000\000\000\nU\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nQ\000\000\000\000\000\000\021\202\nQ\000\000\000\000\000\000\nU\000\000\000\000\nU\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nU\000\000\000\000\000\000\000\000\nU\000\000\nU\000\000\000\000\nU\000\000\000R\007\190\007\198\000\170\000\000\000\174\nU\008\n\008N\nU\008V\000\000\008f\000\000\008n\000\000\008v\008\130\001:\008\138\000\000\000\000\002v\000\000\nU\002\198\000\000\000\000\000\000\nU\000\000\000\000\022.\008\146\022J\000\000\000\000\000\000\000\000\000\000\000\000\022V\000\000\002~\000\000\000\000\008\154\002\t\000\000\000\000\000\000\002\t\000\000\000\000\000\000\000\000\000\000\002\134\000\000\022n\002\t\002\t\000\000\002\230\002\238\000\000\008\170\000\000\000\000\002\t\000\000\022\154\000\000\002\166\000\000\000\000\002\142\000\000\002\158\002\t\008\182\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\174\022\186\002\t\000\000\023\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\t\000\000\000\000\000\000\023*\000\000\000\000\000\000\000\000\0236\000\000\008q\000\000\000\000\023f\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023r\000\000\000\000\0242\002\182\000\000\000\000\002\t\002\t\000\000\000\000\002\150\000\000\000}\000\000\000\000\000}\000\000\024>\000\000\000\000\000\000\000\000\024V\002\t\000\000\000\000\002\t\002\t\002\t\002\t\000\000\000\000\000\000\002~\000\000\002\t\002\t\000}\002\246\002\190\002\t\000}\000\000\000\000\000\000\000\000\000\000\002\134\000\000\000\000\000}\000}\000\000\000}\000}\000\000\000\000\000\000\000\000\000}\000\000\000\000\000\000\002\166\000\000\000\000\002\142\000e\002\158\000}\000e\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000e\002\174\000\000\000}\000e\000\000\000\000\000\000\000e\000\000\000\000\000\000\000\000\000}\002\134\000\000\000\000\000e\000e\000\000\000e\000e\000\000\000\000\000\000\000\000\000e\000\000\000\000\000\000\000e\000\000\000\000\002\142\000\000\002\158\000e\000\000\000\000\002\182\000\000\000\000\000}\000}\000\000\000\000\002\150\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000e\000\000\000e\000}\000\000\000\000\000}\000}\000}\000}\000\000\000\000\000e\000\000\000\000\000}\000}\000\000\000}\002\190\000}\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000e\000\000\000\000\000e\000e\000\000\000\000\002\150\000\000\000]\000\000\000\000\000]\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000e\000\000\000\000\000e\000e\000e\000e\000\000\000\000\000\000\000]\000\000\000e\000e\000]\000e\000e\000e\000]\000\000\000\000\000\000\000\000\000\000\000]\000\000\000\000\000]\000]\000\000\000]\000]\000\000\000\000\000\000\000\000\000]\000\000\000\000\000\000\000]\000\000\000\000\002\142\000a\000]\000]\000a\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000a\000]\000\000\000]\000a\000\000\000\000\000\000\000a\000\000\000\000\000\000\000\000\000]\000a\000\000\000\000\000a\000a\000\000\000a\000a\000\000\000\000\000\000\000\000\000a\000\000\000\000\000\000\000a\000\000\000\000\002\142\000\000\000a\000a\000\000\000\000\000]\000\000\000\000\000]\000]\000\000\000\000\002\150\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000a\000\000\000a\000]\000\000\000\000\000]\000]\000]\000]\000\000\000\000\000a\000\000\000\000\000]\000]\000\000\000]\000]\000]\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000a\000\000\000\000\000a\000a\000\000\000\000\002\150\000\000\000q\000\000\000\000\000q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000a\000\000\000\000\000a\000a\000a\000a\000\000\000\000\000\000\002~\000\000\000a\000a\000q\000a\000a\000a\000q\000\000\000\000\000\000\000\000\000\000\002\134\000\000\000\000\000q\000q\000\000\000q\000q\000\000\000\000\000\000\000\000\000q\000\000\000\000\000\000\000q\000\000\000\000\002\142\000i\002\158\000q\000i\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002~\002\174\000\000\000q\000i\000\000\000\000\000\000\000i\000\000\000\000\000\000\000\000\000q\002\134\000\000\000\000\000i\000i\000\000\000i\000i\000\000\000\000\000\000\000\000\000i\000\000\000\000\000\000\000i\000\000\000\000\002\142\000\000\002\158\000i\000\000\000\000\000q\000\000\000\000\000q\000q\000\000\000\000\002\150\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000i\000\000\000i\000q\000\000\000\000\000q\000q\000q\000q\000\000\000\000\000i\000\000\000\000\000q\000q\000\000\000q\000q\000q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000i\000\000\000\000\000i\000i\000\000\000\000\002\150\000\000\000m\000\000\000\000\000m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000i\000\000\000\000\000i\000i\000i\000i\000\000\000\000\000\000\002~\000\000\000i\000i\000m\000i\000i\000i\000m\000\000\000\000\000\000\000\000\000\000\002\134\000\000\000\000\000m\000m\000\000\000m\000m\000\000\000\000\000\000\000\000\000m\000\000\000\000\000\000\000m\000\000\000\000\002\142\000u\002\158\000m\000u\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002~\002\174\000\000\000m\000u\000\000\000\000\000\000\000u\000\000\000\000\000\000\000\000\000m\002\134\000\000\000\000\000u\000u\000\000\000u\000u\000\000\000\000\000\000\000\000\000u\000\000\000\000\000\000\002\166\000\000\000\000\002\142\000\000\002\158\000u\000\000\000\000\000m\000\000\000\000\000m\000m\000\000\000\000\002\150\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\174\000\000\000u\000m\000\000\000\000\000m\000m\000m\000m\000\000\000\000\000u\000\000\000\000\000m\000m\000\000\000m\000m\000m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\182\000\000\000\000\000u\000u\000\000\000\000\002\150\000\000\002v\000\000\000\000\000\133\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000u\000\000\000\000\000u\000u\000u\000u\000\000\000\000\000\000\002~\000\000\000u\000u\000\133\000u\000u\000u\000\133\000\000\000\000\000\000\000\000\000\000\002\134\000\000\000\000\000\133\000\133\000\000\000\133\002\238\000\000\000\000\000\000\000\000\000\133\000\000\000\000\000\000\002\166\000\000\000\000\002\142\002v\002\158\000\133\000y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002~\002\174\000\000\000\133\000y\000\000\000\000\000\000\000y\000\000\000\000\000\000\000\000\000\133\002\134\000\000\000\000\000y\000y\000\000\000y\000y\000\000\000\000\000\000\000\000\000y\000\000\000\000\000\000\002\166\000\000\000\000\002\142\000\000\002\158\000y\000\000\000\000\002\182\000\000\000\000\000\133\000\133\000\000\000\000\002\150\000\000\001\153\000\000\000\000\001\153\000\000\000\000\000\000\000\000\002\174\000\000\000y\000\133\000\000\000\000\000\133\000\133\000\133\000\133\000\000\000\000\000y\001\153\000\000\000\133\000\133\001\153\002\246\002\190\000\133\000\000\000\000\000\000\000\000\000\000\000\000\001\153\000\000\000\000\000\000\001\153\000\000\001\153\001\153\000\000\000\000\000\000\002\182\000\000\000\000\000y\000y\001\153\000\000\002\150\001\153\002v\001\153\000\000\000\129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000y\000\000\000\000\000y\000y\000y\000y\000\000\000\000\000\000\002~\001\153\000y\000y\000\129\000y\002\190\000yn\166\000\000\000\000\n\170\000\000\000\000\000\000\000\000\000\000\004E\000\000\000\000\000\000\000\000\000\000\004E\000\000\000\000\001\178\000\000\000\000\004E\000\000\000\000\004E\000\000\000\000\n\174\011\006\000\000\004E\011n\011\134\000\000\000\000\000\000\000\000\001\218\000\000\001\222\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\206\001\230\000\000\000\000\n\210\011\138\001\242\000\000\n\214\n\218\000\000\n\222\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\226\n\230\000\000\000\000\000\000\000\000\n\234\000\000\000\000\000\n\000\000\000\000\000\000\000\000\000\000\001\166\000\000\n\166\n\242\000\000\n\170\000\000\000\000\000\000\000\000\000\000\006\005\000\000\011\142\000\000\011\170\000\000\000\000\000\000\000\000\001\178\000\000\000\000\000\000\000\000\n\246\000\000\000\000\000\000\n\174\011\006\n\250\000\000\011n\011\134\000\000\000\000\012\138\000\000\001\218\n\254\001\222\000\000\000\000\000\000\000\000\002\"\000\000\000\000\n\206\001\230\000\000\000\000\n\210\011\138\001\242\000\000\n\214\n\218\000\000\n\222\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\226\n\230\000\000\000\000\000\000\000\000\n\234\000\000\000\000\000\n\000\000\000\000\000\000\000\000\000\000\001\166\000\000\n\166\n\242\000\000\n\170\000\000\000\000\000\000\000\000\000\000\006\005\000\000\011\142\000\000\011\170\000\000\000\000\000\000\000\000\001\178\000\000\000\000\000\000\000\000\n\246\000\000\000\000\000\000\n\174\011\006\n\250\000\000\011n\011\134\000\000\000\000\011\178\000\000\001\218\n\254\001\222\000\000\000\000\000\000\000\000\002\"\000\000\000\000\n\206\001\230\000\000\000\000\n\210\011\138\001\242\000\000\n\214\n\218\000\000\n\222\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\226\n\230\000\000\000\000\000\000\000\000\n\234\000\000\000\000\000\n\000\000\000\000\000\000\000\000\000\000\001\166\000\000\n\166\n\242\000\000\n\170\000\000\000\000\000\000\000\000\000\000\006\005\000\000\011\142\000\000\011\170\000\000\000\000\000\000\000\000\001\178\000\000\000\000\000\000\000\000\n\246\000\000\000\000\000\000\n\174\011\006\n\250\000\000\011n\011\134\000\000\000\000\005i\000\000\001\218\n\254\001\222\000\000\000\000\000\000\000\000\002\"\000\000\000\000\n\206\001\230\000\000\000\000\n\210\011\138\001\242\000\000\n\214\n\218\003)\n\222\000j\003)\000r\000\000\000\130\003)\000\000\003)\000\000\000\000\000\000\000\138\003)\003)\n\226\n\230\000\000\000\000\000\000\000\000\n\234\000\000\000\000\000\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\242\000\000\000\000\000\000\000\000\000\000\000\146\003)\006\005\000\000\011\142\003)\011\170\000\000\000\000\000\000\000\000\003%\000\000\000\182\003%\000\190\n\246\000\206\003%\000\000\003%\003)\n\250\000\000\000\214\003%\003%\000\000\001\189\000\000\000\000\nn\166\000\000\000\000\n\170\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003%\001\178\000\000\003%\003%\000\000\000\000\003%\000\000\000\000\n\174\011\006\003%\003%\011n\011\134\000\000\003%\000\000\000\000\001\218\000\000\001\222\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\206\001\230\000\000\000\000\n\210\011\138\001\242\000\000\n\214\n\218\000\000\n\222\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\161\000\000\000\000\001\161\000\000\000\000\n\226\n\230\000\000\000\000\000\000\000\000\n\234\000\000\000\000\000\n\000\000\000\000\000\000\000\000\000\000\001\161\000\000\000\000\n\242\001\161\000\000\000\000\000\000\001\161\000\000\000\000\006\005\000\000\000\000\001\161\011\170\000\000\001\161\001\161\000\000\001\161\001\161\000\000\000\000\000\000\n\246\001\161\000\000\000\000\000\000\001\161\n\250\000\000\001\161\000\000\001\161\001\161\001\201\000\000\000\000\n\254\000\000\000\000\000\000\000\000\000\000\002\"\000\000\005\213\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\161\000\000\001\161\000\000\005\213\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\161\005\213\000\000\005\213\ne\ne\000\000\000\000\000\000\000\000\005\213\000\000\000\000\000\000\000\000\005\213\000\000\000\000\005\213\000\000\000\000\000\000\005\213\000\000\000\000\000\000\001\161\014\014\005\213\001\161\000\000\000\000\000\000\001\161\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\ne\000\000\005\213\000Z\000\000\000\000\000\000\001\161\000\000\001\161\000\000\000\000\000\000\000\000\000\000\014\022\001\161\001\161\000\000\001\161\001\161\001\161\000\000\000\000\000\000\ne\000\000\005\213\000\000\000\000\005\213\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\213\000\000\000\000\000\000\000\000\005\213\005\213\005\213\000\000\005\213\005\213\000\000\005\213\000\000\000\000\000\000\000\000\000\000\005\213\000\000\000\000\005\213\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\213\000\000\000\000\000\000\005\213\005\213\ne\000R\000V\000f\000\170\007\186\000\174\nR\000\178\000\246\nV\000\254\000\000\001\014\000\000\001\022\nZ\001\030\0012\001:\001>\n^\001\166\000\000\001\170\000\000\000\000\001\174\000\000\000\000\000\000\000\000\000\000\000\000\001F\000\000\014\206\000\000\000\000\000\000\000\000\000\000\001\178\000\000\000\000\001\182\000\000\001N\000\000\000\000\000\000\001\198\001\202\000\000\001\210\000\000\n\162\000\000\000\000\000\000\000\000\001\218\000\000\001\222\000\000\000\000\000\000\001^\000\000\000\000\000\000\001\226\001\230\001j\011\154\001\234\001\238\001\242\000\000\001\246\001\250\001b\001\254\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\254\000\000\000\000\000\000\n\134\002\002\000\000\000\000\000\000\000\000\002\006\000\000\021\002\000\n\000\000\000\000\000\000\000\000\000\000\023:\000\000\021\006\002\014\021\n\n\185\n\185\000\000\000\000\000\000\000\n\021\014\000\000\002\018\008\129\000\000\021\018\000\000\000\000\021\026\000\000\001\137\000\000\021\030\001\137\002\022\000\000\000\000\000\000\021\"\000\000\002\026\000\000\000\000\008\129\000\000\008\129\000\000\005\253\n\138\002\030\000\000\001\137\n\185\000\000\021&\002\"\000\000\005\253\000\000\001\137\000\000\000\000\005\253\000\000\000\000\001\137\000\000\000\000\000\000\000\000\000\000\001\137\001\137\000\000\000\000\000\000\000\000\n\185\000\000\021*\000\000\001\137\021.\000\000\001\137\000\000\001\137\001\137\000\000\000\000\000\000\000\000\000\000\000\000\0212\000\000\000\000\000\000\000\000\0216\000\n\021:\000\000\021>\021B\000\000\021F\001\137\000\000\001\137\000\000\000\000\021J\000\000\000\000\021N\013\249\000\000\000\000\013\249\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021R\000\000\000\000\000\000\021V\021Z\n\185\013\249\000\000\000\000\000\000\013\249\000\000\000\000\005\170\001\137\002N\000\000\001\137\001\137\000\000\013\249\001\137\000\000\000\000\013\249\000\000\013\249\013\249\000\000\000\000\005\178\000\000\000\000\005\190\001\137\000\000\013\249\001\137\001\137\013\249\001\137\013\249\000\000\000\000\000\000\003\n\001\137\001\137\000\000\001\137\001\137\001\137\000\000\t~\005\213\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\249\t\190\005\213\000\000\005\213\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\249\005\213\005\213\005\213\000\000\000\000\000\000\005\202\000\000\000\000\005\213\005\213\000\000\005\213\000\000\005\213\000\000\000\000\005\213\000\000\005\213\000\000\005\213\000\000\000\000\005\213\013\249\013\249\005\213\013\249\000\000\005\206\005\213\013\249\000\000\000\000\000\000\000\000\005\213\005\213\nr\000\000\000\000\014Z\000\000\014j\002\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014J\000\000\000\000\000\000\001%\000\000\000\000\000\000\001%\000\000\014z\000\000\002\025\000\000\014R\000\000\000\000\001%\001%\000\000\001%\001%\002\025\000\000\000\000\000\000\001%\000\000\000\000\000\000\014r\000\000\000\000\014Z\000\000\014j\001%\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\130\000\000\000\000\002\025\000\000\000\000\000\000\014b\014z\001\013\001%\000\000\001\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001%\000\000\000\000\002\025\000\000\002\025\000\000\000\000\000\000\000\000\001\013\000\000\002\025\002\025\001\013\014\178\014\138\002\025\001\013\000\000\000\000\000\000\000\000\000\000\014R\000\000\014\130\001\013\001\013\001%\001\013\001\013\000\000\014b\000\000\001\005\001\013\000\000\001\005\000\000\001\013\000\000\000\000\014Z\000\000\014jb\001\005\001\t\001\005\000\000\001\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\005\000\000\000\000\001\013\000\000\001\013\000\000\000\000\000\000\000\000\001\t\000\000\001\013\001\013\001\t\001\013\001\013\001\013\001\t\000\000\000\000\000\000\000\000\000\000\001\t\000\000\001\005\001\t\001\t\001\005\001\t\001\t\000\000\014b\000\000\001\025\001\t\000\000\001\025\000\000\001\t\000\000\000\000\014Z\000\000\001\t\001\t\000\000\000\000\001\005\000\000\001\005\000\000\000\000\000\000\000\000\014J\000\000\001\005\001\005\001\025\001\005\001\005\001\005\001\025\000\000\001\t\000\000\001\t\000\000\014R\000\000\000\000\001\025\001\025\000\000\001\025\001\025\001\t\000\000\000\000\000\000\001\025\000\000\000\000\000\000\001\025\000\000\000\000\014Z\000\000\014j\001\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\t\000\000\000\000\001\t\000\000\000\000\000\000\014b\014z\001\017\001\025\000\000\001\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\025\000\000\000\000\001\t\000\000\001\t\000\000\000\000\000\000\000\000\014J\000\000\001\t\001\t\001\017\001\t\001\t\001\t\001\017\000\000\000\000\000\000\000\000\000\000\014R\000\000\001\025\001\017\001\017\001\025\001\017\001\017\000\000\014b\000\000\001\021\001\017\000\000\001\021\000\000\001\017\000\000\000\000\014Z\000\000\014j\001\017\000\000\000\000\001\025\000\000\001\025\000\000\000\000\000\000\000\000\014J\000\000\001\025\001\025\001\021\001\025\001\025\001\025\001\021\000\000\001\017\000\000\001\017\000\000\014R\000\000\000\000\001\021\001\021\000\000\001\021\001\021\001\017\000\000\000\000\000\000\001\021\000\000\000\000\000\000\001\021\000\000\000\000\014Z\000\000\014j\001\021\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\017\000\000\000\000\001\017\000\000\000\000\000\000\014b\014z\001\029\001\021\000\000\001\029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\021\000\000\000\000\001\017\000\000\001\017\000\000\000\000\000\000\000\000\014J\000\000\001\017\001\017\001\029\001\017\001\017\001\017\001\029\000\000\000\000\000\000\000\000\000\000\014R\000\000\001\021\001\029\001\029\001\021\001\029\001\029\000\000\014b\000\000\014B\001\029\000\000\001-\000\000\014r\000\000\000\000\014Z\000\000\014j\001\029\000\000\000\000\001\021\000\000\001\021\000\000\000\000\000\000\000\000\014J\000\000\001\021\001\021\001-\001\021\001\021\001\021\001-\000\000\014z\000\000\001\029\000\000\014R\000\000\000\000\001-\001-\000\000\001-\014\170\001\029\000\000\000\000\000\000\001-\000\000\000\000\000\000\014r\000\000\000\000\014Z\000\000\014j\001-\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\130\000\000\000\000\001\029\000\000\000\000\000\000\014b\014z\014B\001-\000\000\001!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001-\000\000\000\000\001\029\000\000\001\029\000\000\000\000\000\000\000\000\014J\000\000\001\029\001\029\001!\001\029\001\029\001\029\001!\000\000\000\000\000\000\000\000\000\000\014R\000\000\014\130\001!\001!\001-\001!\001!\000\000\014b\000\000\014B\001!\000\000\001)\000\000\014r\000\000\000\000\014Z\000\000\014j\001!\000\000\000\000\001-\000\000\001-\000\000\000\000\000\000\000\000\014J\000\000\001-\001-\001)\014\178\014\138\001-\001)\000\000\014z\000\000\001!\000\000\014R\000\000\000\000\001)\001)\000\000\001)\014\170\001!\000\000\000\000\000\000\001)\000\000\000\000\000\000\014r\000\000\000\000\014Z\000\000\014j\001)\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\130\000\000\000\000\001!\000\000\000\000\000\000\014b\014z\000\000\001)\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001)\000\000\000\000\001!\000\000\001!\000\000\000\000\000\000\000\000\000\000\000\000\001!\001!\000\000\001!\014\138\001!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\166\014\130\001\170\000\000\001)\001\174\000\000\000\000\014b\000\000\000\000\000\000\000\000\000\000\008\129\000\000\000\000\000\000\000\000\000\000\001\178\000\000\000\000\001\182\001)\000\000\001)\000\000\000\000\001\198\001\202\000\000\001\210\001)\001)\000\000\001)\014\138\001)\001\218\000\000\001\222\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\226\001\230\000\000\000\000\001\234\001\238\001\242\000\000\001\246\001\250\001\166\001\254\001\170\000\000\000\000\001\174\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018f\000\000\000\000\002\002\000\000\000\000\001\178\000\000\002\006\001\182\000\000\000\n\000\000\000\000\000\000\001\198\001\202\000\000\001\210\000\000\002\014\000\000\000\000\000\000\000\000\001\218\020\254\001\222\000\000\000\000\002\018\000\000\000\000\000\000\000\000\001\226\001\230\000\000\021\002\001\234\001\238\001\242\002\022\001\246\001\250\000\000\001\254\021\006\002\026\021\n\000\000\000\000\000\000\000\000\000\000\000\000\021\014\002\030\000\000\000\000\000\000\021\018\002\002\002\"\021\026\000\000\000\000\002\006\021\030\000\000\000\n\000\000\000\000\000\000\021\"\000\000\000\000\000\000\000\000\002\014\000\000\000\000\000\000\000\000\000\000\023z\000\000\000\000\n\141\002\018\021&\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\022\000\000\000\000\000\000\000\000\000\000\002\026\000\000\000\000\000\000\000\000\000\000\n\141\000\000\021*\002\030\000\000\021.\000\000\000\000\000\000\002\"\000\000\001\166\000\000\001\170\000\000\000\000\001\174\0212\000\000\000\000\000\000\000\000\0216\000\n\021:\000\000\021>\021B\000\000\021F\000\000\001\178\000\000\000\000\001\182\021J\000\000\000\000\021N\000\000\001\198\0076\000\000\001\210\000\000\000\000\000\000\000\000\000\000\000\000\001\218\000\000\001\222\021R\000\000\000\000\000\000\021V\021Z\n\141\001\226\001\230\000\000\000\000\001\234\001\238\001\242\000\000\001\246\001\250\001\166\001\254\001\170\000\000\000\000\001\174\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\002\000\000\000\000\001\178\000\000\002\006\001\182\000\000\000\n\000\000\000\000\000\000\001\198\002\n\000\000\001\210\000\000\002\014\000\000\000\000\000\000\000\000\001\218\000\000\001\222\000\000\000\000\002\018\000\000\000\000\000\000\000\000\001\226\001\230\006\030\000\000\001\234\001\238\001\242\002\022\001\246\001\250\004=\001\254\004=\002\026\000\000\004=\000\000\000\000\000\000\000\000\000\000\000\000\002\030\000\000\000\000\000\000\000\000\002\002\002\"\000\000\004=\000\000\002\006\004=\000\000\000\n\000\000\000\000\000\000\004=\004=\000\000\004=\000\000\002\014\000\000\000\000\000\000\000\000\004=\020\254\004=\000\000\000\000\002\018\000\000\000\000\000\000\000\000\004=\004=\000\000\021\002\004=\004=\004=\002\022\004=\004=\000\000\004=\021\006\002\026\021\n\000\000\000\000\000\000\000\000\000\000\000\000\021\014\002\030\000\000\000\000\000\000\021\018\004=\002\"\021\026\000\000\000\000\004=\021\030\000\000\004=\000\000\000\000\000\000\021\"\000\000\000\000\000\000\000\000\004=\000\000\000\000\000\000\000\000\000\000\022v\000\000\000\000\005\213\000\000\021&\005\213\000v\000\000\000\000\005\213\000\000\005\213\000\000\000\000\000\000\004=\005\213\005\213\000\000\000\000\000\000\004=\000\000\000\000\000\000\000\000\000\000\n\141\005\213\021*\004=\005\213\021.\000\000\000\000\005\213\004=\005\213\000\000\000\000\000\000\000\000\005\213\005\213\0212\000\000\000\000\005\213\000\000\0216\000\n\021:\000\000\021>\021B\000\000\021F\000\000\000\000\000\000\005\213\000\000\021J\005\213\000\194\021N\000\000\005\213\000\000\005\213\005\213\001\002\000Z\005\213\005\213\005\213\005\213\000\000\000\000\000\000\021R\005\213\005\213\005\213\021V\021Z\n\141\005\213\005\213\005\213\000\000\000\000\000\000\001fj\001\230\000\000\000\000\005n\001\238\001\242\000\000\005r\005v\001\166\005z\001\186\000\000\000\000\001\190\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005~\000\000\000\000\001\178\000\000\005\130\001\182\000\000\000\n\000\000\000\000\000\000\001\194\007\030\000\000\001\210\005\213\005\138\000\000\005\213\003F\000\000\001\218\005\213\001\222\005\213\000\000\000\000\000\000\000\000\005\213\005\213\005j\001\230\000\000\000\000\005n\001\238\001\242\005\142\005r\005v\000\000\005z\000\000\005\146\000\000\000\000\005\213\000\000\000\000\005\213\003\138\000\000\005\150\005\213\000\000\005\213\000\000\005~\002\"\005\213\005\213\005\213\005\130\005\213\000\000\000\n\005\213\003\202\000\000\000\000\005\213\000\000\005\213\000\000\005\138\005\213\000\000\005\213\005\213\007fj\001\230\000\000\000\000\005n\001\238\001\242\000\000\005r\005v\000\000\005z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005~\000\000\000\000\000\000\000\000\005\130\000\000\000\000\000\n\000\000\000\000\000\000\000\000\000R\000V\000f\000\170\005\138\000\174\nR\000\178\000\246\nV\000\254\000\000\001\014\025*\001\022\nZ\001\030\0012\001:\001>\n^\025.\000\000\000\000\000\000\000\000\005\142\000\000\000\000\001\166\000\000\n\166\005\146\001F\n\170\000\000\000\000\000\000\000\000\000\000\000\000\005\150\000\000\000\000\000\000\000\000\001N\002\"\000\000\001\178\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\174\n\186\000\000\000\000\000\000\000\000\000\000\000\000\001^\000\000\001\218\000\000\001\222\000\000\001j\000\000\000\000\000\000\000\000\000\000\n\206\001\230\001b\000\000\n\210\001\238\001\242\000\000\n\214\n\218\001\166\n\222\n\166\000\000\000\000\n\170\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\226\n\230\000\000\000\000\001\178\000\000\n\234\000\000\000\000\000\n\000\000\000\000\000\000\n\174\n\238\000\000\000\000\000\n\n\242\000\000\000\000\000\000\004\141\001\218\000\000\001\222\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\206\001\230\000\000\001n\n\210\001\238\001\242\n\246\n\214\n\218\001\166\n\222\n\166\n\250\000\000\n\170\000\000\000\000\000\000\000\000\000\000\000\000\n\254\000\000\000\000\000\000\n\226\n\230\002\"\000\000\001\178\000\000\n\234\000\000\000\000\000\n\000\000\000\000\000\000\n\174\011\006\000\000\000\000\000\000\n\242\000\000\000\000\000\000\000\000\001\218\000\000\001\222\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\206\001\230\000\000\000\000\n\210\001\238\001\242\n\246\n\214\n\218\001\166\n\222\013^\n\250\000\000\013b\000\000\000\000\000\000\000\000\000\000\000\000\n\254\000\000\000\000\000\000\n\226\n\230\002\"\000\000\001\178\000\000\n\234\000\000\000\000\000\n\000\000\000\000\000\000\013f\014\186\000\000\000\000\000\000\n\242\000\000\000\000\000\000\000\000\001\218\000\000\001\222\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013~\001\230\000\000\000\000\013\130\001\238\001\242\n\246\013\134\013\138\001\166\013\142\013^\n\250\000\000\013b\000\000\000\000\000\000\000\000\000\000\000\000\n\254\000\000\000\000\000\000\n\226\013\146\002\"\000\000\001\178\000\000\013\150\000\000\000\000\000\n\000\000\000\000\000\000\013f\013j\000\000\000\000\000\000\013\158\000\000\000\000\000\000\000\000\001\218\000\000\001\222\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013~\001\230\000\000\000\000\013\130\001\238\001\242\013\162\013\134\013\138\001\166\013\142\013^\013\166\000\000\013b\000\000\000\000\000\000\000\000\000\000\000\000\013\170\000\000\000\000\000\000\n\226\013\146\002\"\000\000\001\178\000\000\013\150\000\000\000\000\000\n\000\000\000\000\000\000\013f\013\154\000\000\000\000\000\000\013\158\000\000\000\000\000\000\000\000\001\218\000\000\001\222\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013~\001\230\000\000\000\000\013\130\001\238\001\242\013\162\013\134\013\138\000\000\013\142\000\000\013\166\000\000\000\000\000\000\000\000\000\000\008y\000\000\000\000\013\170\000\000\000\000\000\000\n\226\013\146\002\"\000\000\000\000\008y\013\150\000\000\000\000\000\n\000\000\000\000\000\000\000\000\008y\000\000\008y\000\000\013\158\000\000\000\000\000\000\000\000\008y\000\000\000\000\000\000\000\000\008y\000\000\023v\008y\000\000\000\000\000\000\008y\021\210\000\000\000\000\000\000\013\162\008y\021\002\000\000\000\000\000\000\013\166\000\000\000\000\000\000\000\000\021\006\000\000\021\n\000\000\013\170\000\000\008y\000\000\000\000\021\014\002\"\000\000\000\000\000\000\021\018\000\000\000\000\021\026\000\000\000\000\000\000\021\030\000\000\000\000\000\000\000\000\000\000\021\"\000\000\000\000\000\000\008y\000\000\000\000\008y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021&\023\150\000\000\008y\000\000\000\000\000\000\000\000\008y\008y\008y\000\000\008y\008y\000\000\008y\000\000\000\000\000\000\000\000\000\000\008y\000\000\000\000\008y\021*\000\000\000\000\021.\000\000\007\237\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008y\0212\000\000\007\237\008y\008y\0216\000\n\021:\000\000\021>\021B\007\237\021F\007\237\000\000\000\000\000\000\000\000\021J\000\000\007\237\021N\000\000\000\000\000\000\007\237\000\000\020\254\007\237\000\000\000\000\000\000\007\237\000\000\000\000\000\000\021R\000\000\007\237\021\002\021V\021Z\000\000\000\000\000\000\000\000\000\000\000\000\021\006\000\000\021\n\000\000\000\000\000\000\007\237\023\150\000\000\021\014\000\000\000\000\000\000\000\000\021\018\000\000\000\000\021\026\000\000\000\000\000\000\021\030\000\000\000\000\000\000\000\000\000\000\021\"\000\000\000\000\000\000\007\237\000\000\000\000\007\237\000\000\000\000\000\000\024\170\000\000\000\000\000\000\000\000\021&\000\000\000\000\007\237\000\000\000\000\000\000\000\000\007\237\007\237\007\237\000\000\007\237\007\237\000\000\007\237\000\000\000\000\000\000\000\000\000\000\007\237\000\000\000\000\007\237\021*\000\000\000\000\021.\000\000\022Z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\237\0212\000\000\021\002\007\237\007\237\0216\000\n\021:\000\000\021>\021B\021\006\021F\021\n\000\000\000\000\000\000\000\000\021J\000\000\021\014\021N\000\000\000\000\000\000\021\018\000\000\022r\021\026\000\000\000\000\000\000\021\030\000\000\000\000\000\000\021R\000\000\021\"\021\002\021V\021Z\000\000\000\000\000\000\000\000\000\000\000\000\021\006\000\000\021\n\000\161\000\000\000\000\021&\000\000\000\000\021\014\000\000\000\000\000\000\000\000\021\018\000\000\000\000\021\026\000\000\000\000\000\000\021\030\000\000\000\000\011\234\000\000\000\000\021\"\000\000\000\000\000\000\021*\000\000\000\000\021.\000\000\000\000\000\000\011\242\000\000\000\000\000\000\000\000\021&\000\161\000\161\0212\000\000\000\000\000\000\000\000\0216\000\n\021:\000\161\021>\021B\011\250\021F\012\n\000\000\000\000\000\000\000\000\021J\000\000\000\000\021N\021*\000\000\000\000\021.\000\000\020\254\000\000\000\000\000\000\000\000\000\000\000\000\000\161\000\000\021R\0212\000\000\021\002\021V\021Z\0216\000\n\021:\000\000\021>\021B\021\006\021F\021\n\000\000\000\000\000\000\000\000\021J\000\000\021\014\021N\000\000\000\000\000\000\021\018\000\000\020\254\021\026\000\000\000\000\000\000\021\030\000\000\000\000\000\161\021R\000\000\021\"\021\002\021V\021Z\012\002\000\000\000\000\000\000\000\000\000\000\021\006\000\000\021\n\000\000\000\000\000\000\023\022\000\161\000\000\021\014\000\000\000\000\000\000\000\000\021\018\000\000\000\000\021\026\000\000\000\165\000\000\021\030\000\161\000\161\000\000\000\000\000\000\021\"\000\000\000\000\000\000\021*\000\000\000\000\021.\000\000\020\254\000\000\000\000\000\000\011\234\000\000\000\000\024B\000\000\000\000\0212\000\000\021\002\000\000\000\000\0216\000\n\021:\011\242\021>\021B\021\006\021F\021\n\000\165\000\165\000\000\000\000\021J\000\000\021\014\021N\021*\000\000\000\165\021.\000\000\011\250\021\026\012\n\000\000\000\000\021\030\000\000\000\000\000\000\021R\0212\021\"\000\000\021V\021Z\0216\000\n\021:\000\000\021>\021B\000\000\021F\012\026\000\000\000\000\000\000\021&\021J\000\000\000\000\021N\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021R\000\000\000\000\000\000\021V\021Z\021*\000\000\000\000\021.\000\000\000\000\000\000\000\000\000\000\000\165\000\000\000\000\000\000\000\000\000\000\0212\012\002\000\000\000\000\000\000\0216\024b\021:\000\000\021>\021B\000\000\021F\000\000\000\165\000\000\000\000\000\000\021J\000\000\000\000\021N\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\165\000\165\000\000\000\000\000\000\000\000\000\000\021R\000\000\000\000\000\000\021V\021Z\004M\004M\004M\004M\000\000\004M\000\000\004M\004M\000\000\004M\000\000\004M\000\000\004M\000\000\004M\004M\004M\004M\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001r\000\000\000\000\000\000\004M\000\000\000R\000V\000f\000\170\000\000\000\174\000\000\000\178\000\246\000\000\000\254\004M\001\014\000\000\001\022\000\000\001\030\0012\001:\001>\000\000\000\000\000R\000V\000f\000\170\000\000\000\174\000\000\000\178\000\246\004M\000\254\001F\001\014\000\000\001\022\004M\001\030\0012\001:\001>\000\000\000\000\000\000\004M\001N\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001F\000\000\000R\000V\000f\000\170\000\000\000\174\000\000\000\178\000\246\001^\000\254\001N\001\014\000\000\001\022\001j\001\030\0012\001:\001>\000\000\000\000\000\000\001b\000\000\000\000\000\000\000\000\000\000\004M\000\000\001^\000\000\001F\000\000\000\000\000\000\001j\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001b\001N\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\000\000\001^\000\000\000\000\000\000\000\000\000\000\004M\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001b\000\000\000\000\001n\004R\004V\000\n\000\000\000\000\000\000\000\000\000\000\000R\000V\000f\000\170\000\000\000\174\000\000\000\178\000\246\000\000\000\254\000\000\001\014\001n\001\022\012Q\001\030\0012\001:\001>\000\000\000\000\000R\000V\000f\000\170\000\000\000\174\000\000\000\178\000\246\000\000\000\254\001F\001\014\000\000\001\022\0021\001\030\0012\001:\001>\000\000\000\000\000\000\000\000\001N\000\000\004Z\000\000\000\000\000\000\000\000\000\000\000\000\001F\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001^\000\000\001N\003U\000\000\000\000\001j\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001b\000\000\000\000\000\000\025\230\004V\000\000\000\000\001^\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001b\000\000\000\000\000\000\004R\004V\000R\000V\000f\000\170\000\000\000\174\006R\000\178\000\246\006\162\000\254\000\000\001\014\000\n\001\022\000\000\001\030\0012\001:\001>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006Z\000\000\000\000\000\000\002\017\025\234\001F\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006b\000\000\000\000\000\000\002\017\001N\006\178\006\186\000\000\000\000\000\000\000\237\003M\004b\000\237\002)\006\130\000\000\000\000\006j\000\000\006z\000\000\000\000\000\000\001^\000\000\000\000\000\000\000\000\000\000\000\000\006Z\000\000\000\000\000\213\000\237\000\000\000\213\001b\000\000\000\000\006\138\025\230\004V\000\000\006b\000\000\000\000\000\000\000\237\000\000\000\237\000\237\002\017\000\000\000\213\000\000\000\000\000\000\000\213\000\000\006\130\000\000\000\000\006j\000\000\006z\000\000\000\173\006b\000\000\000\000\000\000\000\213\000\000\000\213\000\213\000\000\000\000\006\146\000\000\000\000\002\017\000\000\000\000\000\213\006r\006\138\006j\011\234\006z\000\000\000\205\000\000\000\000\000\205\000\000\000\000\025\242\000\237\000\000\000\000\000\000\011\242\002\017\000\000\000\000\000\000\000\000\000\173\000\173\000\213\000\000\000\205\006\194\006\154\002\017\000\205\000\000\012\018\000\000\000\000\011\250\000\213\012\n\006\146\000\000\000\205\000\237\000\000\000\000\000\205\006r\000\205\000\205\000\000\000\000\000\000\000\209\000\000\000\000\000\209\000\000\000\205\000\000\012\026\006j\000\000\000\205\000\213\000\237\000\000\000\213\000\000\000\000\000\000\006r\000\000\000\000\000\209\000\237\006\154\000\237\000\209\000\000\000\000\000\000\000\000\000\000\000\205\011\226\000\000\000\000\000\209\000\213\000\000\000\000\000\209\000\000\000\209\000\209\000\205\000\000\012\"\000\213\000\213\000\213\000\000\000\000\000\209\012\002\011\234\006j\000\000\000\209\000\225\000\000\000\000\000\225\000\000\000\000\000\000\000\000\000\173\000\000\011\242\000\000\000\205\000\000\000\000\000\205\000\189\012:\000\000\006r\000\209\006Z\000\000\000\173\000\173\000\225\012\018\000\000\000\000\011\250\000\000\012\n\000\209\000\000\000\000\006b\000\000\000\205\000\000\000\225\000\000\000\225\000\225\000\000\000\000\000\000\000\000\000\205\000\205\000\205\000\000\000\225\012\026\000\000\006j\000\000\006z\000\217\000\209\000\000\000\217\000\209\000\000\000\000\000\000\006r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\138\006Z\000\000\000\000\000\000\000\217\000\209\000\000\000\000\000\000\000\000\000\000\000\225\012\"\000\000\006b\000\209\000\209\000\209\000\217\012\002\000\217\000\217\000\000\000\000\000\000\000\221\000\000\000\000\000\221\000\000\000\217\000\000\000\189\006j\000\000\006z\000\000\000\225\000\000\000\000\000\225\000\000\000\000\000\000\006r\000\000\006Z\012B\012*\000\000\000\221\000\000\000\000\000\000\000\000\000\000\000\217\011\226\000\000\000\000\006b\000\000\000\225\000\000\000\221\000\000\000\221\000\221\000\217\000\000\000\000\000\000\000\225\000\225\000\225\000\000\000\221\000\000\011\234\006j\000\000\006z\000\229\000\000\000\000\000\229\000\000\000\000\000\000\000\000\000\000\000\000\011\242\000\000\000\217\000\000\000\000\000\217\000\177\000\177\000\000\006r\006\138\006Z\000\000\000\000\000\000\000\229\012\018\000\000\000\000\011\250\000\000\012\n\000\221\000\000\000\000\006b\000\000\000\217\000\000\000\229\000\000\000\229\000\229\000\000\000\000\000\000\000\000\000\217\000\217\000\217\000\000\006\130\012\026\000\000\006j\000\000\006z\006R\000\221\000\000\000\245\000\221\000\000\000\000\000\000\006r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\138\006Z\000\000\000\000\000\000\000\245\000\221\000\000\000\000\000\000\000\000\000\000\000\229\012\"\000\000\006b\000\221\000\221\000\221\000\245\012\002\000\245\006\186\000\000\000\000\000\000\006R\000\000\000\000\000\233\000\000\006\130\000\000\000\177\006j\000\000\006z\000\000\006\146\000\000\000\000\000\229\000\000\000\000\000\000\006r\000\000\006Z\000\177\012*\000\000\000\233\000\000\000\000\000\000\000\000\000\000\006\138\000\000\000\000\000\000\006b\000\000\000\229\000\000\000\233\000\000\000\233\000\233\000\245\000\000\000\000\000\000\000\229\000\229\000\229\000\000\006\130\000\000\000\000\006j\000\000\006z\006R\000\000\000\000\000\241\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\146\000\000\000\000\000\245\000\000\000\000\000\000\006r\006\138\006Z\000\000\000\000\000\000\000\241\000\000\000\000\000\000\000\000\000\000\000\000\000\233\000\000\013\221\006b\000\000\000\245\000\000\000\241\000\000\000\241\006\186\000\000\000\000\000\000\000\000\006\194\006\154\000\245\000\000\006\130\000\000\000\000\006j\013\221\006z\000\000\006\146\000\000\000\000\000\233\011\030\000\000\000\000\006r\000\000\000\000\000\000\013\221\000\000\000\000\000\000\000\000\000\000\013\221\013\221\006\138\011\226\011&\000\000\000\000\0112\000\233\000\000\013\221\000\000\000\000\013\221\000\241\013\221\000\000\000\000\000\233\006\154\000\233\000\000\000\000\000\000\011\234\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\221\000\000\011\242\000\000\006\146\000\000\000\000\000\241\000\185\012:\000\000\006r\000\000\000\000\000\000\000\000\000\000\000\000\012\018\011>\000\000\011\250\000\000\012\n
  
  let lhs =
    (16, "\000\012\000\011\000\n\000\t\000\008\000\007\000\006\000\005\000\004\000\003\000\002\000\001\000\000\001\014\001\014\001\014\001\013\001\013\001\013\001\013\001\012\001\012\001\012\001\012\001\012\001\012\001\012\001\012\001\012\001\012\001\012\001\012\001\012\001\012\001\011\001\011\001\011\001\011\001\011\001\011\001\011\001\011\001\011\001\011\001\011\001\011\001\011\001\011\001\n\001\n\001\n\001\n\001\n\001\n\001\n\001\n\001\n\001\n\001\n\001\n\001\n\001\n\001\t\001\t\001\t\001\t\001\t\001\t\001\t\001\t\001\t\001\t\001\t\001\t\001\t\001\t~\000}\000|\000{\000z\000y\000x\000w\000w\000w\000v\000v\000v\000u\000u\000u\000u\000t\000s\000r\000q\000p\000o\000n\000n\000m\000m\000m\000l\000l\000k\000k\000k\000j\000j\000i\000h\000h\000h\000g\000f\000f\000e\000e\000d\000d\000c\000c\000b\000b\000a\000a\000`\000`
  
  let goto =
    ((16, "\002H\000\019\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001/\000\000\001\003\0002\000\000\000\237\000\173\000\000\000\000\000\000\000\022\000\000\000,\000d\000\000\000\000\000\150\000\000\000\198\000\000\000\000\000\000\001`\000\000\001\252\000\000\000\000\000\000\000\000\002\180\000\000\003\206\004Z\000\000\000\000\004\138\000\000\004\246\000\000\000\000\000\000\005\030\000\000\005\148\000\000\005\162\000\000\005\222\005\236\000\000\000\000\005\240\000\000\006>\000\000\000#\000\000\000\000\006\212\000\000\0074\000\000\000\000\007J\000\000\007\150\000\000\000\000\000\000\007\246\000\000\000\238\008\008\0007\000\000\000\000\000\000\002P\000f\000F\000\000\000\000\008B\000\000\n\228\000\000\004\186\000\237#\158\000\000\000\000\021\026\000\000\0026\000\000\002\196)z!\196\011\142!\196\0052&z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\029r\011\142\000\000\000\000'T\000\000)\150\000\000\014\230\000\000\000\000\000\000\000\000\000\232\000\000\029\192\000\000\000\000\000*\000\000\000\164\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\154\000\000\015<\000\000\018\192\000\000\023\202\000\000-\218\000\0005\130\000\0005\228\000\0006&\000\0006V\000\0006\186\000\000)\148\000\000\012v\000\000\000\000\000\000\000\000\000\0006\216\000\0007\006\000\0007\022\000\000\005\248\000\000\000\0004\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\008d\000\000\000\000\008z\000\000\008\244\008\246\000\000\000\000\t:\000\000\tb\000\000\000\000\000\000\tl\000\000\t\138\000\000\000\000\t\158\000\000\t\190\t\192\000\000\000\000\t\218\000\000\t\234\000\000\000\000\000\000\n\028\000\000\n.\000\000\nB\000\000\nF\nN\000\000\000\000\nV\000\000\nZ\000\000\002\192\n`\000\000\nb\000\000\nz\000\000\n\132\000\000\000\000\000\000\n\136\000\000\n\168\000\184\000\000\n\174\000\000\002`\021\136\000\000\005j\000\000\006J\000\000\000\000\000,\000\000\000\000\000u\003(\000\000\000\000\000\000\000\000\003\012\000\000\003r\000\000\002\000\000\000\003\200\000\000\000\000\000\000\000\000\000\000\000\000\007\152\000\000\000\000\000\000\000\000\000m\000\000\000\000\000\000\000\000\000\000\000\000\000\002\003|\002*\000\000\n\178\000\000\n\186\002X\000\000\n\196\000\000\000\000\006R\000\000\000\000\000\000\000\000\000\000\"\168\000\0000\138\000\000\000\000\000\000\0044\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000,\000\000\000\000\000\000\000\000\000\000\000\000\012n&z\000\000\012\178\000\000\016P\tv\000\000\000\000\000\000\004\148\000\000\030\224\000\000\000\0000\144\000\000\000\000\000\000\004\178\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0004\238\000\0005J\000\000\000\000\000\000\000\000\000\191\000\000\000\0000\236\000\000\000\000\000\000\007\138\001*\000\000\000\000\000\000\000\000\000\000\000\000\002d\000\000\004\174\000\000\005n\000\000\t\158\000\000\t\192\000\000\014\026\000\000\016\250\000\000\018\144\000\000\020j\000\000\020\202\000\000*D\000\000\000\146\000\000\022F\000\000\031\020\000\000&\146\000\000\000\000\000\000\000\000\000\000\000Z1@\000\000\002n\000\000\000\000\000\n\001\172\000\000\002\248\000\000\000\000\000\000\017\026\000\000\000\000\000\000&\214\000\000\000\000\000\000\000\000\000\000'`\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\n\206\004\216\000\000\n\214\000\000\000\000\000\000\000\000\000\000\n\216\000\000\000\000\002P\001\240\000\000\002D\000\000\000\000\000\000\004\030\000\000\012R\001\"\n\238\000\000\000\000\n\240\000\000\n\242\n\248\000\000\000\000\n\252\000\000\011\002\000\000\000\000\000\000\011\004\000\000\011\n\000\000\000\000\011\014\000\000\011\024\011\026\000\000\000\000\011$\000\000\011&\000\000\000\000\000\000\0118\000\000\011:\000\000\011<\000\000\011@\011R\000\000\000\000\011X\000\000\011`\000\000\004\248\011n\000\000\011x\000\000\011|\000\000\011~\000\000\000\000\000\000\011\130\000\000\001~\000\000\000\000\011\138\004\246\000\000\011\152\000\000\000\000\002\244\000\000\000\000\000\134\000\000\000\000\000\000\000\000\000\000\005\214\005,\000\000\011\156\000\000\011\160\nb\000\000\012`\000\000\012f\018|\000\000\012j\000\000\000\000\000\000\000\000\000\000\000\000\000\0001z\000\000#*\000\0001\144\000\000\000\000\000\017\000\000\000\000\001r\007\234\000\000\000\000\015@\004T\000\000\008@*b\000\000\000\000'\132\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\196'\132\000\000\020\142\000\000\023\206\018\132(\018\000\000\020\"\000\000\000\000\000\000\006\192\000\000\031\006\000\000\000\0002\018\000\000\000\000\000\000\007:\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0002 \000\0002\150\000\000\000\000\000\000(\156\000\000\000\000\000\000*|\000\000\000\000\000\000\000\000\007\198\000\000\000\000\000\000\000\000\007N\000\000\000\000+\\\000\000\001@\000\000\000\000\000\000\004`\000\000\t\200\000\000\n\144\000\000\014\246\000\000\022v\000\000 :\000\000!\164\000\000#\180\000\000&\154\000\000(|\000\000)$\000\000,\234\000\0000V\000\000\000\000\000\000\000\000\000\000*\206\000\000\017H\000\000\022\210\n\222\000\000+,\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\234\000\000\000\000\000\000\000\000\0038\000\000\006Z\000\000\000\000\008>\000\000\000\000\000\000+.\000\000\000\000\000\000\000\000\000\000\0216\000\000\000\000\000\000\000\000+\130\000\000\000\000\000\000\000\000\003\172\t\234\000\000,\n\000\000\000\000\000\000\000\000\013\168\000\000,$\000\000\000\000\000\000\000\000\001\210\000\000\007>\000\000\018T\000\026(<\000\000\000\000\000\000\006r\000\000\000\000\000\000\000\000\000\000\000\000\030\172(<\000\000\031\n\000\000 \160\007\022\000\000\000\000\000\000\007\200\000\000\031b\000\000\000\0002\206\000\000\000\000\000\000\008\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0005\128\000\0005\164\000\000\000\000\000\000\003z\000\000\000\000\000\000\000\000\000\000\000\000\019^\000\000#\238\000\000'>\000\000'\148\000\000)\200\000\000+z\000\0000N\000\0001|\000\0003\184\000\0005x\000\000,\128\000\000\004\190\000\0006\170\000\0006\232\000\00076\000\000(\192\000\000\000\000\000\0003\030\000\000\000\000\000\000\000\254\000\0003D\000\000\000\000\000\0003\168\000\000\000\000\002\188\000\000\024(\000!\001\174\000\000\003\024\000\000\013Z\002\026\007x\000\000\000\000\000\000\000\000\000\000\000\000\000\0003\194\000\000#X\"\002\008\020\000\000\000\000\000\000-$\000\000-*\000\000-\172\000\000#\140$\016\008\190\0001\0086\000\000\000\000\000\000\003\200\000\000\000\000\001P\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0003\226\000\000\000\000\000\000\000\000 ,\000\000$\226\000\000\000\000\000\000\000\000\000\000\000\000\013\232\000\000\003N\000\000\000\000\000\000\024b\005\018\000\000\024\156\000\000\000\000\013\168\000\000\005\248\000\000\000\000\014>\000\000\024\214\000\000\000\000 \238\000\000\000\000\000\000\n0\000\000\000\000\006\152\000\000\000\000\025\188\000\000\000\000\000\000,\206\000\000\000\000\000\000\025\208\000\000\000\000\000\000\000\000-\178\000\000\000\000\000\000\000\000\005v\016\154\000\000.0\000\000\000\000\000\000\000\000\000\000\000\000\014\180\000\000\000\000\006\022\000\000\015\250\000\000\n0\000\000\000\000\004\138&N\000\000\006\218\000\000\000\000\000\000\000\000\003z\000\000$\248\000\000\0260\004v\026j\000\000\005z\000\000\016p\000\000\016\228\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\028\026\164\005\200\026\222\000\000\000\000\000\000\006D\000\000\017\200\000\000\007N\000\000\000\000\n0\002\180\028r\000\000\007\220\000\000\018>\028\172\000\000\000\000\018\178\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\168\007\178\000\000\007\216\000\000\000\000\000\000\000\000\007\250\000\000\019\152\000\000\000\000\000\000 \0243\232\000\000\000\000\000\000\030~\000\000\000\000\000\000\000\000\002\212\006\154\000\000\000\000.4\000\000\000\000\003\212\000\000\006\190\000\000\000\000\026\000\000\000\000\000\000\000.6\000\000\000\000\000\000\000\000.\140\000\000\000\000\006n\007\000\000\000\000\000.\206\000\000\000\000\007\244!\022\000\000\007L\000\000\000\000.\230\000\000\000\000\000\000\000\000\000\000\000\000\000\000!\020\000\000\000\000\000\000\000\n\000\000\000\000\t\028\000\000\000\000\027\254\000\000\000\000\000\000/\198\000\000\000\000\000\000\000\000/\230\000\000\000\000\007R\tX\000\000\000\000/\236\000\000\000\000\008~\000\000\000\000\000\000\000\000\003z\000\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\238\000\000\020\012\000\000\000\000\000\0004\152\000\000\tH\000\000\000\000\000\000\004\208\000\000\005\206\000\000\000\000\008\132\020\128\000\000\021f\000\000\000\000\000\000\008\156\000\000\n@\008\162\012@\000\000\013\216\000\000\000\000\000\000\008\176\000\000%D\008\206%\210\000\000%\232\000\000\000\000\000\000\008\210\000\000\0164\008\208\000\000\000\000\n\020\008\244\n\254\000\000\019$\000\000\000\000\000\000\t\016\000\000\018\002\t \000\000\000\000\000\000\003\172\000\000\000\000\000\000\004\210\000\000\000\000\000\000\000\000\000\000\000\000\005X\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\\\000\000\000\000\003(\000\000\000\000\013$\000\000\000\000\000\000\000\000\003\196\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013(\000\000\000\000\013\012\000\000\013d\000\000\000\000\000\022\000\000\005d\012\194\002\018\000\000\000\000\006\232\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000~\000I\000\000\000\000\013\194\000\000\000\000\000\000\t*\000\000\000\000\011\226\011\250\000\000\000\000\000\000\000\000\0154\020\222\000{\000\000\024D\000\000\000\000\000\000\000\000\000\000\000\000\003J\000\000\000\000\008\198\000\000\000\000\012\136\000\000\000\000\000)\000\000\000\000\014\014\000\000\000X\000\000\000\000\000\000\000\000\013@\001,\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\158\024x\000\000\000\000\000\000\000\000\029\002\000\000\000\000\024\006\000\000\013B\000\000\000\000\000\000\005\244\000\000\000\188\000\000\000\000\000\000\016\238\000\000\000\000\t\244\031r\000k\000\000\031\132\000\000\000\000\000\000\000\000\013\006\000\000\000\000\000\000\006\200\000\000\008\002\006\252\001\154\000\000\000\000\000\000\000\000\000_\000\000\000\000\000\000\000\000\000\000\000\000\016\016\000\000\000\000\007\020\000\000\004\174\013F\005:\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\026\000\000\000\000\019\222\031\148\000\000\000\000\000\000\000\000\008\016\000\000\005X\011\130\000\000\024<\000\000\000\000\000\000\000\000\000\000\002\162\026\136\000\000\000\000\029\026\000\000\000\000\000\000\000\000\020\168\000\000\030\218\000\000\000\000\000\000\000\000\000c\000\000\000\000\000\000\004\166\000\000\000\000\000\213\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\204\000\000\000\000\000\000\000\147\000\000\000\000\000\000\000\000\000\000\000T\013\184\015\006\017\214\000\000\004\148\t.\t\152\t\222\000\000\000\000\000\000\000\000\000\000\000\000\006\024\021\218\000\000\027\024\008\172\000\000\000\000\t\250\000\000\022\020\000\000)P\000\000\000\000\006*\022N\000\000\028\230\000\000\008,\029 \000\000\000\000\000\000\002\200\015p\000\000\000\000\000\000\000\000\tb\000\000\019f\000\000\005\186\004\018\000\000\000\000\000\000\003\012\000\000\003r\000\000\008\210\000\000\000\000\005\178\000\000\000\000\000\000\000\000\t\130\000\000\000\000\n\016\000\000\023\238\000\000\021P\013\012\000\000\000\000\000\000\000\000\000\000\0032\000\000\000\000\000\000\000\000\000\0000j\000\000\002J\000\000\000\000\000\000\000\000\000\000\000\200\000\000\t\246\t\226\011H\000\000\002\142\011\196\000\000\n&\000\000\003\002\000\000\004r\000\000\004\230\000\000\021P\000\000\000\000\000\000\000\000\000\000\005Z\000\000\n2\000\000\006\202\000\000\021P\013n\000\000\000[\000\000\013\\\012\\\000\000\008\208\000\000\t2\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\004\000\000\n(\000\000\000\000\000\000\000\000\000\000\000\000\013x\000\000\000\000\012\144\000\000\000\000\012z\008\246\013\184\000\000\013\188\000\000\000\000\006\146\003\238\000\000\012\160\000\000\000\000\012\230\000\000\000\000\000\000\000\000\000\000\000\000\013\178\000\000\000\000\000\000\012\194\012\178\n\030\t\180\012\206\013\006\000\000\000\000\012\190\n,\nf\012\228\013\"\000\000\000\000\t\152\000\000\000\000\000\000\000\000\013\240\000\000\000\000\000\000\013\242\000\000\000\000"), (16, "\003l\003\131\000\018\005\244\000_\000a\001\225\000e\005\159\005i\005j\005\141\006\254\006;\006<\000_\005\224\005i\005j\002\164\004Y\004A\0062\000_\005\241\005\177\006\255\002\164\000\017\003l\003\131\006@\0017\005\142\005i\005j\005:\000\138\001g\000\004\001h\000\149\001\212\000\025\000g\006E\001\140\005\178\006F\005\181\005i\005j\005z\000_\000J\004\019\000_\003n\003l\003\131\000\007\003o\000\005\003N\006J\006o\000_\000a\000b\000e\005k\006p\001B\000_\005x\000\024\003:\006q\005k\004\018\005{\005i\005j\000\005\000\140\006\026\003n\006C\0026\001g\003o\001h\000\140\000\140\002=\005k\001i\000\141\000\138\001.\001j\000\142\000\149\0010\005\191\005\192\000g\0028\004\136\001\141\003\136\005k\001\181\004\019\0064\003n\003l\003\131\001\"\003o\006C\001\192\000J\000_\000a\001\t\000e\000\151\001w\006\169\003\231\000_\001\027\005\242\005\193\006q\006\170\004\018\0029\003\136\003\197\003\198\005k\005\194\000\140\001\213\003\253\001i\003U\007\007\000_\001j\001\194\000\140\005\191\005\192\003|\006 \000\141\006s\001\186\004\002\000\142\000g\000K\004\003\004\020\0024\003}\004\138\004g\004\019\000\028\003n\004\020\001\012\002=\003o\006t\001w\004U\003\232\006\189\000 \005\215\003|\000h\000J\000\151\004.\001/\001\188\001\214\005\194\001/\006*\004\007\003}\000\004\001\015\004B\0016\004a\005\145\003\253\000\152\001x\004\028\005\008\003\138\004x\000\031\0049\003\140\003|\004\028\000_\005\195\004!\004\002\0049\000\005\000_\004\003\004\020\006u\003}\000\153\003\197\003\198\004\224\000\008\001\217\006\190\006v\003\141\000\"\001\012\006\143\000J\003\142\001%\003\140\0011\003\143\000_\001\028\001\181\001\029\003\144\000\203\001\229\000\154\000\203\004\007\005\240\002\165\001x\004\023\006\145\000$\001\015\003\253\0016\003\141\004\028\000\152\004\252\006\147\003\142\0049\003\140\003|\003\143\001}\000\155\005\241\004\002\003\144\000_\000\194\004\003\004\020\006\191\003}\003l\003\131\000_\000\153\000\157\001\143\002H\006v\003\141\001\012\001\213\006\193\000\144\003\142\001g\000_\001~\003\143\001\172\002\164\004Y\004A\003\144\000_\000a\0019\000e\004\007\000\154\005~\002\246\004\023\006\195\001\015\002,\0016\000_\001g\004\028\001h\001\145\006\197\000_\0049\003\140\001\223\000_\000a\001>\000e\000_\000\155\000(\001\013\001\148\004\019\000\156\003n\003l\003\131\001\189\003o\000\203\000g\003\234\000\157\003\141\001\"\001\141\000\140\003\200\003\142\001i\000_\006\026\003\143\001j\006q\006\175\004A\003\144\001\027\000g\002=\002\245\001g\000g\001\203\002H\000\138\000g\006\163\000\140\000\147\006\164\001i\003\236\004z\005\251\001j\005\242\001\131\000_\006A\001w\005\188\006M\005\004\000_\004h\003\136\005\127\001\181\004\019\0026\003n\003l\003\131\004\246\003o\005\252\005\255\005i\005j\003\197\003\198\003-\001w\003F\006\186\000*\000_\001\189\002:\000\203\006q\006\175\004A\000J\003)\000\140\001\186\002\165\001i\000\140\006\168\003\253\001j\004\163\000\141\000_\003\197\003\198\000\142\006\"\001\191\003|\000\203\005e\000J\000\013\004\002\005\245\001\234\0029\004\003\004\020\000_\003}\004\132\004j\004\019\001\187\003n\005f\001w\000J\003o\002\166\000\151\004U\001\236\001x\005k\006%\000\016\000\017\006\180\005\168\001\231\001%\000\203\001&\001\204\001\012\001\028\004\007\001\029\003:\000\203\004B\006C\004a\005\006\003\253\001x\001\134\004\028\006\155\006\156\004x\001\192\0049\003\140\003|\001\026\0017\001\012\001\015\004\002\0016\005\130\000/\004\003\004\020\006\181\003}\000J\001\144\001\027\000_\001\233\000J\000\203\006v\003\141\005h\001\015\004\005\0016\003\142\001\015\001\193\0016\003\143\001\015\001E\0016\000\251\003\144\001\145\003\199\005f\001x\004\007\001\146\003G\000\152\004B\001\147\006\183\006\160\003\253\006N\001\148\004\028\006\240\000_\006\185\000h\0049\003\140\003|\001\145\006B\001\186\003:\004\002\004\n\000\153\002H\004\003\004\020\006\181\003}\002\193\001-\001\150\002\197\000\005\006(\002\193\006v\003\141\002\197\001\"\004\005\006r\003\142\003F\003l\003\131\003\143\004\169\000\183\004\186\003\139\003\144\000h\001\027\004\247\003;\004\007\003*\005o\000_\004B\006C\006\183\006q\006\175\004A\004[\004\028\000J\002;\006\185\000\155\0049\003\140\001g\000\184\001h\006~\004\249\000\185\006R\001(\003l\003m\002\238\000\157\001<\001\028\002\198\001\029\000\140\000\203\002\199\005p\002\198\003\141\003@\003\233\002\199\004\019\003\142\003n\003l\003\131\003\143\003o\005\169\0003\000\203\003\144\000_\000a\001\219\000e\003D\006\182\000J\000_\006\005\005Z\006\006\006q\006\175\004A\005\172\000_\000a\0020\000e\000\140\000h\000J\001i\003;\004\015\000J\001j\000\140\001\237\003n\001g\005[\001~\003o\004\016\005^\005i\005j\003\232\006\007\000g\004P\000_\000a\002?\000e\001\236\004\019\006\008\003n\003l\003\131\001$\003o\001w\000g\000J\001\028\002\239\001\029\001g\000\203\001h\006\184\004\181\000_\000\004\0002\001O\006q\006\175\004A\004R\0066\0067\002\212\003\019\003$\003\022\0017\003\253\002\212\000g\005q\002\242\000\140\004[\002\213\001i\000\005\003|\0005\001j\002\213\006\127\004\002\006\128\005k\000\203\004\003\004\020\006\181\003}\005X\005Y\004\019\003\025\003n\004c\000_\006v\003o\002\245\000J\004\005\000\140\001l\001\131\001i\004:\001w\006\192\001j\000_\005\007\004m\006V\002\164\003|\000\138\004\007\001u\001x\000\149\004B\000h\006\183\005\133\003\253\004\022\003}\004\028\003\197\003\198\006\185\0007\0049\003\140\003|\004\016\001w\003\197\003\198\004\002\004G\005\213\002\247\004\003\004\020\006\181\003}\004\251\002\247\003N\004\016\000;\002\031\000J\006v\003\141\002\248\001\012\004\005\005\134\003\142\006\134\002\250\005\211\003\143\001\215\005\214\005i\005j\003\144\000\140\003\168\001\012\004m\004\007\000\141\003l\003m\004B\000\142\006\183\001\015\003\253\0016\001x\004\028\001\145\005l\006\185\0017\0049\003\140\003|\003\141\005q\001\132\001\015\004\002\0016\001\012\001\152\004\003\004\020\006\181\003}\000\151\005\006\003\144\001\134\000h\000=\000J\006v\003\141\001x\000J\004\005\000?\003\142\000J\003l\003\131\003\143\001\015\004^\0016\006\131\003\144\005k\004\187\001\144\000\140\004\007\003n\005\t\000_\004B\003o\006\183\006q\006\175\004A\000J\004\028\006\002\005\235\006\185\000C\0049\003\140\000J\000J\001\145\0014\000B\006Z\000E\001\146\003l\003m\004\020\001\147\004o\002B\006h\000J\001\148\005\233\005\129\000J\000J\003\141\005\236\005i\005j\004\019\003\142\003n\003l\003\131\003\143\003o\001\145\000\152\006\136\003\144\002\193\005\254\006\127\002\197\006\128\006\196\000\203\000_\005\008\000G\001\154\002\164\004Y\004A\005\241\004\028\000J\0017\004!\000\153\0049\003l\003\131\005\252\005\255\005i\005j\000\140\006\241\003n\001g\006\132\001~\003o\005]\000h\000_\004P\004r\000h\002\164\004Y\004A\000h\000\154\000J\003|\004\019\005k\003n\003l\003\131\000_\003o\000J\002\238\005[\004\230\003}\002\198\005^\005i\005j\002\199\005\127\000_\002x\000\155\004Q\002\164\004Y\004A\000\193\004u\000h\000h\004\019\004\249\003n\001\018\003\253\000\157\003o\001C\000L\000\140\005k\0030\001i\002\143\003|\004z\001j\000h\002\201\004\002\004\147\006\248\004u\004\003\004\020\006\181\003}\006\026\004w\004\019\004\016\003n\003\197\003\198\006v\003o\002=\002\166\004\005\000J\000J\001\"\004%\004\164\001w\002\193\005k\005\247\002\219\003\130\000h\005\251\003|\004v\004\007\001\027\000N\000J\004B\000_\006\183\004\172\003\253\002\239\003}\004\028\004\141\000Q\006\185\000J\0049\003\140\003|\005\252\005\255\005i\005j\004\002\000J\002\210\002\212\004\003\004\020\002\241\003}\004\255\004g\004}\000h\002\242\004\141\003\253\002\213\003\141\004\188\000J\004\005\004\143\003\142\005\248\000\140\003|\003\143\004\236\002\198\000S\004\002\003\144\002\199\006^\004\003\004\020\004\007\003}\004e\004g\004B\002\245\004a\004\016\003\253\004\142\001x\004\028\001\"\004\005\004!\000_\0049\003\140\003|\003~\004\197\005\249\004\238\004\002\005k\006\027\001\027\004\003\004\020\004\007\003}\004\140\004g\004B\001\142\004a\005\171\002\236\003q\003\141\004\028\000W\004\005\004!\003\142\0049\003\140\006m\003\143\002\247\001\228\000J\001%\003\144\001+\000h\001\144\001\028\004\007\001\029\004\236\000\203\004B\002\248\004a\003l\003\131\003z\003\141\004\028\006\214\006R\004!\003\142\0049\003\140\003\215\003\143\001\145\000d\000_\005\141\003\144\001\146\002\164\004Y\004A\001\147\001g\002\212\001h\004\237\001\148\003\230\003l\003\131\000\205\003\141\000J\002\167\005\016\002\213\003\142\005\142\005i\005j\003\143\000\208\001g\000_\001h\003\144\005\019\002\164\004Y\004A\005\026\003+\005\018\006\214\004\019\002H\003n\005\029\006R\001g\003o\001h\000J\002\193\005\018\006\030\002\197\000\140\005\028\001%\005$\0033\005'\005*\001\028\005\028\001\029\000\140\000\203\007\015\001i\006\238\006\133\004\019\001j\003n\003l\003\131\005&\003o\005&\005\028\0052\006R\007\016\003\234\006\172\000\140\006a\005k\001i\000_\000\212\000\211\001j\006q\0055\004\018\004\016\006\144\0054\005\232\001w\0058\000\140\002\166\000_\001i\000\140\004\016\002\164\001j\002\198\001g\0054\001~\002\199\003\237\003\238\003\240\006\172\005\028\001w\005\233\006\221\000J\006\172\000\214\005\236\005i\005j\004\019\000h\003n\005\169\003\253\000\203\003o\006\187\001w\002\166\000_\000a\002D\000e\003|\003N\000\216\006\214\006\188\004\002\006U\000\220\002\193\004\003\004\020\002\197\003}\005\003\004g\003:\005\250\000h\006\132\003\253\007\003\006\214\000\222\000\140\004\005\006x\001i\006\178\006\215\003|\001j\004\215\000\225\006\194\004\002\001x\000g\006\249\004\003\004\020\004\007\003}\006\141\004g\004B\005k\004a\002\193\000\229\000\228\002\197\004\028\005\148\004\005\004!\001x\0049\003\140\001w\006T\001\192\004\231\000\231\000\140\002\212\000_\000f\002\198\000e\004\007\000\233\002\199\001x\004B\007\002\004a\002\213\003\253\000_\003\141\004\028\007\t\002\164\004!\003\142\0049\003\140\003|\003\143\006\248\000h\001\194\004\002\003\144\006S\000\237\004\003\004\020\006\174\003}\003l\003\131\002\238\001y\000\239\000g\002\198\006v\003\141\007\n\002\199\006\177\004\020\003\142\000\241\000_\000\245\003\143\003N\006q\000\244\004\018\003\144\001\145\000\247\000h\000\249\004\007\004.\000\252\000\254\004\023\006\179\006\217\003H\000\138\001x\001\156\004\028\000\147\001\145\006\185\001\000\0049\003\140\002\247\005-\001\002\006\011\001\006\000_\006\219\003L\004\028\001\158\004\019\004!\003n\0049\002\252\005\021\003o\003l\003\131\002\212\001F\003\141\001\012\001\011\0043\001;\003\142\005\177\006\173\001A\003\143\002\213\000_\006\248\001@\003\144\006q\001\144\004\018\001\222\006\249\002\239\0047\001\221\001\227\000\140\001\015\006\249\0016\005\178\000\141\005\181\005i\005j\000\142\001\241\001\244\001\248\002\212\001\145\001\247\003\029\001\250\005\141\001\146\001\252\002\000\002\242\001\147\002\002\002\213\002\005\004\019\001\148\003n\005\141\002\t\002\008\003o\001g\000\151\001~\002\011\002\013\004\020\005\142\005i\005j\003l\003\131\006\176\001\012\002\017\002\019\002\021\002\245\002\025\005\142\005i\005j\002\247\003\253\001g\000_\001|\002\024\000\138\002\164\002\027\004\018\000\139\003|\002\029\005k\002\254\001\015\004\002\0016\005/\002 \004\003\004\020\006\174\003}\002\"\004\028\002$\002&\004!\002*\0049\006v\003 \0023\000\140\006\177\001g\001i\001{\002\247\0022\001j\002A\004\019\002G\003n\002F\005k\002\138\003o\002J\004\007\002M\002\248\002Q\004\023\006\179\000\140\000\152\005k\001i\000\140\004\028\003\253\001j\006\185\000\141\0049\003\140\001w\000\142\002P\002S\003|\002U\001T\002Y\005\011\004\002\002[\000\153\004\135\004\003\004\020\006\174\003}\002^\002b\002a\002d\003\141\000\140\001w\006v\001i\003\142\000\151\006\177\001j\003\143\001\195\002f\000\203\002j\003\144\000\183\000_\000a\002\134\000e\002l\002n\002r\004\007\002q\002t\002v\004\023\006\179\005\201\003l\003\131\002y\002{\004\028\002}\001w\006\185\000\155\0049\003\140\002\127\000\184\002\131\003\253\000_\000\185\002\137\002\136\002\164\002\142\004\018\000\157\002\148\003|\002\147\000g\001x\005c\004\002\005w\005\139\003\141\004\003\004\020\005\154\003}\003\142\005v\005\132\005\174\003\143\005\190\005\209\005\231\006\004\003\144\005\152\004|\006\153\001x\005\023\005x\006\199\000\152\004\019\006\203\003n\005{\005i\005j\003o\000_\001g\004\007\001~\006M\006\222\004\023\004~\006\226\003l\003\131\001\144\002\166\004\028\000\153\006\231\004!\004\011\0049\003\140\006\232\005\144\001x\006\237\000_\006\236\006\244\004\133\002\164\004\013\004\018\004\135\000J\001\145\001g\006\246\001h\006\252\001\146\000\181\007\000\003\141\001\147\005\142\005i\005j\003\142\001\148\007\001\007\004\003\143\007\005\003l\003\131\007\008\003\144\000\140\005\180\005k\001i\007\011\004\025\000\155\001j\004\019\007\012\003n\000_\007\020\007\024\003o\002\164\004\026\004A\000\000\000\000\000\157\000\000\000\000\005\178\000\000\005\181\005i\005j\003\253\000_\000a\002\140\000e\000\140\000\000\001w\001i\000\000\003|\001\012\001j\000\000\000\138\004\002\000\000\000\000\000\139\004\003\004\020\005k\003}\004\019\000\000\003n\000\000\003l\003\131\003o\000\000\000\000\000\000\000\000\004|\001\015\004D\0016\000\000\000\000\001w\000g\000_\000\000\000\000\000\000\002\164\004\026\004A\000\000\004\007\000\000\000\138\000\000\004\023\004~\000\139\000\000\000h\005k\002\193\004\028\000\000\002\197\004!\000\000\0049\003\140\000\000\000\140\000\000\003\253\000\000\000\000\000\141\000\000\005\135\006X\000\142\000\000\000\000\003|\004\019\000_\003n\001x\004\002\006M\003o\003\141\004\003\004\020\000\000\003}\003\142\000\138\000\000\000\138\003\143\000\139\000\000\000\147\003O\003\144\000\151\004F\000\000\000\140\000\000\005\025\000\000\006O\000\141\000\203\003\253\000\140\000\142\000\000\001x\002\198\003S\004\007\005\141\002\199\003|\004\023\004H\000\000\000\000\004\002\000\000\001\144\004\028\004\003\004\020\004J\003}\0049\003\140\000\000\006R\000\000\000\151\000\000\005\142\005i\005j\000\000\004\005\000\000\000\140\000\000\000\140\001\145\000\000\000\141\002\166\000\141\001\146\000\142\003\141\000\142\001\147\002\193\004\007\003\142\002\218\001\148\004B\003\143\004C\000\000\001\012\003\253\003\144\004\028\003:\000\000\004!\000\000\0049\003\140\000\152\003|\000\000\000\151\001\145\000\151\004\002\000\000\003l\003\131\004\003\004\020\000\000\003}\001\015\000\000\0016\004I\001\160\000\000\000\000\003\141\000\153\000_\005k\004\005\003\142\002\164\004\026\004A\003\143\000\000\000\000\000\000\002\212\003\144\000\140\001g\000\152\001~\002\198\004\007\000\000\000\000\002\199\004B\002\213\004C\000\000\005\251\000\000\001g\004\028\001z\005\251\004!\000\000\0049\003\140\000\000\000\153\000\000\006W\004\019\000\000\003n\000\000\003l\003\131\003o\000\155\005\252\005\255\005i\005j\003&\005\252\005\255\005i\005j\003\141\000\152\000_\000\152\000\159\003\142\002\164\004Y\004A\003\143\000\000\000\000\000\140\000\000\003\144\001i\006O\000\000\000\203\001j\002\234\000\000\000\000\000\153\000h\000\153\000\140\003;\001Q\001i\000\000\000\000\000\000\001j\006V\002\247\000\000\000\000\000\000\000\000\000\000\000\000\004\019\002\166\003n\003l\003\131\001w\003o\003\000\000\183\000\000\005\165\000\000\005k\000\000\001g\002\212\001h\005k\000_\001w\000\000\000J\002\164\004Y\004A\000\000\003@\002\213\000\000\000\155\000\138\000\155\003\253\000\000\000\139\000\184\000\000\005\177\000\000\000\185\000\000\000\000\003|\000\161\003D\000\157\000\000\004\002\000\000\000\000\000\000\004\003\004\020\002\193\003}\000\000\002\197\000\000\004\019\005\178\003n\005\181\005i\005j\003o\000\000\004\005\000\000\000\000\000\140\000\000\000\000\001i\000\000\000\000\000\000\001j\000\000\000\000\000\000\000\000\000\000\004\007\001x\000\000\000\140\004B\000\000\004C\000\000\000\141\003\253\000\000\004\028\000\142\000\000\004!\001x\0049\003\140\000\000\003|\000\000\000\000\001w\000\000\004\002\005)\002\238\000\000\004\003\004\020\002\198\003}\000\000\004`\002\199\003l\003\131\006\t\000\151\003\141\000\000\005k\006\014\004\005\003\142\000\000\000\000\001\144\003\143\000h\000_\000\000\000\000\003\144\002\164\004Y\004A\000_\000\000\004\007\000\000\006M\000\000\004B\001g\004a\001~\003\253\000\000\001\145\004\028\000\000\000\000\004!\001\146\0049\003\140\003|\001\147\000\000\000\000\000\000\004\002\001\148\000\000\000\000\004\003\004\020\000\000\003}\004\019\004b\003n\004;\003l\003\131\003o\000\000\003\141\000\000\001x\004\005\000\000\003\142\000\000\003l\003\178\003\143\000\000\000_\002\239\004?\003\144\002\164\004\127\004A\000\152\004\007\000\000\000\140\000\000\004B\001i\004a\000\000\000\000\001j\002\212\004\028\002\193\003\026\004!\002\197\0049\003\140\001g\002\242\001h\000\153\002\213\000_\000a\002\145\000e\000\000\000\000\000\000\005\219\000\000\004\019\000\000\003n\003l\003\131\001w\003o\003\141\000\000\003\028\000\138\000\140\003\142\003n\000\139\002\245\003\143\003o\000_\001\145\000\000\003\144\002\164\004\127\004A\000\000\000\000\000\000\000\000\000\000\000\000\000g\003\253\001\162\000\000\000\140\004\129\001\197\000\000\002\198\000\000\000\140\003|\002\199\001i\000\000\000\000\004\002\001j\000\000\000\000\004\003\004\020\003\"\003}\000\000\004t\000\000\004\019\002\247\003n\000\000\000\000\000\000\003o\000\140\004\005\000\000\000\000\006N\000\141\000\000\000\000\002\248\000\142\000_\001w\000\000\000\000\002\164\000\000\000\000\004\007\001x\000\000\000\000\004B\000\000\004a\003l\003m\003\253\000\000\004\028\004\131\000\000\004!\000\000\0049\003\140\000\151\003|\000\000\006O\000\000\000\203\004\002\0057\000_\000\000\004\003\004\020\003|\003}\000\000\003N\000\000\000\000\003l\003\131\000\000\003\141\000\000\000\000\003}\004\005\003\142\004\149\000\000\001\144\003\143\000\000\000\000\000_\000\000\003\144\002\212\002\164\004\026\004A\000\000\004\007\000\000\000\000\000\140\004B\003n\004\130\002\213\003\253\003o\001\145\004\028\000\000\001x\004!\001\146\0049\003\140\003|\001\147\000\000\001\012\000\000\004\002\001\148\000\000\000\000\004\003\004\020\000\000\003}\000\000\004\019\006\134\003n\003l\003\131\000\152\003o\003\141\000\000\005\177\004\005\000\000\003\142\001\015\002\193\0016\003\143\002\197\000_\000\000\000\000\003\144\002\164\000\000\004\018\000\000\004\007\000\153\000\000\000\000\004B\005\178\004\130\005\181\005i\005j\000\000\004\028\000\000\000\000\004!\000\000\0049\003\140\002\215\000\000\000\000\000\000\000\000\001\145\001g\000\000\001h\004\020\000\000\000\000\000\000\000\000\004\019\000\000\003n\003l\003\131\001\164\003o\003\141\000\000\000\000\002\193\000\140\003\142\002\217\003|\002\198\003\143\000\155\000_\002\199\000\000\003\144\002\164\000\000\004\018\000\000\003}\000\000\000\000\0051\000\000\000\163\000\000\003\253\004\253\000\000\004\028\005k\004\135\004!\001g\0049\001h\003|\000\000\000\000\000\000\000\140\004\002\005\232\001i\000\000\004\003\004\020\001j\003}\000\000\000\000\004\019\000\000\003n\000\000\000\000\000\000\003o\000\140\006\137\004\005\006\138\002\198\006\127\005\233\006\128\002\199\000\203\000\000\005\236\005i\005j\000\000\000\138\005\141\001w\004\007\001\209\000\000\000\000\004B\000\000\004C\000\000\003\253\005\013\003\141\004\028\000\140\004\135\004!\001i\0049\003\140\003|\001j\005\142\005i\005j\004\002\003\146\000\000\000_\004\003\004\020\002\212\003}\000\000\000\000\000\000\000\000\003l\003\131\000\000\000\000\003\141\000\000\002\213\004|\006R\003\142\000\000\000\000\001w\003\143\000\000\000_\000\000\000\140\003\144\002\164\005k\004\018\000\141\004\007\002\166\006\020\000\142\004\023\004~\000\000\000\000\003\253\000_\001\014\004\028\000e\000\000\004!\000\000\0049\003\140\003|\001x\000\000\003:\000\000\004\002\005k\002\212\000\000\004\003\004\020\000\151\003}\000\000\004\019\001\"\003n\003l\003\131\002\213\003o\003\141\000\000\000\000\004|\000\000\003\142\000\000\000\000\001\027\003\143\000g\000_\000\000\002\214\003\144\002\164\000\000\004\018\000\000\004\007\000\000\000\000\000\000\004\023\004~\003l\003\131\005\015\001x\000\000\004\028\004\135\000\000\004!\006c\0049\003\140\000\000\000\000\000\000\000_\000\000\000\000\000\000\002\164\004\026\004A\000\000\001\145\000\000\001g\004\019\001h\003n\003l\003\131\000\000\003o\003\141\000\000\000\000\006/\001\166\003\142\000\000\000\000\000\000\003\143\000\152\000_\000\000\000\000\003\144\002\164\002\193\004\018\000\000\002\197\000\000\000\000\004\019\000\000\003n\000\000\003\253\006[\003o\000\000\000\000\004\135\000\153\000\000\000h\005\163\003|\004.\001\145\000\000\000\000\004\002\000\000\000\000\006V\004\003\004\020\000\140\003}\000\000\001i\004\019\001\168\003n\001j\000\000\000\000\003o\000\000\001%\004|\003=\002\193\000\000\001\028\002\197\001\029\000\000\000\203\000\000\000\000\000\140\000\000\000\000\000\000\002\198\004\007\000\000\0043\002\199\004\023\004~\001w\001\012\003\253\006i\000\000\004\028\000\000\004\135\004!\000\000\0049\003\140\003|\000\000\0047\000\000\000\000\004\002\000\000\000\000\000\000\004\003\004\020\000\000\003}\001\015\000\000\0016\000\000\000\000\000\000\003\253\000\000\003\141\000\000\002\238\004|\000\000\003\142\002\198\000\000\003|\003\143\002\199\000\000\000\000\004\002\003\144\000\000\000\000\004\003\004\020\004\007\003}\000\000\000\000\004\023\004~\000\000\000\000\003\253\000\000\000\000\004\028\000\000\004\005\004!\000\000\0049\003\140\003|\000\000\000\000\000\000\000\000\004\002\000\000\000\000\001x\004\003\004\020\004\007\003}\000\000\000\000\004B\000\000\004C\000\000\000\000\002\212\003\141\004\028\000\000\004|\004!\003\142\0049\003\140\000\000\003\143\000\000\002\213\000\000\000\138\003\144\002\193\000\000\000\139\002\216\004\007\000\000\000\000\000\000\004\023\004~\000\000\000\000\000\000\002\239\003\141\004\028\003l\003\131\004!\003\142\0049\003\140\000\000\003\143\000\000\006\146\000\000\000\000\003\144\000\000\002\212\000_\000\000\003\026\000\000\002\164\004\026\004A\000\000\002\242\001\145\000\000\002\213\003\141\004\144\003l\003\131\000\000\003\142\000\000\000\000\000\000\003\143\000\140\001\174\000\140\005\210\003\144\000\141\002\198\000_\003\028\000\142\002\199\002\164\002\247\004A\002\245\000\000\000\000\000\000\004\019\000\000\003n\003l\003\131\000\000\003o\005\211\003\002\000\000\005\214\005i\005j\000\000\005\251\004E\000\000\000\151\000_\005\141\000\000\000\000\002\164\000\000\004\018\000\000\000\000\000\000\000\000\004\019\000\000\003n\003l\003\131\003!\003o\005\252\005\255\005i\005j\002\247\005\142\005i\005j\004\017\005\141\000\000\000_\000\000\000\000\000\000\002\164\000\000\004\018\002\248\000\000\000\000\000\000\004\019\000\000\003n\003l\003\131\000\000\003o\000\000\000\000\005\142\005i\005j\000\000\000\000\005k\004\027\000\000\000\000\000_\000\000\000\000\000\000\002\164\000\000\004\018\000\000\000\000\002\212\000\000\004\019\000\000\003n\000\000\003\253\000\000\003o\000\000\000\152\000\000\002\213\000\000\005k\000\000\003|\000\000\005k\000\000\000\000\004\002\000\000\000\000\000\000\004\003\004\020\000\000\003}\000\000\000\000\004\019\000\153\003n\000\000\003\253\000\000\003o\000\000\000\000\004\005\000\000\000\000\000\000\005k\003|\000\000\000\000\000\000\000\000\004\002\000\000\000\000\000\000\004\003\004\020\004\007\003}\000\000\000\000\004B\000\000\004C\000\000\003\253\000\000\000\000\004\028\000\000\004\146\004!\000\000\0049\003\140\003|\000\000\000\000\000\000\000\000\004\002\000\155\000\000\000\000\004\003\004\020\004\007\003}\000\000\000\000\004B\000\000\004\148\005\216\003\253\000\165\003\141\004\028\000\000\004\021\004!\003\142\0049\003\140\003|\003\143\000\000\000_\000\000\004\002\003\144\000\000\000\000\004\003\004\020\004\007\003}\000_\000\000\004\023\004\024\000\000\006\028\003\253\000\000\003\141\004\028\005\161\004\021\004!\003\142\0049\003\140\003|\003\143\000\000\000\000\000\000\004\002\003\144\000\000\000_\004\003\004\020\004\007\003}\000\000\000\000\004\023\004\024\003l\003\131\000\000\005\199\003\141\004\028\000\000\004\021\004!\003\142\0049\003\140\000\000\003\143\000\000\000_\000\000\000\000\003\144\002\164\000\000\004\018\001\"\004\007\000\000\000\000\000\000\004\023\004\024\003l\003\131\000\000\001\"\003\141\004\028\000\000\001\027\004!\003\142\0049\003\140\000\000\003\143\000\000\000_\000\000\001\027\003\144\002\164\000\000\004\018\000\000\000\000\000\000\000\000\004\019\001\"\003n\003l\003\131\000\000\003o\003\141\000\000\000\000\000\000\000\000\003\142\000\000\000\000\001\027\003\143\000\000\000_\005\251\000\000\003\144\002\164\000\000\004\018\000\000\000\000\000\000\000\000\004\019\000\000\003n\003l\003\131\000\000\003o\000\000\000\000\000\000\000\000\000\000\005\252\005\255\005i\005j\000\000\000\000\000_\000\000\000\000\000\000\002\164\000\000\004\018\000\000\000\000\000\000\000\000\004\019\000\000\003n\003l\003\131\000\000\003o\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006_\000\000\000\000\000\000\000_\000\000\000\000\000\000\002\164\000\000\004\018\000\000\000\000\000\000\000\000\004\019\000\000\003n\001%\003\253\004(\003o\000\000\001\028\000\000\001\029\000\000\000\203\001%\003|\0040\000\000\005k\001\028\004\002\001\029\000\000\000\203\004\003\004\020\000\000\003}\000\000\000\000\004\019\000\000\003n\004d\003\253\000\000\003o\000\000\001%\004]\004\175\000\000\000\000\001\028\003|\001\029\000\000\000\203\000\000\004\002\000\000\000\000\000\000\004\003\004\020\004\007\003}\000\000\000\000\004\023\004_\000\000\004\\\003\253\000\000\000\000\004\028\000\000\004]\004!\000\000\0049\003\140\003|\000\000\000\000\000\000\000\000\004\002\000\000\000\000\000\000\004\003\004\020\004\007\003}\000\000\000\000\004\023\004_\004p\000\000\003\253\000\000\003\141\004\028\000\000\004q\004!\003\142\0049\003\140\003|\003\143\000\000\000_\000\000\004\002\003\144\000\000\000\000\004\003\004\020\004\007\003}\000\000\000\000\004\023\004s\000\000\004n\003\253\000\000\003\141\004\028\006#\004]\004!\003\142\0049\003\140\003|\003\143\000\000\000\000\000\000\004\002\003\144\000\000\000\000\004\003\004\020\004\007\003}\000\000\000\000\004\023\004_\003l\003\131\000\000\000\000\003\141\004\028\000\000\006`\004!\003\142\0049\003\140\000\000\003\143\000\000\000_\000\000\000\000\003\144\002\164\000\000\004\018\001\"\004\007\000\000\000\000\000\000\004\023\006b\003l\003\131\000\000\000\000\003\141\004\028\000\000\001\027\004!\003\142\0049\003\140\000\000\003\143\000\000\000_\000\000\000\000\003\144\002\164\000\000\004\018\000\000\000\000\000\000\000\000\004\019\000\000\003n\003l\003\131\000\000\003o\003\141\000\000\000\000\000\000\000\000\003\142\000\000\006k\000\000\003\143\000\000\000_\000\000\000\000\003\144\002\164\000\000\004\018\000\000\000\000\000\000\000\000\004\019\000\000\003n\003l\003\131\000\000\003o\000\000\000\000\004{\000\000\000\000\000\000\000\000\006n\000\000\000\000\000\000\000_\005\141\000\000\000\000\002\164\000\000\004\018\000\000\000\000\000\000\000\000\004\019\005\251\003n\000\000\000\000\000\000\003o\000\000\000\000\004\128\000\000\000\000\005\142\005i\005j\000\138\000\000\000\000\000\000\001V\000\000\000\000\000\000\005\252\005\255\005i\005j\000\000\000\000\004\019\000\000\003n\001%\003\253\004\218\003o\000\000\001\028\000\000\001\029\000\000\000\203\000\000\003|\000\000\000\000\000\000\000\000\004\002\000\000\000\000\000\000\004\003\004\020\000\138\003}\000\000\000\000\000\147\000\000\000\000\000\000\003\253\000\000\000\000\000\000\000\000\004|\000\000\000_\000\140\000\000\003|\000\000\005k\000\141\000\000\004\002\000\000\000\142\000\000\004\003\004\020\004\007\003}\000\000\005k\004\023\004~\000\000\000\000\003\253\000\000\000\000\004\028\000\000\004|\004!\000\000\0049\003\140\003|\000\000\000\000\000\000\000\151\004\002\000\000\000\000\000\140\004\003\004\020\004\007\003}\000\141\000\000\004\023\004~\000\142\000\000\003\253\000\000\003\141\004\028\000\000\006`\004!\003\142\0049\003\140\003|\003\143\000\000\000\000\000\000\004\002\003\144\000\000\000\000\004\003\004\020\004\007\003}\000\000\000\151\004\023\006b\000\000\000\000\003l\003\131\003\141\004\028\000\000\006`\004!\003\142\0049\003\140\000\000\003\143\000\000\000\000\000\000\000_\003\144\000\000\000\000\004\162\000\000\004\007\000\000\003l\003\129\004\023\006b\000\000\000\000\000\000\000\000\003\141\004\028\005\204\000\152\004!\003\142\0049\003\140\000\000\003\143\000\000\004\193\000\000\006&\003\144\000\000\000\000\000\000\000\138\000\000\000\000\000\000\000\147\000\000\004\196\000\153\003n\000\000\000\000\003\141\003o\000\000\000\000\000_\003\142\000\000\000\000\000\138\003\143\003l\003\128\000\147\000\152\003\144\001g\005\251\001h\000\140\004\202\003n\000\000\000\000\000_\003o\000\000\000\000\000\197\000\198\000\200\000\201\000\000\000\000\000\000\000\000\000\153\000\000\000\000\005\252\005\255\005i\005j\000\000\000\000\000\140\000\000\000\000\004\239\000\000\000\141\003\136\000\000\001\181\000\142\000\138\000\202\000\000\000\203\000\147\000\000\000\183\000\000\000\000\000\140\000\000\000\140\000\000\003n\000\141\000_\000\140\003o\000\142\001i\000\000\000\000\000\000\001j\000\000\000\151\000\000\000\000\000\000\000\155\000\000\000\000\000\000\000\184\000\000\000\000\000\000\000\185\000\000\005\141\000\000\000\000\003|\000\157\000\151\001G\000\000\005k\005\141\000\000\000\000\001w\004\203\000\000\003}\000\140\005\141\000\000\000\000\000\000\000\141\005\142\005i\005j\000\142\003|\004\241\000\000\000\000\000\000\005\142\005i\005j\000\000\000\000\000\000\000\000\003}\005\142\005i\005j\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\151\003l\003\131\004\206\000\000\000\000\004\242\000\000\004\229\003\140\000\000\000\138\000\000\000\152\000\000\000\147\000_\000\000\002\193\000\000\004\162\002\197\003|\000\000\000\000\000\000\000_\000\197\001n\000\200\000\201\003\141\000\152\005k\003}\000\153\003\142\000\000\000\000\001x\003\143\000\000\005k\004\243\000\000\003\144\000\197\002\203\000\200\000\201\005k\000\000\000\000\000\000\000\153\000\202\004\196\000\203\003n\000\000\000\183\000\000\003o\000\000\006-\000\000\000\140\000\000\000\000\003l\003\127\000\141\000\000\000\140\000\202\000\142\000\203\002\198\000\152\000\183\004\202\002\199\000\000\000\155\000\000\000\000\000\000\000\184\000\000\000\000\000\000\000\185\000\197\003s\000\200\000\201\000\000\000\157\000\000\001G\000\153\000\151\000\155\000\000\000\000\000\000\000\184\001\145\000\138\000\000\000\185\000\000\000\147\000\000\000\000\000\000\000\157\000\000\001G\000\000\000\202\001\176\000\203\000_\000\140\000\183\003n\000\138\003l\003\131\003o\000\147\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\228\000_\000_\000\000\000\000\000\000\004\162\000\155\000\000\005\226\000\000\000\184\000\000\000\000\000\000\000\185\003|\006\018\000\000\000\000\000\000\000\157\000\140\001G\000\000\000\000\004\203\000\141\003}\004\195\000\000\000\142\000\000\002\212\000\000\000\000\000\000\000\000\000\152\000\000\004\204\000\140\004\196\000\000\003n\002\213\000\141\000\000\003o\000\000\000\142\000\000\000\197\003\255\000\200\000\201\000\000\000\151\002\193\000\000\000\153\002\197\000\000\000\000\000\000\000\000\004\202\004\206\000\000\000\000\004\211\000\000\004\229\003\140\000\138\000\000\000\151\000\000\000\147\000\000\000\202\000\000\000\203\000\000\003|\000\183\000\000\000\000\000\000\000_\000\000\000\000\000\000\000\000\000\000\003\141\003}\000\000\000\000\000\000\003\142\000\000\000\000\000\000\003\143\003l\003\131\000\000\000\155\003\144\000\000\000\000\000\184\000\140\002\247\000\000\000\185\002\198\000\000\000\000\000\000\002\199\000\157\000\000\001G\000\000\004M\000\000\003\004\000\140\000\000\000\000\000\000\000\000\000\141\000\152\000\000\000\000\000\142\000\000\000\000\000\000\000\000\003|\000\000\000\000\000\000\000\000\000\000\000\197\004\030\000\200\000\201\004\203\000\152\003}\000\000\000\153\000\000\000\000\002\238\000\000\003n\000\000\000\151\000\000\003ol\003\131\000\000\000\000\000\000\000\000\001\183\000\000\003|\000\000\000\000\000\153\000\000\004\002\000\000\000\000\000\000\004\003\000\000\000\000\003}\003\246\005\n\003l\003\131\000\151\000\000\000\000\000\000\000\000\000\000\001\189\004U\000\203\000\000\000\000\000\183\000\000\000\000\000\000\000\000\000\000\002\247\000\000\003\246\004V\000\000\000\000\004\007\003l\003\131\000\000\000\000\000\000\000\000\002\238\003\006\003n\000\138\000\155\000\000\003o\000\147\000\184\000\000\003\140\000\000\000\185\000\000\002\193\003\246\004L\002\197\000\157\000\000\000\000\000\000\000\000\002\238\000\000\003n\000\000\000\000\000\000\003o\000\000\000\000\003\141\000\000\000\000\000\000\000\000\003\142\000\000\000\000\000\000\003\143\000\000\003l\003m\000\000\003\144\000\000\000\152\002\238\000\000\003n\000\000\000\000\000\000\003o\000\000\000\000\000\140\000\000\003l\003\131\001I\000\141\000\000\000\201\000\000\000\142\000\000\000\140\000\153\000\000\000\000\002\198\000\000\000\000\000\000\002\199\000\000\001\210\000\000\003\246\003\247\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\202\003\253\000\203\000\151\000\000\000\183\000\000\000\000\000\140\000\000\003n\003|\000\000\000\000\003o\000\000\004\002\000\000\000\000\000\000\004\003\000\000\000\000\003}\003\253\002\238\000\000\003n\000\155\000\000\000\000\003o\000\184\000\000\003|\004\005\000\185\000\000\000\000\004\002\000\000\000\000\000\157\004\003\001G\000\000\003}\000\000\000\000\000\000\003\253\004\007\000\000\000\000\000\000\000\000\000\000\000\000\004\005\000\000\003|\000\000\000\000\000\000\000\000\004\002\000\000\000\000\003\140\004\003\000\000\000\000\003}\000\000\004\007\003l\003\131\000\000\000\000\000\000\002\212\000\152\000\000\000\000\004\005\000\000\003l\003\131\000\000\000\000\003\141\003\140\002\213\000\000\000\000\003\142\003\246\004\001\000\182\003\143\004\007\000\000\000\000\000\153\003\144\000\000\000\000\003\246\004X\003|\000\000\000\000\000\000\003\141\000\000\000\000\003\253\003\140\003\142\000\000\000\000\003}\003\143\000\000\003l\003\131\003|\003\144\000\183\000\000\002\238\004\002\003n\000\000\000\000\004\003\003o\000\000\003}\003\141\000\000\002\238\000\000\003n\003\142\003\246\005\031\003o\003\143\000\000\004\005\000\155\000\000\003\144\000\000\000\184\000\000\000\000\000\000\000\185\000\000\002\247\000\000\000\000\000\000\000\157\004\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\008\000\000\000\000\000\000\002\238\000\000\003n\000\000\003\140\000\000\003o\000\000\000\000\003\141\000\000\000\000\000\000\000\000\000\000\000\000\003l\003\131\000\000\000\000\000\000\000\000\000\000\003\148\000\000\000\000\003\141\003l\003\131\000\000\000\000\003\142\000\000\000\000\000\000\003\143\000\000\003\246\005!\000\000\003\144\000\000\003\253\000\000\000\000\000\000\000\000\000\000\003\246\005#\000\000\000\000\003|\003\253\000\000\000\000\000\000\004\002\000\000\000\000\000\000\004\003\000\000\003|\003}\000\000\000\000\000\000\004\002\000\000\000\000\002\238\004\003\003n\000\000\003}\004\005\003o\003l\003\131\000\000\000\000\002\238\000\000\003n\000\000\000\000\004\005\003o\000\000\000\000\003\253\004\007\000\000\000\000\000\000\000\000\000\000\000\000\004O\000\138\003|\000\000\004\007\000\147\000\000\004\002\000\000\000\000\003\140\004\003\000\000\001g\003}\001h\000_\002\193\000\000\000\000\002\197\003\140\000\000\000\000\000\000\000\000\004\005\000\000\000\000\000\000\000\000\000\000\003\141\000\000\002\238\000\000\003n\003\142\000\000\000\000\003o\003\143\004\007\003\141\000\000\000\000\003\144\000\138\003\142\000\000\000\000\000\147\003\143\000\000\000\000\000\000\000\140\003\144\000\000\003\140\000\000\000\141\000_\003\253\000\000\000\142\000\000\000\000\000\140\000\000\000\000\001i\000\140\003|\003\253\001j\002\198\000\000\004\002\000\000\002\199\003\141\004\003\000\000\003|\003}\003\142\000\000\000\000\004\002\003\143\000\151\000\000\004\003\000\000\003\144\003}\004\005\000\000\003l\003m\000\000\000\140\001w\000\000\000\000\000\000\000\141\004\005\000\000\000\138\000\142\000\000\004\007\001S\000\000\000\138\000\000\000\000\000\000\000\147\000\000\000\000\000\000\004\007\003\253\000\000\000\000\000\000\000\000\003\140\000_\000\000\000\000\000\138\003|\000\000\000\151\000\147\000\000\004\002\003\140\003l\003m\004\003\000\000\000\000\003}\000\000\000_\000\000\000\000\003\141\000\000\000\140\000\000\003n\003\142\000\000\004\005\003o\003\143\000\000\003\141\000\000\000\140\003\144\000\000\003\142\000\152\000\141\000\140\003\143\002\212\000\142\004\007\000\141\003\144\000\000\000\000\000\142\001x\000\000\000\000\000\000\002\213\001W\000\000\000\000\000\140\000\000\000\153\003\140\000\000\000\141\000\000\000\000\000\140\000\142\003n\000\151\000\000\000\000\003o\000\000\000\138\000\151\000\000\000\000\000\147\000\000\001Y\000\000\000\203\003\141\000\152\000\183\000\000\000\000\003\142\000_\000\000\000\000\003\143\000\151\000\000\000\138\000\000\003\144\000\000\000\147\000\000\001W\000\000\000\000\000\000\000\000\000\153\000\000\000\155\000\000\000_\000\000\000\184\000\000\000\000\000\000\000\185\000\000\001\145\000\000\000\000\000\000\000\157\002\247\003|\000\000\001\201\002\193\000\203\000\140\002\197\000\183\001\178\000\000\000\141\000\000\003}\003\n\000\142\000\000\000\000\000\000\000\000\002\193\000\000\000\000\002\197\000\152\000\000\000\000\000\140\000\000\000\000\000\152\000\155\000\141\000\000\000\000\000\184\000\142\000\000\000\138\000\185\000\000\000\151\000\147\000\000\003|\000\157\000\153\001T\000\152\000\000\000\000\000\000\000\153\000_\000\000\000\000\003}l\003m\002\213\002\199\000\000\000\000\002\212\003\019\003\020\003\022\000\000\000\000\003^\000\000\000\203\002\242\000\140\000\183\002\213\000\155\000\000\000\141\000\000\000\184\000\000\000\142\000\000\000\185\000\000\000\140\000\140\000\000\000\000\000\157\000\141\000\141\000\152\003\025\000\142\000\142\000\155\000\000\000\000\002\245\000\184\000\000\000\000\000\000\000\185\000\000\000\179\000\151\000\000\003\\\000\157\000\140\000\000\003n\000\153\000\000\000\000\003o\000\138\000\000\000\151\000\151\000\147\000\000\000\000\000\000\000\000\002\247\001\198\000\000\002\212\000\000\000\000\000\138\003\176\002\239\000\203\000\147\000\000\000\183\000\000\003\012\002\213\002\247\000\000\000\000\000\138\000\000\000\000\000\000\000\147\000\000\002\212\003\019\006e\003\022\000\000\002\248\000\000\000\000\000\000\002\242\000\155\000\000\002\213\000\000\000\184\000\000\000\000\000\000\000\185\000\000\000\000\000\140\000\000\000\000\000\157\000\000\000\141\000\000\000\000\000\000\000\142\003\025\000\000\000\152\000\000\002\193\000\140\002\245\002\197\000\000\000\000\000\141\001\170\000\000\000\000\000\142\000\152\000\152\000\000\000\140\001\183\000\000\000\000\000\000\000\141\000\153\000\151\000\000\000\142\002\247\003|\000\000\000\000\000\182\000\000\000\000\000\000\000\000\000\153\000\153\000\000\000\151\003}\003\014\000\000\000\000\000\000\000\000\000\000\000\000\000\183\002\247\002\193\000\138\000\151\002\197\000\000\000\147\000\000\000\000\002\238\000\000\002\173\000\183\002\198\002\248\000\000\000\000\002\199\000\000\000\000\000\000\000\000\000\155\000\000\000\000\002\193\000\184\000\000\002\197\000\000\000\185\000\000\000\000\000\000\000\000\000\155\000\157\000\000\000\000\000\184\003l\003m\000\000\000\185\000\138\000\000\000\000\000\000\000\147\000\157\000\000\000\000\000\000\000\152\000\000\000\000\002\238\000\140\003\141\000\000\002\198\000\000\000\141\000\000\002\199\000\000\000\142\000\000\000\152\000\000\000\182\000\000\003\154\002\232\000\000\000\153\000\000\000\000\000\000\000\000\002\238\000\152\000\000\000\000\002\198\001\183\000\000\000\000\002\199\000\000\000\153\000\000\000\151\002\239\000\000\000\140\000\000\003n\002\234\000\140\000\183\003o|\000\000\000\000\000\000\000\000\000\000\000\151\000\000\003B\002\248\000\000\000\000\003}l\003m\000\000\000\140\002\193\002\234\000\140\002\197\000\141\000\000\000\153\000\141\000\142\000\155\000\138\000\142\000\000\000\184\000\147\000\000\000\000\000\185\000\151\000\183\000\000\000\000\000\000\000\157\006\161\000\000\000\138\000\000\000\000\000\138\000\147\000\183\000\000\000\147\000\151\000\000\000\000\000\151\000\000\000\000\000\000\000\000\000\155\000\000\000\000\000\000\000\184\000\000\000\000\000\000\000\185\000\140\000\000\003n\000\155\000\140\000\157\003ol\003m\000\000\000\147\000\000\003|\000\000\000\000\000\000\002\212\000\138\000\000\000\183\000\000\000\147\000\183\000\000\003}\000\151\000\155\000\000\002\213\000\000\000\184\000\000\000\140\000\000\000\185\000\000\000\000\000\141\000\152\000\000\000\157\000\142\000\155\000\000\000\000\000\155\000\184\000\000\000\000\000\184\000\185\000\000\000\000\000\185\000\152\006B\000\157\000\152\000\000\000\157\000\153\000\140\000\140\000\000\003n\000\000\000\141\000\151\003o\000\000\000\142\001K\000\140\000\000\001q|\000\000\000\000\000\000\000\153\000\000\000\000\000\000\000\000\000\151\000\155\000\152\003}\000\138\000\184\000\000\000\151\000\147\000\185\000\000\000\000\000\000\000\152\000\000\000\157\000\000\000\000\000\000\002\155\000\183\000\000\000\000\000\000\000\153\000\000\000\000\000\000\000\000\000\000\002\159\000\140\000\000\000\000\000\000\000\153\000\141\000\000\000\000\000\000\000\142\000\000\000\000\000\155\000\138\000\000\000\000\000\184\000\147\000\183\000\000\000\185\000\000\000\000\000\000\000\000\000\000\000\157\000\000\000\140\000\183\000\000\000\000\000\138\000\141\000\000\000\151\000\147\000\142\000\000\003\141\000\000\000\155\000\000\000\000\000\000\000\184\000\000\000\152\000\000\000\185\000\000\000\000\000\155\003\160\000\152\000\157\000\184\000\000\000\000\000\000\000\185\000\000\000\000\000\151\002\206\000\000\000\157\000\000\000\140\000\153\000\000\002\221\000\000\000\141\000\000\000\000\000\153\000\142\000\000\000\000\000\000\000\000\000\138\000\000\000\000\000\000\000\147\000\140\000\000\000\000\003l\003m\000\141\000\000\000\183\000\138\000\142\000\000\000\000\000\147\000\000\000\183\000\000\000\151\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\138\000\000\000\152\000\138\000\147\000\000\000\155\000\147\000\000\000\000\000\184\000\151\000\000\000\155\000\185\000\000\000\000\000\184\000\000\002\223\000\157\000\185\000\000\000\000\000\153\000\000\000\140\000\157\000\000\000\000\000\152\000\141\000\000\000\000\000\140\000\142\003n\000\000\000\000\000\140\003o\000\000\000\000\000\000\000\141\000\000\000\000\003v|\000\183\000\000\000\149\000\152\000\155\000\000\000\000\000\000\000\184\000\000\000\140\003}\000\185\000\000\000\000\000\141\000\152\000\000\000\157\000\142\003\190\000\000\000\000\000\155\000\000\000\153\000\000\000\184\000\000\000\000\000\000\000\185\000\152\003\211\000\140\000\152\000\000\000\157\000\153\000\141\000\000\000\000\000\000\000\142\000\138\000\151\000\000\000\000\000\149\003\250\000\183\000\000\004\155\000\140\000\153\000\000\000\000\000\153\000\141\000\000\000\000\000\000\000\142\000\183\000\000\000\000\000\000\003l\003m\000\151\000\000\000\138\000\138\000\155\000\000\000\149\000\139\000\184\003\141\000\183\000\000\000\185\000\183\000\000\000\000\000\000\000\155\000\157\000\151\000\138\000\184\000\000\003\162\000\149\000\185\000\000\000\000\000\000\000\000\000\140\000\157\000\000\000\155\000\000\000\141\000\155\000\184\000\000\000\142\000\184\000\185\000\000\000\000\000\185\000\000\000\000\000\157\000\000\000\000\000\157\000\000\000\138\000\140\000\152\003n\000\139\000\140\000\140\003ol\003m\000\196\003|\000\000\000\000\000\000\000\000\000\138\000\000\000\000\000\157\000\139\000\140\000\153\003}\000\155\000\000\000\141\000\152\000\152\001\128\000\142\000\138\000\151\000\000\000\000\000\139\000\000\000\000\000\157\003l\003m\000\000\000\000\000\000\000\000\000\152\000\000\000\154\000\000\000\153\000\153\000\000\000\000\000\000\000\138\000\000\000\151\000\000\000\139\000\000\000\000\000\000\000\138\000\140\000\000\003n\000\139\000\153\000\000\003o\000\155\000\140\000\000\000\000\000\154\001\130\000\141\000\152\003l\003m\000\142\000\000\000\000\000\000\000\157\000\000\000\140\000\000\000\000\000\000\003\141\000\141\000\154\000\000\000\140\000\142\003n\000\155\000\155\000\153\003o\000\000\003\133\000\000\003\164\000\000\000\151\000\000\000\000\000\140\000\152\000\157\000\169\000\000\000\141\000\155\000\000\000\140\000\142\000\000\003\135\000\151\000\141\000\000\000\000\000\000\000\142\000\000\000\000\000\157\000\000\000\000\000\153\000\140\000\152\003n\000\000\000\000\000\000\003o\000\000\000\000\000\000\000\000\000\151\000\000\000\000\000\155\000\000\000\000\000\000\000\000\000\151\000\000\000\000\000\000\000\153\000\000\000\000\000\000\000\000\000\171\000\000\000\000\003|\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003}\000\000\000\000\000\000\000\155\000\000\000\000\000\000\000\152\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\173\003|\000\000\000\000\000\000\000\152\000\000\000\000\000\000\000\000\000\155\000\000\000\153\003}\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\175\000\000\000\000\000\153\000\152\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\152\000\000\000\000\000\000\003|\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\141\000\153\000\000\003}
  
  let semantic_action =
    [|
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_eexpr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_aexpr = 
# 1882 "parser_cocci_menhir.mly"
      ( Ast0.set_arg_exp _1 )
# 1558 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 66 "parser_cocci_menhir.mly"
       (Parse_aux.list_info)
# 1579 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_aexpr = 
# 1884 "parser_cocci_menhir.mly"
      ( let (nm,lenname,pure,clt) = _1 in
      let nm = P.clt2mcode nm clt in
      let lenname =
	match lenname with
	  Some nm -> Some(P.clt2mcode nm clt)
	| None -> None in
      Ast0.wrap(Ast0.MetaExprList(nm,lenname,pure)) )
# 1592 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_ctype = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_aexpr = 
# 1892 "parser_cocci_menhir.mly"
      ( Ast0.set_arg_exp(Ast0.wrap(Ast0.TypeExp(_1))) )
# 1616 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_any_strict = 
# 1936 "parser_cocci_menhir.mly"
            ( Ast.WhenAny )
# 1638 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_any_strict = 
# 1937 "parser_cocci_menhir.mly"
            ( Ast.WhenStrict )
# 1660 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_any_strict = 
# 1938 "parser_cocci_menhir.mly"
            ( Ast.WhenForall )
# 1682 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_any_strict = 
# 1939 "parser_cocci_menhir.mly"
            ( Ast.WhenExists )
# 1704 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_cast_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1283 "parser_cocci_menhir.mly"
                                            ( _1 )
# 1728 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _3 in
        let _2 : (
# 99 "parser_cocci_menhir.mly"
       (Data.clt)
# 1760 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1285 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Mul _1 _2 _3 )
# 1768 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _3 in
        let _2 : (
# 97 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 1800 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1287 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.arith_op op _1 clt _3 )
# 1808 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _3 in
        let _2 : (
# 98 "parser_cocci_menhir.mly"
       (Data.clt)
# 1840 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1289 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Plus _1 _2 _3 )
# 1848 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _3 in
        let _2 : (
# 98 "parser_cocci_menhir.mly"
       (Data.clt)
# 1880 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1291 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Minus _1 _2 _3 )
# 1888 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _3 in
        let _2 : (
# 96 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 1920 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1293 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.arith_op op _1 clt _3 )
# 1928 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _3 in
        let _2 : (
# 95 "parser_cocci_menhir.mly"
       (Ast_cocci.logicalOp * Data.clt)
# 1960 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1295 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.logic_op op _1 clt _3 )
# 1968 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _3 in
        let _2 : (
# 94 "parser_cocci_menhir.mly"
       (Data.clt)
# 2000 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1297 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.Eq _1 _2 _3 )
# 2008 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _3 in
        let _2 : (
# 94 "parser_cocci_menhir.mly"
       (Data.clt)
# 2040 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1299 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.NotEq _1 _2 _3 )
# 2048 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _3 in
        let _2 : (
# 93 "parser_cocci_menhir.mly"
       (Data.clt)
# 2080 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1301 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.And _1 _2 _3 )
# 2088 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _3 in
        let _2 : (
# 91 "parser_cocci_menhir.mly"
       (Data.clt)
# 2120 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1303 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Or _1 _2 _3 )
# 2128 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _3 in
        let _2 : (
# 92 "parser_cocci_menhir.mly"
       (Data.clt)
# 2160 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1305 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Xor _1 _2 _3 )
# 2168 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _3 in
        let _2 : (
# 90 "parser_cocci_menhir.mly"
       (Data.clt)
# 2200 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1307 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.AndLog _1 _2 _3 )
# 2208 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _3 in
        let _2 : (
# 89 "parser_cocci_menhir.mly"
       (Data.clt)
# 2240 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1309 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.OrLog _1 _2 _3 )
# 2248 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_cast_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1283 "parser_cocci_menhir.mly"
                                            ( _1 )
# 2272 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _3 in
        let _2 : (
# 99 "parser_cocci_menhir.mly"
       (Data.clt)
# 2304 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1285 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Mul _1 _2 _3 )
# 2312 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _3 in
        let _2 : (
# 97 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 2344 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1287 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.arith_op op _1 clt _3 )
# 2352 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _3 in
        let _2 : (
# 98 "parser_cocci_menhir.mly"
       (Data.clt)
# 2384 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1289 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Plus _1 _2 _3 )
# 2392 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _3 in
        let _2 : (
# 98 "parser_cocci_menhir.mly"
       (Data.clt)
# 2424 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1291 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Minus _1 _2 _3 )
# 2432 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _3 in
        let _2 : (
# 96 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 2464 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1293 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.arith_op op _1 clt _3 )
# 2472 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _3 in
        let _2 : (
# 95 "parser_cocci_menhir.mly"
       (Ast_cocci.logicalOp * Data.clt)
# 2504 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1295 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.logic_op op _1 clt _3 )
# 2512 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _3 in
        let _2 : (
# 94 "parser_cocci_menhir.mly"
       (Data.clt)
# 2544 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1297 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.Eq _1 _2 _3 )
# 2552 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _3 in
        let _2 : (
# 94 "parser_cocci_menhir.mly"
       (Data.clt)
# 2584 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1299 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.NotEq _1 _2 _3 )
# 2592 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _3 in
        let _2 : (
# 93 "parser_cocci_menhir.mly"
       (Data.clt)
# 2624 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1301 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.And _1 _2 _3 )
# 2632 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _3 in
        let _2 : (
# 91 "parser_cocci_menhir.mly"
       (Data.clt)
# 2664 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1303 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Or _1 _2 _3 )
# 2672 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _3 in
        let _2 : (
# 92 "parser_cocci_menhir.mly"
       (Data.clt)
# 2704 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1305 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Xor _1 _2 _3 )
# 2712 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _3 in
        let _2 : (
# 90 "parser_cocci_menhir.mly"
       (Data.clt)
# 2744 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1307 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.AndLog _1 _2 _3 )
# 2752 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _3 in
        let _2 : (
# 89 "parser_cocci_menhir.mly"
       (Data.clt)
# 2784 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1309 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.OrLog _1 _2 _3 )
# 2792 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_cast_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1283 "parser_cocci_menhir.mly"
                                            ( _1 )
# 2816 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _3 in
        let _2 : (
# 99 "parser_cocci_menhir.mly"
       (Data.clt)
# 2848 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1285 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Mul _1 _2 _3 )
# 2856 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _3 in
        let _2 : (
# 97 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 2888 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1287 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.arith_op op _1 clt _3 )
# 2896 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _3 in
        let _2 : (
# 98 "parser_cocci_menhir.mly"
       (Data.clt)
# 2928 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1289 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Plus _1 _2 _3 )
# 2936 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _3 in
        let _2 : (
# 98 "parser_cocci_menhir.mly"
       (Data.clt)
# 2968 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1291 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Minus _1 _2 _3 )
# 2976 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _3 in
        let _2 : (
# 96 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 3008 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1293 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.arith_op op _1 clt _3 )
# 3016 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _3 in
        let _2 : (
# 95 "parser_cocci_menhir.mly"
       (Ast_cocci.logicalOp * Data.clt)
# 3048 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1295 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.logic_op op _1 clt _3 )
# 3056 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _3 in
        let _2 : (
# 94 "parser_cocci_menhir.mly"
       (Data.clt)
# 3088 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1297 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.Eq _1 _2 _3 )
# 3096 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _3 in
        let _2 : (
# 94 "parser_cocci_menhir.mly"
       (Data.clt)
# 3128 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1299 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.NotEq _1 _2 _3 )
# 3136 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _3 in
        let _2 : (
# 93 "parser_cocci_menhir.mly"
       (Data.clt)
# 3168 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1301 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.And _1 _2 _3 )
# 3176 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _3 in
        let _2 : (
# 91 "parser_cocci_menhir.mly"
       (Data.clt)
# 3208 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1303 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Or _1 _2 _3 )
# 3216 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _3 in
        let _2 : (
# 92 "parser_cocci_menhir.mly"
       (Data.clt)
# 3248 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1305 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Xor _1 _2 _3 )
# 3256 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _3 in
        let _2 : (
# 90 "parser_cocci_menhir.mly"
       (Data.clt)
# 3288 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1307 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.AndLog _1 _2 _3 )
# 3296 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _3 in
        let _2 : (
# 89 "parser_cocci_menhir.mly"
       (Data.clt)
# 3328 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1309 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.OrLog _1 _2 _3 )
# 3336 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_cast_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1283 "parser_cocci_menhir.mly"
                                            ( _1 )
# 3360 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_expr_invalid_ = Obj.magic _3 in
        let _2 : (
# 99 "parser_cocci_menhir.mly"
       (Data.clt)
# 3392 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1285 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Mul _1 _2 _3 )
# 3400 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_expr_invalid_ = Obj.magic _3 in
        let _2 : (
# 97 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 3432 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1287 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.arith_op op _1 clt _3 )
# 3440 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_expr_invalid_ = Obj.magic _3 in
        let _2 : (
# 98 "parser_cocci_menhir.mly"
       (Data.clt)
# 3472 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1289 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Plus _1 _2 _3 )
# 3480 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_expr_invalid_ = Obj.magic _3 in
        let _2 : (
# 98 "parser_cocci_menhir.mly"
       (Data.clt)
# 3512 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1291 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Minus _1 _2 _3 )
# 3520 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_expr_invalid_ = Obj.magic _3 in
        let _2 : (
# 96 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 3552 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1293 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.arith_op op _1 clt _3 )
# 3560 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_expr_invalid_ = Obj.magic _3 in
        let _2 : (
# 95 "parser_cocci_menhir.mly"
       (Ast_cocci.logicalOp * Data.clt)
# 3592 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1295 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.logic_op op _1 clt _3 )
# 3600 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_expr_invalid_ = Obj.magic _3 in
        let _2 : (
# 94 "parser_cocci_menhir.mly"
       (Data.clt)
# 3632 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1297 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.Eq _1 _2 _3 )
# 3640 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_expr_invalid_ = Obj.magic _3 in
        let _2 : (
# 94 "parser_cocci_menhir.mly"
       (Data.clt)
# 3672 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1299 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.NotEq _1 _2 _3 )
# 3680 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_expr_invalid_ = Obj.magic _3 in
        let _2 : (
# 93 "parser_cocci_menhir.mly"
       (Data.clt)
# 3712 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1301 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.And _1 _2 _3 )
# 3720 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_expr_invalid_ = Obj.magic _3 in
        let _2 : (
# 91 "parser_cocci_menhir.mly"
       (Data.clt)
# 3752 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1303 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Or _1 _2 _3 )
# 3760 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_expr_invalid_ = Obj.magic _3 in
        let _2 : (
# 92 "parser_cocci_menhir.mly"
       (Data.clt)
# 3792 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1305 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Xor _1 _2 _3 )
# 3800 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_expr_invalid_ = Obj.magic _3 in
        let _2 : (
# 90 "parser_cocci_menhir.mly"
       (Data.clt)
# 3832 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1307 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.AndLog _1 _2 _3 )
# 3840 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_expr_invalid_ = Obj.magic _3 in
        let _2 : (
# 89 "parser_cocci_menhir.mly"
       (Data.clt)
# 3872 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1309 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.OrLog _1 _2 _3 )
# 3880 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_arity = 
# 491 "parser_cocci_menhir.mly"
              ( Ast.UNIQUE )
# 3902 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_arity = 
# 492 "parser_cocci_menhir.mly"
              ( Ast.OPT )
# 3924 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_arity = 
# 493 "parser_cocci_menhir.mly"
              ( Ast.MULTI )
# 3946 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_arity = 
# 494 "parser_cocci_menhir.mly"
                   ( Ast.NONE )
# 3963 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = l;
              MenhirLib.EngineTypes.startp = _startpos_l_;
              MenhirLib.EngineTypes.endp = _endpos_l_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let r : (
# 102 "parser_cocci_menhir.mly"
       (Data.clt)
# 3994 "parser_cocci_menhir.ml"
        ) = Obj.magic r in
        let i : 'tv_option_eexpr_ = Obj.magic i in
        let l : (
# 102 "parser_cocci_menhir.mly"
       (Data.clt)
# 4000 "parser_cocci_menhir.ml"
        ) = Obj.magic l in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_array_dec = 
# 1090 "parser_cocci_menhir.mly"
                                           ( (l,i,r) )
# 4007 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_cond_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assign_expr_eexpr_dot_expressions_ = 
# 1255 "parser_cocci_menhir.mly"
                                           ( _1 )
# 4031 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_assign_expr_bis = Obj.magic _3 in
        let _2 : (
# 108 "parser_cocci_menhir.mly"
       (Ast_cocci.assignOp * Data.clt)
# 4063 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_unary_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_assign_expr_eexpr_dot_expressions_ = 
# 1257 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in
      Ast0.wrap(Ast0.Assignment(_1,P.clt2mcode op clt,
				Ast0.set_arg_exp _3,false)) )
# 4073 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_assign_expr_bis = Obj.magic _3 in
        let _2 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 4105 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_unary_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_assign_expr_eexpr_dot_expressions_ = 
# 1261 "parser_cocci_menhir.mly"
      ( Ast0.wrap
	  (Ast0.Assignment
	     (_1,P.clt2mcode Ast.SimpleAssign _2,Ast0.set_arg_exp _3,false)) )
# 4115 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_cond_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assign_expr_eexpr_nest_expressions_ = 
# 1255 "parser_cocci_menhir.mly"
                                           ( _1 )
# 4139 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_assign_expr_bis = Obj.magic _3 in
        let _2 : (
# 108 "parser_cocci_menhir.mly"
       (Ast_cocci.assignOp * Data.clt)
# 4171 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_unary_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_assign_expr_eexpr_nest_expressions_ = 
# 1257 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in
      Ast0.wrap(Ast0.Assignment(_1,P.clt2mcode op clt,
				Ast0.set_arg_exp _3,false)) )
# 4181 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_assign_expr_bis = Obj.magic _3 in
        let _2 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 4213 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_unary_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_assign_expr_eexpr_nest_expressions_ = 
# 1261 "parser_cocci_menhir.mly"
      ( Ast0.wrap
	  (Ast0.Assignment
	     (_1,P.clt2mcode Ast.SimpleAssign _2,Ast0.set_arg_exp _3,false)) )
# 4223 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_cond_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assign_expr_expr_invalid_ = 
# 1255 "parser_cocci_menhir.mly"
                                           ( _1 )
# 4247 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_assign_expr_bis = Obj.magic _3 in
        let _2 : (
# 108 "parser_cocci_menhir.mly"
       (Ast_cocci.assignOp * Data.clt)
# 4279 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_unary_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_assign_expr_expr_invalid_ = 
# 1257 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in
      Ast0.wrap(Ast0.Assignment(_1,P.clt2mcode op clt,
				Ast0.set_arg_exp _3,false)) )
# 4289 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_assign_expr_bis = Obj.magic _3 in
        let _2 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 4321 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_unary_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_assign_expr_expr_invalid_ = 
# 1261 "parser_cocci_menhir.mly"
      ( Ast0.wrap
	  (Ast0.Assignment
	     (_1,P.clt2mcode Ast.SimpleAssign _2,Ast0.set_arg_exp _3,false)) )
# 4331 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_cond_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assign_expr_bis = 
# 1266 "parser_cocci_menhir.mly"
                                                            ( _1 )
# 4355 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_assign_expr_bis = Obj.magic _3 in
        let _2 : (
# 108 "parser_cocci_menhir.mly"
       (Ast_cocci.assignOp * Data.clt)
# 4387 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_unary_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_assign_expr_bis = 
# 1268 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in
      Ast0.wrap(Ast0.Assignment(_1,P.clt2mcode op clt,
				Ast0.set_arg_exp _3,false)) )
# 4397 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_assign_expr_bis = Obj.magic _3 in
        let _2 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 4429 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_unary_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_assign_expr_bis = 
# 1272 "parser_cocci_menhir.mly"
      ( Ast0.wrap
	  (Ast0.Assignment
	     (_1,P.clt2mcode Ast.SimpleAssign _2,Ast0.set_arg_exp _3,false)) )
# 4439 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_assign_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_basic_expr_eexpr_dot_expressions_ = 
# 1252 "parser_cocci_menhir.mly"
                                                             ( _1 )
# 4463 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_assign_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_basic_expr_eexpr_nest_expressions_ = 
# 1252 "parser_cocci_menhir.mly"
                                                             ( _1 )
# 4487 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_assign_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_basic_expr_expr_invalid_ = 
# 1252 "parser_cocci_menhir.mly"
                                                             ( _1 )
# 4511 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_fun_start = Obj.magic _3 in
        let _2 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 4543 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 57 "parser_cocci_menhir.mly"
       (Data.clt)
# 4548 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_case_line = 
# 954 "parser_cocci_menhir.mly"
      ( Ast0.wrap
	  (Ast0.Default(P.clt2mcode "default" _1,P.clt2mcode ":" _2,_3)) )
# 4556 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let _4 : 'tv_fun_start = Obj.magic _4 in
        let _3 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 4593 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_eexpr = Obj.magic _2 in
        let _1 : (
# 57 "parser_cocci_menhir.mly"
       (Data.clt)
# 4599 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_case_line = 
# 957 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Case(P.clt2mcode "case" _1,_2,P.clt2mcode ":" _3,_4)) )
# 4606 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_unary_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_cast_expr_eexpr_dot_expressions_ = 
# 1312 "parser_cocci_menhir.mly"
                                          ( _1 )
# 4630 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = rp;
            MenhirLib.EngineTypes.startp = _startpos_rp_;
            MenhirLib.EngineTypes.endp = _endpos_rp_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = lp;
                MenhirLib.EngineTypes.startp = _startpos_lp_;
                MenhirLib.EngineTypes.endp = _endpos_lp_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let e : 'tv_cast_expr_eexpr_dot_expressions_ = Obj.magic e in
        let rp : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 4667 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let t : 'tv_ctype = Obj.magic t in
        let lp : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 4673 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let _startpos = _startpos_lp_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_cast_expr_eexpr_dot_expressions_ = 
# 1314 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Cast (P.clt2mcode "(" lp, t,
			     P.clt2mcode ")" rp, e)) )
# 4681 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_unary_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_cast_expr_eexpr_invalid_ = 
# 1312 "parser_cocci_menhir.mly"
                                          ( _1 )
# 4705 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = rp;
            MenhirLib.EngineTypes.startp = _startpos_rp_;
            MenhirLib.EngineTypes.endp = _endpos_rp_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = lp;
                MenhirLib.EngineTypes.startp = _startpos_lp_;
                MenhirLib.EngineTypes.endp = _endpos_lp_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let e : 'tv_cast_expr_eexpr_invalid_ = Obj.magic e in
        let rp : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 4742 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let t : 'tv_ctype = Obj.magic t in
        let lp : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 4748 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let _startpos = _startpos_lp_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_cast_expr_eexpr_invalid_ = 
# 1314 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Cast (P.clt2mcode "(" lp, t,
			     P.clt2mcode ")" rp, e)) )
# 4756 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_unary_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_cast_expr_eexpr_nest_expressions_ = 
# 1312 "parser_cocci_menhir.mly"
                                          ( _1 )
# 4780 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = rp;
            MenhirLib.EngineTypes.startp = _startpos_rp_;
            MenhirLib.EngineTypes.endp = _endpos_rp_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = lp;
                MenhirLib.EngineTypes.startp = _startpos_lp_;
                MenhirLib.EngineTypes.endp = _endpos_lp_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let e : 'tv_cast_expr_eexpr_nest_expressions_ = Obj.magic e in
        let rp : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 4817 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let t : 'tv_ctype = Obj.magic t in
        let lp : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 4823 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let _startpos = _startpos_lp_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_cast_expr_eexpr_nest_expressions_ = 
# 1314 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Cast (P.clt2mcode "(" lp, t,
			     P.clt2mcode ")" rp, e)) )
# 4831 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_unary_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_cast_expr_expr_invalid_ = 
# 1312 "parser_cocci_menhir.mly"
                                          ( _1 )
# 4855 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = rp;
            MenhirLib.EngineTypes.startp = _startpos_rp_;
            MenhirLib.EngineTypes.endp = _endpos_rp_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = lp;
                MenhirLib.EngineTypes.startp = _startpos_lp_;
                MenhirLib.EngineTypes.endp = _endpos_lp_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let e : 'tv_cast_expr_expr_invalid_ = Obj.magic e in
        let rp : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 4892 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let t : 'tv_ctype = Obj.magic t in
        let lp : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 4898 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let _startpos = _startpos_lp_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_cast_expr_expr_invalid_ = 
# 1314 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Cast (P.clt2mcode "(" lp, t,
			     P.clt2mcode ")" rp, e)) )
# 4906 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_separated_nonempty_list_TComma_TString_ = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_choose_iso = 
# 237 "parser_cocci_menhir.mly"
                                                 ( List.map P.id2name _2 )
# 4934 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 4960 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 4965 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_comma_decls_TEllipsis_decl_ = 
# 1677 "parser_cocci_menhir.mly"
    ( function dot_builder ->
      [Ast0.wrap(Ast0.PComma(P.clt2mcode "," _1));
	dot_builder _2] )
# 4974 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_one_dec_decl_ = Obj.magic _2 in
        let _1 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 5001 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_comma_decls_TEllipsis_decl_ = 
# 1681 "parser_cocci_menhir.mly"
    ( function dot_builder ->
      [Ast0.wrap(Ast0.PComma(P.clt2mcode "," _1)); _2] )
# 5009 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 5035 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 5040 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_comma_decls_TEllipsis_name_opt_decl_ = 
# 1677 "parser_cocci_menhir.mly"
    ( function dot_builder ->
      [Ast0.wrap(Ast0.PComma(P.clt2mcode "," _1));
	dot_builder _2] )
# 5049 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_one_dec_name_opt_decl_ = Obj.magic _2 in
        let _1 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 5076 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_comma_decls_TEllipsis_name_opt_decl_ = 
# 1681 "parser_cocci_menhir.mly"
    ( function dot_builder ->
      [Ast0.wrap(Ast0.PComma(P.clt2mcode "," _1)); _2] )
# 5084 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_comma_initializers_edots_when_TEllipsis_initialize__ = 
# 1143 "parser_cocci_menhir.mly"
              ( [] )
# 5101 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let r : 'tv_comma_initializers2_edots_when_TEllipsis_initialize__ = Obj.magic r in
        let d : 'tv_edots_when_TEllipsis_initialize_ = Obj.magic d in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_comma_initializers_edots_when_TEllipsis_initialize__ = 
# 1145 "parser_cocci_menhir.mly"
      ( (function dot_builder -> [dot_builder d])::r )
# 5131 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = c;
            MenhirLib.EngineTypes.startp = _startpos_c_;
            MenhirLib.EngineTypes.endp = _endpos_c_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let r : 'tv_comma_initializers_edots_when_TEllipsis_initialize__ = Obj.magic r in
        let c : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 5163 "parser_cocci_menhir.ml"
        ) = Obj.magic c in
        let i : 'tv_initialize2 = Obj.magic i in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_comma_initializers_edots_when_TEllipsis_initialize__ = 
# 1147 "parser_cocci_menhir.mly"
    ( (function dot_builder -> [i; Ast0.wrap(Ast0.IComma(P.clt2mcode "," c))])::
      r )
# 5172 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_comma_initializers2_edots_when_TEllipsis_initialize__ = 
# 1151 "parser_cocci_menhir.mly"
              ( [] )
# 5189 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = c;
            MenhirLib.EngineTypes.startp = _startpos_c_;
            MenhirLib.EngineTypes.endp = _endpos_c_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let r : 'tv_comma_initializers_edots_when_TEllipsis_initialize__ = Obj.magic r in
        let c : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 5221 "parser_cocci_menhir.ml"
        ) = Obj.magic c in
        let i : 'tv_initialize2 = Obj.magic i in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_comma_initializers2_edots_when_TEllipsis_initialize__ = 
# 1153 "parser_cocci_menhir.mly"
    ( (function dot_builder -> [i; Ast0.wrap(Ast0.IComma(P.clt2mcode "," c))])::
      r )
# 5230 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_any_strict_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_any_strict_ = 
# 1914 "parser_cocci_menhir.mly"
                                       ( _1 )
# 5254 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_ctype_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_ctype_ = 
# 1914 "parser_cocci_menhir.mly"
                                       ( _1 )
# 5278 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_d_ident_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_d_ident_ = 
# 1914 "parser_cocci_menhir.mly"
                                       ( _1 )
# 5302 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_ident_or_const_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_ident_or_const_ = 
# 1914 "parser_cocci_menhir.mly"
                                       ( _1 )
# 5326 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_meta_ident_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_meta_ident_ = 
# 1914 "parser_cocci_menhir.mly"
                                       ( _1 )
# 5350 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_pure_ident_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_pure_ident_ = 
# 1914 "parser_cocci_menhir.mly"
                                       ( _1 )
# 5374 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_pure_ident_or_meta_ident_ = 
# 1914 "parser_cocci_menhir.mly"
                                       ( _1 )
# 5398 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe__ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe__ = 
# 1914 "parser_cocci_menhir.mly"
                                       ( _1 )
# 5422 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_idconstraint_re_or_not_eqid__ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_pure_ident_or_meta_ident_with_idconstraint_re_or_not_eqid__ = 
# 1914 "parser_cocci_menhir.mly"
                                       ( _1 )
# 5446 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_idconstraint_virt_re_or_not_eqid__ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_pure_ident_or_meta_ident_with_idconstraint_virt_re_or_not_eqid__ = 
# 1914 "parser_cocci_menhir.mly"
                                       ( _1 )
# 5470 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_seed_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_pure_ident_or_meta_ident_with_seed_ = 
# 1914 "parser_cocci_menhir.mly"
                                       ( _1 )
# 5494 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_x_eq_not_ceq__ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_pure_ident_or_meta_ident_with_x_eq_not_ceq__ = 
# 1914 "parser_cocci_menhir.mly"
                                       ( _1 )
# 5518 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_x_eq_not_pos__ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_pure_ident_or_meta_ident_with_x_eq_not_pos__ = 
# 1914 "parser_cocci_menhir.mly"
                                       ( _1 )
# 5542 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_typedef_ident_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_typedef_ident_ = 
# 1914 "parser_cocci_menhir.mly"
                                       ( _1 )
# 5566 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_cond_expr_eexpr_dot_expressions_ = 
# 1277 "parser_cocci_menhir.mly"
                                             ( _1 )
# 5590 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = dd;
            MenhirLib.EngineTypes.startp = _startpos_dd_;
            MenhirLib.EngineTypes.endp = _endpos_dd_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = w;
                MenhirLib.EngineTypes.startp = _startpos_w_;
                MenhirLib.EngineTypes.endp = _endpos_w_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let r : 'tv_cond_expr_eexpr_dot_expressions_ = Obj.magic r in
        let dd : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 5632 "parser_cocci_menhir.ml"
        ) = Obj.magic dd in
        let t : 'tv_option_eexpr_ = Obj.magic t in
        let w : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 5638 "parser_cocci_menhir.ml"
        ) = Obj.magic w in
        let l : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic l in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_cond_expr_eexpr_dot_expressions_ = 
# 1279 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.CondExpr (l, P.clt2mcode "?" w, t,
				 P.clt2mcode ":" dd, r)) )
# 5647 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_cond_expr_eexpr_nest_expressions_ = 
# 1277 "parser_cocci_menhir.mly"
                                             ( _1 )
# 5671 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = dd;
            MenhirLib.EngineTypes.startp = _startpos_dd_;
            MenhirLib.EngineTypes.endp = _endpos_dd_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = w;
                MenhirLib.EngineTypes.startp = _startpos_w_;
                MenhirLib.EngineTypes.endp = _endpos_w_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let r : 'tv_cond_expr_eexpr_nest_expressions_ = Obj.magic r in
        let dd : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 5713 "parser_cocci_menhir.ml"
        ) = Obj.magic dd in
        let t : 'tv_option_eexpr_ = Obj.magic t in
        let w : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 5719 "parser_cocci_menhir.ml"
        ) = Obj.magic w in
        let l : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic l in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_cond_expr_eexpr_nest_expressions_ = 
# 1279 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.CondExpr (l, P.clt2mcode "?" w, t,
				 P.clt2mcode ":" dd, r)) )
# 5728 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_cond_expr_expr_invalid_ = 
# 1277 "parser_cocci_menhir.mly"
                                             ( _1 )
# 5752 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = dd;
            MenhirLib.EngineTypes.startp = _startpos_dd_;
            MenhirLib.EngineTypes.endp = _endpos_dd_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = w;
                MenhirLib.EngineTypes.startp = _startpos_w_;
                MenhirLib.EngineTypes.endp = _endpos_w_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let r : 'tv_cond_expr_expr_invalid_ = Obj.magic r in
        let dd : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 5794 "parser_cocci_menhir.ml"
        ) = Obj.magic dd in
        let t : 'tv_option_eexpr_ = Obj.magic t in
        let w : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 5800 "parser_cocci_menhir.ml"
        ) = Obj.magic w in
        let l : 'tv_arith_expr_expr_invalid_ = Obj.magic l in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_cond_expr_expr_invalid_ = 
# 1279 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.CondExpr (l, P.clt2mcode "?" w, t,
				 P.clt2mcode ":" dd, r)) )
# 5809 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 54 "parser_cocci_menhir.mly"
      (Data.clt)
# 5830 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_const_vol = 
# 863 "parser_cocci_menhir.mly"
                   ( P.clt2mcode Ast.Const _1 )
# 5837 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 54 "parser_cocci_menhir.mly"
      (Data.clt)
# 5858 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_const_vol = 
# 864 "parser_cocci_menhir.mly"
                   ( P.clt2mcode Ast.Volatile _1 )
# 5865 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_continue_struct_decl_list = 
# 615 "parser_cocci_menhir.mly"
                                     ( [] )
# 5882 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_struct_decl_list_start = Obj.magic _2 in
        let _1 : 'tv_struct_decl = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_continue_struct_decl_list = 
# 616 "parser_cocci_menhir.mly"
                                     ( _1@_2 )
# 5912 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_struct_decl = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_continue_struct_decl_list = 
# 617 "parser_cocci_menhir.mly"
                                     ( _1 )
# 5936 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 5968 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 5973 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let _startpos = _startpos_r0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 501 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.CharType,[P.clt2mcode "char" ty])) )
# 5985 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 5991 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 5998 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 6004 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 6036 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 6041 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let _startpos = _startpos_r0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 503 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.ShortType,[P.clt2mcode "short" ty])) )
# 6053 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 6059 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 6066 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 6072 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 6104 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 6109 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let _startpos = _startpos_r0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 505 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.IntType,[P.clt2mcode "int" ty])) )
# 6121 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 6127 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 6134 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 6140 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 64 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 6172 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 6177 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let _startpos = _startpos_r0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let p0 = p00 in
          let r = r0 in
          let ty =
            let p = p0 in
            
# 507 "parser_cocci_menhir.mly"
    ( let (nm,pure,clt) = p in
      Ast0.wrap(Ast0.MetaType(P.clt2mcode nm clt,pure)) )
# 6190 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 6196 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 6203 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 6209 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = r00;
                MenhirLib.EngineTypes.startp = _startpos_r00_;
                MenhirLib.EngineTypes.endp = _endpos_r00_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = r1;
                  MenhirLib.EngineTypes.startp = _startpos_r1_;
                  MenhirLib.EngineTypes.endp = _endpos_r1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 59 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 6250 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let r00 : (
# 47 "parser_cocci_menhir.mly"
      (string)
# 6255 "parser_cocci_menhir.ml"
        ) = Obj.magic r00 in
        let r1 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 6260 "parser_cocci_menhir.ml"
        ) = Obj.magic r1 in
        let _startpos = _startpos_r1_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let p0 = p00 in
          let r0 = r00 in
          let r = r1 in
          let ty =
            let p = p0 in
            let r = r0 in
            
# 510 "parser_cocci_menhir.mly"
    ( let nm = (r,P.id2name p) in
    (* this is only possible when we are in a metavar decl.  Otherwise,
       it will be represented already as a MetaType *)
    let _ = P.check_meta(Ast.MetaTypeDecl(Ast.NONE,nm)) in
    Ast0.wrap(Ast0.MetaType(P.clt2mcode nm (P.id2clt p),
			    Ast0.Impure (*will be ignored*))) )
# 6279 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 6285 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 6292 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 6298 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 6330 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 6335 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let _startpos = _startpos_r0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 517 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.LongType,[P.clt2mcode "long" ty])) )
# 6347 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 6353 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 6360 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 6366 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty200;
            MenhirLib.EngineTypes.startp = _startpos_ty200_;
            MenhirLib.EngineTypes.endp = _endpos_ty200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = ty100;
              MenhirLib.EngineTypes.startp = _startpos_ty100_;
              MenhirLib.EngineTypes.endp = _endpos_ty100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = r0;
                MenhirLib.EngineTypes.startp = _startpos_r0_;
                MenhirLib.EngineTypes.endp = _endpos_r0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty200 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 6403 "parser_cocci_menhir.ml"
        ) = Obj.magic ty200 in
        let ty100 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 6408 "parser_cocci_menhir.ml"
        ) = Obj.magic ty100 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 6413 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let _startpos = _startpos_r0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty20 = ty200 in
          let ty10 = ty100 in
          let r = r0 in
          let ty =
            let ty2 = ty20 in
            let ty1 = ty10 in
            
# 519 "parser_cocci_menhir.mly"
    ( Ast0.wrap
	(Ast0.BaseType
	   (Ast.LongLongType,
	    [P.clt2mcode "long" ty1;P.clt2mcode "long" ty2])) )
# 6430 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 6436 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 6443 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 6449 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 6481 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 6486 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let _startpos = _startpos_r0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 501 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.CharType,[P.clt2mcode "char" ty])) )
# 6498 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 6504 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 6511 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 6517 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 6549 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 6554 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let _startpos = _startpos_r0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 503 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.ShortType,[P.clt2mcode "short" ty])) )
# 6566 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 6572 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 6579 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 6585 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 6617 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 6622 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let _startpos = _startpos_r0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 505 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.IntType,[P.clt2mcode "int" ty])) )
# 6634 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 6640 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 6647 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 6653 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 64 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 6685 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 6690 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let _startpos = _startpos_r0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let p0 = p00 in
          let r = r0 in
          let ty =
            let p = p0 in
            
# 507 "parser_cocci_menhir.mly"
    ( let (nm,pure,clt) = p in
      Ast0.wrap(Ast0.MetaType(P.clt2mcode nm clt,pure)) )
# 6703 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 6709 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 6716 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 6722 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = r00;
                MenhirLib.EngineTypes.startp = _startpos_r00_;
                MenhirLib.EngineTypes.endp = _endpos_r00_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = r1;
                  MenhirLib.EngineTypes.startp = _startpos_r1_;
                  MenhirLib.EngineTypes.endp = _endpos_r1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 59 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 6763 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let r00 : (
# 47 "parser_cocci_menhir.mly"
      (string)
# 6768 "parser_cocci_menhir.ml"
        ) = Obj.magic r00 in
        let r1 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 6773 "parser_cocci_menhir.ml"
        ) = Obj.magic r1 in
        let _startpos = _startpos_r1_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let p0 = p00 in
          let r0 = r00 in
          let r = r1 in
          let ty =
            let p = p0 in
            let r = r0 in
            
# 510 "parser_cocci_menhir.mly"
    ( let nm = (r,P.id2name p) in
    (* this is only possible when we are in a metavar decl.  Otherwise,
       it will be represented already as a MetaType *)
    let _ = P.check_meta(Ast.MetaTypeDecl(Ast.NONE,nm)) in
    Ast0.wrap(Ast0.MetaType(P.clt2mcode nm (P.id2clt p),
			    Ast0.Impure (*will be ignored*))) )
# 6792 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 6798 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 6805 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 6811 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 6843 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 6848 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let _startpos = _startpos_r0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 517 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.LongType,[P.clt2mcode "long" ty])) )
# 6860 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 6866 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 6873 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 6879 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty200;
            MenhirLib.EngineTypes.startp = _startpos_ty200_;
            MenhirLib.EngineTypes.endp = _endpos_ty200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = ty100;
              MenhirLib.EngineTypes.startp = _startpos_ty100_;
              MenhirLib.EngineTypes.endp = _endpos_ty100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = r0;
                MenhirLib.EngineTypes.startp = _startpos_r0_;
                MenhirLib.EngineTypes.endp = _endpos_r0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty200 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 6916 "parser_cocci_menhir.ml"
        ) = Obj.magic ty200 in
        let ty100 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 6921 "parser_cocci_menhir.ml"
        ) = Obj.magic ty100 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 6926 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let _startpos = _startpos_r0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty20 = ty200 in
          let ty10 = ty100 in
          let r = r0 in
          let ty =
            let ty2 = ty20 in
            let ty1 = ty10 in
            
# 519 "parser_cocci_menhir.mly"
    ( Ast0.wrap
	(Ast0.BaseType
	   (Ast.LongLongType,
	    [P.clt2mcode "long" ty1;P.clt2mcode "long" ty2])) )
# 6943 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 6949 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 6956 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 6962 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 6989 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let _startpos = _startpos_ty00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 501 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.CharType,[P.clt2mcode "char" ty])) )
# 7000 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 7006 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 7013 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 7019 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 7046 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let _startpos = _startpos_ty00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 503 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.ShortType,[P.clt2mcode "short" ty])) )
# 7057 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 7063 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 7070 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 7076 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 7103 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let _startpos = _startpos_ty00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 505 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.IntType,[P.clt2mcode "int" ty])) )
# 7114 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 7120 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 7127 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 7133 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 64 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 7160 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let _startpos = _startpos_p00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let p0 = p00 in
          let ty =
            let p = p0 in
            
# 507 "parser_cocci_menhir.mly"
    ( let (nm,pure,clt) = p in
      Ast0.wrap(Ast0.MetaType(P.clt2mcode nm clt,pure)) )
# 7172 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 7178 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 7185 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 7191 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = r00;
                MenhirLib.EngineTypes.startp = _startpos_r00_;
                MenhirLib.EngineTypes.endp = _endpos_r00_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 59 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 7227 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let r00 : (
# 47 "parser_cocci_menhir.mly"
      (string)
# 7232 "parser_cocci_menhir.ml"
        ) = Obj.magic r00 in
        let _startpos = _startpos_r00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let p0 = p00 in
          let r0 = r00 in
          let ty =
            let p = p0 in
            let r = r0 in
            
# 510 "parser_cocci_menhir.mly"
    ( let nm = (r,P.id2name p) in
    (* this is only possible when we are in a metavar decl.  Otherwise,
       it will be represented already as a MetaType *)
    let _ = P.check_meta(Ast.MetaTypeDecl(Ast.NONE,nm)) in
    Ast0.wrap(Ast0.MetaType(P.clt2mcode nm (P.id2clt p),
			    Ast0.Impure (*will be ignored*))) )
# 7250 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 7256 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 7263 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 7269 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 7296 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let _startpos = _startpos_ty00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 517 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.LongType,[P.clt2mcode "long" ty])) )
# 7307 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 7313 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 7320 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 7326 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty200;
            MenhirLib.EngineTypes.startp = _startpos_ty200_;
            MenhirLib.EngineTypes.endp = _endpos_ty200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ty100;
              MenhirLib.EngineTypes.startp = _startpos_ty100_;
              MenhirLib.EngineTypes.endp = _endpos_ty100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty200 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 7358 "parser_cocci_menhir.ml"
        ) = Obj.magic ty200 in
        let ty100 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 7363 "parser_cocci_menhir.ml"
        ) = Obj.magic ty100 in
        let _startpos = _startpos_ty100_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty20 = ty200 in
          let ty10 = ty100 in
          let ty =
            let ty2 = ty20 in
            let ty1 = ty10 in
            
# 519 "parser_cocci_menhir.mly"
    ( Ast0.wrap
	(Ast0.BaseType
	   (Ast.LongLongType,
	    [P.clt2mcode "long" ty1;P.clt2mcode "long" ty2])) )
# 7379 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 7385 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 7392 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 7398 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 50 "parser_cocci_menhir.mly"
      (Data.clt)
# 7425 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let _startpos = _startpos_ty00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 527 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.VoidType,[P.clt2mcode "void" ty])) )
# 7436 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 7442 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 7449 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 7455 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 7482 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let _startpos = _startpos_ty00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 529 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.DoubleType,[P.clt2mcode "double" ty])) )
# 7493 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 7499 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 7506 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 7512 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 7539 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let _startpos = _startpos_ty00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 531 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.FloatType,[P.clt2mcode "float" ty])) )
# 7550 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 7556 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 7563 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 7569 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = i00;
            MenhirLib.EngineTypes.startp = _startpos_i00_;
            MenhirLib.EngineTypes.endp = _endpos_i00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = s00;
              MenhirLib.EngineTypes.startp = _startpos_s00_;
              MenhirLib.EngineTypes.endp = _endpos_s00_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let i00 : 'tv_ident = Obj.magic i00 in
        let s00 : (
# 50 "parser_cocci_menhir.mly"
      (Data.clt)
# 7602 "parser_cocci_menhir.ml"
        ) = Obj.magic s00 in
        let _startpos = _startpos_s00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let i0 = i00 in
          let s0 = s00 in
          let ty =
            let i = i0 in
            let s = s0 in
            
# 533 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.EnumName(P.clt2mcode "enum" s, i)) )
# 7615 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 7621 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 7628 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 7634 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = i00;
            MenhirLib.EngineTypes.startp = _startpos_i00_;
            MenhirLib.EngineTypes.endp = _endpos_i00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = s00;
              MenhirLib.EngineTypes.startp = _startpos_s00_;
              MenhirLib.EngineTypes.endp = _endpos_s00_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let i00 : 'tv_ident = Obj.magic i00 in
        let s00 : 'tv_struct_or_union = Obj.magic s00 in
        let _startpos = _startpos_s00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let i0 = i00 in
          let s0 = s00 in
          let ty =
            let i = i0 in
            let s = s0 in
            
# 535 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.StructUnionName(s, Some i)) )
# 7676 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 7682 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 7689 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 7695 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = r00;
            MenhirLib.EngineTypes.startp = _startpos_r00_;
            MenhirLib.EngineTypes.endp = _endpos_r00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = d00;
              MenhirLib.EngineTypes.startp = _startpos_d00_;
              MenhirLib.EngineTypes.endp = _endpos_d00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = l00;
                MenhirLib.EngineTypes.startp = _startpos_l00_;
                MenhirLib.EngineTypes.endp = _endpos_l00_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = s00;
                  MenhirLib.EngineTypes.startp = _startpos_s00_;
                  MenhirLib.EngineTypes.endp = _endpos_s00_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let r00 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 7737 "parser_cocci_menhir.ml"
        ) = Obj.magic r00 in
        let d00 : 'tv_struct_decl_list = Obj.magic d00 in
        let l00 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 7743 "parser_cocci_menhir.ml"
        ) = Obj.magic l00 in
        let s00 : 'tv_struct_or_union = Obj.magic s00 in
        let _startpos = _startpos_s00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let r0 = r00 in
          let d0 = d00 in
          let l0 = l00 in
          let s0 = s00 in
          let ty =
            let r = r0 in
            let d = d0 in
            let l = l0 in
            let s = s0 in
            let i =
              
# 39 "standard.mly"
    ( None )
# 7762 "parser_cocci_menhir.ml"
              
            in
            
# 538 "parser_cocci_menhir.mly"
    ( (if i = None && !Data.in_iso
    then failwith "structures must be named in the iso file");
      Ast0.wrap(Ast0.StructUnionDef(Ast0.wrap(Ast0.StructUnionName(s, i)),
				    P.clt2mcode "{" l,
				    d, P.clt2mcode "}" r)) )
# 7772 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 7778 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 7785 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 7791 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = r00;
            MenhirLib.EngineTypes.startp = _startpos_r00_;
            MenhirLib.EngineTypes.endp = _endpos_r00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = d00;
              MenhirLib.EngineTypes.startp = _startpos_d00_;
              MenhirLib.EngineTypes.endp = _endpos_d00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = l00;
                MenhirLib.EngineTypes.startp = _startpos_l00_;
                MenhirLib.EngineTypes.endp = _endpos_l00_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = x000;
                  MenhirLib.EngineTypes.startp = _startpos_x000_;
                  MenhirLib.EngineTypes.endp = _endpos_x000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = s00;
                    MenhirLib.EngineTypes.startp = _startpos_s00_;
                    MenhirLib.EngineTypes.endp = _endpos_s00_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let r00 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 7838 "parser_cocci_menhir.ml"
        ) = Obj.magic r00 in
        let d00 : 'tv_struct_decl_list = Obj.magic d00 in
        let l00 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 7844 "parser_cocci_menhir.ml"
        ) = Obj.magic l00 in
        let x000 : 'tv_ident = Obj.magic x000 in
        let s00 : 'tv_struct_or_union = Obj.magic s00 in
        let _startpos = _startpos_s00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let r0 = r00 in
          let d0 = d00 in
          let l0 = l00 in
          let x00 = x000 in
          let s0 = s00 in
          let ty =
            let r = r0 in
            let d = d0 in
            let l = l0 in
            let x0 = x00 in
            let s = s0 in
            let i =
              let x = x0 in
              
# 41 "standard.mly"
    ( Some x )
# 7867 "parser_cocci_menhir.ml"
              
            in
            
# 538 "parser_cocci_menhir.mly"
    ( (if i = None && !Data.in_iso
    then failwith "structures must be named in the iso file");
      Ast0.wrap(Ast0.StructUnionDef(Ast0.wrap(Ast0.StructUnionName(s, i)),
				    P.clt2mcode "{" l,
				    d, P.clt2mcode "}" r)) )
# 7877 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 7883 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 7890 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 7896 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = r00;
            MenhirLib.EngineTypes.startp = _startpos_r00_;
            MenhirLib.EngineTypes.endp = _endpos_r00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = d00;
              MenhirLib.EngineTypes.startp = _startpos_d00_;
              MenhirLib.EngineTypes.endp = _endpos_d00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = l00;
                MenhirLib.EngineTypes.startp = _startpos_l00_;
                MenhirLib.EngineTypes.endp = _endpos_l00_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = s00;
                  MenhirLib.EngineTypes.startp = _startpos_s00_;
                  MenhirLib.EngineTypes.endp = _endpos_s00_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let r00 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 7938 "parser_cocci_menhir.ml"
        ) = Obj.magic r00 in
        let d00 : 'tv_struct_decl_list = Obj.magic d00 in
        let l00 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 7944 "parser_cocci_menhir.ml"
        ) = Obj.magic l00 in
        let s00 : (
# 64 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 7949 "parser_cocci_menhir.ml"
        ) = Obj.magic s00 in
        let _startpos = _startpos_s00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let r0 = r00 in
          let d0 = d00 in
          let l0 = l00 in
          let s0 = s00 in
          let ty =
            let r = r0 in
            let d = d0 in
            let l = l0 in
            let s = s0 in
            
# 544 "parser_cocci_menhir.mly"
    ( let (nm,pure,clt) = s in
    let ty = Ast0.wrap(Ast0.MetaType(P.clt2mcode nm clt,pure)) in
    Ast0.wrap(Ast0.StructUnionDef(ty,P.clt2mcode "{" l,d,P.clt2mcode "}" r)) )
# 7968 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 7974 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 7981 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 7987 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 59 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 8014 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let _startpos = _startpos_p00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let p0 = p00 in
          let ty =
            let p = p0 in
            
# 548 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.TypeName(P.id2mcode p)) )
# 8025 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 8031 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 8038 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 8044 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 8081 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 8086 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 501 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.CharType,[P.clt2mcode "char" ty])) )
# 8099 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 8105 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 8113 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 8119 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 8156 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 8161 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 503 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.ShortType,[P.clt2mcode "short" ty])) )
# 8174 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 8180 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 8188 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 8194 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 8231 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 8236 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 505 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.IntType,[P.clt2mcode "int" ty])) )
# 8249 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 8255 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 8263 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 8269 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 64 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 8306 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 8311 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let p0 = p00 in
          let r = r0 in
          let ty =
            let p = p0 in
            
# 507 "parser_cocci_menhir.mly"
    ( let (nm,pure,clt) = p in
      Ast0.wrap(Ast0.MetaType(P.clt2mcode nm clt,pure)) )
# 8325 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 8331 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 8339 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 8345 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = r00;
                MenhirLib.EngineTypes.startp = _startpos_r00_;
                MenhirLib.EngineTypes.endp = _endpos_r00_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = r1;
                  MenhirLib.EngineTypes.startp = _startpos_r1_;
                  MenhirLib.EngineTypes.endp = _endpos_r1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x0;
                    MenhirLib.EngineTypes.startp = _startpos_x0_;
                    MenhirLib.EngineTypes.endp = _endpos_x0_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 59 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 8391 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let r00 : (
# 47 "parser_cocci_menhir.mly"
      (string)
# 8396 "parser_cocci_menhir.ml"
        ) = Obj.magic r00 in
        let r1 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 8401 "parser_cocci_menhir.ml"
        ) = Obj.magic r1 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let p0 = p00 in
          let r0 = r00 in
          let r = r1 in
          let ty =
            let p = p0 in
            let r = r0 in
            
# 510 "parser_cocci_menhir.mly"
    ( let nm = (r,P.id2name p) in
    (* this is only possible when we are in a metavar decl.  Otherwise,
       it will be represented already as a MetaType *)
    let _ = P.check_meta(Ast.MetaTypeDecl(Ast.NONE,nm)) in
    Ast0.wrap(Ast0.MetaType(P.clt2mcode nm (P.id2clt p),
			    Ast0.Impure (*will be ignored*))) )
# 8421 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 8427 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 8435 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 8441 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 8478 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 8483 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 517 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.LongType,[P.clt2mcode "long" ty])) )
# 8496 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 8502 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 8510 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 8516 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty200;
            MenhirLib.EngineTypes.startp = _startpos_ty200_;
            MenhirLib.EngineTypes.endp = _endpos_ty200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = ty100;
              MenhirLib.EngineTypes.startp = _startpos_ty100_;
              MenhirLib.EngineTypes.endp = _endpos_ty100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = r0;
                MenhirLib.EngineTypes.startp = _startpos_r0_;
                MenhirLib.EngineTypes.endp = _endpos_r0_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x0;
                  MenhirLib.EngineTypes.startp = _startpos_x0_;
                  MenhirLib.EngineTypes.endp = _endpos_x0_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty200 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 8558 "parser_cocci_menhir.ml"
        ) = Obj.magic ty200 in
        let ty100 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 8563 "parser_cocci_menhir.ml"
        ) = Obj.magic ty100 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 8568 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty20 = ty200 in
          let ty10 = ty100 in
          let r = r0 in
          let ty =
            let ty2 = ty20 in
            let ty1 = ty10 in
            
# 519 "parser_cocci_menhir.mly"
    ( Ast0.wrap
	(Ast0.BaseType
	   (Ast.LongLongType,
	    [P.clt2mcode "long" ty1;P.clt2mcode "long" ty2])) )
# 8586 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 8592 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 8600 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 8606 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 8643 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 8648 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 501 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.CharType,[P.clt2mcode "char" ty])) )
# 8661 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 8667 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 8675 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 8681 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 8718 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 8723 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 503 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.ShortType,[P.clt2mcode "short" ty])) )
# 8736 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 8742 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 8750 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 8756 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 8793 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 8798 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 505 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.IntType,[P.clt2mcode "int" ty])) )
# 8811 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 8817 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 8825 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 8831 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 64 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 8868 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 8873 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let p0 = p00 in
          let r = r0 in
          let ty =
            let p = p0 in
            
# 507 "parser_cocci_menhir.mly"
    ( let (nm,pure,clt) = p in
      Ast0.wrap(Ast0.MetaType(P.clt2mcode nm clt,pure)) )
# 8887 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 8893 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 8901 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 8907 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = r00;
                MenhirLib.EngineTypes.startp = _startpos_r00_;
                MenhirLib.EngineTypes.endp = _endpos_r00_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = r1;
                  MenhirLib.EngineTypes.startp = _startpos_r1_;
                  MenhirLib.EngineTypes.endp = _endpos_r1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x0;
                    MenhirLib.EngineTypes.startp = _startpos_x0_;
                    MenhirLib.EngineTypes.endp = _endpos_x0_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 59 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 8953 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let r00 : (
# 47 "parser_cocci_menhir.mly"
      (string)
# 8958 "parser_cocci_menhir.ml"
        ) = Obj.magic r00 in
        let r1 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 8963 "parser_cocci_menhir.ml"
        ) = Obj.magic r1 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let p0 = p00 in
          let r0 = r00 in
          let r = r1 in
          let ty =
            let p = p0 in
            let r = r0 in
            
# 510 "parser_cocci_menhir.mly"
    ( let nm = (r,P.id2name p) in
    (* this is only possible when we are in a metavar decl.  Otherwise,
       it will be represented already as a MetaType *)
    let _ = P.check_meta(Ast.MetaTypeDecl(Ast.NONE,nm)) in
    Ast0.wrap(Ast0.MetaType(P.clt2mcode nm (P.id2clt p),
			    Ast0.Impure (*will be ignored*))) )
# 8983 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 8989 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 8997 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 9003 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 9040 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 9045 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 517 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.LongType,[P.clt2mcode "long" ty])) )
# 9058 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 9064 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 9072 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 9078 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty200;
            MenhirLib.EngineTypes.startp = _startpos_ty200_;
            MenhirLib.EngineTypes.endp = _endpos_ty200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = ty100;
              MenhirLib.EngineTypes.startp = _startpos_ty100_;
              MenhirLib.EngineTypes.endp = _endpos_ty100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = r0;
                MenhirLib.EngineTypes.startp = _startpos_r0_;
                MenhirLib.EngineTypes.endp = _endpos_r0_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x0;
                  MenhirLib.EngineTypes.startp = _startpos_x0_;
                  MenhirLib.EngineTypes.endp = _endpos_x0_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty200 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 9120 "parser_cocci_menhir.ml"
        ) = Obj.magic ty200 in
        let ty100 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 9125 "parser_cocci_menhir.ml"
        ) = Obj.magic ty100 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 9130 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty20 = ty200 in
          let ty10 = ty100 in
          let r = r0 in
          let ty =
            let ty2 = ty20 in
            let ty1 = ty10 in
            
# 519 "parser_cocci_menhir.mly"
    ( Ast0.wrap
	(Ast0.BaseType
	   (Ast.LongLongType,
	    [P.clt2mcode "long" ty1;P.clt2mcode "long" ty2])) )
# 9148 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 9154 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 9162 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 9168 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x0;
              MenhirLib.EngineTypes.startp = _startpos_x0_;
              MenhirLib.EngineTypes.endp = _endpos_x0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 9200 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 501 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.CharType,[P.clt2mcode "char" ty])) )
# 9212 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 9218 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 9226 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 9232 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x0;
              MenhirLib.EngineTypes.startp = _startpos_x0_;
              MenhirLib.EngineTypes.endp = _endpos_x0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 9264 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 503 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.ShortType,[P.clt2mcode "short" ty])) )
# 9276 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 9282 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 9290 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 9296 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x0;
              MenhirLib.EngineTypes.startp = _startpos_x0_;
              MenhirLib.EngineTypes.endp = _endpos_x0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 9328 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 505 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.IntType,[P.clt2mcode "int" ty])) )
# 9340 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 9346 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 9354 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 9360 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x0;
              MenhirLib.EngineTypes.startp = _startpos_x0_;
              MenhirLib.EngineTypes.endp = _endpos_x0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 64 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 9392 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let p0 = p00 in
          let ty =
            let p = p0 in
            
# 507 "parser_cocci_menhir.mly"
    ( let (nm,pure,clt) = p in
      Ast0.wrap(Ast0.MetaType(P.clt2mcode nm clt,pure)) )
# 9405 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 9411 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 9419 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 9425 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = r00;
                MenhirLib.EngineTypes.startp = _startpos_r00_;
                MenhirLib.EngineTypes.endp = _endpos_r00_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x0;
                  MenhirLib.EngineTypes.startp = _startpos_x0_;
                  MenhirLib.EngineTypes.endp = _endpos_x0_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 59 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 9466 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let r00 : (
# 47 "parser_cocci_menhir.mly"
      (string)
# 9471 "parser_cocci_menhir.ml"
        ) = Obj.magic r00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let p0 = p00 in
          let r0 = r00 in
          let ty =
            let p = p0 in
            let r = r0 in
            
# 510 "parser_cocci_menhir.mly"
    ( let nm = (r,P.id2name p) in
    (* this is only possible when we are in a metavar decl.  Otherwise,
       it will be represented already as a MetaType *)
    let _ = P.check_meta(Ast.MetaTypeDecl(Ast.NONE,nm)) in
    Ast0.wrap(Ast0.MetaType(P.clt2mcode nm (P.id2clt p),
			    Ast0.Impure (*will be ignored*))) )
# 9490 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 9496 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 9504 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 9510 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x0;
              MenhirLib.EngineTypes.startp = _startpos_x0_;
              MenhirLib.EngineTypes.endp = _endpos_x0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 9542 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 517 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.LongType,[P.clt2mcode "long" ty])) )
# 9554 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 9560 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 9568 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 9574 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty200;
            MenhirLib.EngineTypes.startp = _startpos_ty200_;
            MenhirLib.EngineTypes.endp = _endpos_ty200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = ty100;
              MenhirLib.EngineTypes.startp = _startpos_ty100_;
              MenhirLib.EngineTypes.endp = _endpos_ty100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty200 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 9611 "parser_cocci_menhir.ml"
        ) = Obj.magic ty200 in
        let ty100 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 9616 "parser_cocci_menhir.ml"
        ) = Obj.magic ty100 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty20 = ty200 in
          let ty10 = ty100 in
          let ty =
            let ty2 = ty20 in
            let ty1 = ty10 in
            
# 519 "parser_cocci_menhir.mly"
    ( Ast0.wrap
	(Ast0.BaseType
	   (Ast.LongLongType,
	    [P.clt2mcode "long" ty1;P.clt2mcode "long" ty2])) )
# 9633 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 9639 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 9647 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 9653 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x0;
              MenhirLib.EngineTypes.startp = _startpos_x0_;
              MenhirLib.EngineTypes.endp = _endpos_x0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 50 "parser_cocci_menhir.mly"
      (Data.clt)
# 9685 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 527 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.VoidType,[P.clt2mcode "void" ty])) )
# 9697 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 9703 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 9711 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 9717 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x0;
              MenhirLib.EngineTypes.startp = _startpos_x0_;
              MenhirLib.EngineTypes.endp = _endpos_x0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 9749 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 529 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.DoubleType,[P.clt2mcode "double" ty])) )
# 9761 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 9767 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 9775 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 9781 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x0;
              MenhirLib.EngineTypes.startp = _startpos_x0_;
              MenhirLib.EngineTypes.endp = _endpos_x0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 9813 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 531 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.FloatType,[P.clt2mcode "float" ty])) )
# 9825 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 9831 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 9839 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 9845 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = i00;
            MenhirLib.EngineTypes.startp = _startpos_i00_;
            MenhirLib.EngineTypes.endp = _endpos_i00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = s00;
              MenhirLib.EngineTypes.startp = _startpos_s00_;
              MenhirLib.EngineTypes.endp = _endpos_s00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let i00 : 'tv_ident = Obj.magic i00 in
        let s00 : (
# 50 "parser_cocci_menhir.mly"
      (Data.clt)
# 9883 "parser_cocci_menhir.ml"
        ) = Obj.magic s00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let i0 = i00 in
          let s0 = s00 in
          let ty =
            let i = i0 in
            let s = s0 in
            
# 533 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.EnumName(P.clt2mcode "enum" s, i)) )
# 9897 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 9903 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 9911 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 9917 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = i00;
            MenhirLib.EngineTypes.startp = _startpos_i00_;
            MenhirLib.EngineTypes.endp = _endpos_i00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = s00;
              MenhirLib.EngineTypes.startp = _startpos_s00_;
              MenhirLib.EngineTypes.endp = _endpos_s00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let i00 : 'tv_ident = Obj.magic i00 in
        let s00 : 'tv_struct_or_union = Obj.magic s00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let i0 = i00 in
          let s0 = s00 in
          let ty =
            let i = i0 in
            let s = s0 in
            
# 535 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.StructUnionName(s, Some i)) )
# 9965 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 9971 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 9979 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 9985 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = r00;
            MenhirLib.EngineTypes.startp = _startpos_r00_;
            MenhirLib.EngineTypes.endp = _endpos_r00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = d00;
              MenhirLib.EngineTypes.startp = _startpos_d00_;
              MenhirLib.EngineTypes.endp = _endpos_d00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = l00;
                MenhirLib.EngineTypes.startp = _startpos_l00_;
                MenhirLib.EngineTypes.endp = _endpos_l00_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = s00;
                  MenhirLib.EngineTypes.startp = _startpos_s00_;
                  MenhirLib.EngineTypes.endp = _endpos_s00_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x0;
                    MenhirLib.EngineTypes.startp = _startpos_x0_;
                    MenhirLib.EngineTypes.endp = _endpos_x0_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let r00 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 10032 "parser_cocci_menhir.ml"
        ) = Obj.magic r00 in
        let d00 : 'tv_struct_decl_list = Obj.magic d00 in
        let l00 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 10038 "parser_cocci_menhir.ml"
        ) = Obj.magic l00 in
        let s00 : 'tv_struct_or_union = Obj.magic s00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let r0 = r00 in
          let d0 = d00 in
          let l0 = l00 in
          let s0 = s00 in
          let ty =
            let r = r0 in
            let d = d0 in
            let l = l0 in
            let s = s0 in
            let i =
              
# 39 "standard.mly"
    ( None )
# 10058 "parser_cocci_menhir.ml"
              
            in
            
# 538 "parser_cocci_menhir.mly"
    ( (if i = None && !Data.in_iso
    then failwith "structures must be named in the iso file");
      Ast0.wrap(Ast0.StructUnionDef(Ast0.wrap(Ast0.StructUnionName(s, i)),
				    P.clt2mcode "{" l,
				    d, P.clt2mcode "}" r)) )
# 10068 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 10074 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 10082 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 10088 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = r00;
            MenhirLib.EngineTypes.startp = _startpos_r00_;
            MenhirLib.EngineTypes.endp = _endpos_r00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = d00;
              MenhirLib.EngineTypes.startp = _startpos_d00_;
              MenhirLib.EngineTypes.endp = _endpos_d00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = l00;
                MenhirLib.EngineTypes.startp = _startpos_l00_;
                MenhirLib.EngineTypes.endp = _endpos_l00_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = x000;
                  MenhirLib.EngineTypes.startp = _startpos_x000_;
                  MenhirLib.EngineTypes.endp = _endpos_x000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = s00;
                    MenhirLib.EngineTypes.startp = _startpos_s00_;
                    MenhirLib.EngineTypes.endp = _endpos_s00_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = x0;
                      MenhirLib.EngineTypes.startp = _startpos_x0_;
                      MenhirLib.EngineTypes.endp = _endpos_x0_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let r00 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 10140 "parser_cocci_menhir.ml"
        ) = Obj.magic r00 in
        let d00 : 'tv_struct_decl_list = Obj.magic d00 in
        let l00 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 10146 "parser_cocci_menhir.ml"
        ) = Obj.magic l00 in
        let x000 : 'tv_ident = Obj.magic x000 in
        let s00 : 'tv_struct_or_union = Obj.magic s00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let r0 = r00 in
          let d0 = d00 in
          let l0 = l00 in
          let x00 = x000 in
          let s0 = s00 in
          let ty =
            let r = r0 in
            let d = d0 in
            let l = l0 in
            let x0 = x00 in
            let s = s0 in
            let i =
              let x = x0 in
              
# 41 "standard.mly"
    ( Some x )
# 10170 "parser_cocci_menhir.ml"
              
            in
            
# 538 "parser_cocci_menhir.mly"
    ( (if i = None && !Data.in_iso
    then failwith "structures must be named in the iso file");
      Ast0.wrap(Ast0.StructUnionDef(Ast0.wrap(Ast0.StructUnionName(s, i)),
				    P.clt2mcode "{" l,
				    d, P.clt2mcode "}" r)) )
# 10180 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 10186 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 10194 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 10200 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = r00;
            MenhirLib.EngineTypes.startp = _startpos_r00_;
            MenhirLib.EngineTypes.endp = _endpos_r00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = d00;
              MenhirLib.EngineTypes.startp = _startpos_d00_;
              MenhirLib.EngineTypes.endp = _endpos_d00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = l00;
                MenhirLib.EngineTypes.startp = _startpos_l00_;
                MenhirLib.EngineTypes.endp = _endpos_l00_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = s00;
                  MenhirLib.EngineTypes.startp = _startpos_s00_;
                  MenhirLib.EngineTypes.endp = _endpos_s00_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x0;
                    MenhirLib.EngineTypes.startp = _startpos_x0_;
                    MenhirLib.EngineTypes.endp = _endpos_x0_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let r00 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 10247 "parser_cocci_menhir.ml"
        ) = Obj.magic r00 in
        let d00 : 'tv_struct_decl_list = Obj.magic d00 in
        let l00 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 10253 "parser_cocci_menhir.ml"
        ) = Obj.magic l00 in
        let s00 : (
# 64 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 10258 "parser_cocci_menhir.ml"
        ) = Obj.magic s00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let r0 = r00 in
          let d0 = d00 in
          let l0 = l00 in
          let s0 = s00 in
          let ty =
            let r = r0 in
            let d = d0 in
            let l = l0 in
            let s = s0 in
            
# 544 "parser_cocci_menhir.mly"
    ( let (nm,pure,clt) = s in
    let ty = Ast0.wrap(Ast0.MetaType(P.clt2mcode nm clt,pure)) in
    Ast0.wrap(Ast0.StructUnionDef(ty,P.clt2mcode "{" l,d,P.clt2mcode "}" r)) )
# 10278 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 10284 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 10292 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 10298 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x0;
              MenhirLib.EngineTypes.startp = _startpos_x0_;
              MenhirLib.EngineTypes.endp = _endpos_x0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 59 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 10330 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let ty =
          let p0 = p00 in
          let ty =
            let p = p0 in
            
# 548 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.TypeName(P.id2mcode p)) )
# 10342 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 10348 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 10356 "parser_cocci_menhir.ml"
          
        in
        
# 561 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 10362 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let r : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 10383 "parser_cocci_menhir.ml"
        ) = Obj.magic r in
        let _startpos = _startpos_r_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_ctype = 
# 563 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,None)) )
# 10390 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let r : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 10411 "parser_cocci_menhir.ml"
        ) = Obj.magic r in
        let _startpos = _startpos_r_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_ctype = 
# 565 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,None)) )
# 10418 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = rp;
          MenhirLib.EngineTypes.startp = _startpos_rp_;
          MenhirLib.EngineTypes.endp = _endpos_rp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = lp;
              MenhirLib.EngineTypes.startp = _startpos_lp_;
              MenhirLib.EngineTypes.endp = _endpos_lp_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let rp : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 10449 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let t : 'tv_midzero_list_ctype_ctype_ = Obj.magic t in
        let lp : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 10455 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let _startpos = _startpos_lp_ in
        let _endpos = _endpos_rp_ in
        let _v : 'tv_ctype = 
# 567 "parser_cocci_menhir.mly"
    ( let (mids,code) = t in
      Ast0.wrap
	(Ast0.DisjType(P.clt2mcode "(" lp,code,mids, P.clt2mcode ")" rp)) )
# 10464 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_list_array_dec_ = Obj.magic _2 in
        let _1 : 'tv_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_d_ident = 
# 1081 "parser_cocci_menhir.mly"
      ( (_1,
	 function t ->
	   List.fold_right
	     (function (l,i,r) ->
	       function rest ->
		 Ast0.wrap
		   (Ast0.Array(rest,P.clt2mcode "[" l,i,P.clt2mcode "]" r)))
	     _2 t) )
# 10501 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let i : 'tv_ident = Obj.magic i in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_decl = 
# 837 "parser_cocci_menhir.mly"
 ( Ast0.wrap(Ast0.Param(t, Some i)) )
# 10531 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t_ in
        let _v : 'tv_decl = 
# 838 "parser_cocci_menhir.mly"
              ( (*verify in FunDecl*) Ast0.wrap(Ast0.Param(t, None)) )
# 10555 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = rp1;
          MenhirLib.EngineTypes.startp = _startpos_rp1_;
          MenhirLib.EngineTypes.endp = _endpos_rp1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = lp1;
              MenhirLib.EngineTypes.startp = _startpos_lp1_;
              MenhirLib.EngineTypes.endp = _endpos_lp1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = rp;
                MenhirLib.EngineTypes.startp = _startpos_rp_;
                MenhirLib.EngineTypes.endp = _endpos_rp_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = i;
                  MenhirLib.EngineTypes.startp = _startpos_i_;
                  MenhirLib.EngineTypes.endp = _endpos_i_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = s;
                    MenhirLib.EngineTypes.startp = _startpos_s_;
                    MenhirLib.EngineTypes.endp = _endpos_s_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = lp;
                      MenhirLib.EngineTypes.startp = _startpos_lp_;
                      MenhirLib.EngineTypes.endp = _endpos_lp_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = t;
                        MenhirLib.EngineTypes.startp = _startpos_t_;
                        MenhirLib.EngineTypes.endp = _endpos_t_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let rp1 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 10611 "parser_cocci_menhir.ml"
        ) = Obj.magic rp1 in
        let d : 'tv_decl_list_name_opt_decl_ = Obj.magic d in
        let lp1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 10617 "parser_cocci_menhir.ml"
        ) = Obj.magic lp1 in
        let rp : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 10622 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let i : 'tv_ident = Obj.magic i in
        let s : (
# 99 "parser_cocci_menhir.mly"
       (Data.clt)
# 10628 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let lp : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 10633 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_rp1_ in
        let _v : 'tv_decl = 
# 841 "parser_cocci_menhir.mly"
        ( let fnptr =
	  Ast0.wrap
	    (Ast0.FunctionPointer
	       (t,P.clt2mcode "(" lp,P.clt2mcode "*" s,P.clt2mcode ")" rp,
		P.clt2mcode "(" lp1,d,P.clt2mcode ")" rp1)) in
	Ast0.wrap(Ast0.Param(fnptr, Some i)) )
# 10646 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 64 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 10667 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_decl = 
# 848 "parser_cocci_menhir.mly"
 ( let (nm,pure,clt) = _1 in
	Ast0.wrap(Ast0.MetaParam(P.clt2mcode nm clt,pure)) )
# 10675 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 59 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 10696 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_decl_ident = 
# 1626 "parser_cocci_menhir.mly"
         ( Ast0.wrap(Ast0.Id(P.id2mcode _1)) )
# 10703 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 62 "parser_cocci_menhir.mly"
       (Parse_aux.idinfo)
# 10724 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_decl_ident = 
# 1628 "parser_cocci_menhir.mly"
         ( let (nm,constraints,pure,clt) = _1 in
         Ast0.wrap(Ast0.MetaId(P.clt2mcode nm clt,constraints,pure)) )
# 10732 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_decl_list_decl_ = 
# 1648 "parser_cocci_menhir.mly"
              ( Ast0.wrap(Ast0.DOTS([])) )
# 10749 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_decl_list_start_decl_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_decl_list_decl_ = 
# 1650 "parser_cocci_menhir.mly"
     (let circle x =
       match Ast0.unwrap x with Ast0.Pcircles(_) -> true | _ -> false in
     if List.exists circle _1
     then Ast0.wrap(Ast0.CIRCLES(_1))
     else Ast0.wrap(Ast0.DOTS(_1)) )
# 10777 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_decl_list_name_opt_decl_ = 
# 1648 "parser_cocci_menhir.mly"
              ( Ast0.wrap(Ast0.DOTS([])) )
# 10794 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_decl_list_start_name_opt_decl_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_decl_list_name_opt_decl_ = 
# 1650 "parser_cocci_menhir.mly"
     (let circle x =
       match Ast0.unwrap x with Ast0.Pcircles(_) -> true | _ -> false in
     if List.exists circle _1
     then Ast0.wrap(Ast0.CIRCLES(_1))
     else Ast0.wrap(Ast0.DOTS(_1)) )
# 10822 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_one_dec_decl_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_decl_list_start_decl_ = 
# 1657 "parser_cocci_menhir.mly"
                 ( [_1] )
# 10846 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_decl_list_start_decl_ = Obj.magic _3 in
        let _2 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 10878 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_one_dec_decl_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_decl_list_start_decl_ = 
# 1659 "parser_cocci_menhir.mly"
    ( _1::Ast0.wrap(Ast0.PComma(P.clt2mcode "," _2))::_3 )
# 10886 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_list_comma_decls_TEllipsis_decl__ = Obj.magic _2 in
        let _1 : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 10913 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_decl_list_start_decl_ = 
# 1661 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Pdots(P.clt2mcode "..." _1))::
      (List.concat(List.map (function x -> x (P.mkpdots "...")) _2)) )
# 10921 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_one_dec_name_opt_decl_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_decl_list_start_name_opt_decl_ = 
# 1657 "parser_cocci_menhir.mly"
                 ( [_1] )
# 10945 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_decl_list_start_name_opt_decl_ = Obj.magic _3 in
        let _2 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 10977 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_one_dec_name_opt_decl_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_decl_list_start_name_opt_decl_ = 
# 1659 "parser_cocci_menhir.mly"
    ( _1::Ast0.wrap(Ast0.PComma(P.clt2mcode "," _2))::_3 )
# 10985 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_list_comma_decls_TEllipsis_name_opt_decl__ = Obj.magic _2 in
        let _1 : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 11012 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_decl_list_start_name_opt_decl_ = 
# 1661 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Pdots(P.clt2mcode "..." _1))::
      (List.concat(List.map (function x -> x (P.mkpdots "...")) _2)) )
# 11020 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 64 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 11041 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_decl_statement = 
# 1159 "parser_cocci_menhir.mly"
      ( let (nm,pure,clt) = _1 in
      [Ast0.wrap(Ast0.MetaStmt(P.clt2mcode nm clt,pure))] )
# 11049 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_decl_var = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_decl_statement = 
# 1162 "parser_cocci_menhir.mly"
      ( List.map
	  (function x ->
	    Ast0.wrap
	      (Ast0.Decl((Ast0.default_info(),Ast0.context_befaft()),x)))
	  _1 )
# 11077 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_statement = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_decl_statement = 
# 1167 "parser_cocci_menhir.mly"
              ( [_1] )
# 11101 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 11132 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let t : 'tv_midzero_list_fun_start_fun_start_ = Obj.magic t in
        let _1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 11138 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_decl_statement = 
# 1176 "parser_cocci_menhir.mly"
      ( let (mids,code) = t in
	if List.for_all
	    (function x ->
	      match Ast0.unwrap x with Ast0.DOTS([]) -> true | _ -> false)
	    code
      then []
      else
	  [Ast0.wrap(Ast0.Disj(P.clt2mcode "(" _1, code, mids,
			       P.clt2mcode ")" _3))] )
# 11153 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 64 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 11174 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_decl_statement_expr = 
# 1189 "parser_cocci_menhir.mly"
      ( let (nm,pure,clt) = _1 in
      [Ast0.wrap(Ast0.MetaStmt(P.clt2mcode nm clt,pure))] )
# 11182 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_decl_var = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_decl_statement_expr = 
# 1192 "parser_cocci_menhir.mly"
      ( List.map
	  (function x ->
	    Ast0.wrap
	      (Ast0.Decl((Ast0.default_info(),Ast0.context_befaft()),x)))
	  _1 )
# 11210 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_statement = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_decl_statement_expr = 
# 1197 "parser_cocci_menhir.mly"
              ( [_1] )
# 11234 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 11265 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let t : 'tv_midzero_list_fun_after_stm_fun_after_dots_or_ = Obj.magic t in
        let _1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 11271 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_decl_statement_expr = 
# 1206 "parser_cocci_menhir.mly"
      ( let (mids,code) = t in
	if List.for_all (function [] -> true | _ -> false) code
      then []
      else
	  let dot_code =
	    List.map (function x -> Ast0.wrap(Ast0.DOTS x)) code in
	  [Ast0.wrap(Ast0.Disj(P.clt2mcode "(" _1, dot_code, mids,
			       P.clt2mcode ")" _3))] )
# 11285 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 11311 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = 
# 969 "parser_cocci_menhir.mly"
      ( [Ast0.wrap(Ast0.TyDecl(t,P.clt2mcode ";" pv))] )
# 11319 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 11350 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_comma_list_d_ident_ = Obj.magic d in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let s =
          
# 39 "standard.mly"
    ( None )
# 11360 "parser_cocci_menhir.ml"
          
        in
        
# 971 "parser_cocci_menhir.mly"
      ( List.map
	  (function (id,fn) ->
	    Ast0.wrap(Ast0.UnInit(s,fn t,id,P.clt2mcode ";" pv)))
	  d )
# 11369 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 11405 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_comma_list_d_ident_ = Obj.magic d in
        let t : 'tv_ctype = Obj.magic t in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let s =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 11417 "parser_cocci_menhir.ml"
          
        in
        
# 971 "parser_cocci_menhir.mly"
      ( List.map
	  (function (id,fn) ->
	    Ast0.wrap(Ast0.UnInit(s,fn t,id,P.clt2mcode ";" pv)))
	  d )
# 11426 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = f;
          MenhirLib.EngineTypes.startp = _startpos_f_;
          MenhirLib.EngineTypes.endp = _endpos_f_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let f : 'tv_funproto = Obj.magic f in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_f_ in
        let _v : 'tv_decl_var = 
# 975 "parser_cocci_menhir.mly"
               ( [f] )
# 11450 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = d;
                MenhirLib.EngineTypes.startp = _startpos_d_;
                MenhirLib.EngineTypes.endp = _endpos_d_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = t;
                  MenhirLib.EngineTypes.startp = _startpos_t_;
                  MenhirLib.EngineTypes.endp = _endpos_t_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 11491 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 11497 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let d : 'tv_d_ident = Obj.magic d in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let s =
          
# 39 "standard.mly"
    ( None )
# 11507 "parser_cocci_menhir.ml"
          
        in
        
# 977 "parser_cocci_menhir.mly"
      (let (id,fn) = d in
      [Ast0.wrap(Ast0.Init(s,fn t,id,P.clt2mcode "=" q,e,P.clt2mcode ";" pv))])
# 11514 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = d;
                MenhirLib.EngineTypes.startp = _startpos_d_;
                MenhirLib.EngineTypes.endp = _endpos_d_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = t;
                  MenhirLib.EngineTypes.startp = _startpos_t_;
                  MenhirLib.EngineTypes.endp = _endpos_t_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x0;
                    MenhirLib.EngineTypes.startp = _startpos_x0_;
                    MenhirLib.EngineTypes.endp = _endpos_x0_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 11560 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 11566 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let d : 'tv_d_ident = Obj.magic d in
        let t : 'tv_ctype = Obj.magic t in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let s =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 11578 "parser_cocci_menhir.ml"
          
        in
        
# 977 "parser_cocci_menhir.mly"
      (let (id,fn) = d in
      [Ast0.wrap(Ast0.Init(s,fn t,id,P.clt2mcode "=" q,e,P.clt2mcode ";" pv))])
# 11585 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 11616 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_comma_list_d_ident_ = Obj.magic d in
        let i : 'tv_pure_ident = Obj.magic i in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let cv =
          
# 39 "standard.mly"
    ( None )
# 11626 "parser_cocci_menhir.ml"
          
        in
        let s =
          
# 39 "standard.mly"
    ( None )
# 11633 "parser_cocci_menhir.ml"
          
        in
        
# 982 "parser_cocci_menhir.mly"
      ( List.map
	  (function (id,fn) ->
	    let idtype =
	      P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
	    Ast0.wrap(Ast0.UnInit(s,fn idtype,id,P.clt2mcode ";" pv)))
	  d )
# 11644 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 11680 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_comma_list_d_ident_ = Obj.magic d in
        let i : 'tv_pure_ident = Obj.magic i in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 11692 "parser_cocci_menhir.ml"
          
        in
        let s =
          
# 39 "standard.mly"
    ( None )
# 11699 "parser_cocci_menhir.ml"
          
        in
        
# 982 "parser_cocci_menhir.mly"
      ( List.map
	  (function (id,fn) ->
	    let idtype =
	      P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
	    Ast0.wrap(Ast0.UnInit(s,fn idtype,id,P.clt2mcode ";" pv)))
	  d )
# 11710 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 11746 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_comma_list_d_ident_ = Obj.magic d in
        let i : 'tv_pure_ident = Obj.magic i in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let cv =
          
# 39 "standard.mly"
    ( None )
# 11757 "parser_cocci_menhir.ml"
          
        in
        let s =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 11765 "parser_cocci_menhir.ml"
          
        in
        
# 982 "parser_cocci_menhir.mly"
      ( List.map
	  (function (id,fn) ->
	    let idtype =
	      P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
	    Ast0.wrap(Ast0.UnInit(s,fn idtype,id,P.clt2mcode ";" pv)))
	  d )
# 11776 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = x1;
                MenhirLib.EngineTypes.startp = _startpos_x1_;
                MenhirLib.EngineTypes.endp = _endpos_x1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x0;
                  MenhirLib.EngineTypes.startp = _startpos_x0_;
                  MenhirLib.EngineTypes.endp = _endpos_x0_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 11817 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_comma_list_d_ident_ = Obj.magic d in
        let i : 'tv_pure_ident = Obj.magic i in
        let x1 : 'tv_const_vol = Obj.magic x1 in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let cv =
          let x = x1 in
          
# 41 "standard.mly"
    ( Some x )
# 11830 "parser_cocci_menhir.ml"
          
        in
        let s =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 11838 "parser_cocci_menhir.ml"
          
        in
        
# 982 "parser_cocci_menhir.mly"
      ( List.map
	  (function (id,fn) ->
	    let idtype =
	      P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
	    Ast0.wrap(Ast0.UnInit(s,fn idtype,id,P.clt2mcode ";" pv)))
	  d )
# 11849 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = d;
                MenhirLib.EngineTypes.startp = _startpos_d_;
                MenhirLib.EngineTypes.endp = _endpos_d_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = i;
                  MenhirLib.EngineTypes.startp = _startpos_i_;
                  MenhirLib.EngineTypes.endp = _endpos_i_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 11890 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 11896 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident = Obj.magic i in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let cv =
          
# 39 "standard.mly"
    ( None )
# 11906 "parser_cocci_menhir.ml"
          
        in
        let s =
          
# 39 "standard.mly"
    ( None )
# 11913 "parser_cocci_menhir.ml"
          
        in
        
# 990 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
      !Data.add_type_name (P.id2name i);
      let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
      [Ast0.wrap(Ast0.Init(s,fn idtype,id,P.clt2mcode "=" q,e,
			   P.clt2mcode ";" pv))] )
# 11923 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = d;
                MenhirLib.EngineTypes.startp = _startpos_d_;
                MenhirLib.EngineTypes.endp = _endpos_d_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = i;
                  MenhirLib.EngineTypes.startp = _startpos_i_;
                  MenhirLib.EngineTypes.endp = _endpos_i_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x0;
                    MenhirLib.EngineTypes.startp = _startpos_x0_;
                    MenhirLib.EngineTypes.endp = _endpos_x0_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 11969 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 11975 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident = Obj.magic i in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 11987 "parser_cocci_menhir.ml"
          
        in
        let s =
          
# 39 "standard.mly"
    ( None )
# 11994 "parser_cocci_menhir.ml"
          
        in
        
# 990 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
      !Data.add_type_name (P.id2name i);
      let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
      [Ast0.wrap(Ast0.Init(s,fn idtype,id,P.clt2mcode "=" q,e,
			   P.clt2mcode ";" pv))] )
# 12004 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = d;
                MenhirLib.EngineTypes.startp = _startpos_d_;
                MenhirLib.EngineTypes.endp = _endpos_d_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = i;
                  MenhirLib.EngineTypes.startp = _startpos_i_;
                  MenhirLib.EngineTypes.endp = _endpos_i_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x0;
                    MenhirLib.EngineTypes.startp = _startpos_x0_;
                    MenhirLib.EngineTypes.endp = _endpos_x0_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 12050 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 12056 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident = Obj.magic i in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let cv =
          
# 39 "standard.mly"
    ( None )
# 12067 "parser_cocci_menhir.ml"
          
        in
        let s =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 12075 "parser_cocci_menhir.ml"
          
        in
        
# 990 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
      !Data.add_type_name (P.id2name i);
      let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
      [Ast0.wrap(Ast0.Init(s,fn idtype,id,P.clt2mcode "=" q,e,
			   P.clt2mcode ";" pv))] )
# 12085 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = d;
                MenhirLib.EngineTypes.startp = _startpos_d_;
                MenhirLib.EngineTypes.endp = _endpos_d_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = i;
                  MenhirLib.EngineTypes.startp = _startpos_i_;
                  MenhirLib.EngineTypes.endp = _endpos_i_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = x1;
                    MenhirLib.EngineTypes.startp = _startpos_x1_;
                    MenhirLib.EngineTypes.endp = _endpos_x1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = x0;
                      MenhirLib.EngineTypes.startp = _startpos_x0_;
                      MenhirLib.EngineTypes.endp = _endpos_x0_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 12136 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 12142 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident = Obj.magic i in
        let x1 : 'tv_const_vol = Obj.magic x1 in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let cv =
          let x = x1 in
          
# 41 "standard.mly"
    ( Some x )
# 12155 "parser_cocci_menhir.ml"
          
        in
        let s =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 12163 "parser_cocci_menhir.ml"
          
        in
        
# 990 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
      !Data.add_type_name (P.id2name i);
      let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
      [Ast0.wrap(Ast0.Init(s,fn idtype,id,P.clt2mcode "=" q,e,
			   P.clt2mcode ";" pv))] )
# 12173 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = rp2;
            MenhirLib.EngineTypes.startp = _startpos_rp2_;
            MenhirLib.EngineTypes.endp = _endpos_rp2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = p;
              MenhirLib.EngineTypes.startp = _startpos_p_;
              MenhirLib.EngineTypes.endp = _endpos_p_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = lp2;
                MenhirLib.EngineTypes.startp = _startpos_lp2_;
                MenhirLib.EngineTypes.endp = _endpos_lp2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = rp1;
                  MenhirLib.EngineTypes.startp = _startpos_rp1_;
                  MenhirLib.EngineTypes.endp = _endpos_rp1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = d;
                    MenhirLib.EngineTypes.startp = _startpos_d_;
                    MenhirLib.EngineTypes.endp = _endpos_d_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = st;
                      MenhirLib.EngineTypes.startp = _startpos_st_;
                      MenhirLib.EngineTypes.endp = _endpos_st_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = lp1;
                        MenhirLib.EngineTypes.startp = _startpos_lp1_;
                        MenhirLib.EngineTypes.endp = _endpos_lp1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = t;
                          MenhirLib.EngineTypes.startp = _startpos_t_;
                          MenhirLib.EngineTypes.endp = _endpos_t_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 12234 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let rp2 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 12239 "parser_cocci_menhir.ml"
        ) = Obj.magic rp2 in
        let p : 'tv_decl_list_name_opt_decl_ = Obj.magic p in
        let lp2 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 12245 "parser_cocci_menhir.ml"
        ) = Obj.magic lp2 in
        let rp1 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 12250 "parser_cocci_menhir.ml"
        ) = Obj.magic rp1 in
        let d : 'tv_d_ident = Obj.magic d in
        let st : (
# 99 "parser_cocci_menhir.mly"
       (Data.clt)
# 12256 "parser_cocci_menhir.ml"
        ) = Obj.magic st in
        let lp1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 12261 "parser_cocci_menhir.ml"
        ) = Obj.magic lp1 in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let s =
          
# 39 "standard.mly"
    ( None )
# 12270 "parser_cocci_menhir.ml"
          
        in
        
# 1000 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        let t =
	  Ast0.wrap
	    (Ast0.FunctionPointer
	       (t,P.clt2mcode "(" lp1,P.clt2mcode "*" st,P.clt2mcode ")" rp1,
		P.clt2mcode "(" lp2,p,P.clt2mcode ")" rp2)) in
        [Ast0.wrap(Ast0.UnInit(s,fn t,id,P.clt2mcode ";" pv))] )
# 12282 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = rp2;
            MenhirLib.EngineTypes.startp = _startpos_rp2_;
            MenhirLib.EngineTypes.endp = _endpos_rp2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = p;
              MenhirLib.EngineTypes.startp = _startpos_p_;
              MenhirLib.EngineTypes.endp = _endpos_p_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = lp2;
                MenhirLib.EngineTypes.startp = _startpos_lp2_;
                MenhirLib.EngineTypes.endp = _endpos_lp2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = rp1;
                  MenhirLib.EngineTypes.startp = _startpos_rp1_;
                  MenhirLib.EngineTypes.endp = _endpos_rp1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = d;
                    MenhirLib.EngineTypes.startp = _startpos_d_;
                    MenhirLib.EngineTypes.endp = _endpos_d_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = st;
                      MenhirLib.EngineTypes.startp = _startpos_st_;
                      MenhirLib.EngineTypes.endp = _endpos_st_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = lp1;
                        MenhirLib.EngineTypes.startp = _startpos_lp1_;
                        MenhirLib.EngineTypes.endp = _endpos_lp1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = t;
                          MenhirLib.EngineTypes.startp = _startpos_t_;
                          MenhirLib.EngineTypes.endp = _endpos_t_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = x0;
                            MenhirLib.EngineTypes.startp = _startpos_x0_;
                            MenhirLib.EngineTypes.endp = _endpos_x0_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 12348 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let rp2 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 12353 "parser_cocci_menhir.ml"
        ) = Obj.magic rp2 in
        let p : 'tv_decl_list_name_opt_decl_ = Obj.magic p in
        let lp2 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 12359 "parser_cocci_menhir.ml"
        ) = Obj.magic lp2 in
        let rp1 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 12364 "parser_cocci_menhir.ml"
        ) = Obj.magic rp1 in
        let d : 'tv_d_ident = Obj.magic d in
        let st : (
# 99 "parser_cocci_menhir.mly"
       (Data.clt)
# 12370 "parser_cocci_menhir.ml"
        ) = Obj.magic st in
        let lp1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 12375 "parser_cocci_menhir.ml"
        ) = Obj.magic lp1 in
        let t : 'tv_ctype = Obj.magic t in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let s =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 12386 "parser_cocci_menhir.ml"
          
        in
        
# 1000 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        let t =
	  Ast0.wrap
	    (Ast0.FunctionPointer
	       (t,P.clt2mcode "(" lp1,P.clt2mcode "*" st,P.clt2mcode ")" rp1,
		P.clt2mcode "(" lp2,p,P.clt2mcode ")" rp2)) in
        [Ast0.wrap(Ast0.UnInit(s,fn t,id,P.clt2mcode ";" pv))] )
# 12398 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let _5 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 12439 "parser_cocci_menhir.ml"
        ) = Obj.magic _5 in
        let _4 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 12444 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr_list_option = Obj.magic _3 in
        let _2 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 12450 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_decl_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_decl_var = 
# 1008 "parser_cocci_menhir.mly"
      ( [Ast0.wrap(Ast0.MacroDecl(_1,P.clt2mcode "(" _2,_3,
				  P.clt2mcode ")" _4,P.clt2mcode ";" _5))] )
# 12459 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = rp2;
                MenhirLib.EngineTypes.startp = _startpos_rp2_;
                MenhirLib.EngineTypes.endp = _endpos_rp2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = p;
                  MenhirLib.EngineTypes.startp = _startpos_p_;
                  MenhirLib.EngineTypes.endp = _endpos_p_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = lp2;
                    MenhirLib.EngineTypes.startp = _startpos_lp2_;
                    MenhirLib.EngineTypes.endp = _endpos_lp2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = rp1;
                      MenhirLib.EngineTypes.startp = _startpos_rp1_;
                      MenhirLib.EngineTypes.endp = _endpos_rp1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = d;
                        MenhirLib.EngineTypes.startp = _startpos_d_;
                        MenhirLib.EngineTypes.endp = _endpos_d_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = st;
                          MenhirLib.EngineTypes.startp = _startpos_st_;
                          MenhirLib.EngineTypes.endp = _endpos_st_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.semv = lp1;
                            MenhirLib.EngineTypes.startp = _startpos_lp1_;
                            MenhirLib.EngineTypes.endp = _endpos_lp1_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = t;
                              MenhirLib.EngineTypes.startp = _startpos_t_;
                              MenhirLib.EngineTypes.endp = _endpos_t_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 12530 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 12536 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let rp2 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 12541 "parser_cocci_menhir.ml"
        ) = Obj.magic rp2 in
        let p : 'tv_decl_list_name_opt_decl_ = Obj.magic p in
        let lp2 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 12547 "parser_cocci_menhir.ml"
        ) = Obj.magic lp2 in
        let rp1 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 12552 "parser_cocci_menhir.ml"
        ) = Obj.magic rp1 in
        let d : 'tv_d_ident = Obj.magic d in
        let st : (
# 99 "parser_cocci_menhir.mly"
       (Data.clt)
# 12558 "parser_cocci_menhir.ml"
        ) = Obj.magic st in
        let lp1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 12563 "parser_cocci_menhir.ml"
        ) = Obj.magic lp1 in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let s =
          
# 39 "standard.mly"
    ( None )
# 12572 "parser_cocci_menhir.ml"
          
        in
        
# 1014 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        let t =
	  Ast0.wrap
	    (Ast0.FunctionPointer
	       (t,P.clt2mcode "(" lp1,P.clt2mcode "*" st,P.clt2mcode ")" rp1,
		P.clt2mcode "(" lp2,p,P.clt2mcode ")" rp2)) in
      [Ast0.wrap(Ast0.Init(s,fn t,id,P.clt2mcode "=" q,e,P.clt2mcode ";" pv))])
# 12584 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = rp2;
                MenhirLib.EngineTypes.startp = _startpos_rp2_;
                MenhirLib.EngineTypes.endp = _endpos_rp2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = p;
                  MenhirLib.EngineTypes.startp = _startpos_p_;
                  MenhirLib.EngineTypes.endp = _endpos_p_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = lp2;
                    MenhirLib.EngineTypes.startp = _startpos_lp2_;
                    MenhirLib.EngineTypes.endp = _endpos_lp2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = rp1;
                      MenhirLib.EngineTypes.startp = _startpos_rp1_;
                      MenhirLib.EngineTypes.endp = _endpos_rp1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = d;
                        MenhirLib.EngineTypes.startp = _startpos_d_;
                        MenhirLib.EngineTypes.endp = _endpos_d_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = st;
                          MenhirLib.EngineTypes.startp = _startpos_st_;
                          MenhirLib.EngineTypes.endp = _endpos_st_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.semv = lp1;
                            MenhirLib.EngineTypes.startp = _startpos_lp1_;
                            MenhirLib.EngineTypes.endp = _endpos_lp1_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.semv = t;
                              MenhirLib.EngineTypes.startp = _startpos_t_;
                              MenhirLib.EngineTypes.endp = _endpos_t_;
                              MenhirLib.EngineTypes.next = {
                                MenhirLib.EngineTypes.state = _menhir_s;
                                MenhirLib.EngineTypes.semv = x0;
                                MenhirLib.EngineTypes.startp = _startpos_x0_;
                                MenhirLib.EngineTypes.endp = _endpos_x0_;
                                MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 12660 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 12666 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let rp2 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 12671 "parser_cocci_menhir.ml"
        ) = Obj.magic rp2 in
        let p : 'tv_decl_list_name_opt_decl_ = Obj.magic p in
        let lp2 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 12677 "parser_cocci_menhir.ml"
        ) = Obj.magic lp2 in
        let rp1 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 12682 "parser_cocci_menhir.ml"
        ) = Obj.magic rp1 in
        let d : 'tv_d_ident = Obj.magic d in
        let st : (
# 99 "parser_cocci_menhir.mly"
       (Data.clt)
# 12688 "parser_cocci_menhir.ml"
        ) = Obj.magic st in
        let lp1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 12693 "parser_cocci_menhir.ml"
        ) = Obj.magic lp1 in
        let t : 'tv_ctype = Obj.magic t in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let s =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 12704 "parser_cocci_menhir.ml"
          
        in
        
# 1014 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        let t =
	  Ast0.wrap
	    (Ast0.FunctionPointer
	       (t,P.clt2mcode "(" lp1,P.clt2mcode "*" st,P.clt2mcode ")" rp1,
		P.clt2mcode "(" lp2,p,P.clt2mcode ")" rp2)) in
      [Ast0.wrap(Ast0.Init(s,fn t,id,P.clt2mcode "=" q,e,P.clt2mcode ";" pv))])
# 12716 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = id;
            MenhirLib.EngineTypes.startp = _startpos_id_;
            MenhirLib.EngineTypes.endp = _endpos_id_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = s;
                MenhirLib.EngineTypes.startp = _startpos_s_;
                MenhirLib.EngineTypes.endp = _endpos_s_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 12752 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let id : 'tv_comma_list_typedef_ident_ = Obj.magic id in
        let t : 'tv_typedef_ctype = Obj.magic t in
        let s : (
# 53 "parser_cocci_menhir.mly"
      (Data.clt)
# 12759 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = 
# 1022 "parser_cocci_menhir.mly"
      ( let s = P.clt2mcode "typedef" s in
        List.map
	  (function id ->
	    Ast0.wrap(Ast0.Typedef(s,t,id,P.clt2mcode ";" pv)))
	  id )
# 12770 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_define_param_list_start = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_define_param_list = 
# 739 "parser_cocci_menhir.mly"
     (let circle x =
       match Ast0.unwrap x with Ast0.DPcircles(_) -> true | _ -> false in
     if List.exists circle _1
     then Ast0.wrap(Ast0.CIRCLES(_1))
     else Ast0.wrap(Ast0.DOTS(_1)) )
# 12798 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_define_param_list = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_define_param_list_option = 
# 763 "parser_cocci_menhir.mly"
                                            ( _1 )
# 12822 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_define_param_list_option = 
# 764 "parser_cocci_menhir.mly"
                           ( Ast0.wrap(Ast0.DOTS([])) )
# 12839 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_define_param_list_start = 
# 746 "parser_cocci_menhir.mly"
          ( [Ast0.wrap(Ast0.DParam _1)] )
# 12863 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_define_param_list_start = Obj.magic _3 in
        let _2 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 12895 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_define_param_list_start = 
# 748 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.DParam _1)::
	Ast0.wrap(Ast0.DPComma(P.clt2mcode "," _2))::_3 )
# 12904 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let r : 'tv_list_dp_comma_args_TEllipsis__ = Obj.magic r in
        let d : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 12931 "parser_cocci_menhir.ml"
        ) = Obj.magic d in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_define_param_list_start = 
# 751 "parser_cocci_menhir.mly"
      ( (P.mkdpdots "..." d)::
	(List.concat (List.map (function x -> x (P.mkdpdots "...")) r)) )
# 12939 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 81 "parser_cocci_menhir.mly"
       (Data.clt * token)
# 12960 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_defineop = 
# 698 "parser_cocci_menhir.mly"
    ( let (clt,ident) = _1 in
      function body ->
	Ast0.wrap
	  (Ast0.Define
	     (P.clt2mcode "#define" clt,
	      (match ident with
		TMetaId((nm,constraints,pure,clt)) ->
		  Ast0.wrap(Ast0.MetaId(P.clt2mcode nm clt,constraints,pure))
	      | TIdent(nm_pure) ->
		  Ast0.wrap(Ast0.Id(P.id2mcode nm_pure))
	      | _ ->
		  raise
		    (Semantic_cocci.Semantic
		       "unexpected name for a #define")),
	      Ast0.wrap Ast0.NoParams,
	      body)) )
# 12982 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 13013 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_define_param_list_option = Obj.magic _2 in
        let _1 : (
# 82 "parser_cocci_menhir.mly"
       (Data.clt * token * int * int)
# 13019 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_defineop = 
# 715 "parser_cocci_menhir.mly"
    ( let (clt,ident,parenoff,parencol) = _1 in
      (* clt is the start of the #define itself *)
      let (arity,line,lline,offset,col,strbef,straft,pos) = clt in
      let lp =
	P.clt2mcode "("
	  (arity,line,lline,parenoff,parencol,[],[],Ast0.NoMetaPos) in
      function body ->
	Ast0.wrap
	  (Ast0.Define
	     (P.clt2mcode "#define" clt,
	      (match ident with
		TMetaId((nm,constraints,pure,clt)) ->
		  Ast0.wrap(Ast0.MetaId(P.clt2mcode nm clt,constraints,pure))
	      | TIdent(nm_pure) ->
		  Ast0.wrap(Ast0.Id(P.id2mcode nm_pure))
	      | _ ->
		  raise
		    (Semantic_cocci.Semantic
		       "unexpected name for a #define")),
	      Ast0.wrap (Ast0.DParams (lp,_2,P.clt2mcode ")" _3)),body)) )
# 13045 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_pnrule = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_dep = 
# 225 "parser_cocci_menhir.mly"
                   ( _1 )
# 13069 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_dep = Obj.magic _3 in
        let _1 : 'tv_dep = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_dep = 
# 226 "parser_cocci_menhir.mly"
                   ( Ast.AndDep(_1, _3) )
# 13103 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_dep = Obj.magic _3 in
        let _1 : 'tv_dep = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_dep = 
# 227 "parser_cocci_menhir.mly"
                   ( Ast.OrDep (_1, _3) )
# 13137 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_depends = 
# 221 "parser_cocci_menhir.mly"
                           ( Ast.NoDep )
# 13154 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = parents;
          MenhirLib.EngineTypes.startp = _startpos_parents_;
          MenhirLib.EngineTypes.endp = _endpos_parents_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let parents : 'tv_dep = Obj.magic parents in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_parents_ in
        let _v : 'tv_depends = 
# 222 "parser_cocci_menhir.mly"
                           ( parents )
# 13186 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_ident = Obj.magic _2 in
        let _1 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 13213 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_designator = 
# 1123 "parser_cocci_menhir.mly"
     ( Ast0.DesignatorField (P.clt2mcode "." _1,_2) )
# 13220 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 102 "parser_cocci_menhir.mly"
       (Data.clt)
# 13251 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_eexpr = Obj.magic _2 in
        let _1 : (
# 102 "parser_cocci_menhir.mly"
       (Data.clt)
# 13257 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_designator = 
# 1125 "parser_cocci_menhir.mly"
     ( Ast0.DesignatorIndex (P.clt2mcode "[" _1,_2,P.clt2mcode "]" _3) )
# 13264 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let _5 : (
# 102 "parser_cocci_menhir.mly"
       (Data.clt)
# 13305 "parser_cocci_menhir.ml"
        ) = Obj.magic _5 in
        let _4 : 'tv_eexpr = Obj.magic _4 in
        let _3 : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 13311 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_eexpr = Obj.magic _2 in
        let _1 : (
# 102 "parser_cocci_menhir.mly"
       (Data.clt)
# 13317 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_designator = 
# 1127 "parser_cocci_menhir.mly"
     ( Ast0.DesignatorRange (P.clt2mcode "[" _1,_2,P.clt2mcode "..." _3,
			     _4,P.clt2mcode "]" _5) )
# 13325 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_basic_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_dexpr = 
# 1226 "parser_cocci_menhir.mly"
                                          ( _1 )
# 13349 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_separated_nonempty_list_TComma_pure_ident_ = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_disable = 
# 240 "parser_cocci_menhir.mly"
                                                      ( List.map P.id2name _2 )
# 13377 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 13398 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_dot_expressions = 
# 1235 "parser_cocci_menhir.mly"
            ( Ast0.wrap(Ast0.Edots(P.clt2mcode "..." _1,None)) )
# 13405 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_nest_expressions = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_dot_expressions = 
# 1236 "parser_cocci_menhir.mly"
                   ( _1 )
# 13429 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = c;
            MenhirLib.EngineTypes.startp = _startpos_c_;
            MenhirLib.EngineTypes.endp = _endpos_c_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let d : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 13455 "parser_cocci_menhir.ml"
        ) = Obj.magic d in
        let c : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 13460 "parser_cocci_menhir.ml"
        ) = Obj.magic c in
        let _startpos = _startpos_c_ in
        let _endpos = _endpos_d_ in
        let _v : 'tv_dp_comma_args_TEllipsis_ = 
# 756 "parser_cocci_menhir.mly"
    ( function dot_builder ->
      [Ast0.wrap(Ast0.DPComma(P.clt2mcode "," c)); dot_builder d] )
# 13468 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_ident = Obj.magic _2 in
        let _1 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 13495 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_dp_comma_args_TEllipsis_ = 
# 759 "parser_cocci_menhir.mly"
    ( function dot_builder ->
      [Ast0.wrap(Ast0.DPComma(P.clt2mcode "," _1));
	Ast0.wrap(Ast0.DParam _2)] )
# 13504 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let d : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 13525 "parser_cocci_menhir.ml"
        ) = Obj.magic d in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v : 'tv_edots_when_TEllipsis_eexpr_ = 
# 1924 "parser_cocci_menhir.mly"
                                                  ( (d,None) )
# 13532 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = w;
            MenhirLib.EngineTypes.startp = _startpos_w_;
            MenhirLib.EngineTypes.endp = _endpos_w_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = d;
                  MenhirLib.EngineTypes.startp = _startpos_d_;
                  MenhirLib.EngineTypes.endp = _endpos_d_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let w : 'tv_eexpr = Obj.magic w in
        let d : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 13571 "parser_cocci_menhir.ml"
        ) = Obj.magic d in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_edots_when_TEllipsis_eexpr_ = 
# 1925 "parser_cocci_menhir.mly"
                                                  ( (d,Some w) )
# 13578 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let d : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 13599 "parser_cocci_menhir.ml"
        ) = Obj.magic d in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v : 'tv_edots_when_TEllipsis_initialize_ = 
# 1924 "parser_cocci_menhir.mly"
                                                  ( (d,None) )
# 13606 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = w;
            MenhirLib.EngineTypes.startp = _startpos_w_;
            MenhirLib.EngineTypes.endp = _endpos_w_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = d;
                  MenhirLib.EngineTypes.startp = _startpos_d_;
                  MenhirLib.EngineTypes.endp = _endpos_d_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let w : 'tv_initialize = Obj.magic w in
        let d : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 13645 "parser_cocci_menhir.ml"
        ) = Obj.magic d in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_edots_when_TEllipsis_initialize_ = 
# 1925 "parser_cocci_menhir.mly"
                                                  ( (d,Some w) )
# 13652 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let d : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 13673 "parser_cocci_menhir.ml"
        ) = Obj.magic d in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v : 'tv_edots_when_TEllipsis_struct_decl_ = 
# 1924 "parser_cocci_menhir.mly"
                                                  ( (d,None) )
# 13680 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = w;
            MenhirLib.EngineTypes.startp = _startpos_w_;
            MenhirLib.EngineTypes.endp = _endpos_w_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = d;
                  MenhirLib.EngineTypes.startp = _startpos_d_;
                  MenhirLib.EngineTypes.endp = _endpos_d_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let w : 'tv_struct_decl = Obj.magic w in
        let d : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 13719 "parser_cocci_menhir.ml"
        ) = Obj.magic d in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_edots_when_TEllipsis_struct_decl_ = 
# 1925 "parser_cocci_menhir.mly"
                                                  ( (d,Some w) )
# 13726 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_basic_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_eexpr = 
# 1224 "parser_cocci_menhir.mly"
                                         ( _1 )
# 13750 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_eexpr_list_start = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_eexpr_list = 
# 1868 "parser_cocci_menhir.mly"
     (let circle x =
       match Ast0.unwrap x with Ast0.Ecircles(_) -> true | _ -> false in
     let star x =
       match Ast0.unwrap x with Ast0.Estars(_) -> true | _ -> false in
     if List.exists circle _1
     then Ast0.wrap(Ast0.CIRCLES(_1))
     else
       if List.exists star _1
       then Ast0.wrap(Ast0.STARS(_1))
       else Ast0.wrap(Ast0.DOTS(_1)) )
# 13783 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_eexpr_list = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_eexpr_list_option = 
# 1907 "parser_cocci_menhir.mly"
                              ( _1 )
# 13807 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_eexpr_list_option = 
# 1908 "parser_cocci_menhir.mly"
                           ( Ast0.wrap(Ast0.DOTS([])) )
# 13824 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_aexpr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_eexpr_list_start = 
# 1895 "parser_cocci_menhir.mly"
          ( [_1] )
# 13848 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_eexpr_list_start = Obj.magic _3 in
        let _2 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 13880 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_aexpr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_eexpr_list_start = 
# 1897 "parser_cocci_menhir.mly"
      ( _1::Ast0.wrap(Ast0.EComma(P.clt2mcode "," _2))::_3 )
# 13888 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_exists = 
# 243 "parser_cocci_menhir.mly"
          ( Ast.Exists )
# 13910 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_exists = 
# 244 "parser_cocci_menhir.mly"
          ( Ast.Forall )
# 13932 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_exists = 
# 245 "parser_cocci_menhir.mly"
          ( Ast.Undetermined )
# 13949 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_basic_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_expr = 
# 1222 "parser_cocci_menhir.mly"
                                ( _1 )
# 13973 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let r : 'tv_no_dot_start_end_dexpr_edots_when_TEllipsis_eexpr__ = Obj.magic r in
        let _startpos = _startpos_r_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_expr_dots_TEllipsis_ = 
# 1404 "parser_cocci_menhir.mly"
                                                       ( r )
# 13997 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_extends = 
# 216 "parser_cocci_menhir.mly"
                                                  ( () )
# 14014 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = parent;
          MenhirLib.EngineTypes.startp = _startpos_parent_;
          MenhirLib.EngineTypes.endp = _endpos_parent_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let parent : (
# 47 "parser_cocci_menhir.mly"
      (string)
# 14039 "parser_cocci_menhir.ml"
        ) = Obj.magic parent in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_parent_ in
        let _v : 'tv_extends = 
# 218 "parser_cocci_menhir.mly"
    ( !Data.install_bindings (parent) )
# 14046 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 83 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 14072 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 83 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 14077 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_filespec = 
# 655 "parser_cocci_menhir.mly"
    ( [Ast0.wrap
	  (Ast0.FILEINFO(P.id2mcode _1,
			 P.id2mcode _2))] )
# 14086 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_fninfo = 
# 792 "parser_cocci_menhir.mly"
                ( [] )
# 14103 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fninfo = Obj.magic _2 in
        let _1 : 'tv_storage = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fninfo = 
# 794 "parser_cocci_menhir.mly"
      ( try
	let _ =
	  List.find (function Ast0.FStorage(_) -> true | _ -> false) _2 in
	raise (Semantic_cocci.Semantic "duplicate storage")
      with Not_found -> (Ast0.FStorage(_1))::_2 )
# 14137 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let r : 'tv_fninfo_nt = Obj.magic r in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_fninfo = 
# 799 "parser_cocci_menhir.mly"
                        ( (Ast0.FType(t))::r )
# 14167 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fninfo = Obj.magic _2 in
        let _1 : (
# 53 "parser_cocci_menhir.mly"
      (Data.clt)
# 14194 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fninfo = 
# 801 "parser_cocci_menhir.mly"
      ( try
	let _ = List.find (function Ast0.FInline(_) -> true | _ -> false) _2 in
	raise (Semantic_cocci.Semantic "duplicate inline")
      with Not_found -> (Ast0.FInline(P.clt2mcode "inline" _1))::_2 )
# 14204 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fninfo = Obj.magic _2 in
        let _1 : (
# 55 "parser_cocci_menhir.mly"
      (string * Data.clt)
# 14231 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fninfo = 
# 806 "parser_cocci_menhir.mly"
      ( try
	let _ = List.find (function Ast0.FAttr(_) -> true | _ -> false) _2 in
	raise (Semantic_cocci.Semantic "multiple attributes")
      with Not_found -> (Ast0.FAttr(P.id2mcode _1))::_2 )
# 14241 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_fninfo_nt = 
# 812 "parser_cocci_menhir.mly"
                ( [] )
# 14258 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fninfo_nt = Obj.magic _2 in
        let _1 : 'tv_storage = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fninfo_nt = 
# 814 "parser_cocci_menhir.mly"
      ( try
	let _ =
	  List.find (function Ast0.FStorage(_) -> true | _ -> false) _2 in
	raise (Semantic_cocci.Semantic "duplicate storage")
      with Not_found -> (Ast0.FStorage(_1))::_2 )
# 14292 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fninfo_nt = Obj.magic _2 in
        let _1 : (
# 53 "parser_cocci_menhir.mly"
      (Data.clt)
# 14319 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fninfo_nt = 
# 820 "parser_cocci_menhir.mly"
      ( try
	let _ = List.find (function Ast0.FInline(_) -> true | _ -> false) _2 in
	raise (Semantic_cocci.Semantic "duplicate inline")
      with Not_found -> (Ast0.FInline(P.clt2mcode "inline" _1))::_2 )
# 14329 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fninfo_nt = Obj.magic _2 in
        let _1 : (
# 55 "parser_cocci_menhir.mly"
      (string * Data.clt)
# 14356 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fninfo_nt = 
# 825 "parser_cocci_menhir.mly"
      ( try
	let _ = List.find (function Ast0.FAttr(_) -> true | _ -> false) _2 in
	raise (Semantic_cocci.Semantic "duplicate init")
      with Not_found -> (Ast0.FAttr(P.id2mcode _1))::_2 )
# 14366 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_fun_after_dots = 
# 1816 "parser_cocci_menhir.mly"
                               ([])
# 14383 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fun_after_exp = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fun_after_dots = 
# 1817 "parser_cocci_menhir.mly"
                               (_2)
# 14411 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fun_after_exp = Obj.magic _2 in
        let _1 : 'tv_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fun_after_dots = 
# 1818 "parser_cocci_menhir.mly"
                               (Ast0.wrap(Ast0.Exp(_1))::_2)
# 14441 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fun_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fun_after_dots = 
# 1819 "parser_cocci_menhir.mly"
                                    (_1@_2)
# 14471 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_fun_after_dots_or = 
# 1826 "parser_cocci_menhir.mly"
                               ([])
# 14488 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fun_after_exp_or = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fun_after_dots_or = 
# 1827 "parser_cocci_menhir.mly"
                               (_2)
# 14516 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fun_after_exp_or = Obj.magic _2 in
        let _1 : 'tv_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fun_after_dots_or = 
# 1828 "parser_cocci_menhir.mly"
                               (Ast0.wrap(Ast0.Exp(_1))::_2)
# 14546 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fun_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fun_after_dots_or = 
# 1829 "parser_cocci_menhir.mly"
                                    (_1@_2)
# 14576 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fun_after_dots = Obj.magic _2 in
        let _1 : 'tv_stm_dots = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fun_after_exp = 
# 1822 "parser_cocci_menhir.mly"
                               (_1::_2)
# 14606 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_fun_after_exp_or = 
# 1832 "parser_cocci_menhir.mly"
                               ([])
# 14623 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fun_after_dots = Obj.magic _2 in
        let _1 : 'tv_stm_dots = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fun_after_exp_or = 
# 1833 "parser_cocci_menhir.mly"
                               (_1::_2)
# 14653 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_fun_after_stm = 
# 1811 "parser_cocci_menhir.mly"
                               ([])
# 14670 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fun_after_dots = Obj.magic _2 in
        let _1 : 'tv_stm_dots = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fun_after_stm = 
# 1812 "parser_cocci_menhir.mly"
                               (_1::_2)
# 14700 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fun_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fun_after_stm = 
# 1813 "parser_cocci_menhir.mly"
                               (_1@_2)
# 14730 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_fun_after_stm = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_fun_start = 
# 1808 "parser_cocci_menhir.mly"
                 ( Ast0.wrap(Ast0.DOTS(_1)) )
# 14754 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_pure_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_func_ident = 
# 1606 "parser_cocci_menhir.mly"
         ( Ast0.wrap(Ast0.Id(P.id2mcode _1)) )
# 14778 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 61 "parser_cocci_menhir.mly"
       (Parse_aux.idinfo)
# 14799 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_func_ident = 
# 1608 "parser_cocci_menhir.mly"
         ( let (nm,constraints,pure,clt) = _1 in
	 Ast0.wrap(Ast0.MetaId(P.clt2mcode nm clt,constraints,pure)) )
# 14807 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 61 "parser_cocci_menhir.mly"
       (Parse_aux.idinfo)
# 14828 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_func_ident = 
# 1611 "parser_cocci_menhir.mly"
         ( let (nm,constraints,pure,clt) = _1 in
	 Ast0.wrap(Ast0.MetaFunc(P.clt2mcode nm clt,constraints,pure)) )
# 14836 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 61 "parser_cocci_menhir.mly"
       (Parse_aux.idinfo)
# 14857 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_func_ident = 
# 1614 "parser_cocci_menhir.mly"
  ( let (nm,constraints,pure,clt) = _1 in
	 Ast0.wrap
	   (Ast0.MetaLocalFunc(P.clt2mcode nm clt,constraints,pure)) )
# 14866 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = rb;
          MenhirLib.EngineTypes.startp = _startpos_rb_;
          MenhirLib.EngineTypes.endp = _endpos_rb_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = b;
            MenhirLib.EngineTypes.startp = _startpos_b_;
            MenhirLib.EngineTypes.endp = _endpos_b_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = lb;
              MenhirLib.EngineTypes.startp = _startpos_lb_;
              MenhirLib.EngineTypes.endp = _endpos_lb_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = rp;
                MenhirLib.EngineTypes.startp = _startpos_rp_;
                MenhirLib.EngineTypes.endp = _endpos_rp_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = d;
                  MenhirLib.EngineTypes.startp = _startpos_d_;
                  MenhirLib.EngineTypes.endp = _endpos_d_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = lp;
                    MenhirLib.EngineTypes.startp = _startpos_lp_;
                    MenhirLib.EngineTypes.endp = _endpos_lp_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = i;
                      MenhirLib.EngineTypes.startp = _startpos_i_;
                      MenhirLib.EngineTypes.endp = _endpos_i_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = f;
                          MenhirLib.EngineTypes.startp = _startpos_f_;
                          MenhirLib.EngineTypes.endp = _endpos_f_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let rb : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 14926 "parser_cocci_menhir.ml"
        ) = Obj.magic rb in
        let b : 'tv_fun_start = Obj.magic b in
        let lb : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 14932 "parser_cocci_menhir.ml"
        ) = Obj.magic lb in
        let rp : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 14937 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let d : 'tv_decl_list_decl_ = Obj.magic d in
        let lp : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 14943 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let i : 'tv_func_ident = Obj.magic i in
        let f : 'tv_fninfo = Obj.magic f in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_rb_ in
        let _v : 'tv_fundecl = 
# 783 "parser_cocci_menhir.mly"
      ( P.verify_parameter_declarations (Ast0.undots d);
	Ast0.wrap(Ast0.FunDecl((Ast0.default_info(),Ast0.context_befaft()),
			       f, i,
			       P.clt2mcode "(" lp, d,
			       P.clt2mcode ")" rp,
			       P.clt2mcode "{" lb, b,
			       P.clt2mcode "}" rb)) )
# 14958 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pt;
          MenhirLib.EngineTypes.startp = _startpos_pt_;
          MenhirLib.EngineTypes.endp = _endpos_pt_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = rp;
            MenhirLib.EngineTypes.startp = _startpos_rp_;
            MenhirLib.EngineTypes.endp = _endpos_rp_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = d;
              MenhirLib.EngineTypes.startp = _startpos_d_;
              MenhirLib.EngineTypes.endp = _endpos_d_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = lp;
                MenhirLib.EngineTypes.startp = _startpos_lp_;
                MenhirLib.EngineTypes.endp = _endpos_lp_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = id;
                  MenhirLib.EngineTypes.startp = _startpos_id_;
                  MenhirLib.EngineTypes.endp = _endpos_id_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = t;
                    MenhirLib.EngineTypes.startp = _startpos_t_;
                    MenhirLib.EngineTypes.endp = _endpos_t_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pt : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 15004 "parser_cocci_menhir.ml"
        ) = Obj.magic pt in
        let rp : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 15009 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let d : 'tv_decl_list_name_opt_decl_ = Obj.magic d in
        let lp : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 15015 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let id : 'tv_func_ident = Obj.magic id in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_pt_ in
        let _v : 'tv_funproto = let s =
          
# 39 "standard.mly"
    ( None )
# 15025 "parser_cocci_menhir.ml"
          
        in
        
# 771 "parser_cocci_menhir.mly"
      ( Ast0.wrap
	  (Ast0.UnInit
	     (s,
	      Ast0.wrap
		(Ast0.FunctionType(Some t,
				   P.clt2mcode "(" lp, d, P.clt2mcode ")" rp)),
	      id, P.clt2mcode ";" pt)) )
# 15037 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pt;
          MenhirLib.EngineTypes.startp = _startpos_pt_;
          MenhirLib.EngineTypes.endp = _endpos_pt_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = rp;
            MenhirLib.EngineTypes.startp = _startpos_rp_;
            MenhirLib.EngineTypes.endp = _endpos_rp_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = d;
              MenhirLib.EngineTypes.startp = _startpos_d_;
              MenhirLib.EngineTypes.endp = _endpos_d_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = lp;
                MenhirLib.EngineTypes.startp = _startpos_lp_;
                MenhirLib.EngineTypes.endp = _endpos_lp_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = id;
                  MenhirLib.EngineTypes.startp = _startpos_id_;
                  MenhirLib.EngineTypes.endp = _endpos_id_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = t;
                    MenhirLib.EngineTypes.startp = _startpos_t_;
                    MenhirLib.EngineTypes.endp = _endpos_t_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = x0;
                      MenhirLib.EngineTypes.startp = _startpos_x0_;
                      MenhirLib.EngineTypes.endp = _endpos_x0_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pt : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 15088 "parser_cocci_menhir.ml"
        ) = Obj.magic pt in
        let rp : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 15093 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let d : 'tv_decl_list_name_opt_decl_ = Obj.magic d in
        let lp : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 15099 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let id : 'tv_func_ident = Obj.magic id in
        let t : 'tv_ctype = Obj.magic t in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pt_ in
        let _v : 'tv_funproto = let s =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 15111 "parser_cocci_menhir.ml"
          
        in
        
# 771 "parser_cocci_menhir.mly"
      ( Ast0.wrap
	  (Ast0.UnInit
	     (s,
	      Ast0.wrap
		(Ast0.FunctionType(Some t,
				   P.clt2mcode "(" lp, d, P.clt2mcode ")" rp)),
	      id, P.clt2mcode ";" pt)) )
# 15123 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_pure_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_ident = 
# 1619 "parser_cocci_menhir.mly"
         ( Ast0.wrap(Ast0.Id(P.id2mcode _1)) )
# 15147 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 61 "parser_cocci_menhir.mly"
       (Parse_aux.idinfo)
# 15168 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_ident = 
# 1621 "parser_cocci_menhir.mly"
         ( let (nm,constraints,pure,clt) = _1 in
         Ast0.wrap(Ast0.MetaId(P.clt2mcode nm clt,constraints,pure)) )
# 15176 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let i : 'tv_pure_ident = Obj.magic i in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_ident_or_const = 
# 1573 "parser_cocci_menhir.mly"
                    ( Ast0.wrap(Ast0.Ident(Ast0.wrap(Ast0.Id(P.id2mcode i)))) )
# 15200 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 15221 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_ident_or_const = 
# 1575 "parser_cocci_menhir.mly"
  ( let (x,clt) = _1 in
	 Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Int x) clt)) )
# 15229 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 80 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 15250 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_incl = 
# 256 "parser_cocci_menhir.mly"
                      ( let (x,_) = _1 in Data.Include(x) )
# 15257 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 15282 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_incl = 
# 257 "parser_cocci_menhir.mly"
                      ( Data.Iso(Common.Left(P.id2name _2)) )
# 15289 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 79 "parser_cocci_menhir.mly"
       (string)
# 15314 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_incl = 
# 258 "parser_cocci_menhir.mly"
                      ( Data.Iso(Common.Right _2) )
# 15321 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_comma_list_pure_ident_ = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_incl = 
# 260 "parser_cocci_menhir.mly"
    ( let names = List.map P.id2name _2 in
      (* ensure that the names of virtual and real rules don't overlap *)
      List.iter
      (function name -> Hashtbl.add Data.all_metadecls name [])
      names;
      Data.Virt(names) )
# 15354 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _1 : 'tv_list_incl_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 146 "parser_cocci_menhir.mly"
      (Data.incl_iso list)
# 15382 "parser_cocci_menhir.ml"
        ) = 
# 252 "parser_cocci_menhir.mly"
                       ( _1 )
# 15386 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _1 : 'tv_list_incl_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 146 "parser_cocci_menhir.mly"
      (Data.incl_iso list)
# 15414 "parser_cocci_menhir.ml"
        ) = 
# 253 "parser_cocci_menhir.mly"
                       ( _1 )
# 15418 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 80 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 15439 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_includes = 
# 661 "parser_cocci_menhir.mly"
    ( Ast0.wrap
	      (Ast0.Include(P.clt2mcode "#include"
			      (P.drop_pos (P.drop_aft (P.id2clt _1))),
			    let (arity,ln,lln,offset,col,strbef,straft,pos) =
			      P.id2clt _1 in
			    let clt =
			      (arity,ln,lln,offset,0,strbef,straft,pos) in
			    P.clt2mcode
			      (Ast.Local (Parse_aux.str2inc (P.id2name _1)))
			      (P.drop_bef clt))) )
# 15455 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 80 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 15476 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_includes = 
# 672 "parser_cocci_menhir.mly"
    ( Ast0.wrap
	      (Ast0.Include(P.clt2mcode "#include"
			      (P.drop_pos (P.drop_aft (P.id2clt _1))),
			    let (arity,ln,lln,offset,col,strbef,straft,pos) =
			      P.id2clt _1 in
			    let clt =
			      (arity,ln,lln,offset,0,strbef,straft,pos) in
			    P.clt2mcode
			      (Ast.NonLocal (Parse_aux.str2inc (P.id2name _1)))
			      (P.drop_bef clt))) )
# 15492 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = d;
              MenhirLib.EngineTypes.startp = _startpos_d_;
              MenhirLib.EngineTypes.endp = _endpos_d_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let t : 'tv_ctype = Obj.magic t in
        let d : 'tv_defineop = Obj.magic d in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_includes = 
# 683 "parser_cocci_menhir.mly"
    ( let ty = Ast0.wrap(Ast0.TopExp(Ast0.wrap(Ast0.TypeExp(t)))) in
      d (Ast0.wrap(Ast0.DOTS([ty]))) )
# 15527 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = b;
            MenhirLib.EngineTypes.startp = _startpos_b_;
            MenhirLib.EngineTypes.endp = _endpos_b_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let b : 'tv_toplevel_seq_start_toplevel_after_dots_ = Obj.magic b in
        let _1 : 'tv_defineop = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_includes = 
# 686 "parser_cocci_menhir.mly"
    ( let body =
	match b with
	  [e] ->
	    (match Ast0.unwrap e with
	      Ast0.Exp(e1) ->
		[Ast0.rewrap e (Ast0.TopExp(Ast0.set_arg_exp (e1)))]
	    | _ -> b)
	| _ -> b in
      _1 (Ast0.wrap(Ast0.DOTS(body))) )
# 15569 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_eexpr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_initialize = 
# 1094 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.InitExpr(_1)) )
# 15593 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 15624 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_initialize_list = Obj.magic _2 in
        let _1 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 15630 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_initialize = 
# 1096 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.InitList(P.clt2mcode "{" _1,_2,P.clt2mcode "}" _3)) )
# 15637 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 15663 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 15668 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_initialize = 
# 1098 "parser_cocci_menhir.mly"
      ( Ast0.wrap
	  (Ast0.InitList(P.clt2mcode "{" _1,Ast0.wrap(Ast0.DOTS []),
			 P.clt2mcode "}" _2)) )
# 15677 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 65 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 15698 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_initialize = 
# 1102 "parser_cocci_menhir.mly"
      (let (nm,pure,clt) = _1 in
      Ast0.wrap(Ast0.MetaInit(P.clt2mcode nm clt,pure)) )
# 15706 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_initialize2 = 
# 1108 "parser_cocci_menhir.mly"
                            ( Ast0.wrap(Ast0.InitExpr(_1)) )
# 15730 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 15761 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_initialize_list = Obj.magic _2 in
        let _1 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 15767 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_initialize2 = 
# 1110 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.InitList(P.clt2mcode "{" _1,_2,P.clt2mcode "}" _3)) )
# 15774 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 15800 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 15805 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_initialize2 = 
# 1112 "parser_cocci_menhir.mly"
    ( Ast0.wrap
	(Ast0.InitList(P.clt2mcode "{" _1,Ast0.wrap(Ast0.DOTS []),
		       P.clt2mcode "}" _2)) )
# 15814 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_initialize2 = Obj.magic _3 in
        let _2 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 15846 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_list_designator_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_initialize2 = 
# 1117 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.InitGccExt(_1,P.clt2mcode "=" _2,_3)) )
# 15854 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_initialize2 = Obj.magic _3 in
        let _2 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 15886 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_initialize2 = 
# 1119 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.InitGccName(_1,P.clt2mcode ":" _2,_3)) )
# 15894 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_initialize_list_start = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_initialize_list = 
# 1131 "parser_cocci_menhir.mly"
                         ( Ast0.wrap(Ast0.DOTS(_1)) )
# 15918 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 15944 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_initialize2 = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_initialize_list_start = 
# 1134 "parser_cocci_menhir.mly"
                     ( [_1;Ast0.wrap(Ast0.IComma(P.clt2mcode "," _2))] )
# 15952 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_initialize_list_start = Obj.magic _3 in
        let _2 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 15984 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_initialize2 = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_initialize_list_start = 
# 1136 "parser_cocci_menhir.mly"
    ( _1::Ast0.wrap(Ast0.IComma(P.clt2mcode "," _2))::_3 )
# 15992 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let r : 'tv_comma_initializers_edots_when_TEllipsis_initialize__ = Obj.magic r in
        let d : 'tv_edots_when_TEllipsis_initialize_ = Obj.magic d in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_initialize_list_start = 
# 1139 "parser_cocci_menhir.mly"
    ( (P.mkidots "..." d)::
      (List.concat(List.map (function x -> x (P.mkidots "...")) r)) )
# 16023 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_invalid = 
# 1232 "parser_cocci_menhir.mly"
           ( raise (Semantic_cocci.Semantic "not matchable") )
# 16045 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_is_expression = 
# 248 "parser_cocci_menhir.mly"
              ( false )
# 16062 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_is_expression = 
# 249 "parser_cocci_menhir.mly"
              ( true )
# 16084 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : 'tv_iso_ctype_ = 
# 1976 "parser_cocci_menhir.mly"
                ( Common.Left t )
# 16112 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : 'tv_iso_ctype_ = 
# 1977 "parser_cocci_menhir.mly"
                     ( Common.Right t )
# 16140 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let t : 'tv_decl_var = Obj.magic t in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : 'tv_iso_decl_var_ = 
# 1976 "parser_cocci_menhir.mly"
                ( Common.Left t )
# 16168 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let t : 'tv_decl_var = Obj.magic t in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : 'tv_iso_decl_var_ = 
# 1977 "parser_cocci_menhir.mly"
                     ( Common.Right t )
# 16196 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let t : 'tv_dexpr = Obj.magic t in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : 'tv_iso_dexpr_ = 
# 1976 "parser_cocci_menhir.mly"
                ( Common.Left t )
# 16224 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let t : 'tv_dexpr = Obj.magic t in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : 'tv_iso_dexpr_ = 
# 1977 "parser_cocci_menhir.mly"
                     ( Common.Right t )
# 16252 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let t : 'tv_nest_start = Obj.magic t in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : 'tv_iso_nest_start_ = 
# 1976 "parser_cocci_menhir.mly"
                ( Common.Left t )
# 16280 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let t : 'tv_nest_start = Obj.magic t in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : 'tv_iso_nest_start_ = 
# 1977 "parser_cocci_menhir.mly"
                     ( Common.Right t )
# 16308 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let t : 'tv_single_statement = Obj.magic t in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : 'tv_iso_single_statement_ = 
# 1976 "parser_cocci_menhir.mly"
                ( Common.Left t )
# 16336 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let t : 'tv_single_statement = Obj.magic t in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : 'tv_iso_single_statement_ = 
# 1977 "parser_cocci_menhir.mly"
                     ( Common.Right t )
# 16364 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = el;
            MenhirLib.EngineTypes.startp = _startpos_el_;
            MenhirLib.EngineTypes.endp = _endpos_el_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let el : 'tv_list_iso_dexpr__ = Obj.magic el in
        let e1 : 'tv_dexpr = Obj.magic e1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (
# 162 "parser_cocci_menhir.mly"
      (Ast0_cocci.anything list list)
# 16402 "parser_cocci_menhir.ml"
        ) = 
# 1948 "parser_cocci_menhir.mly"
    ( P.iso_adjust (function x -> Ast0.ExprTag x) e1 el )
# 16406 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = el;
            MenhirLib.EngineTypes.startp = _startpos_el_;
            MenhirLib.EngineTypes.endp = _endpos_el_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let el : 'tv_list_iso_dexpr__ = Obj.magic el in
        let e1 : 'tv_dexpr = Obj.magic e1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (
# 162 "parser_cocci_menhir.mly"
      (Ast0_cocci.anything list list)
# 16444 "parser_cocci_menhir.ml"
        ) = 
# 1950 "parser_cocci_menhir.mly"
    ( P.iso_adjust (function x -> Ast0.ArgExprTag x) e1 el )
# 16448 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = el;
            MenhirLib.EngineTypes.startp = _startpos_el_;
            MenhirLib.EngineTypes.endp = _endpos_el_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let el : 'tv_list_iso_dexpr__ = Obj.magic el in
        let e1 : 'tv_dexpr = Obj.magic e1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (
# 162 "parser_cocci_menhir.mly"
      (Ast0_cocci.anything list list)
# 16486 "parser_cocci_menhir.ml"
        ) = 
# 1952 "parser_cocci_menhir.mly"
    ( P.iso_adjust (function x -> Ast0.TestExprTag x) e1 el )
# 16490 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = sl;
            MenhirLib.EngineTypes.startp = _startpos_sl_;
            MenhirLib.EngineTypes.endp = _endpos_sl_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = s1;
              MenhirLib.EngineTypes.startp = _startpos_s1_;
              MenhirLib.EngineTypes.endp = _endpos_s1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let sl : 'tv_list_iso_single_statement__ = Obj.magic sl in
        let s1 : 'tv_single_statement = Obj.magic s1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (
# 162 "parser_cocci_menhir.mly"
      (Ast0_cocci.anything list list)
# 16528 "parser_cocci_menhir.ml"
        ) = 
# 1954 "parser_cocci_menhir.mly"
    ( P.iso_adjust (function x -> Ast0.StmtTag x) s1 sl )
# 16532 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = tl;
            MenhirLib.EngineTypes.startp = _startpos_tl_;
            MenhirLib.EngineTypes.endp = _endpos_tl_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = t1;
              MenhirLib.EngineTypes.startp = _startpos_t1_;
              MenhirLib.EngineTypes.endp = _endpos_t1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let tl : 'tv_list_iso_ctype__ = Obj.magic tl in
        let t1 : 'tv_ctype = Obj.magic t1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (
# 162 "parser_cocci_menhir.mly"
      (Ast0_cocci.anything list list)
# 16570 "parser_cocci_menhir.ml"
        ) = 
# 1956 "parser_cocci_menhir.mly"
    ( P.iso_adjust (function x -> Ast0.TypeCTag x) t1 tl )
# 16574 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = el;
            MenhirLib.EngineTypes.startp = _startpos_el_;
            MenhirLib.EngineTypes.endp = _endpos_el_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let el : 'tv_list_iso_nest_start__ = Obj.magic el in
        let e1 : 'tv_nest_start = Obj.magic e1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (
# 162 "parser_cocci_menhir.mly"
      (Ast0_cocci.anything list list)
# 16612 "parser_cocci_menhir.ml"
        ) = 
# 1958 "parser_cocci_menhir.mly"
    ( P.iso_adjust (function x -> Ast0.DotsStmtTag x) e1 el )
# 16616 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = dl;
            MenhirLib.EngineTypes.startp = _startpos_dl_;
            MenhirLib.EngineTypes.endp = _endpos_dl_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = d1;
              MenhirLib.EngineTypes.startp = _startpos_d1_;
              MenhirLib.EngineTypes.endp = _endpos_d1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let dl : 'tv_list_iso_decl_var__ = Obj.magic dl in
        let d1 : 'tv_decl_var = Obj.magic d1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (
# 162 "parser_cocci_menhir.mly"
      (Ast0_cocci.anything list list)
# 16654 "parser_cocci_menhir.ml"
        ) = 
# 1960 "parser_cocci_menhir.mly"
    ( let check_one = function
	[x] -> x
      | _ ->
	  raise
	    (Semantic_cocci.Semantic
	       "only one variable per declaration in an isomorphism rule") in
    let d1 = check_one d1 in
    let dl =
      List.map
	(function
	    Common.Left x -> Common.Left(check_one x)
	  | Common.Right x -> Common.Right(check_one x))
	dl in
    P.iso_adjust (function x -> Ast0.DeclTag x) d1 dl )
# 16671 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let m : 'tv_metadec = Obj.magic m in
        let _startpos = _startpos_m_ in
        let _endpos = _endpos_m_ in
        let _v : (
# 165 "parser_cocci_menhir.mly"
      ((Ast_cocci.metavar,Ast_cocci.metavar) Common.either list)
# 16695 "parser_cocci_menhir.ml"
        ) = 
# 182 "parser_cocci_menhir.mly"
                         ( m "" )
# 16699 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = nm;
            MenhirLib.EngineTypes.startp = _startpos_nm_;
            MenhirLib.EngineTypes.endp = _endpos_nm_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let nm : 'tv_pure_ident = Obj.magic nm in
        let _startpos = _startpos_nm_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 149 "parser_cocci_menhir.mly"
      (Ast_cocci.rulename)
# 16727 "parser_cocci_menhir.ml"
        ) = 
# 197 "parser_cocci_menhir.mly"
                      ( P.make_iso_rule_name_result (P.id2name nm) )
# 16731 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 59 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 16752 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_iter_ident = 
# 1633 "parser_cocci_menhir.mly"
         ( Ast0.wrap(Ast0.Id(P.id2mcode _1)) )
# 16759 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 62 "parser_cocci_menhir.mly"
       (Parse_aux.idinfo)
# 16780 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_iter_ident = 
# 1635 "parser_cocci_menhir.mly"
         ( let (nm,constraints,pure,clt) = _1 in
         Ast0.wrap(Ast0.MetaId(P.clt2mcode nm clt,constraints,pure)) )
# 16788 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_TMul_ = 
# 114 "standard.mly"
    ( [] )
# 16805 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_TMul_ = Obj.magic xs in
        let x : (
# 99 "parser_cocci_menhir.mly"
       (Data.clt)
# 16832 "parser_cocci_menhir.ml"
        ) = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_TMul_ = 
# 116 "standard.mly"
    ( x :: xs )
# 16839 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_array_dec_ = 
# 114 "standard.mly"
    ( [] )
# 16856 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_array_dec_ = Obj.magic xs in
        let x : 'tv_array_dec = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_array_dec_ = 
# 116 "standard.mly"
    ( x :: xs )
# 16886 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_case_line_ = 
# 114 "standard.mly"
    ( [] )
# 16903 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_case_line_ = Obj.magic xs in
        let x : 'tv_case_line = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_case_line_ = 
# 116 "standard.mly"
    ( x :: xs )
# 16933 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_comma_decls_TEllipsis_decl__ = 
# 114 "standard.mly"
    ( [] )
# 16950 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_comma_decls_TEllipsis_decl__ = Obj.magic xs in
        let x : 'tv_comma_decls_TEllipsis_decl_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_comma_decls_TEllipsis_decl__ = 
# 116 "standard.mly"
    ( x :: xs )
# 16980 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_comma_decls_TEllipsis_name_opt_decl__ = 
# 114 "standard.mly"
    ( [] )
# 16997 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_comma_decls_TEllipsis_name_opt_decl__ = Obj.magic xs in
        let x : 'tv_comma_decls_TEllipsis_name_opt_decl_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_comma_decls_TEllipsis_name_opt_decl__ = 
# 116 "standard.mly"
    ( x :: xs )
# 17027 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_decl_var_ = 
# 114 "standard.mly"
    ( [] )
# 17044 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_decl_var_ = Obj.magic xs in
        let x : 'tv_decl_var = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_decl_var_ = 
# 116 "standard.mly"
    ( x :: xs )
# 17074 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_designator_ = 
# 114 "standard.mly"
    ( [] )
# 17091 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_designator_ = Obj.magic xs in
        let x : 'tv_designator = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_designator_ = 
# 116 "standard.mly"
    ( x :: xs )
# 17121 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_dp_comma_args_TEllipsis__ = 
# 114 "standard.mly"
    ( [] )
# 17138 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_dp_comma_args_TEllipsis__ = Obj.magic xs in
        let x : 'tv_dp_comma_args_TEllipsis_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_dp_comma_args_TEllipsis__ = 
# 116 "standard.mly"
    ( x :: xs )
# 17168 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_incl_ = 
# 114 "standard.mly"
    ( [] )
# 17185 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_incl_ = Obj.magic xs in
        let x : 'tv_incl = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_incl_ = 
# 116 "standard.mly"
    ( x :: xs )
# 17215 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_iso_ctype__ = 
# 114 "standard.mly"
    ( [] )
# 17232 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_iso_ctype__ = Obj.magic xs in
        let x : 'tv_iso_ctype_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_iso_ctype__ = 
# 116 "standard.mly"
    ( x :: xs )
# 17262 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_iso_decl_var__ = 
# 114 "standard.mly"
    ( [] )
# 17279 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_iso_decl_var__ = Obj.magic xs in
        let x : 'tv_iso_decl_var_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_iso_decl_var__ = 
# 116 "standard.mly"
    ( x :: xs )
# 17309 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_iso_dexpr__ = 
# 114 "standard.mly"
    ( [] )
# 17326 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_iso_dexpr__ = Obj.magic xs in
        let x : 'tv_iso_dexpr_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_iso_dexpr__ = 
# 116 "standard.mly"
    ( x :: xs )
# 17356 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_iso_nest_start__ = 
# 114 "standard.mly"
    ( [] )
# 17373 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_iso_nest_start__ = Obj.magic xs in
        let x : 'tv_iso_nest_start_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_iso_nest_start__ = 
# 116 "standard.mly"
    ( x :: xs )
# 17403 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_iso_single_statement__ = 
# 114 "standard.mly"
    ( [] )
# 17420 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_iso_single_statement__ = Obj.magic xs in
        let x : 'tv_iso_single_statement_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_iso_single_statement__ = 
# 116 "standard.mly"
    ( x :: xs )
# 17450 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_mzl_ctype__ = 
# 114 "standard.mly"
    ( [] )
# 17467 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_mzl_ctype__ = Obj.magic xs in
        let x : 'tv_mzl_ctype_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_mzl_ctype__ = 
# 116 "standard.mly"
    ( x :: xs )
# 17497 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_mzl_eexpr__ = 
# 114 "standard.mly"
    ( [] )
# 17514 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_mzl_eexpr__ = Obj.magic xs in
        let x : 'tv_mzl_eexpr_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_mzl_eexpr__ = 
# 116 "standard.mly"
    ( x :: xs )
# 17544 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_mzl_fun_after_dots_or__ = 
# 114 "standard.mly"
    ( [] )
# 17561 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_mzl_fun_after_dots_or__ = Obj.magic xs in
        let x : 'tv_mzl_fun_after_dots_or_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_mzl_fun_after_dots_or__ = 
# 116 "standard.mly"
    ( x :: xs )
# 17591 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_mzl_fun_start__ = 
# 114 "standard.mly"
    ( [] )
# 17608 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_mzl_fun_start__ = Obj.magic xs in
        let x : 'tv_mzl_fun_start_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_mzl_fun_start__ = 
# 116 "standard.mly"
    ( x :: xs )
# 17638 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_mzl_rule_elem_statement__ = 
# 114 "standard.mly"
    ( [] )
# 17655 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_mzl_rule_elem_statement__ = Obj.magic xs in
        let x : 'tv_mzl_rule_elem_statement_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_mzl_rule_elem_statement__ = 
# 116 "standard.mly"
    ( x :: xs )
# 17685 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_mzl_statement__ = 
# 114 "standard.mly"
    ( [] )
# 17702 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_mzl_statement__ = Obj.magic xs in
        let x : 'tv_mzl_statement_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_mzl_statement__ = 
# 116 "standard.mly"
    ( x :: xs )
# 17732 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_pair_edots_when_TEllipsis_eexpr__dexpr__ = 
# 114 "standard.mly"
    ( [] )
# 17749 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = y0;
            MenhirLib.EngineTypes.startp = _startpos_y0_;
            MenhirLib.EngineTypes.endp = _endpos_y0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x0;
              MenhirLib.EngineTypes.startp = _startpos_x0_;
              MenhirLib.EngineTypes.endp = _endpos_x0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_list_pair_edots_when_TEllipsis_eexpr__dexpr__ = Obj.magic xs in
        let y0 : 'tv_dexpr = Obj.magic y0 in
        let x0 : 'tv_edots_when_TEllipsis_eexpr_ = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_pair_edots_when_TEllipsis_eexpr__dexpr__ = let x =
          let y = y0 in
          let x = x0 in
          
# 70 "standard.mly"
    ( (x, y) )
# 17788 "parser_cocci_menhir.ml"
          
        in
        
# 116 "standard.mly"
    ( x :: xs )
# 17794 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_whenppdecs_ = 
# 114 "standard.mly"
    ( [] )
# 17811 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_whenppdecs_ = Obj.magic xs in
        let x : 'tv_whenppdecs = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_whenppdecs_ = 
# 116 "standard.mly"
    ( x :: xs )
# 17841 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_loption_choose_iso_ = 
# 57 "standard.mly"
    ( [] )
# 17858 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_choose_iso = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_loption_choose_iso_ = 
# 59 "standard.mly"
    ( x )
# 17882 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_loption_disable_ = 
# 57 "standard.mly"
    ( [] )
# 17899 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_disable = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_loption_disable_ = 
# 59 "standard.mly"
    ( x )
# 17923 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_loption_filespec_ = 
# 57 "standard.mly"
    ( [] )
# 17940 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_filespec = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_loption_filespec_ = 
# 59 "standard.mly"
    ( x )
# 17964 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_loption_minus_start_ = 
# 57 "standard.mly"
    ( [] )
# 17981 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_minus_start = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_loption_minus_start_ = 
# 59 "standard.mly"
    ( x )
# 18005 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_loption_not_ceq_ = 
# 57 "standard.mly"
    ( [] )
# 18022 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_not_ceq = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_loption_not_ceq_ = 
# 59 "standard.mly"
    ( x )
# 18046 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_loption_not_pos_ = 
# 57 "standard.mly"
    ( [] )
# 18063 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_not_pos = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_loption_not_pos_ = 
# 59 "standard.mly"
    ( x )
# 18087 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_loption_plus_start_ = 
# 57 "standard.mly"
    ( [] )
# 18104 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_plus_start = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_loption_plus_start_ = 
# 59 "standard.mly"
    ( x )
# 18128 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let t : 'tv_typedef_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t_ in
        let _v : 'tv_meta_exp_type = 
# 485 "parser_cocci_menhir.mly"
    ( [Ast0_cocci.ast0_type_to_type t] )
# 18152 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let t : 'tv_comma_list_ctype_ = Obj.magic t in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_meta_exp_type = 
# 487 "parser_cocci_menhir.mly"
    ( List.map
	(function x -> P.ty_pointerify (Ast0_cocci.ast0_type_to_type x) m)
	t )
# 18192 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_pure_ident = Obj.magic _3 in
        let _1 : (
# 47 "parser_cocci_menhir.mly"
      (string)
# 18223 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_meta_ident = 
# 1442 "parser_cocci_menhir.mly"
                                   ( (Some _1,P.id2name _3) )
# 18230 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_pure_ident_kwd = Obj.magic _3 in
        let _1 : (
# 47 "parser_cocci_menhir.mly"
      (string)
# 18261 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_meta_ident = 
# 1443 "parser_cocci_menhir.mly"
                                   ( (Some _1,_3) )
# 18268 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let m : 'tv_metadec = Obj.magic m in
        let _startpos = _startpos_m_ in
        let _endpos = _endpos_m_ in
        let _v : (
# 157 "parser_cocci_menhir.mly"
      ((Ast_cocci.metavar,Ast_cocci.metavar) Common.either list)
# 18292 "parser_cocci_menhir.ml"
        ) = 
# 181 "parser_cocci_menhir.mly"
                       ( m (!Ast0.rule_name) )
# 18296 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          
# 338 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta ->
      let tok = check_meta(Ast.MetaParamDecl(arity,name)) in
      !Data.add_param_meta name pure; tok) )
# 18343 "parser_cocci_menhir.ml"
          
        in
        
# 270 "parser_cocci_menhir.mly"
    ( P.create_metadec ar ispure kindfn ids )
# 18349 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ispure;
                  MenhirLib.EngineTypes.startp = _startpos_ispure_;
                  MenhirLib.EngineTypes.endp = _endpos_ispure_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ar;
                    MenhirLib.EngineTypes.startp = _startpos_ar_;
                    MenhirLib.EngineTypes.endp = _endpos_ar_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_metadec = let kindfn =
          
# 342 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta ->
      let tok = check_meta(Ast.MetaParamListDecl(arity,name,None)) in
      !Data.add_paramlist_meta name None pure; tok) )
# 18400 "parser_cocci_menhir.ml"
          
        in
        
# 270 "parser_cocci_menhir.mly"
    ( P.create_metadec ar ispure kindfn ids )
# 18406 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ispure;
                  MenhirLib.EngineTypes.startp = _startpos_ispure_;
                  MenhirLib.EngineTypes.endp = _endpos_ispure_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ar;
                    MenhirLib.EngineTypes.startp = _startpos_ar_;
                    MenhirLib.EngineTypes.endp = _endpos_ar_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_metadec = let kindfn =
          
# 346 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta ->
      let tok = check_meta(Ast.MetaExpListDecl(arity,name,None)) in
      !Data.add_explist_meta name None pure; tok) )
# 18457 "parser_cocci_menhir.ml"
          
        in
        
# 270 "parser_cocci_menhir.mly"
    ( P.create_metadec ar ispure kindfn ids )
# 18463 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          
# 350 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta ->
      let tok = check_meta(Ast.MetaTypeDecl(arity,name)) in
      !Data.add_type_meta name pure; tok) )
# 18510 "parser_cocci_menhir.ml"
          
        in
        
# 270 "parser_cocci_menhir.mly"
    ( P.create_metadec ar ispure kindfn ids )
# 18516 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          
# 354 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta ->
      let tok = check_meta(Ast.MetaInitDecl(arity,name)) in
      !Data.add_init_meta name pure; tok) )
# 18563 "parser_cocci_menhir.ml"
          
        in
        
# 270 "parser_cocci_menhir.mly"
    ( P.create_metadec ar ispure kindfn ids )
# 18569 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          
# 358 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta ->
      let tok = check_meta(Ast.MetaStmDecl(arity,name)) in
      !Data.add_stm_meta name pure; tok) )
# 18616 "parser_cocci_menhir.ml"
          
        in
        
# 270 "parser_cocci_menhir.mly"
    ( P.create_metadec ar ispure kindfn ids )
# 18622 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ispure;
                  MenhirLib.EngineTypes.startp = _startpos_ispure_;
                  MenhirLib.EngineTypes.endp = _endpos_ispure_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ar;
                    MenhirLib.EngineTypes.startp = _startpos_ar_;
                    MenhirLib.EngineTypes.endp = _endpos_ar_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_metadec = let kindfn =
          
# 362 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta ->
      let tok = check_meta(Ast.MetaStmListDecl(arity,name)) in
      !Data.add_stmlist_meta name pure; tok) )
# 18673 "parser_cocci_menhir.ml"
          
        in
        
# 270 "parser_cocci_menhir.mly"
    ( P.create_metadec ar ispure kindfn ids )
# 18679 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          
# 366 "parser_cocci_menhir.mly"
    ( (fun arity (_,name) pure check_meta ->
      if arity = Ast.NONE && pure = Ast0.Impure
      then (!Data.add_type_name name; [])
      else raise (Semantic_cocci.Semantic "bad typedef")) )
# 18727 "parser_cocci_menhir.ml"
          
        in
        
# 270 "parser_cocci_menhir.mly"
    ( P.create_metadec ar ispure kindfn ids )
# 18733 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ispure;
                  MenhirLib.EngineTypes.startp = _startpos_ispure_;
                  MenhirLib.EngineTypes.endp = _endpos_ispure_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ar;
                    MenhirLib.EngineTypes.startp = _startpos_ar_;
                    MenhirLib.EngineTypes.endp = _endpos_ar_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_metadec = let kindfn =
          
# 371 "parser_cocci_menhir.mly"
    ( (fun arity (_,name) pure check_meta ->
      if arity = Ast.NONE && pure = Ast0.Impure
      then (!Data.add_declarer_name name; [])
      else raise (Semantic_cocci.Semantic "bad declarer")) )
# 18785 "parser_cocci_menhir.ml"
          
        in
        
# 270 "parser_cocci_menhir.mly"
    ( P.create_metadec ar ispure kindfn ids )
# 18791 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ispure;
                  MenhirLib.EngineTypes.startp = _startpos_ispure_;
                  MenhirLib.EngineTypes.endp = _endpos_ispure_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ar;
                    MenhirLib.EngineTypes.startp = _startpos_ar_;
                    MenhirLib.EngineTypes.endp = _endpos_ar_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_metadec = let kindfn =
          
# 376 "parser_cocci_menhir.mly"
    ( (fun arity (_,name) pure check_meta ->
      if arity = Ast.NONE && pure = Ast0.Impure
      then (!Data.add_iterator_name name; [])
      else raise (Semantic_cocci.Semantic "bad iterator")) )
# 18843 "parser_cocci_menhir.ml"
          
        in
        
# 270 "parser_cocci_menhir.mly"
    ( P.create_metadec ar ispure kindfn ids )
# 18849 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_seed_ = Obj.magic ids in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_metadec = let kindfn =
          
# 331 "parser_cocci_menhir.mly"
    ( (fun name check_meta seed ->
      let tok = check_meta(Ast.MetaFreshIdDecl(name,seed)) in
      !Data.add_fresh_id_meta name; tok) )
# 18888 "parser_cocci_menhir.ml"
          
        in
        
# 273 "parser_cocci_menhir.mly"
    ( P.create_fresh_metadec kindfn ids )
# 18894 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_idconstraint_virt_re_or_not_eqid__ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          
# 383 "parser_cocci_menhir.mly"
    (
     let idfn arity name pure check_meta constraints =
       let tok = check_meta(Ast.MetaIdDecl(arity,name)) in
       !Data.add_id_meta name constraints pure; tok in
     let virtfn arity name pure check_meta virtual_env =
       try
	 let vl = List.assoc name virtual_env in
	 !Data.add_virt_id_meta_found name vl; []
       with Not_found ->
	 let name = ("virtual",name) in
	 let tok = check_meta(Ast.MetaIdDecl(arity,name)) in
	 !Data.add_virt_id_meta_not_found name pure; tok in
     (idfn,virtfn) )
# 18951 "parser_cocci_menhir.ml"
          
        in
        
# 279 "parser_cocci_menhir.mly"
    ( let (normal,virt) = Common.partition_either (fun x -> x) ids in
    let (idfn,virtfn) = kindfn in
    function cr ->
      (P.create_metadec_with_constraints ar ispure idfn normal cr) @
      (P.create_metadec_virt ar ispure virtfn virt cr) )
# 18961 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_idconstraint_re_or_not_eqid__ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          
# 399 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      let tok = check_meta(Ast.MetaFuncDecl(arity,name)) in
      !Data.add_func_meta name constraints pure; tok) )
# 19008 "parser_cocci_menhir.ml"
          
        in
        
# 288 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 19014 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ispure;
                  MenhirLib.EngineTypes.startp = _startpos_ispure_;
                  MenhirLib.EngineTypes.endp = _endpos_ispure_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ar;
                    MenhirLib.EngineTypes.startp = _startpos_ar_;
                    MenhirLib.EngineTypes.endp = _endpos_ar_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_idconstraint_re_or_not_eqid__ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_metadec = let kindfn =
          
# 403 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      let tok = check_meta(Ast.MetaLocalFuncDecl(arity,name)) in
      !Data.add_local_func_meta name constraints pure;
      tok) )
# 19066 "parser_cocci_menhir.ml"
          
        in
        
# 288 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 19072 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_idconstraint_re_or_not_eqid__ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          
# 408 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      let tok = check_meta(Ast.MetaDeclarerDecl(arity,name)) in
      !Data.add_declarer_meta name constraints pure; tok) )
# 19119 "parser_cocci_menhir.ml"
          
        in
        
# 288 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 19125 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_idconstraint_re_or_not_eqid__ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          
# 412 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      let tok = check_meta(Ast.MetaIteratorDecl(arity,name)) in
      !Data.add_iterator_meta name constraints pure; tok) )
# 19172 "parser_cocci_menhir.ml"
          
        in
        
# 288 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 19178 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe__ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          
# 418 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      let tok = check_meta(Ast.MetaErrDecl(arity,name)) in
      !Data.add_err_meta name constraints pure; tok) )
# 19225 "parser_cocci_menhir.ml"
          
        in
        
# 293 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 19231 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = l0;
                MenhirLib.EngineTypes.startp = _startpos_l0_;
                MenhirLib.EngineTypes.endp = _endpos_l0_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ispure;
                  MenhirLib.EngineTypes.startp = _startpos_ispure_;
                  MenhirLib.EngineTypes.endp = _endpos_ispure_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ar;
                    MenhirLib.EngineTypes.startp = _startpos_ar_;
                    MenhirLib.EngineTypes.endp = _endpos_ar_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe__ = Obj.magic ids in
        let l0 : 'tv_option_TLocal_ = Obj.magic l0 in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_metadec = let kindfn =
          let l = l0 in
          let ty =
            
# 39 "standard.mly"
    ( None )
# 19284 "parser_cocci_menhir.ml"
            
          in
          
# 422 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      match l with
	None ->
	  !Data.add_idexp_meta ty name constraints pure;
	  check_meta(Ast.MetaIdExpDecl(arity,name,ty))
      | Some _ ->
	  !Data.add_local_idexp_meta ty name constraints pure;
	  check_meta(Ast.MetaLocalIdExpDecl(arity,name,ty))) )
# 19297 "parser_cocci_menhir.ml"
          
        in
        
# 293 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 19303 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = x00;
              MenhirLib.EngineTypes.startp = _startpos_x00_;
              MenhirLib.EngineTypes.endp = _endpos_x00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = l0;
                  MenhirLib.EngineTypes.startp = _startpos_l0_;
                  MenhirLib.EngineTypes.endp = _endpos_l0_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = ispure;
                    MenhirLib.EngineTypes.startp = _startpos_ispure_;
                    MenhirLib.EngineTypes.endp = _endpos_ispure_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = ar;
                      MenhirLib.EngineTypes.startp = _startpos_ar_;
                      MenhirLib.EngineTypes.endp = _endpos_ar_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe__ = Obj.magic ids in
        let x00 : 'tv_meta_exp_type = Obj.magic x00 in
        let l0 : 'tv_option_TLocal_ = Obj.magic l0 in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_metadec = let kindfn =
          let x0 = x00 in
          let l = l0 in
          let ty =
            let x = x0 in
            
# 41 "standard.mly"
    ( Some x )
# 19364 "parser_cocci_menhir.ml"
            
          in
          
# 422 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      match l with
	None ->
	  !Data.add_idexp_meta ty name constraints pure;
	  check_meta(Ast.MetaIdExpDecl(arity,name,ty))
      | Some _ ->
	  !Data.add_local_idexp_meta ty name constraints pure;
	  check_meta(Ast.MetaLocalIdExpDecl(arity,name,ty))) )
# 19377 "parser_cocci_menhir.ml"
          
        in
        
# 293 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 19383 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = m0;
              MenhirLib.EngineTypes.startp = _startpos_m0_;
              MenhirLib.EngineTypes.endp = _endpos_m0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = l0;
                  MenhirLib.EngineTypes.startp = _startpos_l0_;
                  MenhirLib.EngineTypes.endp = _endpos_l0_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = ispure;
                    MenhirLib.EngineTypes.startp = _startpos_ispure_;
                    MenhirLib.EngineTypes.endp = _endpos_ispure_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = ar;
                      MenhirLib.EngineTypes.startp = _startpos_ar_;
                      MenhirLib.EngineTypes.endp = _endpos_ar_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe__ = Obj.magic ids in
        let m0 : 'tv_nonempty_list_TMul_ = Obj.magic m0 in
        let l0 : 'tv_option_TLocal_ = Obj.magic l0 in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_metadec = let kindfn =
          let m = m0 in
          let l = l0 in
          
# 431 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      let ty = Some [P.ty_pointerify Type_cocci.Unknown m] in
      match l with
	None ->
	  !Data.add_idexp_meta ty name constraints pure;
	  check_meta(Ast.MetaIdExpDecl(arity,name,ty))
      | Some _ ->
	  !Data.add_local_idexp_meta ty name constraints pure;
	  check_meta(Ast.MetaLocalIdExpDecl(arity,name,ty))) )
# 19450 "parser_cocci_menhir.ml"
          
        in
        
# 293 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 19456 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = m0;
              MenhirLib.EngineTypes.startp = _startpos_m0_;
              MenhirLib.EngineTypes.endp = _endpos_m0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ispure;
                  MenhirLib.EngineTypes.startp = _startpos_ispure_;
                  MenhirLib.EngineTypes.endp = _endpos_ispure_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ar;
                    MenhirLib.EngineTypes.startp = _startpos_ar_;
                    MenhirLib.EngineTypes.endp = _endpos_ar_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe__ = Obj.magic ids in
        let m0 : 'tv_nonempty_list_TMul_ = Obj.magic m0 in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_metadec = let kindfn =
          let m = m0 in
          
# 441 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      let ty = Some [P.ty_pointerify Type_cocci.Unknown m] in
      let tok = check_meta(Ast.MetaExpDecl(arity,name,ty)) in
      !Data.add_exp_meta ty name constraints pure; tok) )
# 19511 "parser_cocci_menhir.ml"
          
        in
        
# 293 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 19517 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = vl0;
                  MenhirLib.EngineTypes.startp = _startpos_vl0_;
                  MenhirLib.EngineTypes.endp = _endpos_vl0_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = ispure;
                    MenhirLib.EngineTypes.startp = _startpos_ispure_;
                    MenhirLib.EngineTypes.endp = _endpos_ispure_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = ar;
                      MenhirLib.EngineTypes.startp = _startpos_ar_;
                      MenhirLib.EngineTypes.endp = _endpos_ar_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe__ = Obj.magic ids in
        let vl0 : 'tv_meta_exp_type = Obj.magic vl0 in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_metadec = let kindfn =
          let vl = vl0 in
          
# 446 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      let ty = Some (List.map (function x -> Type_cocci.Array x) vl) in
      let tok = check_meta(Ast.MetaExpDecl(arity,name,ty)) in
      !Data.add_exp_meta ty name constraints pure; tok) )
# 19576 "parser_cocci_menhir.ml"
          
        in
        
# 293 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 19582 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe__ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          let ty =
            
# 39 "standard.mly"
    ( None )
# 19628 "parser_cocci_menhir.ml"
            
          in
          
# 451 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      let tok = check_meta(Ast.MetaConstDecl(arity,name,ty)) in
      !Data.add_const_meta ty name constraints pure; tok) )
# 19636 "parser_cocci_menhir.ml"
          
        in
        
# 293 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 19642 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = x00;
              MenhirLib.EngineTypes.startp = _startpos_x00_;
              MenhirLib.EngineTypes.endp = _endpos_x00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ispure;
                  MenhirLib.EngineTypes.startp = _startpos_ispure_;
                  MenhirLib.EngineTypes.endp = _endpos_ispure_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ar;
                    MenhirLib.EngineTypes.startp = _startpos_ar_;
                    MenhirLib.EngineTypes.endp = _endpos_ar_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe__ = Obj.magic ids in
        let x00 : 'tv_meta_exp_type = Obj.magic x00 in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_metadec = let kindfn =
          let x0 = x00 in
          let ty =
            let x = x0 in
            
# 41 "standard.mly"
    ( Some x )
# 19696 "parser_cocci_menhir.ml"
            
          in
          
# 451 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      let tok = check_meta(Ast.MetaConstDecl(arity,name,ty)) in
      !Data.add_const_meta ty name constraints pure; tok) )
# 19704 "parser_cocci_menhir.ml"
          
        in
        
# 293 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 19710 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_x_eq_not_ceq__ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          
# 457 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      let tok = check_meta(Ast.MetaExpDecl(arity,name,None)) in
      !Data.add_exp_meta None name (Ast0.NotExpCstrt constraints) pure; tok) )
# 19757 "parser_cocci_menhir.ml"
          
        in
        
# 297 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 19763 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = vl0;
              MenhirLib.EngineTypes.startp = _startpos_vl0_;
              MenhirLib.EngineTypes.endp = _endpos_vl0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_x_eq_not_ceq__ = Obj.magic ids in
        let vl0 : 'tv_meta_exp_type = Obj.magic vl0 in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          let vl = vl0 in
          
# 461 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      let ty = Some vl in
      List.iter
	(function c ->
	  match Ast0.unwrap c with
	    Ast0.Constant(_) ->
	      if not
		  (List.exists
		     (function
			 Type_cocci.BaseType(Type_cocci.IntType) -> true
		       | Type_cocci.BaseType(Type_cocci.ShortType) -> true
		       | Type_cocci.BaseType(Type_cocci.LongType) -> true
		       | _ -> false)
		     vl)
	      then failwith "metavariable with int constraint must be an int"
	  | _ -> ())
	constraints;
      let tok = check_meta(Ast.MetaExpDecl(arity,name,ty)) in
      !Data.add_exp_meta ty name (Ast0.NotExpCstrt constraints) pure; tok)
    )
# 19830 "parser_cocci_menhir.ml"
          
        in
        
# 297 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 19836 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = a;
              MenhirLib.EngineTypes.startp = _startpos_a_;
              MenhirLib.EngineTypes.endp = _endpos_a_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_x_eq_not_pos__ = Obj.magic ids in
        let a : 'tv_option_TPosAny_ = Obj.magic a in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = 
# 303 "parser_cocci_menhir.mly"
    ( (if !Data.in_generating
      then failwith "position variables not allowed in a generated rule file");
      let kindfn arity name pure check_meta constraints =
      let tok = check_meta(Ast.MetaPosDecl(arity,name)) in
      let any = match a with None -> Ast.PER | Some _ -> Ast.ALL in
      !Data.add_pos_meta name constraints any; tok in
    P.create_metadec_with_constraints ar false kindfn ids )
# 19886 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = id;
                MenhirLib.EngineTypes.startp = _startpos_id_;
                MenhirLib.EngineTypes.endp = _endpos_id_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = ispure;
                        MenhirLib.EngineTypes.startp = _startpos_ispure_;
                        MenhirLib.EngineTypes.endp = _endpos_ispure_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = ar;
                          MenhirLib.EngineTypes.startp = _startpos_ar_;
                          MenhirLib.EngineTypes.endp = _endpos_ar_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let id : 'tv_pure_ident_or_meta_ident = Obj.magic id in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__9_ in
        let _v : 'tv_metadec = 
# 313 "parser_cocci_menhir.mly"
    ( P.create_len_metadec ar ispure
	(fun lenname arity name pure check_meta ->
	  let tok =
	    check_meta(Ast.MetaParamListDecl(arity,name,Some lenname)) in
	  !Data.add_paramlist_meta name (Some lenname) pure; tok)
	id ids )
# 19953 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = id;
                MenhirLib.EngineTypes.startp = _startpos_id_;
                MenhirLib.EngineTypes.endp = _endpos_id_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = ispure;
                        MenhirLib.EngineTypes.startp = _startpos_ispure_;
                        MenhirLib.EngineTypes.endp = _endpos_ispure_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = ar;
                          MenhirLib.EngineTypes.startp = _startpos_ar_;
                          MenhirLib.EngineTypes.endp = _endpos_ar_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let id : 'tv_pure_ident_or_meta_ident = Obj.magic id in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__9_ in
        let _v : 'tv_metadec = 
# 322 "parser_cocci_menhir.mly"
    ( P.create_len_metadec ar ispure
	(fun lenname arity name pure check_meta ->
	  let tok =
	    check_meta(Ast.MetaExpListDecl(arity,name,Some lenname)) in
	  !Data.add_explist_meta name (Some lenname) pure; tok)
	id ids )
# 20020 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_list_mzl_ctype__ = Obj.magic b in
        let a : 'tv_ctype = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_midzero_list_ctype_ctype_ = 
# 1918 "parser_cocci_menhir.mly"
     ( let (mids,code) = List.split b in (mids,(a::code)) )
# 20050 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_list_mzl_eexpr__ = Obj.magic b in
        let a : 'tv_eexpr = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_midzero_list_eexpr_eexpr_ = 
# 1918 "parser_cocci_menhir.mly"
     ( let (mids,code) = List.split b in (mids,(a::code)) )
# 20080 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_list_mzl_eexpr__ = Obj.magic b in
        let a : 'tv_expr = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_midzero_list_expr_eexpr_ = 
# 1918 "parser_cocci_menhir.mly"
     ( let (mids,code) = List.split b in (mids,(a::code)) )
# 20110 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_list_mzl_fun_after_dots_or__ = Obj.magic b in
        let a : 'tv_fun_after_stm = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_midzero_list_fun_after_stm_fun_after_dots_or_ = 
# 1918 "parser_cocci_menhir.mly"
     ( let (mids,code) = List.split b in (mids,(a::code)) )
# 20140 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_list_mzl_fun_start__ = Obj.magic b in
        let a : 'tv_fun_start = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_midzero_list_fun_start_fun_start_ = 
# 1918 "parser_cocci_menhir.mly"
     ( let (mids,code) = List.split b in (mids,(a::code)) )
# 20170 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_list_mzl_rule_elem_statement__ = Obj.magic b in
        let a : 'tv_rule_elem_statement = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_midzero_list_rule_elem_statement_rule_elem_statement_ = 
# 1918 "parser_cocci_menhir.mly"
     ( let (mids,code) = List.split b in (mids,(a::code)) )
# 20200 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_list_mzl_statement__ = Obj.magic b in
        let a : 'tv_statement = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_midzero_list_statement_statement_ = 
# 1918 "parser_cocci_menhir.mly"
     ( let (mids,code) = List.split b in (mids,(a::code)) )
# 20230 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = f;
            MenhirLib.EngineTypes.startp = _startpos_f_;
            MenhirLib.EngineTypes.endp = _endpos_f_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_loption_minus_start_ = Obj.magic b in
        let f : 'tv_loption_filespec_ = Obj.magic f in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_minus_body = 
# 629 "parser_cocci_menhir.mly"
    ( match f@b(*@ew*) with
      [] -> raise (Semantic_cocci.Semantic "minus slice can't be empty")
    | code -> Top_level.top_level code )
# 20262 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = f;
            MenhirLib.EngineTypes.startp = _startpos_f_;
            MenhirLib.EngineTypes.endp = _endpos_f_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_top_eexpr = Obj.magic b in
        let f : 'tv_loption_filespec_ = Obj.magic f in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_minus_exp_body = 
# 643 "parser_cocci_menhir.mly"
    ( match f@[b](*@ew*) with
      [] -> raise (Semantic_cocci.Semantic "minus slice can't be empty")
    | code -> Top_level.top_level code )
# 20294 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _1 : 'tv_minus_exp_body = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 137 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 20322 "parser_cocci_menhir.ml"
        ) = 
# 177 "parser_cocci_menhir.mly"
                                   ( _1 )
# 20326 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = m;
            MenhirLib.EngineTypes.startp = _startpos_m_;
            MenhirLib.EngineTypes.endp = _endpos_m_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_minus_exp_body = Obj.magic m in
        let _startpos = _startpos_m_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 137 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 20354 "parser_cocci_menhir.ml"
        ) = 
# 177 "parser_cocci_menhir.mly"
                                                                       ( m )
# 20358 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = m;
            MenhirLib.EngineTypes.startp = _startpos_m_;
            MenhirLib.EngineTypes.endp = _endpos_m_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_minus_exp_body = Obj.magic m in
        let _startpos = _startpos_m_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 137 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 20386 "parser_cocci_menhir.ml"
        ) = 
# 178 "parser_cocci_menhir.mly"
                         ( m )
# 20390 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _1 : 'tv_minus_body = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 134 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 20418 "parser_cocci_menhir.ml"
        ) = 
# 173 "parser_cocci_menhir.mly"
                           ( _1 )
# 20422 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = m;
            MenhirLib.EngineTypes.startp = _startpos_m_;
            MenhirLib.EngineTypes.endp = _endpos_m_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_minus_body = Obj.magic m in
        let _startpos = _startpos_m_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 134 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 20450 "parser_cocci_menhir.ml"
        ) = 
# 173 "parser_cocci_menhir.mly"
                                                           ( m )
# 20454 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = m;
            MenhirLib.EngineTypes.startp = _startpos_m_;
            MenhirLib.EngineTypes.endp = _endpos_m_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_minus_body = Obj.magic m in
        let _startpos = _startpos_m_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 134 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 20482 "parser_cocci_menhir.ml"
        ) = 
# 174 "parser_cocci_menhir.mly"
                     ( m )
# 20486 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_fundecl = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_minus_start = 
# 1727 "parser_cocci_menhir.mly"
                         ( [Ast0.wrap(Ast0.DECL(_1))] )
# 20510 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_ctype = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_minus_start = 
# 1728 "parser_cocci_menhir.mly"
                         ( [Ast0.wrap(Ast0.OTHER(Ast0.wrap(Ast0.Ty(_1))))] )
# 20534 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_top_init = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_minus_start = 
# 1729 "parser_cocci_menhir.mly"
                    ( [Ast0.wrap(Ast0.OTHER(Ast0.wrap(Ast0.TopInit(_1))))] )
# 20558 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_toplevel_seq_startne_toplevel_after_dots_init_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_minus_start = 
# 1731 "parser_cocci_menhir.mly"
    ( List.map (function x -> Ast0.wrap(Ast0.OTHER(x))) _1 )
# 20582 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_ctype = Obj.magic b in
        let a : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 20609 "parser_cocci_menhir.ml"
        ) = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_mzl_ctype_ = 
# 1921 "parser_cocci_menhir.mly"
                 ( (P.clt2mcode "|" a, b) )
# 20616 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_eexpr = Obj.magic b in
        let a : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 20643 "parser_cocci_menhir.ml"
        ) = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_mzl_eexpr_ = 
# 1921 "parser_cocci_menhir.mly"
                 ( (P.clt2mcode "|" a, b) )
# 20650 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_fun_after_dots_or = Obj.magic b in
        let a : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 20677 "parser_cocci_menhir.ml"
        ) = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_mzl_fun_after_dots_or_ = 
# 1921 "parser_cocci_menhir.mly"
                 ( (P.clt2mcode "|" a, b) )
# 20684 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_fun_start = Obj.magic b in
        let a : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 20711 "parser_cocci_menhir.ml"
        ) = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_mzl_fun_start_ = 
# 1921 "parser_cocci_menhir.mly"
                 ( (P.clt2mcode "|" a, b) )
# 20718 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_rule_elem_statement = Obj.magic b in
        let a : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 20745 "parser_cocci_menhir.ml"
        ) = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_mzl_rule_elem_statement_ = 
# 1921 "parser_cocci_menhir.mly"
                 ( (P.clt2mcode "|" a, b) )
# 20752 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_statement = Obj.magic b in
        let a : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 20779 "parser_cocci_menhir.ml"
        ) = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_mzl_statement_ = 
# 1921 "parser_cocci_menhir.mly"
                 ( (P.clt2mcode "|" a, b) )
# 20786 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_decl = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_name_opt_decl = 
# 852 "parser_cocci_menhir.mly"
            ( _1 )
# 20810 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = rp1;
          MenhirLib.EngineTypes.startp = _startpos_rp1_;
          MenhirLib.EngineTypes.endp = _endpos_rp1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = lp1;
              MenhirLib.EngineTypes.startp = _startpos_lp1_;
              MenhirLib.EngineTypes.endp = _endpos_lp1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = rp;
                MenhirLib.EngineTypes.startp = _startpos_rp_;
                MenhirLib.EngineTypes.endp = _endpos_rp_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = s;
                  MenhirLib.EngineTypes.startp = _startpos_s_;
                  MenhirLib.EngineTypes.endp = _endpos_s_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = lp;
                    MenhirLib.EngineTypes.startp = _startpos_lp_;
                    MenhirLib.EngineTypes.endp = _endpos_lp_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = t;
                      MenhirLib.EngineTypes.startp = _startpos_t_;
                      MenhirLib.EngineTypes.endp = _endpos_t_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let rp1 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 20861 "parser_cocci_menhir.ml"
        ) = Obj.magic rp1 in
        let d : 'tv_decl_list_name_opt_decl_ = Obj.magic d in
        let lp1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 20867 "parser_cocci_menhir.ml"
        ) = Obj.magic lp1 in
        let rp : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 20872 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let s : (
# 99 "parser_cocci_menhir.mly"
       (Data.clt)
# 20877 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let lp : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 20882 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_rp1_ in
        let _v : 'tv_name_opt_decl = 
# 855 "parser_cocci_menhir.mly"
        ( let fnptr =
	  Ast0.wrap
	    (Ast0.FunctionPointer
	       (t,P.clt2mcode "(" lp,P.clt2mcode "*" s,P.clt2mcode ")" rp,
		P.clt2mcode "(" lp1,d,P.clt2mcode ")" rp1)) in
	Ast0.wrap(Ast0.Param(fnptr, None)) )
# 20895 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_nest_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_nest_after_dots = 
# 1842 "parser_cocci_menhir.mly"
                                     (_1@_2)
# 20925 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_nest_after_exp = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_nest_after_dots = 
# 1843 "parser_cocci_menhir.mly"
                                (_2)
# 20953 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_nest_after_exp = Obj.magic _2 in
        let _1 : 'tv_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_nest_after_dots = 
# 1844 "parser_cocci_menhir.mly"
                                ((Ast0.wrap(Ast0.Exp(_1)))::_2)
# 20983 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_nest_after_exp = 
# 1852 "parser_cocci_menhir.mly"
                                ([])
# 21000 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_nest_after_dots = Obj.magic _2 in
        let _1 : 'tv_stm_dots = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_nest_after_exp = 
# 1853 "parser_cocci_menhir.mly"
                                (_1::_2)
# 21030 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_nest_after_stm = 
# 1847 "parser_cocci_menhir.mly"
                                ([])
# 21047 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_nest_after_dots = Obj.magic _2 in
        let _1 : 'tv_stm_dots = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_nest_after_stm = 
# 1848 "parser_cocci_menhir.mly"
                                (_1::_2)
# 21077 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_nest_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_nest_after_stm = 
# 1849 "parser_cocci_menhir.mly"
                                (_1@_2)
# 21107 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = c;
          MenhirLib.EngineTypes.startp = _startpos_c_;
          MenhirLib.EngineTypes.endp = _endpos_c_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let c : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 21138 "parser_cocci_menhir.ml"
        ) = Obj.magic c in
        let e : 'tv_expr_dots_TEllipsis_ = Obj.magic e in
        let _1 : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 21144 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_c_ in
        let _v : 'tv_nest_expressions = 
# 1241 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.NestExpr(P.clt2mcode "<..." _1,
			      Ast0.wrap(Ast0.DOTS(e (P.mkedots "..."))),
			      P.clt2mcode "...>" c, None, false)) )
# 21153 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = c;
          MenhirLib.EngineTypes.startp = _startpos_c_;
          MenhirLib.EngineTypes.endp = _endpos_c_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let c : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 21184 "parser_cocci_menhir.ml"
        ) = Obj.magic c in
        let e : 'tv_expr_dots_TEllipsis_ = Obj.magic e in
        let _1 : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 21190 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_c_ in
        let _v : 'tv_nest_expressions = 
# 1245 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.NestExpr(P.clt2mcode "<+..." _1,
			      Ast0.wrap(Ast0.DOTS(e (P.mkedots "..."))),
			      P.clt2mcode "...+>" c, None, true)) )
# 21199 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_nest_after_dots = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_nest_start = 
# 1839 "parser_cocci_menhir.mly"
                   ( Ast0.wrap(Ast0.DOTS(_1)) )
# 21223 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (
# 168 "parser_cocci_menhir.mly"
      (unit)
# 21245 "parser_cocci_menhir.ml"
        ) = 
# 1984 "parser_cocci_menhir.mly"
                    ( () )
# 21249 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 168 "parser_cocci_menhir.mly"
      (unit)
# 21275 "parser_cocci_menhir.ml"
        ) = 
# 1985 "parser_cocci_menhir.mly"
                    ( () )
# 21279 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (
# 168 "parser_cocci_menhir.mly"
      (unit)
# 21301 "parser_cocci_menhir.ml"
        ) = 
# 1986 "parser_cocci_menhir.mly"
                    ( () )
# 21305 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = dg;
          MenhirLib.EngineTypes.startp = _startpos_dg_;
          MenhirLib.EngineTypes.endp = _endpos_dg_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = g;
            MenhirLib.EngineTypes.startp = _startpos_g_;
            MenhirLib.EngineTypes.endp = _endpos_g_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let dg : 'tv_list_pair_edots_when_TEllipsis_eexpr__dexpr__ = Obj.magic dg in
        let g : 'tv_dexpr = Obj.magic g in
        let _startpos = _startpos_g_ in
        let _endpos = _endpos_dg_ in
        let _v : 'tv_no_dot_start_end_dexpr_edots_when_TEllipsis_eexpr__ = 
# 1409 "parser_cocci_menhir.mly"
  ( function dot_builder ->
      g :: (List.concat(List.map (function (d,g) -> [dot_builder d;g]) dg)) )
# 21336 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : (
# 99 "parser_cocci_menhir.mly"
       (Data.clt)
# 21357 "parser_cocci_menhir.ml"
        ) = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_nonempty_list_TMul_ = 
# 124 "standard.mly"
    ( [ x ] )
# 21364 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_nonempty_list_TMul_ = Obj.magic xs in
        let x : (
# 99 "parser_cocci_menhir.mly"
       (Data.clt)
# 21391 "parser_cocci_menhir.ml"
        ) = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_nonempty_list_TMul_ = 
# 126 "standard.mly"
    ( x :: xs )
# 21398 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let i : 'tv_ident_or_const = Obj.magic i in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_not_ceq = 
# 1560 "parser_cocci_menhir.mly"
         ( (if !Data.in_iso
	   then failwith "constraints not allowed in iso file");
	   (if !Data.in_generating
	   then failwith "constraints not allowed in a generated rule file");
	   [i] )
# 21430 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let l : 'tv_comma_list_ident_or_const_ = Obj.magic l in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_not_ceq = 
# 1566 "parser_cocci_menhir.mly"
  ( (if !Data.in_iso
	   then failwith "constraints not allowed in iso file");
	   (if !Data.in_generating
	   then failwith "constraints not allowed in a generated rule file");
	   l )
# 21470 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let i : 'tv_pure_ident = Obj.magic i in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_not_eqe = 
# 1541 "parser_cocci_menhir.mly"
         ( (if !Data.in_iso
	   then failwith "constraints not allowed in iso file");
	   (if !Data.in_generating
	   then failwith "constraints not allowed in a generated rule file");
	   [Ast0.wrap(Ast0.Ident(Ast0.wrap(Ast0.Id(P.id2mcode i))))]
	 )
# 21503 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let l : 'tv_comma_list_pure_ident_ = Obj.magic l in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_not_eqe = 
# 1548 "parser_cocci_menhir.mly"
  ( (if !Data.in_iso
	   then failwith "constraints not allowed in iso file");
	   (if !Data.in_generating
	   then failwith "constraints not allowed in a generated rule file");
	   List.map
	     (function i ->
		Ast0.wrap(Ast0.Ident(Ast0.wrap(Ast0.Id(P.id2mcode i)))))
	     l
	 )
# 21547 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let i : 'tv_pure_ident = Obj.magic i in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_not_eqid = 
# 1520 "parser_cocci_menhir.mly"
         ( (if !Data.in_iso
	   then failwith "constraints not allowed in iso file");
	   (if !Data.in_generating
           (* pb: constraints not stored with metavars; too lazy to search for
	      them in the pattern *)
	   then failwith "constraints not allowed in a generated rule file");
	   Ast.IdNegIdSet([fst i]) )
# 21581 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let l : 'tv_comma_list_pure_ident_ = Obj.magic l in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_not_eqid = 
# 1528 "parser_cocci_menhir.mly"
  ( (if !Data.in_iso
	   then failwith "constraints not allowed in iso file");
	   (if !Data.in_generating
	   then failwith "constraints not allowed in a generated rule file");
	   Ast.IdNegIdSet(List.map fst l)
	 )
# 21622 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let i : 'tv_meta_ident = Obj.magic i in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_not_pos = 
# 1580 "parser_cocci_menhir.mly"
         ( (if !Data.in_iso
	   then failwith "constraints not allowed in iso file");
	   (if !Data.in_generating
	   then failwith "constraints not allowed in a generated rule file");
	   match i with
	     (None,_) -> failwith "constraint must be an inherited variable"
	   | (Some rule,name) ->
	       let i = (rule,name) in
	       P.check_meta(Ast.MetaPosDecl(Ast.NONE,i));
	       [i] )
# 21659 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let l : 'tv_comma_list_meta_ident_ = Obj.magic l in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_not_pos = 
# 1591 "parser_cocci_menhir.mly"
  ( (if !Data.in_iso
	   then failwith "constraints not allowed in iso file");
	   (if !Data.in_generating
	   then failwith "constraints not allowed in a generated rule file");
	   List.map
	     (function
		 (None,_) ->
		   failwith "constraint must be an inherited variable"
	       | (Some rule,name) ->
		   let i = (rule,name) in
		   P.check_meta(Ast.MetaPosDecl(Ast.NONE,i));
		   i)
	     l )
# 21707 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_decl = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_one_dec_decl_ = 
# 1665 "parser_cocci_menhir.mly"
        ( _1 )
# 21731 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 66 "parser_cocci_menhir.mly"
       (Parse_aux.list_info)
# 21752 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_one_dec_decl_ = 
# 1667 "parser_cocci_menhir.mly"
    ( let (nm,lenname,pure,clt) = _1 in
    let nm = P.clt2mcode nm clt in
    let lenname =
      match lenname with
	Some nm -> Some(P.clt2mcode nm clt)
      | None -> None in
    Ast0.wrap(Ast0.MetaParamList(nm,lenname,pure)) )
# 21765 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_name_opt_decl = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_one_dec_name_opt_decl_ = 
# 1665 "parser_cocci_menhir.mly"
        ( _1 )
# 21789 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 66 "parser_cocci_menhir.mly"
       (Parse_aux.list_info)
# 21810 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_one_dec_name_opt_decl_ = 
# 1667 "parser_cocci_menhir.mly"
    ( let (nm,lenname,pure,clt) = _1 in
    let nm = P.clt2mcode nm clt in
    let lenname =
      match lenname with
	Some nm -> Some(P.clt2mcode nm clt)
      | None -> None in
    Ast0.wrap(Ast0.MetaParamList(nm,lenname,pure)) )
# 21823 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 21849 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = 
# 1030 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.TyDecl(t,P.clt2mcode ";" pv)) )
# 21857 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 21888 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_d_ident = Obj.magic d in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let s =
          
# 39 "standard.mly"
    ( None )
# 21898 "parser_cocci_menhir.ml"
          
        in
        
# 1032 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        Ast0.wrap(Ast0.UnInit(s,fn t,id,P.clt2mcode ";" pv)) )
# 21905 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 21941 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_d_ident = Obj.magic d in
        let t : 'tv_ctype = Obj.magic t in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let s =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 21953 "parser_cocci_menhir.ml"
          
        in
        
# 1032 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        Ast0.wrap(Ast0.UnInit(s,fn t,id,P.clt2mcode ";" pv)) )
# 21960 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = f;
          MenhirLib.EngineTypes.startp = _startpos_f_;
          MenhirLib.EngineTypes.endp = _endpos_f_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let f : 'tv_funproto = Obj.magic f in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_f_ in
        let _v : 'tv_one_decl_var = 
# 1034 "parser_cocci_menhir.mly"
               ( f )
# 21984 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = d;
                MenhirLib.EngineTypes.startp = _startpos_d_;
                MenhirLib.EngineTypes.endp = _endpos_d_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = t;
                  MenhirLib.EngineTypes.startp = _startpos_t_;
                  MenhirLib.EngineTypes.endp = _endpos_t_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 22025 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 22031 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let d : 'tv_d_ident = Obj.magic d in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let s =
          
# 39 "standard.mly"
    ( None )
# 22041 "parser_cocci_menhir.ml"
          
        in
        
# 1036 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
      Ast0.wrap(Ast0.Init(s,fn t,id,P.clt2mcode "=" q,e,P.clt2mcode ";" pv)) )
# 22048 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = d;
                MenhirLib.EngineTypes.startp = _startpos_d_;
                MenhirLib.EngineTypes.endp = _endpos_d_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = t;
                  MenhirLib.EngineTypes.startp = _startpos_t_;
                  MenhirLib.EngineTypes.endp = _endpos_t_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x0;
                    MenhirLib.EngineTypes.startp = _startpos_x0_;
                    MenhirLib.EngineTypes.endp = _endpos_x0_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 22094 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 22100 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let d : 'tv_d_ident = Obj.magic d in
        let t : 'tv_ctype = Obj.magic t in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let s =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 22112 "parser_cocci_menhir.ml"
          
        in
        
# 1036 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
      Ast0.wrap(Ast0.Init(s,fn t,id,P.clt2mcode "=" q,e,P.clt2mcode ";" pv)) )
# 22119 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 22150 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident = Obj.magic i in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let cv =
          
# 39 "standard.mly"
    ( None )
# 22160 "parser_cocci_menhir.ml"
          
        in
        let s =
          
# 39 "standard.mly"
    ( None )
# 22167 "parser_cocci_menhir.ml"
          
        in
        
# 1041 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
	Ast0.wrap(Ast0.UnInit(s,fn idtype,id,P.clt2mcode ";" pv)) )
# 22175 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 22211 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident = Obj.magic i in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 22223 "parser_cocci_menhir.ml"
          
        in
        let s =
          
# 39 "standard.mly"
    ( None )
# 22230 "parser_cocci_menhir.ml"
          
        in
        
# 1041 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
	Ast0.wrap(Ast0.UnInit(s,fn idtype,id,P.clt2mcode ";" pv)) )
# 22238 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 22274 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident = Obj.magic i in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let cv =
          
# 39 "standard.mly"
    ( None )
# 22285 "parser_cocci_menhir.ml"
          
        in
        let s =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 22293 "parser_cocci_menhir.ml"
          
        in
        
# 1041 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
	Ast0.wrap(Ast0.UnInit(s,fn idtype,id,P.clt2mcode ";" pv)) )
# 22301 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = x1;
                MenhirLib.EngineTypes.startp = _startpos_x1_;
                MenhirLib.EngineTypes.endp = _endpos_x1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x0;
                  MenhirLib.EngineTypes.startp = _startpos_x0_;
                  MenhirLib.EngineTypes.endp = _endpos_x0_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 22342 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident = Obj.magic i in
        let x1 : 'tv_const_vol = Obj.magic x1 in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let cv =
          let x = x1 in
          
# 41 "standard.mly"
    ( Some x )
# 22355 "parser_cocci_menhir.ml"
          
        in
        let s =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 22363 "parser_cocci_menhir.ml"
          
        in
        
# 1041 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
	Ast0.wrap(Ast0.UnInit(s,fn idtype,id,P.clt2mcode ";" pv)) )
# 22371 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = d;
                MenhirLib.EngineTypes.startp = _startpos_d_;
                MenhirLib.EngineTypes.endp = _endpos_d_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = i;
                  MenhirLib.EngineTypes.startp = _startpos_i_;
                  MenhirLib.EngineTypes.endp = _endpos_i_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 22412 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 22418 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident = Obj.magic i in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let cv =
          
# 39 "standard.mly"
    ( None )
# 22428 "parser_cocci_menhir.ml"
          
        in
        let s =
          
# 39 "standard.mly"
    ( None )
# 22435 "parser_cocci_menhir.ml"
          
        in
        
# 1046 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
      !Data.add_type_name (P.id2name i);
      let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
      Ast0.wrap(Ast0.Init(s,fn idtype,id,P.clt2mcode "=" q,e,
			   P.clt2mcode ";" pv)) )
# 22445 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = d;
                MenhirLib.EngineTypes.startp = _startpos_d_;
                MenhirLib.EngineTypes.endp = _endpos_d_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = i;
                  MenhirLib.EngineTypes.startp = _startpos_i_;
                  MenhirLib.EngineTypes.endp = _endpos_i_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x0;
                    MenhirLib.EngineTypes.startp = _startpos_x0_;
                    MenhirLib.EngineTypes.endp = _endpos_x0_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 22491 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 22497 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident = Obj.magic i in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 22509 "parser_cocci_menhir.ml"
          
        in
        let s =
          
# 39 "standard.mly"
    ( None )
# 22516 "parser_cocci_menhir.ml"
          
        in
        
# 1046 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
      !Data.add_type_name (P.id2name i);
      let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
      Ast0.wrap(Ast0.Init(s,fn idtype,id,P.clt2mcode "=" q,e,
			   P.clt2mcode ";" pv)) )
# 22526 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = d;
                MenhirLib.EngineTypes.startp = _startpos_d_;
                MenhirLib.EngineTypes.endp = _endpos_d_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = i;
                  MenhirLib.EngineTypes.startp = _startpos_i_;
                  MenhirLib.EngineTypes.endp = _endpos_i_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x0;
                    MenhirLib.EngineTypes.startp = _startpos_x0_;
                    MenhirLib.EngineTypes.endp = _endpos_x0_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 22572 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 22578 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident = Obj.magic i in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let cv =
          
# 39 "standard.mly"
    ( None )
# 22589 "parser_cocci_menhir.ml"
          
        in
        let s =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 22597 "parser_cocci_menhir.ml"
          
        in
        
# 1046 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
      !Data.add_type_name (P.id2name i);
      let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
      Ast0.wrap(Ast0.Init(s,fn idtype,id,P.clt2mcode "=" q,e,
			   P.clt2mcode ";" pv)) )
# 22607 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = d;
                MenhirLib.EngineTypes.startp = _startpos_d_;
                MenhirLib.EngineTypes.endp = _endpos_d_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = i;
                  MenhirLib.EngineTypes.startp = _startpos_i_;
                  MenhirLib.EngineTypes.endp = _endpos_i_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = x1;
                    MenhirLib.EngineTypes.startp = _startpos_x1_;
                    MenhirLib.EngineTypes.endp = _endpos_x1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = x0;
                      MenhirLib.EngineTypes.startp = _startpos_x0_;
                      MenhirLib.EngineTypes.endp = _endpos_x0_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 22658 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 22664 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident = Obj.magic i in
        let x1 : 'tv_const_vol = Obj.magic x1 in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let cv =
          let x = x1 in
          
# 41 "standard.mly"
    ( Some x )
# 22677 "parser_cocci_menhir.ml"
          
        in
        let s =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 22685 "parser_cocci_menhir.ml"
          
        in
        
# 1046 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
      !Data.add_type_name (P.id2name i);
      let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
      Ast0.wrap(Ast0.Init(s,fn idtype,id,P.clt2mcode "=" q,e,
			   P.clt2mcode ";" pv)) )
# 22695 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = rp2;
            MenhirLib.EngineTypes.startp = _startpos_rp2_;
            MenhirLib.EngineTypes.endp = _endpos_rp2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = p;
              MenhirLib.EngineTypes.startp = _startpos_p_;
              MenhirLib.EngineTypes.endp = _endpos_p_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = lp2;
                MenhirLib.EngineTypes.startp = _startpos_lp2_;
                MenhirLib.EngineTypes.endp = _endpos_lp2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = rp1;
                  MenhirLib.EngineTypes.startp = _startpos_rp1_;
                  MenhirLib.EngineTypes.endp = _endpos_rp1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = d;
                    MenhirLib.EngineTypes.startp = _startpos_d_;
                    MenhirLib.EngineTypes.endp = _endpos_d_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = st;
                      MenhirLib.EngineTypes.startp = _startpos_st_;
                      MenhirLib.EngineTypes.endp = _endpos_st_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = lp1;
                        MenhirLib.EngineTypes.startp = _startpos_lp1_;
                        MenhirLib.EngineTypes.endp = _endpos_lp1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = t;
                          MenhirLib.EngineTypes.startp = _startpos_t_;
                          MenhirLib.EngineTypes.endp = _endpos_t_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 22756 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let rp2 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 22761 "parser_cocci_menhir.ml"
        ) = Obj.magic rp2 in
        let p : 'tv_decl_list_name_opt_decl_ = Obj.magic p in
        let lp2 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 22767 "parser_cocci_menhir.ml"
        ) = Obj.magic lp2 in
        let rp1 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 22772 "parser_cocci_menhir.ml"
        ) = Obj.magic rp1 in
        let d : 'tv_d_ident = Obj.magic d in
        let st : (
# 99 "parser_cocci_menhir.mly"
       (Data.clt)
# 22778 "parser_cocci_menhir.ml"
        ) = Obj.magic st in
        let lp1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 22783 "parser_cocci_menhir.ml"
        ) = Obj.magic lp1 in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let s =
          
# 39 "standard.mly"
    ( None )
# 22792 "parser_cocci_menhir.ml"
          
        in
        
# 1056 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        let t =
	  Ast0.wrap
	    (Ast0.FunctionPointer
	       (t,P.clt2mcode "(" lp1,P.clt2mcode "*" st,P.clt2mcode ")" rp1,
		P.clt2mcode "(" lp2,p,P.clt2mcode ")" rp2)) in
        Ast0.wrap(Ast0.UnInit(s,fn t,id,P.clt2mcode ";" pv)) )
# 22804 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = rp2;
            MenhirLib.EngineTypes.startp = _startpos_rp2_;
            MenhirLib.EngineTypes.endp = _endpos_rp2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = p;
              MenhirLib.EngineTypes.startp = _startpos_p_;
              MenhirLib.EngineTypes.endp = _endpos_p_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = lp2;
                MenhirLib.EngineTypes.startp = _startpos_lp2_;
                MenhirLib.EngineTypes.endp = _endpos_lp2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = rp1;
                  MenhirLib.EngineTypes.startp = _startpos_rp1_;
                  MenhirLib.EngineTypes.endp = _endpos_rp1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = d;
                    MenhirLib.EngineTypes.startp = _startpos_d_;
                    MenhirLib.EngineTypes.endp = _endpos_d_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = st;
                      MenhirLib.EngineTypes.startp = _startpos_st_;
                      MenhirLib.EngineTypes.endp = _endpos_st_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = lp1;
                        MenhirLib.EngineTypes.startp = _startpos_lp1_;
                        MenhirLib.EngineTypes.endp = _endpos_lp1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = t;
                          MenhirLib.EngineTypes.startp = _startpos_t_;
                          MenhirLib.EngineTypes.endp = _endpos_t_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = x0;
                            MenhirLib.EngineTypes.startp = _startpos_x0_;
                            MenhirLib.EngineTypes.endp = _endpos_x0_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 22870 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let rp2 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 22875 "parser_cocci_menhir.ml"
        ) = Obj.magic rp2 in
        let p : 'tv_decl_list_name_opt_decl_ = Obj.magic p in
        let lp2 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 22881 "parser_cocci_menhir.ml"
        ) = Obj.magic lp2 in
        let rp1 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 22886 "parser_cocci_menhir.ml"
        ) = Obj.magic rp1 in
        let d : 'tv_d_ident = Obj.magic d in
        let st : (
# 99 "parser_cocci_menhir.mly"
       (Data.clt)
# 22892 "parser_cocci_menhir.ml"
        ) = Obj.magic st in
        let lp1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 22897 "parser_cocci_menhir.ml"
        ) = Obj.magic lp1 in
        let t : 'tv_ctype = Obj.magic t in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let s =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 22908 "parser_cocci_menhir.ml"
          
        in
        
# 1056 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        let t =
	  Ast0.wrap
	    (Ast0.FunctionPointer
	       (t,P.clt2mcode "(" lp1,P.clt2mcode "*" st,P.clt2mcode ")" rp1,
		P.clt2mcode "(" lp2,p,P.clt2mcode ")" rp2)) in
        Ast0.wrap(Ast0.UnInit(s,fn t,id,P.clt2mcode ";" pv)) )
# 22920 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let _5 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 22961 "parser_cocci_menhir.ml"
        ) = Obj.magic _5 in
        let _4 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 22966 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr_list_option = Obj.magic _3 in
        let _2 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 22972 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_decl_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_one_decl_var = 
# 1064 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.MacroDecl(_1,P.clt2mcode "(" _2,_3,
				  P.clt2mcode ")" _4,P.clt2mcode ";" _5)) )
# 22981 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = rp2;
                MenhirLib.EngineTypes.startp = _startpos_rp2_;
                MenhirLib.EngineTypes.endp = _endpos_rp2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = p;
                  MenhirLib.EngineTypes.startp = _startpos_p_;
                  MenhirLib.EngineTypes.endp = _endpos_p_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = lp2;
                    MenhirLib.EngineTypes.startp = _startpos_lp2_;
                    MenhirLib.EngineTypes.endp = _endpos_lp2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = rp1;
                      MenhirLib.EngineTypes.startp = _startpos_rp1_;
                      MenhirLib.EngineTypes.endp = _endpos_rp1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = d;
                        MenhirLib.EngineTypes.startp = _startpos_d_;
                        MenhirLib.EngineTypes.endp = _endpos_d_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = st;
                          MenhirLib.EngineTypes.startp = _startpos_st_;
                          MenhirLib.EngineTypes.endp = _endpos_st_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.semv = lp1;
                            MenhirLib.EngineTypes.startp = _startpos_lp1_;
                            MenhirLib.EngineTypes.endp = _endpos_lp1_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = t;
                              MenhirLib.EngineTypes.startp = _startpos_t_;
                              MenhirLib.EngineTypes.endp = _endpos_t_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 23052 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 23058 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let rp2 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 23063 "parser_cocci_menhir.ml"
        ) = Obj.magic rp2 in
        let p : 'tv_decl_list_name_opt_decl_ = Obj.magic p in
        let lp2 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 23069 "parser_cocci_menhir.ml"
        ) = Obj.magic lp2 in
        let rp1 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 23074 "parser_cocci_menhir.ml"
        ) = Obj.magic rp1 in
        let d : 'tv_d_ident = Obj.magic d in
        let st : (
# 99 "parser_cocci_menhir.mly"
       (Data.clt)
# 23080 "parser_cocci_menhir.ml"
        ) = Obj.magic st in
        let lp1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 23085 "parser_cocci_menhir.ml"
        ) = Obj.magic lp1 in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let s =
          
# 39 "standard.mly"
    ( None )
# 23094 "parser_cocci_menhir.ml"
          
        in
        
# 1070 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        let t =
	  Ast0.wrap
	    (Ast0.FunctionPointer
	       (t,P.clt2mcode "(" lp1,P.clt2mcode "*" st,P.clt2mcode ")" rp1,
		P.clt2mcode "(" lp2,p,P.clt2mcode ")" rp2)) in
      Ast0.wrap(Ast0.Init(s,fn t,id,P.clt2mcode "=" q,e,P.clt2mcode ";" pv)))
# 23106 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = rp2;
                MenhirLib.EngineTypes.startp = _startpos_rp2_;
                MenhirLib.EngineTypes.endp = _endpos_rp2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = p;
                  MenhirLib.EngineTypes.startp = _startpos_p_;
                  MenhirLib.EngineTypes.endp = _endpos_p_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = lp2;
                    MenhirLib.EngineTypes.startp = _startpos_lp2_;
                    MenhirLib.EngineTypes.endp = _endpos_lp2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = rp1;
                      MenhirLib.EngineTypes.startp = _startpos_rp1_;
                      MenhirLib.EngineTypes.endp = _endpos_rp1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = d;
                        MenhirLib.EngineTypes.startp = _startpos_d_;
                        MenhirLib.EngineTypes.endp = _endpos_d_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = st;
                          MenhirLib.EngineTypes.startp = _startpos_st_;
                          MenhirLib.EngineTypes.endp = _endpos_st_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.semv = lp1;
                            MenhirLib.EngineTypes.startp = _startpos_lp1_;
                            MenhirLib.EngineTypes.endp = _endpos_lp1_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.semv = t;
                              MenhirLib.EngineTypes.startp = _startpos_t_;
                              MenhirLib.EngineTypes.endp = _endpos_t_;
                              MenhirLib.EngineTypes.next = {
                                MenhirLib.EngineTypes.state = _menhir_s;
                                MenhirLib.EngineTypes.semv = x0;
                                MenhirLib.EngineTypes.startp = _startpos_x0_;
                                MenhirLib.EngineTypes.endp = _endpos_x0_;
                                MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 23182 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 23188 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let rp2 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 23193 "parser_cocci_menhir.ml"
        ) = Obj.magic rp2 in
        let p : 'tv_decl_list_name_opt_decl_ = Obj.magic p in
        let lp2 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 23199 "parser_cocci_menhir.ml"
        ) = Obj.magic lp2 in
        let rp1 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 23204 "parser_cocci_menhir.ml"
        ) = Obj.magic rp1 in
        let d : 'tv_d_ident = Obj.magic d in
        let st : (
# 99 "parser_cocci_menhir.mly"
       (Data.clt)
# 23210 "parser_cocci_menhir.ml"
        ) = Obj.magic st in
        let lp1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 23215 "parser_cocci_menhir.ml"
        ) = Obj.magic lp1 in
        let t : 'tv_ctype = Obj.magic t in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let s =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 23226 "parser_cocci_menhir.ml"
          
        in
        
# 1070 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        let t =
	  Ast0.wrap
	    (Ast0.FunctionPointer
	       (t,P.clt2mcode "(" lp1,P.clt2mcode "*" st,P.clt2mcode ")" rp1,
		P.clt2mcode "(" lp2,p,P.clt2mcode ")" rp2)) in
      Ast0.wrap(Ast0.Init(s,fn t,id,P.clt2mcode "=" q,e,P.clt2mcode ";" pv)))
# 23238 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_option_TLocal_ = 
# 29 "standard.mly"
    ( None )
# 23255 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : unit = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_TLocal_ = 
# 31 "standard.mly"
    ( Some x )
# 23279 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_option_TPosAny_ = 
# 29 "standard.mly"
    ( None )
# 23296 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : unit = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_TPosAny_ = 
# 31 "standard.mly"
    ( Some x )
# 23320 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_option_eexpr_ = 
# 29 "standard.mly"
    ( None )
# 23337 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_eexpr = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_eexpr_ = 
# 31 "standard.mly"
    ( Some x )
# 23361 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_option_re_or_not_eqe_ = 
# 29 "standard.mly"
    ( None )
# 23378 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_re_or_not_eqe = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_re_or_not_eqe_ = 
# 31 "standard.mly"
    ( Some x )
# 23402 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_option_re_or_not_eqid_ = 
# 29 "standard.mly"
    ( None )
# 23419 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_re_or_not_eqid = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_re_or_not_eqid_ = 
# 31 "standard.mly"
    ( Some x )
# 23443 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_plus_after_dots = 
# 1789 "parser_cocci_menhir.mly"
                                                                         ([])
# 23460 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_plus_after_exp = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_plus_after_dots = 
# 1790 "parser_cocci_menhir.mly"
                                                                         (_2)
# 23488 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_plus_after_exp = Obj.magic _2 in
        let _1 : 'tv_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_plus_after_dots = 
# 1792 "parser_cocci_menhir.mly"
                     ( (Ast0.wrap(Ast0.OTHER(Ast0.wrap(Ast0.Exp(_1)))))::_2 )
# 23518 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_plus_after_stm = Obj.magic _2 in
        let _1 : 'tv_fundecl = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_plus_after_dots = 
# 1793 "parser_cocci_menhir.mly"
                                             ( Ast0.wrap(Ast0.DECL(_1))::_2 )
# 23548 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_plus_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_plus_after_dots = 
# 1795 "parser_cocci_menhir.mly"
                ( (List.map (function x -> Ast0.wrap(Ast0.OTHER(x))) _1)@_2 )
# 23578 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_plus_after_exp = 
# 1785 "parser_cocci_menhir.mly"
                                                                         ([])
# 23595 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_plus_after_dots = Obj.magic _2 in
        let _1 : 'tv_stm_dots = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_plus_after_exp = 
# 1786 "parser_cocci_menhir.mly"
                                          ( (Ast0.wrap(Ast0.OTHER(_1)))::_2 )
# 23625 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_plus_after_stm = 
# 1798 "parser_cocci_menhir.mly"
                                                                         ([])
# 23642 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_plus_after_dots = Obj.magic _2 in
        let _1 : 'tv_stm_dots = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_plus_after_stm = 
# 1799 "parser_cocci_menhir.mly"
                                          ( (Ast0.wrap(Ast0.OTHER(_1)))::_2 )
# 23672 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_plus_after_stm = Obj.magic _2 in
        let _1 : 'tv_fundecl = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_plus_after_stm = 
# 1800 "parser_cocci_menhir.mly"
                                             ( Ast0.wrap(Ast0.DECL(_1))::_2 )
# 23702 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_plus_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_plus_after_stm = 
# 1802 "parser_cocci_menhir.mly"
                ( (List.map (function x -> Ast0.wrap(Ast0.OTHER(x))) _1)@_2 )
# 23732 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = f;
            MenhirLib.EngineTypes.startp = _startpos_f_;
            MenhirLib.EngineTypes.endp = _endpos_f_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_loption_plus_start_ = Obj.magic b in
        let f : 'tv_loption_filespec_ = Obj.magic f in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_plus_body = 
# 637 "parser_cocci_menhir.mly"
    ( Top_level.top_level (f@b(*@ew*)) )
# 23762 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = f;
            MenhirLib.EngineTypes.startp = _startpos_f_;
            MenhirLib.EngineTypes.endp = _endpos_f_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_top_eexpr = Obj.magic b in
        let f : 'tv_loption_filespec_ = Obj.magic f in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_plus_exp_body = 
# 651 "parser_cocci_menhir.mly"
    ( Top_level.top_level (f@[b](*@ew*)) )
# 23792 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _1 : 'tv_plus_exp_body = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 143 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 23820 "parser_cocci_menhir.ml"
        ) = 
# 179 "parser_cocci_menhir.mly"
                                 ( _1 )
# 23824 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = p;
            MenhirLib.EngineTypes.startp = _startpos_p_;
            MenhirLib.EngineTypes.endp = _endpos_p_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let p : 'tv_plus_exp_body = Obj.magic p in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 143 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 23852 "parser_cocci_menhir.ml"
        ) = 
# 179 "parser_cocci_menhir.mly"
                                                                    ( p )
# 23856 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = p;
            MenhirLib.EngineTypes.startp = _startpos_p_;
            MenhirLib.EngineTypes.endp = _endpos_p_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let p : 'tv_plus_exp_body = Obj.magic p in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 143 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 23884 "parser_cocci_menhir.ml"
        ) = 
# 180 "parser_cocci_menhir.mly"
                        ( p )
# 23888 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _1 : 'tv_plus_body = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 140 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 23916 "parser_cocci_menhir.ml"
        ) = 
# 175 "parser_cocci_menhir.mly"
                         ( _1 )
# 23920 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = p;
            MenhirLib.EngineTypes.startp = _startpos_p_;
            MenhirLib.EngineTypes.endp = _endpos_p_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let p : 'tv_plus_body = Obj.magic p in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 140 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 23948 "parser_cocci_menhir.ml"
        ) = 
# 175 "parser_cocci_menhir.mly"
                                                        ( p )
# 23952 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = p;
            MenhirLib.EngineTypes.startp = _startpos_p_;
            MenhirLib.EngineTypes.endp = _endpos_p_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let p : 'tv_plus_body = Obj.magic p in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 140 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 23980 "parser_cocci_menhir.ml"
        ) = 
# 176 "parser_cocci_menhir.mly"
                    ( p )
# 23984 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_ctype = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_plus_start = 
# 1774 "parser_cocci_menhir.mly"
                          ( [Ast0.wrap(Ast0.OTHER(Ast0.wrap(Ast0.Ty(_1))))] )
# 24008 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_top_init = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_plus_start = 
# 1775 "parser_cocci_menhir.mly"
                     ( [Ast0.wrap(Ast0.OTHER(Ast0.wrap(Ast0.TopInit(_1))))] )
# 24032 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_plus_after_dots = Obj.magic _2 in
        let _1 : 'tv_stm_dots = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_plus_start = 
# 1777 "parser_cocci_menhir.mly"
                                          ( (Ast0.wrap(Ast0.OTHER(_1)))::_2 )
# 24062 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_plus_after_exp = Obj.magic _2 in
        let _1 : 'tv_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_plus_start = 
# 1779 "parser_cocci_menhir.mly"
                     ( (Ast0.wrap(Ast0.OTHER(Ast0.wrap(Ast0.Exp(_1)))))::_2 )
# 24092 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_plus_after_stm = Obj.magic _2 in
        let _1 : 'tv_fundecl = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_plus_start = 
# 1780 "parser_cocci_menhir.mly"
                                             ( Ast0.wrap(Ast0.DECL(_1))::_2 )
# 24122 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_plus_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_plus_start = 
# 1782 "parser_cocci_menhir.mly"
                ( (List.map (function x -> Ast0.wrap(Ast0.OTHER(x))) _1)@_2 )
# 24152 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 47 "parser_cocci_menhir.mly"
      (string)
# 24173 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pnrule = 
# 230 "parser_cocci_menhir.mly"
                   ( Ast.Dep      _1 )
# 24180 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 47 "parser_cocci_menhir.mly"
      (string)
# 24205 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_pnrule = 
# 231 "parser_cocci_menhir.mly"
                   ( Ast.AntiDep  _2 )
# 24212 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 47 "parser_cocci_menhir.mly"
      (string)
# 24237 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_pnrule = 
# 232 "parser_cocci_menhir.mly"
                   ( Ast.EverDep  _2 )
# 24244 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 47 "parser_cocci_menhir.mly"
      (string)
# 24269 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_pnrule = 
# 233 "parser_cocci_menhir.mly"
                   ( Ast.NeverDep _2 )
# 24276 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _2 : 'tv_dep = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_pnrule = 
# 234 "parser_cocci_menhir.mly"
                   ( _2 )
# 24308 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_primary_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_postfix_expr_eexpr_dot_expressions_ = 
# 1342 "parser_cocci_menhir.mly"
                                                 ( _1 )
# 24332 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let _4 : (
# 102 "parser_cocci_menhir.mly"
       (Data.clt)
# 24368 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr = Obj.magic _3 in
        let _2 : (
# 102 "parser_cocci_menhir.mly"
       (Data.clt)
# 24374 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_postfix_expr_eexpr_dot_expressions_ = 
# 1344 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.ArrayAccess (_1,P.clt2mcode "[" _2,_3,
				       P.clt2mcode "]" _4)) )
# 24383 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_ident = Obj.magic _3 in
        let _2 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 24415 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_postfix_expr_eexpr_dot_expressions_ = 
# 1347 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.RecordAccess(_1, P.clt2mcode "." _2, _3)) )
# 24423 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_ident = Obj.magic _3 in
        let _2 : (
# 104 "parser_cocci_menhir.mly"
       (Data.clt)
# 24455 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_postfix_expr_eexpr_dot_expressions_ = 
# 1349 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.RecordPtAccess(_1, P.clt2mcode "->" _2,
				     _3)) )
# 24464 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 85 "parser_cocci_menhir.mly"
       (Data.clt)
# 24490 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_postfix_expr_eexpr_dot_expressions_ = 
# 1352 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Postfix (_1, P.clt2mcode Ast.Inc _2)) )
# 24498 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 85 "parser_cocci_menhir.mly"
       (Data.clt)
# 24524 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_postfix_expr_eexpr_dot_expressions_ = 
# 1354 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Postfix (_1, P.clt2mcode Ast.Dec _2)) )
# 24532 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let _4 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 24568 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr_list_option = Obj.magic _3 in
        let _2 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 24574 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_postfix_expr_eexpr_dot_expressions_ = 
# 1356 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.FunCall(_1,P.clt2mcode "(" _2,
			      _3,
			      P.clt2mcode ")" _4)) )
# 24584 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_primary_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_postfix_expr_eexpr_invalid_ = 
# 1342 "parser_cocci_menhir.mly"
                                                 ( _1 )
# 24608 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let _4 : (
# 102 "parser_cocci_menhir.mly"
       (Data.clt)
# 24644 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr = Obj.magic _3 in
        let _2 : (
# 102 "parser_cocci_menhir.mly"
       (Data.clt)
# 24650 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_postfix_expr_eexpr_invalid_ = 
# 1344 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.ArrayAccess (_1,P.clt2mcode "[" _2,_3,
				       P.clt2mcode "]" _4)) )
# 24659 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_ident = Obj.magic _3 in
        let _2 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 24691 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_postfix_expr_eexpr_invalid_ = 
# 1347 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.RecordAccess(_1, P.clt2mcode "." _2, _3)) )
# 24699 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_ident = Obj.magic _3 in
        let _2 : (
# 104 "parser_cocci_menhir.mly"
       (Data.clt)
# 24731 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_postfix_expr_eexpr_invalid_ = 
# 1349 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.RecordPtAccess(_1, P.clt2mcode "->" _2,
				     _3)) )
# 24740 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 85 "parser_cocci_menhir.mly"
       (Data.clt)
# 24766 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_postfix_expr_eexpr_invalid_ = 
# 1352 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Postfix (_1, P.clt2mcode Ast.Inc _2)) )
# 24774 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 85 "parser_cocci_menhir.mly"
       (Data.clt)
# 24800 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_postfix_expr_eexpr_invalid_ = 
# 1354 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Postfix (_1, P.clt2mcode Ast.Dec _2)) )
# 24808 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let _4 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 24844 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr_list_option = Obj.magic _3 in
        let _2 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 24850 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_postfix_expr_eexpr_invalid_ = 
# 1356 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.FunCall(_1,P.clt2mcode "(" _2,
			      _3,
			      P.clt2mcode ")" _4)) )
# 24860 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_primary_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_postfix_expr_eexpr_nest_expressions_ = 
# 1342 "parser_cocci_menhir.mly"
                                                 ( _1 )
# 24884 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let _4 : (
# 102 "parser_cocci_menhir.mly"
       (Data.clt)
# 24920 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr = Obj.magic _3 in
        let _2 : (
# 102 "parser_cocci_menhir.mly"
       (Data.clt)
# 24926 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_postfix_expr_eexpr_nest_expressions_ = 
# 1344 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.ArrayAccess (_1,P.clt2mcode "[" _2,_3,
				       P.clt2mcode "]" _4)) )
# 24935 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_ident = Obj.magic _3 in
        let _2 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 24967 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_postfix_expr_eexpr_nest_expressions_ = 
# 1347 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.RecordAccess(_1, P.clt2mcode "." _2, _3)) )
# 24975 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_ident = Obj.magic _3 in
        let _2 : (
# 104 "parser_cocci_menhir.mly"
       (Data.clt)
# 25007 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_postfix_expr_eexpr_nest_expressions_ = 
# 1349 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.RecordPtAccess(_1, P.clt2mcode "->" _2,
				     _3)) )
# 25016 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 85 "parser_cocci_menhir.mly"
       (Data.clt)
# 25042 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_postfix_expr_eexpr_nest_expressions_ = 
# 1352 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Postfix (_1, P.clt2mcode Ast.Inc _2)) )
# 25050 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 85 "parser_cocci_menhir.mly"
       (Data.clt)
# 25076 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_postfix_expr_eexpr_nest_expressions_ = 
# 1354 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Postfix (_1, P.clt2mcode Ast.Dec _2)) )
# 25084 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let _4 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 25120 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr_list_option = Obj.magic _3 in
        let _2 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 25126 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_postfix_expr_eexpr_nest_expressions_ = 
# 1356 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.FunCall(_1,P.clt2mcode "(" _2,
			      _3,
			      P.clt2mcode ")" _4)) )
# 25136 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_primary_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_postfix_expr_expr_invalid_ = 
# 1342 "parser_cocci_menhir.mly"
                                                 ( _1 )
# 25160 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let _4 : (
# 102 "parser_cocci_menhir.mly"
       (Data.clt)
# 25196 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr = Obj.magic _3 in
        let _2 : (
# 102 "parser_cocci_menhir.mly"
       (Data.clt)
# 25202 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_postfix_expr_expr_invalid_ = 
# 1344 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.ArrayAccess (_1,P.clt2mcode "[" _2,_3,
				       P.clt2mcode "]" _4)) )
# 25211 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_ident = Obj.magic _3 in
        let _2 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 25243 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_postfix_expr_expr_invalid_ = 
# 1347 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.RecordAccess(_1, P.clt2mcode "." _2, _3)) )
# 25251 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_ident = Obj.magic _3 in
        let _2 : (
# 104 "parser_cocci_menhir.mly"
       (Data.clt)
# 25283 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_postfix_expr_expr_invalid_ = 
# 1349 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.RecordPtAccess(_1, P.clt2mcode "->" _2,
				     _3)) )
# 25292 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 85 "parser_cocci_menhir.mly"
       (Data.clt)
# 25318 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_postfix_expr_expr_invalid_ = 
# 1352 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Postfix (_1, P.clt2mcode Ast.Inc _2)) )
# 25326 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 85 "parser_cocci_menhir.mly"
       (Data.clt)
# 25352 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_postfix_expr_expr_invalid_ = 
# 1354 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Postfix (_1, P.clt2mcode Ast.Dec _2)) )
# 25360 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let _4 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 25396 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr_list_option = Obj.magic _3 in
        let _2 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 25402 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_postfix_expr_expr_invalid_ = 
# 1356 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.FunCall(_1,P.clt2mcode "(" _2,
			      _3,
			      P.clt2mcode ")" _4)) )
# 25412 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_func_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1361 "parser_cocci_menhir.mly"
                ( Ast0.wrap(Ast0.Ident(_1)) )
# 25436 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 25457 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1363 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Int x) clt)) )
# 25465 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 25486 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1366 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Float x) clt)) )
# 25494 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 25515 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1369 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.String x) clt)) )
# 25523 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 25544 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1372 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Char x) clt)) )
# 25552 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 67 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 25573 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1375 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.CONST,pure)) )
# 25582 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 63 "parser_cocci_menhir.mly"
       (Parse_aux.expinfo)
# 25603 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1379 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,clt) = _1 in
     Ast0.wrap(Ast0.MetaErr(P.clt2mcode nm clt,constraints,pure)) )
# 25611 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 67 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 25632 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1382 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.ANY,pure)) )
# 25641 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 67 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 25662 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1386 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.ID,pure)) )
# 25671 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 67 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 25692 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1390 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.LocalID,pure)) )
# 25701 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 25732 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_eexpr = Obj.magic _2 in
        let _1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 25738 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1394 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Paren(P.clt2mcode "(" _1,_2,
			    P.clt2mcode ")" _3)) )
# 25746 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 25777 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_midzero_list_eexpr_eexpr_ = Obj.magic _2 in
        let _1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 25783 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1397 "parser_cocci_menhir.mly"
     ( let (mids,code) = _2 in
       Ast0.wrap(Ast0.DisjExpr(P.clt2mcode "(" _1,
			       code, mids,
			       P.clt2mcode ")" _3)) )
# 25793 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_dot_expressions = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1401 "parser_cocci_menhir.mly"
                 ( _1 )
# 25817 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_func_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1361 "parser_cocci_menhir.mly"
                ( Ast0.wrap(Ast0.Ident(_1)) )
# 25841 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 25862 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1363 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Int x) clt)) )
# 25870 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 25891 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1366 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Float x) clt)) )
# 25899 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 25920 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1369 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.String x) clt)) )
# 25928 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 25949 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1372 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Char x) clt)) )
# 25957 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 67 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 25978 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1375 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.CONST,pure)) )
# 25987 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 63 "parser_cocci_menhir.mly"
       (Parse_aux.expinfo)
# 26008 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1379 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,clt) = _1 in
     Ast0.wrap(Ast0.MetaErr(P.clt2mcode nm clt,constraints,pure)) )
# 26016 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 67 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 26037 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1382 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.ANY,pure)) )
# 26046 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 67 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 26067 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1386 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.ID,pure)) )
# 26076 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 67 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 26097 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1390 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.LocalID,pure)) )
# 26106 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 26137 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_eexpr = Obj.magic _2 in
        let _1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 26143 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1394 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Paren(P.clt2mcode "(" _1,_2,
			    P.clt2mcode ")" _3)) )
# 26151 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 26182 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_midzero_list_eexpr_eexpr_ = Obj.magic _2 in
        let _1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 26188 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1397 "parser_cocci_menhir.mly"
     ( let (mids,code) = _2 in
       Ast0.wrap(Ast0.DisjExpr(P.clt2mcode "(" _1,
			       code, mids,
			       P.clt2mcode ")" _3)) )
# 26198 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_invalid = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1401 "parser_cocci_menhir.mly"
                 ( _1 )
# 26222 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_func_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1361 "parser_cocci_menhir.mly"
                ( Ast0.wrap(Ast0.Ident(_1)) )
# 26246 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 26267 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1363 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Int x) clt)) )
# 26275 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 26296 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1366 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Float x) clt)) )
# 26304 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 26325 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1369 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.String x) clt)) )
# 26333 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 26354 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1372 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Char x) clt)) )
# 26362 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 67 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 26383 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1375 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.CONST,pure)) )
# 26392 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 63 "parser_cocci_menhir.mly"
       (Parse_aux.expinfo)
# 26413 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1379 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,clt) = _1 in
     Ast0.wrap(Ast0.MetaErr(P.clt2mcode nm clt,constraints,pure)) )
# 26421 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 67 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 26442 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1382 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.ANY,pure)) )
# 26451 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 67 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 26472 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1386 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.ID,pure)) )
# 26481 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 67 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 26502 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1390 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.LocalID,pure)) )
# 26511 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 26542 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_eexpr = Obj.magic _2 in
        let _1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 26548 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1394 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Paren(P.clt2mcode "(" _1,_2,
			    P.clt2mcode ")" _3)) )
# 26556 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 26587 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_midzero_list_eexpr_eexpr_ = Obj.magic _2 in
        let _1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 26593 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1397 "parser_cocci_menhir.mly"
     ( let (mids,code) = _2 in
       Ast0.wrap(Ast0.DisjExpr(P.clt2mcode "(" _1,
			       code, mids,
			       P.clt2mcode ")" _3)) )
# 26603 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_nest_expressions = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1401 "parser_cocci_menhir.mly"
                 ( _1 )
# 26627 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_func_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1361 "parser_cocci_menhir.mly"
                ( Ast0.wrap(Ast0.Ident(_1)) )
# 26651 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 26672 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1363 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Int x) clt)) )
# 26680 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 26701 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1366 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Float x) clt)) )
# 26709 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 26730 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1369 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.String x) clt)) )
# 26738 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 26759 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1372 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Char x) clt)) )
# 26767 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 67 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 26788 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1375 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.CONST,pure)) )
# 26797 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 63 "parser_cocci_menhir.mly"
       (Parse_aux.expinfo)
# 26818 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1379 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,clt) = _1 in
     Ast0.wrap(Ast0.MetaErr(P.clt2mcode nm clt,constraints,pure)) )
# 26826 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 67 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 26847 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1382 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.ANY,pure)) )
# 26856 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 67 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 26877 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1386 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.ID,pure)) )
# 26886 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 67 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 26907 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1390 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.LocalID,pure)) )
# 26916 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 26947 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_eexpr = Obj.magic _2 in
        let _1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 26953 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1394 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Paren(P.clt2mcode "(" _1,_2,
			    P.clt2mcode ")" _3)) )
# 26961 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 26992 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_midzero_list_expr_eexpr_ = Obj.magic _2 in
        let _1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 26998 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1397 "parser_cocci_menhir.mly"
     ( let (mids,code) = _2 in
       Ast0.wrap(Ast0.DisjExpr(P.clt2mcode "(" _1,
			       code, mids,
			       P.clt2mcode ")" _3)) )
# 27008 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_invalid = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1401 "parser_cocci_menhir.mly"
                 ( _1 )
# 27032 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure = 
# 190 "parser_cocci_menhir.mly"
                 ( Ast0.Pure )
# 27054 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure = 
# 191 "parser_cocci_menhir.mly"
                 ( Ast0.Context )
# 27076 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_pure = 
# 192 "parser_cocci_menhir.mly"
                 ( Ast0.PureContext )
# 27102 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_pure = 
# 193 "parser_cocci_menhir.mly"
                 ( Ast0.PureContext )
# 27128 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_pure = 
# 194 "parser_cocci_menhir.mly"
                 ( Ast0.Impure )
# 27145 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 59 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 27166 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident = 
# 1415 "parser_cocci_menhir.mly"
            ( _1 )
# 27173 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 1418 "parser_cocci_menhir.mly"
                 ( "identifier" )
# 27195 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 1419 "parser_cocci_menhir.mly"
                 ( "expression" )
# 27217 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 1420 "parser_cocci_menhir.mly"
                ( "statement" )
# 27239 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 1421 "parser_cocci_menhir.mly"
               ( "function" )
# 27261 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 1422 "parser_cocci_menhir.mly"
            ( "local" )
# 27283 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 1423 "parser_cocci_menhir.mly"
           ( "type" )
# 27305 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 1424 "parser_cocci_menhir.mly"
                ( "parameter" )
# 27327 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 1425 "parser_cocci_menhir.mly"
                   ( "idexpression" )
# 27349 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 1426 "parser_cocci_menhir.mly"
                  ( "initialiser" )
# 27371 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 1427 "parser_cocci_menhir.mly"
           ( "list" )
# 27393 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 1428 "parser_cocci_menhir.mly"
            ( "fresh" )
# 27415 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 1429 "parser_cocci_menhir.mly"
               ( "constant" )
# 27437 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 1430 "parser_cocci_menhir.mly"
            ( "error" )
# 27459 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 1431 "parser_cocci_menhir.mly"
            ( "words" )
# 27481 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 1432 "parser_cocci_menhir.mly"
           ( "pure" )
# 27503 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 1433 "parser_cocci_menhir.mly"
              ( "context" )
# 27525 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 1434 "parser_cocci_menhir.mly"
                ( "generated" )
# 27547 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 1435 "parser_cocci_menhir.mly"
              ( "typedef" )
# 27569 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 1436 "parser_cocci_menhir.mly"
               ( "declarer" )
# 27591 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 1437 "parser_cocci_menhir.mly"
               ( "iterator" )
# 27613 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 1438 "parser_cocci_menhir.mly"
           ( "name" )
# 27635 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 1439 "parser_cocci_menhir.mly"
               ( "position" )
# 27657 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_pure_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_or_meta_ident = 
# 1446 "parser_cocci_menhir.mly"
                                 ( (None,P.id2name _1) )
# 27681 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_pure_ident_kwd = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_or_meta_ident = 
# 1447 "parser_cocci_menhir.mly"
                                 ( (None,_1) )
# 27705 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_meta_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_or_meta_ident = 
# 1448 "parser_cocci_menhir.mly"
                                 ( _1 )
# 27729 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = optc;
          MenhirLib.EngineTypes.startp = _startpos_optc_;
          MenhirLib.EngineTypes.endp = _endpos_optc_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let optc : 'tv_option_re_or_not_eqe_ = Obj.magic optc in
        let i : 'tv_pure_ident_or_meta_ident = Obj.magic i in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_optc_ in
        let _v : 'tv_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe_ = 
# 1474 "parser_cocci_menhir.mly"
    (
      match optc with
	  None   -> (i, Ast0.NoConstraint)
	| Some c -> (i, c)
    )
# 27763 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = c;
          MenhirLib.EngineTypes.startp = _startpos_c_;
          MenhirLib.EngineTypes.endp = _endpos_c_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let c : 'tv_option_re_or_not_eqid_ = Obj.magic c in
        let i : 'tv_pure_ident_or_meta_ident = Obj.magic i in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_c_ in
        let _v : 'tv_pure_ident_or_meta_ident_with_idconstraint_re_or_not_eqid_ = 
# 1492 "parser_cocci_menhir.mly"
    (
      match c with
	  None -> (i, Ast.IdNoConstraint)
	| Some constraint_ -> (i,constraint_)
    )
# 27797 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = c;
          MenhirLib.EngineTypes.startp = _startpos_c_;
          MenhirLib.EngineTypes.endp = _endpos_c_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let c : 'tv_option_re_or_not_eqid_ = Obj.magic c in
        let i : 'tv_pure_ident_or_meta_ident = Obj.magic i in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_c_ in
        let _v : 'tv_pure_ident_or_meta_ident_with_idconstraint_virt_re_or_not_eqid_ = 
# 1482 "parser_cocci_menhir.mly"
    (
      Common.Left
        (match c with
	  None -> (i, Ast.IdNoConstraint)
	| Some constraint_ -> (i,constraint_))
    )
# 27832 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_pure_ident = Obj.magic _3 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_pure_ident_or_meta_ident_with_idconstraint_virt_re_or_not_eqid_ = 
# 1488 "parser_cocci_menhir.mly"
                           ( Common.Right (P.id2name _3) )
# 27864 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_pure_ident_or_meta_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_or_meta_ident_with_seed = 
# 1451 "parser_cocci_menhir.mly"
                                ( (_1,Ast.NoVal) )
# 27888 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_separated_nonempty_list_TCppConcatOp_seed_elem_ = Obj.magic _3 in
        let _1 : 'tv_pure_ident_or_meta_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_pure_ident_or_meta_ident_with_seed = 
# 1454 "parser_cocci_menhir.mly"
  ( match _3 with
	   [Ast.SeedString s] -> (_1,Ast.StringSeed s)
	 | _ -> (_1,Ast.ListSeed _3) )
# 27924 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let l : 'tv_loption_not_ceq_ = Obj.magic l in
        let i : 'tv_pure_ident_or_meta_ident = Obj.magic i in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_l_ in
        let _v : 'tv_pure_ident_or_meta_ident_with_x_eq_not_ceq_ = 
# 1468 "parser_cocci_menhir.mly"
    (
      (i, l)
    )
# 27956 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let l : 'tv_loption_not_pos_ = Obj.magic l in
        let i : 'tv_pure_ident_or_meta_ident = Obj.magic i in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_l_ in
        let _v : 'tv_pure_ident_or_meta_ident_with_x_eq_not_pos_ = 
# 1468 "parser_cocci_menhir.mly"
    (
      (i, l)
    )
# 27988 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = re;
          MenhirLib.EngineTypes.startp = _startpos_re_;
          MenhirLib.EngineTypes.endp = _endpos_re_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let re : 'tv_regexp_eqid = Obj.magic re in
        let _startpos = _startpos_re_ in
        let _endpos = _endpos_re_ in
        let _v : 'tv_re_or_not_eqe = 
# 1536 "parser_cocci_menhir.mly"
                  (Ast0.NotIdCstrt (re))
# 28012 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ne;
          MenhirLib.EngineTypes.startp = _startpos_ne_;
          MenhirLib.EngineTypes.endp = _endpos_ne_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let ne : 'tv_not_eqe = Obj.magic ne in
        let _startpos = _startpos_ne_ in
        let _endpos = _endpos_ne_ in
        let _v : 'tv_re_or_not_eqe = 
# 1537 "parser_cocci_menhir.mly"
                  (Ast0.NotExpCstrt (ne))
# 28036 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = re;
          MenhirLib.EngineTypes.startp = _startpos_re_;
          MenhirLib.EngineTypes.endp = _endpos_re_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let re : 'tv_regexp_eqid = Obj.magic re in
        let _startpos = _startpos_re_ in
        let _endpos = _endpos_re_ in
        let _v : 'tv_re_or_not_eqid = 
# 1499 "parser_cocci_menhir.mly"
                  (re)
# 28060 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ne;
          MenhirLib.EngineTypes.startp = _startpos_ne_;
          MenhirLib.EngineTypes.endp = _endpos_ne_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let ne : 'tv_not_eqid = Obj.magic ne in
        let _startpos = _startpos_ne_ in
        let _endpos = _endpos_ne_ in
        let _v : 'tv_re_or_not_eqid = 
# 1500 "parser_cocci_menhir.mly"
                  (ne)
# 28084 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = re;
          MenhirLib.EngineTypes.startp = _startpos_re_;
          MenhirLib.EngineTypes.endp = _endpos_re_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let re : (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 28109 "parser_cocci_menhir.ml"
        ) = Obj.magic re in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_re_ in
        let _v : 'tv_regexp_eqid = 
# 1504 "parser_cocci_menhir.mly"
         ( (if !Data.in_iso
	    then failwith "constraints not allowed in iso file");
	   (if !Data.in_generating
	    then failwith "constraints not allowed in a generated rule file");
	   let (s,_) = re in Ast.IdRegExp (s,Str.regexp s)
	 )
# 28121 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = re;
          MenhirLib.EngineTypes.startp = _startpos_re_;
          MenhirLib.EngineTypes.endp = _endpos_re_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let re : (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 28146 "parser_cocci_menhir.ml"
        ) = Obj.magic re in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_re_ in
        let _v : 'tv_regexp_eqid = 
# 1511 "parser_cocci_menhir.mly"
         ( (if !Data.in_iso
	    then failwith "constraints not allowed in iso file");
	   (if !Data.in_generating
	    then failwith "constraints not allowed in a generated rule file");
	   let (s,_) = re in Ast.IdNotRegExp (s,Str.regexp s)
	 )
# 28158 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : (
# 131 "parser_cocci_menhir.mly"
      (unit)
# 28175 "parser_cocci_menhir.ml"
        ) = 
# 172 "parser_cocci_menhir.mly"
        ( )
# 28179 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_one_decl_var = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_rule_elem_statement = 
# 927 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Decl((Ast0.default_info(),Ast0.context_befaft()),_1)) )
# 28203 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 28229 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_rule_elem_statement = 
# 928 "parser_cocci_menhir.mly"
               ( P.exp_stm _1 _2 )
# 28237 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 28268 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_eexpr = Obj.magic _2 in
        let _1 : (
# 57 "parser_cocci_menhir.mly"
       (Data.clt)
# 28274 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_rule_elem_statement = 
# 929 "parser_cocci_menhir.mly"
                        ( P.ret_exp _1 _2 _3 )
# 28281 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 28307 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 57 "parser_cocci_menhir.mly"
       (Data.clt)
# 28312 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_rule_elem_statement = 
# 930 "parser_cocci_menhir.mly"
                  ( P.ret _1 _2 )
# 28319 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 28345 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 58 "parser_cocci_menhir.mly"
       (Data.clt)
# 28350 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_rule_elem_statement = 
# 931 "parser_cocci_menhir.mly"
                 ( P.break _1 _2 )
# 28357 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 28383 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 58 "parser_cocci_menhir.mly"
       (Data.clt)
# 28388 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_rule_elem_statement = 
# 932 "parser_cocci_menhir.mly"
                    ( P.cont _1 _2 )
# 28395 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 28426 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_midzero_list_rule_elem_statement_rule_elem_statement_ = Obj.magic _2 in
        let _1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 28432 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_rule_elem_statement = 
# 934 "parser_cocci_menhir.mly"
    ( let (mids,code) = _2 in
    Ast0.wrap
      (Ast0.Disj(P.clt2mcode "(" _1,
		 List.map (function x -> Ast0.wrap(Ast0.DOTS([x]))) code,
		 mids, P.clt2mcode ")" _3)) )
# 28443 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ee;
            MenhirLib.EngineTypes.startp = _startpos_ee_;
            MenhirLib.EngineTypes.endp = _endpos_ee_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = a;
                MenhirLib.EngineTypes.startp = _startpos_a_;
                MenhirLib.EngineTypes.endp = _endpos_a_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = i;
                  MenhirLib.EngineTypes.startp = _startpos_i_;
                  MenhirLib.EngineTypes.endp = _endpos_i_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = d;
                    MenhirLib.EngineTypes.startp = _startpos_d_;
                    MenhirLib.EngineTypes.endp = _endpos_d_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ee : 'tv_is_expression = Obj.magic ee in
        let e : 'tv_exists = Obj.magic e in
        let a : 'tv_loption_disable_ = Obj.magic a in
        let i : 'tv_loption_choose_iso_ = Obj.magic i in
        let d : 'tv_depends = Obj.magic d in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (
# 153 "parser_cocci_menhir.mly"
      (Ast_cocci.rulename)
# 28499 "parser_cocci_menhir.ml"
        ) = let nm =
          
# 39 "standard.mly"
    ( None )
# 28504 "parser_cocci_menhir.ml"
          
        in
        
# 202 "parser_cocci_menhir.mly"
      ( P.make_cocci_rule_name_result nm d i a e ee )
# 28510 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ee;
            MenhirLib.EngineTypes.startp = _startpos_ee_;
            MenhirLib.EngineTypes.endp = _endpos_ee_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = a;
                MenhirLib.EngineTypes.startp = _startpos_a_;
                MenhirLib.EngineTypes.endp = _endpos_a_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = i;
                  MenhirLib.EngineTypes.startp = _startpos_i_;
                  MenhirLib.EngineTypes.endp = _endpos_i_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = d;
                    MenhirLib.EngineTypes.startp = _startpos_d_;
                    MenhirLib.EngineTypes.endp = _endpos_d_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = x0;
                        MenhirLib.EngineTypes.startp = _startpos_x0_;
                        MenhirLib.EngineTypes.endp = _endpos_x0_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ee : 'tv_is_expression = Obj.magic ee in
        let e : 'tv_exists = Obj.magic e in
        let a : 'tv_loption_disable_ = Obj.magic a in
        let i : 'tv_loption_choose_iso_ = Obj.magic i in
        let d : 'tv_depends = Obj.magic d in
        let x0 : 'tv_pure_ident = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos__8_ in
        let _v : (
# 153 "parser_cocci_menhir.mly"
      (Ast_cocci.rulename)
# 28572 "parser_cocci_menhir.ml"
        ) = let nm =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 28578 "parser_cocci_menhir.ml"
          
        in
        
# 202 "parser_cocci_menhir.mly"
      ( P.make_cocci_rule_name_result nm d i a e ee )
# 28584 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ee;
            MenhirLib.EngineTypes.startp = _startpos_ee_;
            MenhirLib.EngineTypes.endp = _endpos_ee_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = a;
                MenhirLib.EngineTypes.startp = _startpos_a_;
                MenhirLib.EngineTypes.endp = _endpos_a_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = i;
                  MenhirLib.EngineTypes.startp = _startpos_i_;
                  MenhirLib.EngineTypes.endp = _endpos_i_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = d;
                    MenhirLib.EngineTypes.startp = _startpos_d_;
                    MenhirLib.EngineTypes.endp = _endpos_d_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ee : 'tv_is_expression = Obj.magic ee in
        let e : 'tv_exists = Obj.magic e in
        let a : 'tv_loption_disable_ = Obj.magic a in
        let i : 'tv_loption_choose_iso_ = Obj.magic i in
        let d : 'tv_depends = Obj.magic d in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : (
# 153 "parser_cocci_menhir.mly"
      (Ast_cocci.rulename)
# 28644 "parser_cocci_menhir.ml"
        ) = 
# 207 "parser_cocci_menhir.mly"
      ( P.make_generated_rule_name_result None d i a e ee )
# 28648 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = lang;
              MenhirLib.EngineTypes.startp = _startpos_lang_;
              MenhirLib.EngineTypes.endp = _endpos_lang_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let d : 'tv_depends = Obj.magic d in
        let lang : 'tv_pure_ident = Obj.magic lang in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (
# 153 "parser_cocci_menhir.mly"
      (Ast_cocci.rulename)
# 28690 "parser_cocci_menhir.ml"
        ) = 
# 209 "parser_cocci_menhir.mly"
      ( P.make_script_rule_name_result lang d )
# 28694 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = lang;
            MenhirLib.EngineTypes.startp = _startpos_lang_;
            MenhirLib.EngineTypes.endp = _endpos_lang_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let lang : 'tv_pure_ident = Obj.magic lang in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (
# 153 "parser_cocci_menhir.mly"
      (Ast_cocci.rulename)
# 28730 "parser_cocci_menhir.ml"
        ) = 
# 211 "parser_cocci_menhir.mly"
      ( P.make_initial_script_rule_name_result lang )
# 28734 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = lang;
            MenhirLib.EngineTypes.startp = _startpos_lang_;
            MenhirLib.EngineTypes.endp = _endpos_lang_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let lang : 'tv_pure_ident = Obj.magic lang in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (
# 153 "parser_cocci_menhir.mly"
      (Ast_cocci.rulename)
# 28770 "parser_cocci_menhir.ml"
        ) = 
# 213 "parser_cocci_menhir.mly"
      ( P.make_final_script_rule_name_result lang )
# 28774 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = cocci;
            MenhirLib.EngineTypes.startp = _startpos_cocci_;
            MenhirLib.EngineTypes.endp = _endpos_cocci_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = py;
                    MenhirLib.EngineTypes.startp = _startpos_py_;
                    MenhirLib.EngineTypes.endp = _endpos_py_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let cocci : 'tv_pure_ident = Obj.magic cocci in
        let _3 : (
# 47 "parser_cocci_menhir.mly"
      (string)
# 28818 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let py : 'tv_pure_ident = Obj.magic py in
        let _startpos = _startpos_py_ in
        let _endpos = _endpos__6_ in
        let _v : (
# 159 "parser_cocci_menhir.mly"
       (string * Ast_cocci.meta_name)
# 28826 "parser_cocci_menhir.ml"
        ) = 
# 1990 "parser_cocci_menhir.mly"
  ( (P.id2name py, (_3, P.id2name cocci)) )
# 28830 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = cocci;
            MenhirLib.EngineTypes.startp = _startpos_cocci_;
            MenhirLib.EngineTypes.endp = _endpos_cocci_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = py;
                    MenhirLib.EngineTypes.startp = _startpos_py_;
                    MenhirLib.EngineTypes.endp = _endpos_py_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let cocci : 'tv_pure_ident = Obj.magic cocci in
        let py : 'tv_pure_ident = Obj.magic py in
        let _startpos = _startpos_py_ in
        let _endpos = _endpos__6_ in
        let _v : (
# 159 "parser_cocci_menhir.mly"
       (string * Ast_cocci.meta_name)
# 28876 "parser_cocci_menhir.ml"
        ) = 
# 1992 "parser_cocci_menhir.mly"
  ( (P.id2name py, ("virtual", P.id2name cocci)) )
# 28880 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 28901 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_seed_elem = 
# 1459 "parser_cocci_menhir.mly"
          ( let (x,_) = _1 in Ast.SeedString x )
# 28908 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 61 "parser_cocci_menhir.mly"
       (Parse_aux.idinfo)
# 28929 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_seed_elem = 
# 1460 "parser_cocci_menhir.mly"
          ( let (x,_,_,_) = _1 in Ast.SeedId x )
# 28936 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_pure_ident = Obj.magic _3 in
        let _1 : (
# 47 "parser_cocci_menhir.mly"
      (string)
# 28967 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_seed_elem = 
# 1462 "parser_cocci_menhir.mly"
    ( let nm = (_1,P.id2name _3) in
      P.check_meta(Ast.MetaIdDecl(Ast.NONE,nm));
      Ast.SeedId nm )
# 28976 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 28997 "parser_cocci_menhir.ml"
        ) = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_TString_ = 
# 144 "standard.mly"
    ( [ x ] )
# 29004 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_TString_ = Obj.magic xs in
        let x : (
# 87 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 29035 "parser_cocci_menhir.ml"
        ) = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_TString_ = 
# 146 "standard.mly"
    ( x :: xs )
# 29042 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_any_strict = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_any_strict_ = 
# 144 "standard.mly"
    ( [ x ] )
# 29066 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_any_strict_ = Obj.magic xs in
        let x : 'tv_any_strict = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_any_strict_ = 
# 146 "standard.mly"
    ( x :: xs )
# 29100 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_ctype = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_ctype_ = 
# 144 "standard.mly"
    ( [ x ] )
# 29124 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_ctype_ = Obj.magic xs in
        let x : 'tv_ctype = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_ctype_ = 
# 146 "standard.mly"
    ( x :: xs )
# 29158 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_d_ident = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_d_ident_ = 
# 144 "standard.mly"
    ( [ x ] )
# 29182 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_d_ident_ = Obj.magic xs in
        let x : 'tv_d_ident = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_d_ident_ = 
# 146 "standard.mly"
    ( x :: xs )
# 29216 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_ident_or_const = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_ident_or_const_ = 
# 144 "standard.mly"
    ( [ x ] )
# 29240 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_ident_or_const_ = Obj.magic xs in
        let x : 'tv_ident_or_const = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_ident_or_const_ = 
# 146 "standard.mly"
    ( x :: xs )
# 29274 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_meta_ident = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_meta_ident_ = 
# 144 "standard.mly"
    ( [ x ] )
# 29298 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_meta_ident_ = Obj.magic xs in
        let x : 'tv_meta_ident = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_meta_ident_ = 
# 146 "standard.mly"
    ( x :: xs )
# 29332 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_pure_ident = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_ = 
# 144 "standard.mly"
    ( [ x ] )
# 29356 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_pure_ident_ = Obj.magic xs in
        let x : 'tv_pure_ident = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_ = 
# 146 "standard.mly"
    ( x :: xs )
# 29390 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_pure_ident_or_meta_ident = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_ = 
# 144 "standard.mly"
    ( [ x ] )
# 29414 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_ = Obj.magic xs in
        let x : 'tv_pure_ident_or_meta_ident = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_ = 
# 146 "standard.mly"
    ( x :: xs )
# 29448 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe__ = 
# 144 "standard.mly"
    ( [ x ] )
# 29472 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe__ = Obj.magic xs in
        let x : 'tv_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe__ = 
# 146 "standard.mly"
    ( x :: xs )
# 29506 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_pure_ident_or_meta_ident_with_idconstraint_re_or_not_eqid_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_idconstraint_re_or_not_eqid__ = 
# 144 "standard.mly"
    ( [ x ] )
# 29530 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_idconstraint_re_or_not_eqid__ = Obj.magic xs in
        let x : 'tv_pure_ident_or_meta_ident_with_idconstraint_re_or_not_eqid_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_idconstraint_re_or_not_eqid__ = 
# 146 "standard.mly"
    ( x :: xs )
# 29564 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_pure_ident_or_meta_ident_with_idconstraint_virt_re_or_not_eqid_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_idconstraint_virt_re_or_not_eqid__ = 
# 144 "standard.mly"
    ( [ x ] )
# 29588 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_idconstraint_virt_re_or_not_eqid__ = Obj.magic xs in
        let x : 'tv_pure_ident_or_meta_ident_with_idconstraint_virt_re_or_not_eqid_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_idconstraint_virt_re_or_not_eqid__ = 
# 146 "standard.mly"
    ( x :: xs )
# 29622 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_pure_ident_or_meta_ident_with_seed = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_seed_ = 
# 144 "standard.mly"
    ( [ x ] )
# 29646 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_seed_ = Obj.magic xs in
        let x : 'tv_pure_ident_or_meta_ident_with_seed = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_seed_ = 
# 146 "standard.mly"
    ( x :: xs )
# 29680 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_pure_ident_or_meta_ident_with_x_eq_not_ceq_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_x_eq_not_ceq__ = 
# 144 "standard.mly"
    ( [ x ] )
# 29704 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_x_eq_not_ceq__ = Obj.magic xs in
        let x : 'tv_pure_ident_or_meta_ident_with_x_eq_not_ceq_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_x_eq_not_ceq__ = 
# 146 "standard.mly"
    ( x :: xs )
# 29738 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_pure_ident_or_meta_ident_with_x_eq_not_pos_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_x_eq_not_pos__ = 
# 144 "standard.mly"
    ( [ x ] )
# 29762 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_x_eq_not_pos__ = Obj.magic xs in
        let x : 'tv_pure_ident_or_meta_ident_with_x_eq_not_pos_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_x_eq_not_pos__ = 
# 146 "standard.mly"
    ( x :: xs )
# 29796 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_typedef_ident = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_typedef_ident_ = 
# 144 "standard.mly"
    ( [ x ] )
# 29820 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_typedef_ident_ = Obj.magic xs in
        let x : 'tv_typedef_ident = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_typedef_ident_ = 
# 146 "standard.mly"
    ( x :: xs )
# 29854 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_seed_elem = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TCppConcatOp_seed_elem_ = 
# 144 "standard.mly"
    ( [ x ] )
# 29878 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TCppConcatOp_seed_elem_ = Obj.magic xs in
        let x : 'tv_seed_elem = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TCppConcatOp_seed_elem_ = 
# 146 "standard.mly"
    ( x :: xs )
# 29912 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_statement = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_single_statement = 
# 942 "parser_cocci_menhir.mly"
                                      ( _1 )
# 29936 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 29967 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_midzero_list_statement_statement_ = Obj.magic _2 in
        let _1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 29973 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_single_statement = 
# 946 "parser_cocci_menhir.mly"
      ( let (mids,code) = _2 in
        Ast0.wrap
	  (Ast0.Disj(P.clt2mcode "(" _1,
		     List.map (function x -> Ast0.wrap(Ast0.DOTS([x]))) code,
		     mids, P.clt2mcode ")" _3)) )
# 29984 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_includes = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_statement = 
# 869 "parser_cocci_menhir.mly"
           ( _1 )
# 30008 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 64 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 30029 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_statement = 
# 871 "parser_cocci_menhir.mly"
    ( P.meta_stm _1 )
# 30036 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 30062 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_statement = 
# 873 "parser_cocci_menhir.mly"
    ( P.exp_stm _1 _2 )
# 30070 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let _5 : 'tv_single_statement = Obj.magic _5 in
        let _4 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 30112 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr = Obj.magic _3 in
        let _2 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 30118 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 57 "parser_cocci_menhir.mly"
       (Data.clt)
# 30123 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_statement = 
# 875 "parser_cocci_menhir.mly"
    ( P.ifthen _1 _2 _3 _4 _5 )
# 30130 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let _7 : 'tv_single_statement = Obj.magic _7 in
        let _6 : (
# 57 "parser_cocci_menhir.mly"
       (Data.clt)
# 30182 "parser_cocci_menhir.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_single_statement = Obj.magic _5 in
        let _4 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 30188 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr = Obj.magic _3 in
        let _2 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 30194 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 57 "parser_cocci_menhir.mly"
       (Data.clt)
# 30199 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_statement = 
# 877 "parser_cocci_menhir.mly"
    ( P.ifthenelse _1 _2 _3 _4 _5 _6 _7 )
# 30206 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let _9 : 'tv_single_statement = Obj.magic _9 in
        let _8 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 30268 "parser_cocci_menhir.ml"
        ) = Obj.magic _8 in
        let _7 : 'tv_option_eexpr_ = Obj.magic _7 in
        let _6 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 30274 "parser_cocci_menhir.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_option_eexpr_ = Obj.magic _5 in
        let _4 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 30280 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_option_eexpr_ = Obj.magic _3 in
        let _2 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 30286 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 57 "parser_cocci_menhir.mly"
       (Data.clt)
# 30291 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v : 'tv_statement = 
# 880 "parser_cocci_menhir.mly"
    ( P.forloop _1 _2 _3 _4 _5 _6 _7 _8 _9 )
# 30298 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let _5 : 'tv_single_statement = Obj.magic _5 in
        let _4 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 30340 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr = Obj.magic _3 in
        let _2 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 30346 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 57 "parser_cocci_menhir.mly"
       (Data.clt)
# 30351 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_statement = 
# 882 "parser_cocci_menhir.mly"
    ( P.whileloop _1 _2 _3 _4 _5 )
# 30358 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let _7 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 30409 "parser_cocci_menhir.ml"
        ) = Obj.magic _7 in
        let _6 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 30414 "parser_cocci_menhir.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_eexpr = Obj.magic _5 in
        let _4 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 30420 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : (
# 57 "parser_cocci_menhir.mly"
       (Data.clt)
# 30425 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_single_statement = Obj.magic _2 in
        let _1 : (
# 57 "parser_cocci_menhir.mly"
       (Data.clt)
# 30431 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_statement = 
# 884 "parser_cocci_menhir.mly"
    ( P.doloop _1 _2 _3 _4 _5 _6 _7 )
# 30438 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let _5 : 'tv_single_statement = Obj.magic _5 in
        let _4 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 30480 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr_list_option = Obj.magic _3 in
        let _2 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 30486 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_iter_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_statement = 
# 886 "parser_cocci_menhir.mly"
    ( P.iterator _1 _2 _3 _4 _5 )
# 30494 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let _8 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 30550 "parser_cocci_menhir.ml"
        ) = Obj.magic _8 in
        let _7 : 'tv_list_case_line_ = Obj.magic _7 in
        let _6 : 'tv_list_decl_var_ = Obj.magic _6 in
        let _5 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 30557 "parser_cocci_menhir.ml"
        ) = Obj.magic _5 in
        let _4 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 30562 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr = Obj.magic _3 in
        let _2 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 30568 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 57 "parser_cocci_menhir.mly"
       (Data.clt)
# 30573 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : 'tv_statement = 
# 888 "parser_cocci_menhir.mly"
    ( P.switch _1 _2 _3 _4 _5 (List.concat _6) _7 _8 )
# 30580 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 30611 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_eexpr = Obj.magic _2 in
        let _1 : (
# 57 "parser_cocci_menhir.mly"
       (Data.clt)
# 30617 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_statement = 
# 889 "parser_cocci_menhir.mly"
                        ( P.ret_exp _1 _2 _3 )
# 30624 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 30650 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 57 "parser_cocci_menhir.mly"
       (Data.clt)
# 30655 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_statement = 
# 890 "parser_cocci_menhir.mly"
                  ( P.ret _1 _2 )
# 30662 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 30688 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 58 "parser_cocci_menhir.mly"
       (Data.clt)
# 30693 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_statement = 
# 891 "parser_cocci_menhir.mly"
                 ( P.break _1 _2 )
# 30700 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 30726 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 58 "parser_cocci_menhir.mly"
       (Data.clt)
# 30731 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_statement = 
# 892 "parser_cocci_menhir.mly"
                    ( P.cont _1 _2 )
# 30738 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 30764 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_statement = 
# 893 "parser_cocci_menhir.mly"
                ( P.label _1 _2 )
# 30772 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 30803 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_ident = Obj.magic _2 in
        let _1 : (
# 58 "parser_cocci_menhir.mly"
       (Data.clt)
# 30809 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_statement = 
# 894 "parser_cocci_menhir.mly"
                      ( P.goto _1 _2 _3 )
# 30816 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 30847 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_fun_start = Obj.magic _2 in
        let _1 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 30853 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_statement = 
# 896 "parser_cocci_menhir.mly"
    ( P.seq _1 _2 _3 )
# 30860 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = w;
          MenhirLib.EngineTypes.startp = _startpos_w_;
          MenhirLib.EngineTypes.endp = _endpos_w_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let w : 'tv_list_whenppdecs_ = Obj.magic w in
        let _1 : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 30887 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_w_ in
        let _v : 'tv_stm_dots = 
# 900 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Dots(P.clt2mcode "..." _1, List.concat w)) )
# 30894 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = c;
          MenhirLib.EngineTypes.startp = _startpos_c_;
          MenhirLib.EngineTypes.endp = _endpos_c_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = b;
            MenhirLib.EngineTypes.startp = _startpos_b_;
            MenhirLib.EngineTypes.endp = _endpos_b_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = w;
              MenhirLib.EngineTypes.startp = _startpos_w_;
              MenhirLib.EngineTypes.endp = _endpos_w_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let c : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 30930 "parser_cocci_menhir.ml"
        ) = Obj.magic c in
        let b : 'tv_nest_start = Obj.magic b in
        let w : 'tv_list_whenppdecs_ = Obj.magic w in
        let _1 : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 30937 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_c_ in
        let _v : 'tv_stm_dots = 
# 902 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Nest(P.clt2mcode "<..." _1, b,
			  P.clt2mcode "...>" c, List.concat w, false)) )
# 30945 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = c;
          MenhirLib.EngineTypes.startp = _startpos_c_;
          MenhirLib.EngineTypes.endp = _endpos_c_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = b;
            MenhirLib.EngineTypes.startp = _startpos_b_;
            MenhirLib.EngineTypes.endp = _endpos_b_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = w;
              MenhirLib.EngineTypes.startp = _startpos_w_;
              MenhirLib.EngineTypes.endp = _endpos_w_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let c : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 30981 "parser_cocci_menhir.ml"
        ) = Obj.magic c in
        let b : 'tv_nest_start = Obj.magic b in
        let w : 'tv_list_whenppdecs_ = Obj.magic w in
        let _1 : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 30988 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_c_ in
        let _v : 'tv_stm_dots = 
# 905 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Nest(P.clt2mcode "<+..." _1, b,
			  P.clt2mcode "...+>" c, List.concat w, true)) )
# 30996 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let s : (
# 53 "parser_cocci_menhir.mly"
      (Data.clt)
# 31017 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_storage = 
# 831 "parser_cocci_menhir.mly"
                        ( P.clt2mcode Ast.Static s )
# 31024 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let s : (
# 53 "parser_cocci_menhir.mly"
      (Data.clt)
# 31045 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_storage = 
# 832 "parser_cocci_menhir.mly"
                        ( P.clt2mcode Ast.Auto s )
# 31052 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let s : (
# 53 "parser_cocci_menhir.mly"
      (Data.clt)
# 31073 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_storage = 
# 833 "parser_cocci_menhir.mly"
                        ( P.clt2mcode Ast.Register s )
# 31080 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let s : (
# 53 "parser_cocci_menhir.mly"
      (Data.clt)
# 31101 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_storage = 
# 834 "parser_cocci_menhir.mly"
                        ( P.clt2mcode Ast.Extern s )
# 31108 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_struct_decl = 
# 587 "parser_cocci_menhir.mly"
               ( [] )
# 31130 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 31161 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_d_ident = Obj.magic d in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_struct_decl = 
# 589 "parser_cocci_menhir.mly"
  ( let (id,fn) = d in
	 [Ast0.wrap(Ast0.UnInit(None,fn t,id,P.clt2mcode ";" pv))] )
# 31171 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = rp2;
            MenhirLib.EngineTypes.startp = _startpos_rp2_;
            MenhirLib.EngineTypes.endp = _endpos_rp2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = p;
              MenhirLib.EngineTypes.startp = _startpos_p_;
              MenhirLib.EngineTypes.endp = _endpos_p_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = lp2;
                MenhirLib.EngineTypes.startp = _startpos_lp2_;
                MenhirLib.EngineTypes.endp = _endpos_lp2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = rp1;
                  MenhirLib.EngineTypes.startp = _startpos_rp1_;
                  MenhirLib.EngineTypes.endp = _endpos_rp1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = d;
                    MenhirLib.EngineTypes.startp = _startpos_d_;
                    MenhirLib.EngineTypes.endp = _endpos_d_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = st;
                      MenhirLib.EngineTypes.startp = _startpos_st_;
                      MenhirLib.EngineTypes.endp = _endpos_st_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = lp1;
                        MenhirLib.EngineTypes.startp = _startpos_lp1_;
                        MenhirLib.EngineTypes.endp = _endpos_lp1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = t;
                          MenhirLib.EngineTypes.startp = _startpos_t_;
                          MenhirLib.EngineTypes.endp = _endpos_t_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 31232 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let rp2 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 31237 "parser_cocci_menhir.ml"
        ) = Obj.magic rp2 in
        let p : 'tv_decl_list_name_opt_decl_ = Obj.magic p in
        let lp2 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 31243 "parser_cocci_menhir.ml"
        ) = Obj.magic lp2 in
        let rp1 : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 31248 "parser_cocci_menhir.ml"
        ) = Obj.magic rp1 in
        let d : 'tv_d_ident = Obj.magic d in
        let st : (
# 99 "parser_cocci_menhir.mly"
       (Data.clt)
# 31254 "parser_cocci_menhir.ml"
        ) = Obj.magic st in
        let lp1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 31259 "parser_cocci_menhir.ml"
        ) = Obj.magic lp1 in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_struct_decl = 
# 593 "parser_cocci_menhir.mly"
        ( let (id,fn) = d in
        let t =
	  Ast0.wrap
	    (Ast0.FunctionPointer
	       (t,P.clt2mcode "(" lp1,P.clt2mcode "*" st,P.clt2mcode ")" rp1,
		P.clt2mcode "(" lp2,p,P.clt2mcode ")" rp2)) in
        [Ast0.wrap(Ast0.UnInit(None,fn t,id,P.clt2mcode ";" pv))] )
# 31273 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 31304 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident = Obj.magic i in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_struct_decl = let cv =
          
# 39 "standard.mly"
    ( None )
# 31314 "parser_cocci_menhir.ml"
          
        in
        
# 601 "parser_cocci_menhir.mly"
  ( let (id,fn) = d in
	 let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
	 [Ast0.wrap(Ast0.UnInit(None,fn idtype,id,P.clt2mcode ";" pv))] )
# 31322 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 107 "parser_cocci_menhir.mly"
       (Data.clt)
# 31358 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident = Obj.magic i in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_struct_decl = let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 31370 "parser_cocci_menhir.ml"
          
        in
        
# 601 "parser_cocci_menhir.mly"
  ( let (id,fn) = d in
	 let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
	 [Ast0.wrap(Ast0.UnInit(None,fn idtype,id,P.clt2mcode ";" pv))] )
# 31378 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_struct_decl_list_start = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_struct_decl_list = 
# 606 "parser_cocci_menhir.mly"
                          ( Ast0.wrap(Ast0.DOTS(_1)) )
# 31402 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_struct_decl = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_struct_decl_list_start = 
# 609 "parser_cocci_menhir.mly"
                                     ( _1 )
# 31426 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_struct_decl_list_start = Obj.magic _2 in
        let _1 : 'tv_struct_decl = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_struct_decl_list_start = 
# 610 "parser_cocci_menhir.mly"
                                     ( _1@_2 )
# 31456 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let r : 'tv_continue_struct_decl_list = Obj.magic r in
        let d : 'tv_edots_when_TEllipsis_struct_decl_ = Obj.magic d in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_struct_decl_list_start = 
# 612 "parser_cocci_menhir.mly"
    ( (P.mkddots "..." d)::r )
# 31486 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let s : (
# 50 "parser_cocci_menhir.mly"
      (Data.clt)
# 31507 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_struct_or_union = 
# 583 "parser_cocci_menhir.mly"
                 ( P.clt2mcode Ast.Struct s )
# 31514 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = u;
          MenhirLib.EngineTypes.startp = _startpos_u_;
          MenhirLib.EngineTypes.endp = _endpos_u_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let u : (
# 50 "parser_cocci_menhir.mly"
      (Data.clt)
# 31535 "parser_cocci_menhir.ml"
        ) = Obj.magic u in
        let _startpos = _startpos_u_ in
        let _endpos = _endpos_u_ in
        let _v : 'tv_struct_or_union = 
# 584 "parser_cocci_menhir.mly"
                 ( P.clt2mcode Ast.Union u )
# 31542 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_eexpr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_top_eexpr = 
# 1229 "parser_cocci_menhir.mly"
        ( Ast0.wrap(Ast0.OTHER(Ast0.wrap(Ast0.Exp(_1)))) )
# 31566 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 31597 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_initialize_list = Obj.magic _2 in
        let _1 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 31603 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_top_init = 
# 1767 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.InitList(P.clt2mcode "{" _1,_2,P.clt2mcode "}" _3)) )
# 31610 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_toplevel_after_dots = 
# 1755 "parser_cocci_menhir.mly"
                                     ([])
# 31627 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_exp = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_after_dots = 
# 1756 "parser_cocci_menhir.mly"
                                     (_2)
# 31655 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_exp = Obj.magic _2 in
        let _1 : 'tv_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_after_dots = 
# 1757 "parser_cocci_menhir.mly"
                                     ((Ast0.wrap(Ast0.Exp(_1)))::_2)
# 31685 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_after_dots = 
# 1758 "parser_cocci_menhir.mly"
                                          (_1@_2)
# 31715 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_exp = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_after_dots_init = 
# 1746 "parser_cocci_menhir.mly"
                                     (_2)
# 31743 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_exp = Obj.magic _2 in
        let _1 : 'tv_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_after_dots_init = 
# 1747 "parser_cocci_menhir.mly"
                                     ((Ast0.wrap(Ast0.Exp(_1)))::_2)
# 31773 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_after_dots_init = 
# 1748 "parser_cocci_menhir.mly"
                                          (_1@_2)
# 31803 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_toplevel_after_exp = 
# 1751 "parser_cocci_menhir.mly"
                                     ([])
# 31820 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_dots = Obj.magic _2 in
        let _1 : 'tv_stm_dots = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_after_exp = 
# 1752 "parser_cocci_menhir.mly"
                                     (_1::_2)
# 31850 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_toplevel_after_stm = 
# 1761 "parser_cocci_menhir.mly"
                                     ([])
# 31867 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_dots = Obj.magic _2 in
        let _1 : 'tv_stm_dots = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_after_stm = 
# 1762 "parser_cocci_menhir.mly"
                                     (_1::_2)
# 31897 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_after_stm = 
# 1763 "parser_cocci_menhir.mly"
                                     (_1@_2)
# 31927 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_dots = Obj.magic _2 in
        let _1 : 'tv_stm_dots = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_seq_start_toplevel_after_dots_ = 
# 1741 "parser_cocci_menhir.mly"
                                     ( _1::_2 )
# 31957 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_exp = Obj.magic _2 in
        let _1 : 'tv_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_seq_start_toplevel_after_dots_ = 
# 1742 "parser_cocci_menhir.mly"
                                     ( (Ast0.wrap(Ast0.Exp(_1)))::_2 )
# 31987 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_seq_start_toplevel_after_dots_ = 
# 1743 "parser_cocci_menhir.mly"
                                          ( _1@_2 )
# 32017 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = w0;
            MenhirLib.EngineTypes.startp = _startpos_w0_;
            MenhirLib.EngineTypes.endp = _endpos_w0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = a0;
              MenhirLib.EngineTypes.startp = _startpos_a0_;
              MenhirLib.EngineTypes.endp = _endpos_a0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let b : 'tv_toplevel_after_dots_init = Obj.magic b in
        let w0 : 'tv_list_whenppdecs_ = Obj.magic w0 in
        let a0 : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 32050 "parser_cocci_menhir.ml"
        ) = Obj.magic a0 in
        let _startpos = _startpos_a0_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_toplevel_seq_startne_toplevel_after_dots_init_ = let a =
          let w = w0 in
          let a = a0 in
          
# 910 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Dots(P.clt2mcode "..." a, List.concat w)) )
# 32060 "parser_cocci_menhir.ml"
          
        in
        
# 1734 "parser_cocci_menhir.mly"
                                             ( a::b )
# 32066 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = c0;
            MenhirLib.EngineTypes.startp = _startpos_c0_;
            MenhirLib.EngineTypes.endp = _endpos_c0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = b0;
              MenhirLib.EngineTypes.startp = _startpos_b0_;
              MenhirLib.EngineTypes.endp = _endpos_b0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = w0;
                MenhirLib.EngineTypes.startp = _startpos_w0_;
                MenhirLib.EngineTypes.endp = _endpos_w0_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = a0;
                  MenhirLib.EngineTypes.startp = _startpos_a0_;
                  MenhirLib.EngineTypes.endp = _endpos_a0_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let b : 'tv_toplevel_after_dots_init = Obj.magic b in
        let c0 : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 32108 "parser_cocci_menhir.ml"
        ) = Obj.magic c0 in
        let b0 : 'tv_nest_start = Obj.magic b0 in
        let w0 : 'tv_list_whenppdecs_ = Obj.magic w0 in
        let a0 : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 32115 "parser_cocci_menhir.ml"
        ) = Obj.magic a0 in
        let _startpos = _startpos_a0_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_toplevel_seq_startne_toplevel_after_dots_init_ = let a =
          let c = c0 in
          let b = b0 in
          let w = w0 in
          let a = a0 in
          
# 914 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Nest(P.clt2mcode "<..." a, b,
			  P.clt2mcode "...>" c, List.concat w, false)) )
# 32128 "parser_cocci_menhir.ml"
          
        in
        
# 1735 "parser_cocci_menhir.mly"
                                              ( a::b )
# 32134 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = c0;
            MenhirLib.EngineTypes.startp = _startpos_c0_;
            MenhirLib.EngineTypes.endp = _endpos_c0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = b0;
              MenhirLib.EngineTypes.startp = _startpos_b0_;
              MenhirLib.EngineTypes.endp = _endpos_b0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = w0;
                MenhirLib.EngineTypes.startp = _startpos_w0_;
                MenhirLib.EngineTypes.endp = _endpos_w0_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = a0;
                  MenhirLib.EngineTypes.startp = _startpos_a0_;
                  MenhirLib.EngineTypes.endp = _endpos_a0_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let b : 'tv_toplevel_after_dots_init = Obj.magic b in
        let c0 : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 32176 "parser_cocci_menhir.ml"
        ) = Obj.magic c0 in
        let b0 : 'tv_nest_start = Obj.magic b0 in
        let w0 : 'tv_list_whenppdecs_ = Obj.magic w0 in
        let a0 : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 32183 "parser_cocci_menhir.ml"
        ) = Obj.magic a0 in
        let _startpos = _startpos_a0_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_toplevel_seq_startne_toplevel_after_dots_init_ = let a =
          let c = c0 in
          let b = b0 in
          let w = w0 in
          let a = a0 in
          
# 917 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Nest(P.clt2mcode "<+..." a, b,
			  P.clt2mcode "...+>" c, List.concat w, true)) )
# 32196 "parser_cocci_menhir.ml"
          
        in
        
# 1735 "parser_cocci_menhir.mly"
                                              ( a::b )
# 32202 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = c0;
          MenhirLib.EngineTypes.startp = _startpos_c0_;
          MenhirLib.EngineTypes.endp = _endpos_c0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = b0;
            MenhirLib.EngineTypes.startp = _startpos_b0_;
            MenhirLib.EngineTypes.endp = _endpos_b0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = w0;
              MenhirLib.EngineTypes.startp = _startpos_w0_;
              MenhirLib.EngineTypes.endp = _endpos_w0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = a0;
                MenhirLib.EngineTypes.startp = _startpos_a0_;
                MenhirLib.EngineTypes.endp = _endpos_a0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let c0 : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 32238 "parser_cocci_menhir.ml"
        ) = Obj.magic c0 in
        let b0 : 'tv_nest_start = Obj.magic b0 in
        let w0 : 'tv_list_whenppdecs_ = Obj.magic w0 in
        let a0 : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 32245 "parser_cocci_menhir.ml"
        ) = Obj.magic a0 in
        let _startpos = _startpos_a0_ in
        let _endpos = _endpos_c0_ in
        let _v : 'tv_toplevel_seq_startne_toplevel_after_dots_init_ = let a =
          let c = c0 in
          let b = b0 in
          let w = w0 in
          let a = a0 in
          
# 914 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Nest(P.clt2mcode "<..." a, b,
			  P.clt2mcode "...>" c, List.concat w, false)) )
# 32258 "parser_cocci_menhir.ml"
          
        in
        
# 1736 "parser_cocci_menhir.mly"
                                       ( [a] )
# 32264 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = c0;
          MenhirLib.EngineTypes.startp = _startpos_c0_;
          MenhirLib.EngineTypes.endp = _endpos_c0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = b0;
            MenhirLib.EngineTypes.startp = _startpos_b0_;
            MenhirLib.EngineTypes.endp = _endpos_b0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = w0;
              MenhirLib.EngineTypes.startp = _startpos_w0_;
              MenhirLib.EngineTypes.endp = _endpos_w0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = a0;
                MenhirLib.EngineTypes.startp = _startpos_a0_;
                MenhirLib.EngineTypes.endp = _endpos_a0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let c0 : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 32300 "parser_cocci_menhir.ml"
        ) = Obj.magic c0 in
        let b0 : 'tv_nest_start = Obj.magic b0 in
        let w0 : 'tv_list_whenppdecs_ = Obj.magic w0 in
        let a0 : (
# 73 "parser_cocci_menhir.mly"
       (Data.clt)
# 32307 "parser_cocci_menhir.ml"
        ) = Obj.magic a0 in
        let _startpos = _startpos_a0_ in
        let _endpos = _endpos_c0_ in
        let _v : 'tv_toplevel_seq_startne_toplevel_after_dots_init_ = let a =
          let c = c0 in
          let b = b0 in
          let w = w0 in
          let a = a0 in
          
# 917 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Nest(P.clt2mcode "<+..." a, b,
			  P.clt2mcode "...+>" c, List.concat w, true)) )
# 32320 "parser_cocci_menhir.ml"
          
        in
        
# 1736 "parser_cocci_menhir.mly"
                                       ( [a] )
# 32326 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_exp = Obj.magic _2 in
        let _1 : 'tv_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_seq_startne_toplevel_after_dots_init_ = 
# 1737 "parser_cocci_menhir.mly"
                                     ( (Ast0.wrap(Ast0.Exp(_1)))::_2 )
# 32356 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_seq_startne_toplevel_after_dots_init_ = 
# 1738 "parser_cocci_menhir.mly"
                                          ( _1@_2 )
# 32386 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 32418 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 32423 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let _startpos = _startpos_r0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 501 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.CharType,[P.clt2mcode "char" ty])) )
# 32435 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 32441 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 32448 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 32454 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 32486 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 32491 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let _startpos = _startpos_r0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 503 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.ShortType,[P.clt2mcode "short" ty])) )
# 32503 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 32509 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 32516 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 32522 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 32554 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 32559 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let _startpos = _startpos_r0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 505 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.IntType,[P.clt2mcode "int" ty])) )
# 32571 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 32577 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 32584 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 32590 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 64 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 32622 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 32627 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let _startpos = _startpos_r0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let p0 = p00 in
          let r = r0 in
          let ty =
            let p = p0 in
            
# 507 "parser_cocci_menhir.mly"
    ( let (nm,pure,clt) = p in
      Ast0.wrap(Ast0.MetaType(P.clt2mcode nm clt,pure)) )
# 32640 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 32646 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 32653 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 32659 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = r00;
                MenhirLib.EngineTypes.startp = _startpos_r00_;
                MenhirLib.EngineTypes.endp = _endpos_r00_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = r1;
                  MenhirLib.EngineTypes.startp = _startpos_r1_;
                  MenhirLib.EngineTypes.endp = _endpos_r1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 59 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 32700 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let r00 : (
# 47 "parser_cocci_menhir.mly"
      (string)
# 32705 "parser_cocci_menhir.ml"
        ) = Obj.magic r00 in
        let r1 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 32710 "parser_cocci_menhir.ml"
        ) = Obj.magic r1 in
        let _startpos = _startpos_r1_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let p0 = p00 in
          let r0 = r00 in
          let r = r1 in
          let ty =
            let p = p0 in
            let r = r0 in
            
# 510 "parser_cocci_menhir.mly"
    ( let nm = (r,P.id2name p) in
    (* this is only possible when we are in a metavar decl.  Otherwise,
       it will be represented already as a MetaType *)
    let _ = P.check_meta(Ast.MetaTypeDecl(Ast.NONE,nm)) in
    Ast0.wrap(Ast0.MetaType(P.clt2mcode nm (P.id2clt p),
			    Ast0.Impure (*will be ignored*))) )
# 32729 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 32735 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 32742 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 32748 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 32780 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 32785 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let _startpos = _startpos_r0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 517 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.LongType,[P.clt2mcode "long" ty])) )
# 32797 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 32803 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 32810 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 32816 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty200;
            MenhirLib.EngineTypes.startp = _startpos_ty200_;
            MenhirLib.EngineTypes.endp = _endpos_ty200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = ty100;
              MenhirLib.EngineTypes.startp = _startpos_ty100_;
              MenhirLib.EngineTypes.endp = _endpos_ty100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = r0;
                MenhirLib.EngineTypes.startp = _startpos_r0_;
                MenhirLib.EngineTypes.endp = _endpos_r0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty200 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 32853 "parser_cocci_menhir.ml"
        ) = Obj.magic ty200 in
        let ty100 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 32858 "parser_cocci_menhir.ml"
        ) = Obj.magic ty100 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 32863 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let _startpos = _startpos_r0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty20 = ty200 in
          let ty10 = ty100 in
          let r = r0 in
          let ty =
            let ty2 = ty20 in
            let ty1 = ty10 in
            
# 519 "parser_cocci_menhir.mly"
    ( Ast0.wrap
	(Ast0.BaseType
	   (Ast.LongLongType,
	    [P.clt2mcode "long" ty1;P.clt2mcode "long" ty2])) )
# 32880 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 32886 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 32893 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 32899 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 32931 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 32936 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let _startpos = _startpos_r0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 501 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.CharType,[P.clt2mcode "char" ty])) )
# 32948 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 32954 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 32961 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 32967 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 32999 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 33004 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let _startpos = _startpos_r0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 503 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.ShortType,[P.clt2mcode "short" ty])) )
# 33016 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 33022 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 33029 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 33035 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 33067 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 33072 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let _startpos = _startpos_r0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 505 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.IntType,[P.clt2mcode "int" ty])) )
# 33084 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 33090 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 33097 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 33103 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 64 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 33135 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 33140 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let _startpos = _startpos_r0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let p0 = p00 in
          let r = r0 in
          let ty =
            let p = p0 in
            
# 507 "parser_cocci_menhir.mly"
    ( let (nm,pure,clt) = p in
      Ast0.wrap(Ast0.MetaType(P.clt2mcode nm clt,pure)) )
# 33153 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 33159 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 33166 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 33172 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = r00;
                MenhirLib.EngineTypes.startp = _startpos_r00_;
                MenhirLib.EngineTypes.endp = _endpos_r00_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = r1;
                  MenhirLib.EngineTypes.startp = _startpos_r1_;
                  MenhirLib.EngineTypes.endp = _endpos_r1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 59 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 33213 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let r00 : (
# 47 "parser_cocci_menhir.mly"
      (string)
# 33218 "parser_cocci_menhir.ml"
        ) = Obj.magic r00 in
        let r1 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 33223 "parser_cocci_menhir.ml"
        ) = Obj.magic r1 in
        let _startpos = _startpos_r1_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let p0 = p00 in
          let r0 = r00 in
          let r = r1 in
          let ty =
            let p = p0 in
            let r = r0 in
            
# 510 "parser_cocci_menhir.mly"
    ( let nm = (r,P.id2name p) in
    (* this is only possible when we are in a metavar decl.  Otherwise,
       it will be represented already as a MetaType *)
    let _ = P.check_meta(Ast.MetaTypeDecl(Ast.NONE,nm)) in
    Ast0.wrap(Ast0.MetaType(P.clt2mcode nm (P.id2clt p),
			    Ast0.Impure (*will be ignored*))) )
# 33242 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 33248 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 33255 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 33261 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 33293 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 33298 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let _startpos = _startpos_r0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 517 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.LongType,[P.clt2mcode "long" ty])) )
# 33310 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 33316 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 33323 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 33329 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty200;
            MenhirLib.EngineTypes.startp = _startpos_ty200_;
            MenhirLib.EngineTypes.endp = _endpos_ty200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = ty100;
              MenhirLib.EngineTypes.startp = _startpos_ty100_;
              MenhirLib.EngineTypes.endp = _endpos_ty100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = r0;
                MenhirLib.EngineTypes.startp = _startpos_r0_;
                MenhirLib.EngineTypes.endp = _endpos_r0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty200 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 33366 "parser_cocci_menhir.ml"
        ) = Obj.magic ty200 in
        let ty100 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 33371 "parser_cocci_menhir.ml"
        ) = Obj.magic ty100 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 33376 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let _startpos = _startpos_r0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty20 = ty200 in
          let ty10 = ty100 in
          let r = r0 in
          let ty =
            let ty2 = ty20 in
            let ty1 = ty10 in
            
# 519 "parser_cocci_menhir.mly"
    ( Ast0.wrap
	(Ast0.BaseType
	   (Ast.LongLongType,
	    [P.clt2mcode "long" ty1;P.clt2mcode "long" ty2])) )
# 33393 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 33399 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 33406 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 33412 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 33439 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let _startpos = _startpos_ty00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 501 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.CharType,[P.clt2mcode "char" ty])) )
# 33450 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 33456 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 33463 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 33469 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 33496 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let _startpos = _startpos_ty00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 503 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.ShortType,[P.clt2mcode "short" ty])) )
# 33507 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 33513 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 33520 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 33526 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 33553 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let _startpos = _startpos_ty00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 505 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.IntType,[P.clt2mcode "int" ty])) )
# 33564 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 33570 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 33577 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 33583 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 64 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 33610 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let _startpos = _startpos_p00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let p0 = p00 in
          let ty =
            let p = p0 in
            
# 507 "parser_cocci_menhir.mly"
    ( let (nm,pure,clt) = p in
      Ast0.wrap(Ast0.MetaType(P.clt2mcode nm clt,pure)) )
# 33622 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 33628 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 33635 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 33641 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = r00;
                MenhirLib.EngineTypes.startp = _startpos_r00_;
                MenhirLib.EngineTypes.endp = _endpos_r00_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 59 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 33677 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let r00 : (
# 47 "parser_cocci_menhir.mly"
      (string)
# 33682 "parser_cocci_menhir.ml"
        ) = Obj.magic r00 in
        let _startpos = _startpos_r00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let p0 = p00 in
          let r0 = r00 in
          let ty =
            let p = p0 in
            let r = r0 in
            
# 510 "parser_cocci_menhir.mly"
    ( let nm = (r,P.id2name p) in
    (* this is only possible when we are in a metavar decl.  Otherwise,
       it will be represented already as a MetaType *)
    let _ = P.check_meta(Ast.MetaTypeDecl(Ast.NONE,nm)) in
    Ast0.wrap(Ast0.MetaType(P.clt2mcode nm (P.id2clt p),
			    Ast0.Impure (*will be ignored*))) )
# 33700 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 33706 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 33713 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 33719 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 33746 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let _startpos = _startpos_ty00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 517 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.LongType,[P.clt2mcode "long" ty])) )
# 33757 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 33763 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 33770 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 33776 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty200;
            MenhirLib.EngineTypes.startp = _startpos_ty200_;
            MenhirLib.EngineTypes.endp = _endpos_ty200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ty100;
              MenhirLib.EngineTypes.startp = _startpos_ty100_;
              MenhirLib.EngineTypes.endp = _endpos_ty100_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty200 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 33808 "parser_cocci_menhir.ml"
        ) = Obj.magic ty200 in
        let ty100 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 33813 "parser_cocci_menhir.ml"
        ) = Obj.magic ty100 in
        let _startpos = _startpos_ty100_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty20 = ty200 in
          let ty10 = ty100 in
          let ty =
            let ty2 = ty20 in
            let ty1 = ty10 in
            
# 519 "parser_cocci_menhir.mly"
    ( Ast0.wrap
	(Ast0.BaseType
	   (Ast.LongLongType,
	    [P.clt2mcode "long" ty1;P.clt2mcode "long" ty2])) )
# 33829 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 33835 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 33842 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 33848 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 50 "parser_cocci_menhir.mly"
      (Data.clt)
# 33875 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let _startpos = _startpos_ty00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 527 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.VoidType,[P.clt2mcode "void" ty])) )
# 33886 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 33892 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 33899 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 33905 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 33932 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let _startpos = _startpos_ty00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 529 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.DoubleType,[P.clt2mcode "double" ty])) )
# 33943 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 33949 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 33956 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 33962 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 33989 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let _startpos = _startpos_ty00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 531 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.FloatType,[P.clt2mcode "float" ty])) )
# 34000 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 34006 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 34013 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 34019 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = i00;
            MenhirLib.EngineTypes.startp = _startpos_i00_;
            MenhirLib.EngineTypes.endp = _endpos_i00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = s00;
              MenhirLib.EngineTypes.startp = _startpos_s00_;
              MenhirLib.EngineTypes.endp = _endpos_s00_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let i00 : 'tv_ident = Obj.magic i00 in
        let s00 : (
# 50 "parser_cocci_menhir.mly"
      (Data.clt)
# 34052 "parser_cocci_menhir.ml"
        ) = Obj.magic s00 in
        let _startpos = _startpos_s00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let i0 = i00 in
          let s0 = s00 in
          let ty =
            let i = i0 in
            let s = s0 in
            
# 533 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.EnumName(P.clt2mcode "enum" s, i)) )
# 34065 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 34071 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 34078 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 34084 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = i00;
            MenhirLib.EngineTypes.startp = _startpos_i00_;
            MenhirLib.EngineTypes.endp = _endpos_i00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = s00;
              MenhirLib.EngineTypes.startp = _startpos_s00_;
              MenhirLib.EngineTypes.endp = _endpos_s00_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let i00 : 'tv_ident = Obj.magic i00 in
        let s00 : 'tv_struct_or_union = Obj.magic s00 in
        let _startpos = _startpos_s00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let i0 = i00 in
          let s0 = s00 in
          let ty =
            let i = i0 in
            let s = s0 in
            
# 535 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.StructUnionName(s, Some i)) )
# 34126 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 34132 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 34139 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 34145 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = r00;
            MenhirLib.EngineTypes.startp = _startpos_r00_;
            MenhirLib.EngineTypes.endp = _endpos_r00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = d00;
              MenhirLib.EngineTypes.startp = _startpos_d00_;
              MenhirLib.EngineTypes.endp = _endpos_d00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = l00;
                MenhirLib.EngineTypes.startp = _startpos_l00_;
                MenhirLib.EngineTypes.endp = _endpos_l00_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = s00;
                  MenhirLib.EngineTypes.startp = _startpos_s00_;
                  MenhirLib.EngineTypes.endp = _endpos_s00_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let r00 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 34187 "parser_cocci_menhir.ml"
        ) = Obj.magic r00 in
        let d00 : 'tv_struct_decl_list = Obj.magic d00 in
        let l00 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 34193 "parser_cocci_menhir.ml"
        ) = Obj.magic l00 in
        let s00 : 'tv_struct_or_union = Obj.magic s00 in
        let _startpos = _startpos_s00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let r0 = r00 in
          let d0 = d00 in
          let l0 = l00 in
          let s0 = s00 in
          let ty =
            let r = r0 in
            let d = d0 in
            let l = l0 in
            let s = s0 in
            let i =
              
# 39 "standard.mly"
    ( None )
# 34212 "parser_cocci_menhir.ml"
              
            in
            
# 538 "parser_cocci_menhir.mly"
    ( (if i = None && !Data.in_iso
    then failwith "structures must be named in the iso file");
      Ast0.wrap(Ast0.StructUnionDef(Ast0.wrap(Ast0.StructUnionName(s, i)),
				    P.clt2mcode "{" l,
				    d, P.clt2mcode "}" r)) )
# 34222 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 34228 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 34235 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 34241 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = r00;
            MenhirLib.EngineTypes.startp = _startpos_r00_;
            MenhirLib.EngineTypes.endp = _endpos_r00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = d00;
              MenhirLib.EngineTypes.startp = _startpos_d00_;
              MenhirLib.EngineTypes.endp = _endpos_d00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = l00;
                MenhirLib.EngineTypes.startp = _startpos_l00_;
                MenhirLib.EngineTypes.endp = _endpos_l00_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = x000;
                  MenhirLib.EngineTypes.startp = _startpos_x000_;
                  MenhirLib.EngineTypes.endp = _endpos_x000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = s00;
                    MenhirLib.EngineTypes.startp = _startpos_s00_;
                    MenhirLib.EngineTypes.endp = _endpos_s00_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let r00 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 34288 "parser_cocci_menhir.ml"
        ) = Obj.magic r00 in
        let d00 : 'tv_struct_decl_list = Obj.magic d00 in
        let l00 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 34294 "parser_cocci_menhir.ml"
        ) = Obj.magic l00 in
        let x000 : 'tv_ident = Obj.magic x000 in
        let s00 : 'tv_struct_or_union = Obj.magic s00 in
        let _startpos = _startpos_s00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let r0 = r00 in
          let d0 = d00 in
          let l0 = l00 in
          let x00 = x000 in
          let s0 = s00 in
          let ty =
            let r = r0 in
            let d = d0 in
            let l = l0 in
            let x0 = x00 in
            let s = s0 in
            let i =
              let x = x0 in
              
# 41 "standard.mly"
    ( Some x )
# 34317 "parser_cocci_menhir.ml"
              
            in
            
# 538 "parser_cocci_menhir.mly"
    ( (if i = None && !Data.in_iso
    then failwith "structures must be named in the iso file");
      Ast0.wrap(Ast0.StructUnionDef(Ast0.wrap(Ast0.StructUnionName(s, i)),
				    P.clt2mcode "{" l,
				    d, P.clt2mcode "}" r)) )
# 34327 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 34333 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 34340 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 34346 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = r00;
            MenhirLib.EngineTypes.startp = _startpos_r00_;
            MenhirLib.EngineTypes.endp = _endpos_r00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = d00;
              MenhirLib.EngineTypes.startp = _startpos_d00_;
              MenhirLib.EngineTypes.endp = _endpos_d00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = l00;
                MenhirLib.EngineTypes.startp = _startpos_l00_;
                MenhirLib.EngineTypes.endp = _endpos_l00_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = s00;
                  MenhirLib.EngineTypes.startp = _startpos_s00_;
                  MenhirLib.EngineTypes.endp = _endpos_s00_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let r00 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 34388 "parser_cocci_menhir.ml"
        ) = Obj.magic r00 in
        let d00 : 'tv_struct_decl_list = Obj.magic d00 in
        let l00 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 34394 "parser_cocci_menhir.ml"
        ) = Obj.magic l00 in
        let s00 : (
# 64 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 34399 "parser_cocci_menhir.ml"
        ) = Obj.magic s00 in
        let _startpos = _startpos_s00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let r0 = r00 in
          let d0 = d00 in
          let l0 = l00 in
          let s0 = s00 in
          let ty =
            let r = r0 in
            let d = d0 in
            let l = l0 in
            let s = s0 in
            
# 544 "parser_cocci_menhir.mly"
    ( let (nm,pure,clt) = s in
    let ty = Ast0.wrap(Ast0.MetaType(P.clt2mcode nm clt,pure)) in
    Ast0.wrap(Ast0.StructUnionDef(ty,P.clt2mcode "{" l,d,P.clt2mcode "}" r)) )
# 34418 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 34424 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 34431 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 34437 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 59 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 34464 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let _startpos = _startpos_p00_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let p0 = p00 in
          let ty =
            let p = p0 in
            
# 548 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.TypeName(P.id2mcode p)) )
# 34475 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 34481 "parser_cocci_menhir.ml"
          
        in
        let cv =
          
# 39 "standard.mly"
    ( None )
# 34488 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 34494 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 34531 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 34536 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 501 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.CharType,[P.clt2mcode "char" ty])) )
# 34549 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 34555 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 34563 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 34569 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 34606 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 34611 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 503 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.ShortType,[P.clt2mcode "short" ty])) )
# 34624 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 34630 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 34638 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 34644 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 34681 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 34686 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 505 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.IntType,[P.clt2mcode "int" ty])) )
# 34699 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 34705 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 34713 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 34719 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 64 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 34756 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 34761 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let p0 = p00 in
          let r = r0 in
          let ty =
            let p = p0 in
            
# 507 "parser_cocci_menhir.mly"
    ( let (nm,pure,clt) = p in
      Ast0.wrap(Ast0.MetaType(P.clt2mcode nm clt,pure)) )
# 34775 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 34781 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 34789 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 34795 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = r00;
                MenhirLib.EngineTypes.startp = _startpos_r00_;
                MenhirLib.EngineTypes.endp = _endpos_r00_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = r1;
                  MenhirLib.EngineTypes.startp = _startpos_r1_;
                  MenhirLib.EngineTypes.endp = _endpos_r1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x0;
                    MenhirLib.EngineTypes.startp = _startpos_x0_;
                    MenhirLib.EngineTypes.endp = _endpos_x0_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 59 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 34841 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let r00 : (
# 47 "parser_cocci_menhir.mly"
      (string)
# 34846 "parser_cocci_menhir.ml"
        ) = Obj.magic r00 in
        let r1 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 34851 "parser_cocci_menhir.ml"
        ) = Obj.magic r1 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let p0 = p00 in
          let r0 = r00 in
          let r = r1 in
          let ty =
            let p = p0 in
            let r = r0 in
            
# 510 "parser_cocci_menhir.mly"
    ( let nm = (r,P.id2name p) in
    (* this is only possible when we are in a metavar decl.  Otherwise,
       it will be represented already as a MetaType *)
    let _ = P.check_meta(Ast.MetaTypeDecl(Ast.NONE,nm)) in
    Ast0.wrap(Ast0.MetaType(P.clt2mcode nm (P.id2clt p),
			    Ast0.Impure (*will be ignored*))) )
# 34871 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 34877 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 34885 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 34891 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 34928 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 34933 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 517 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.LongType,[P.clt2mcode "long" ty])) )
# 34946 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 34952 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 34960 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 34966 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty200;
            MenhirLib.EngineTypes.startp = _startpos_ty200_;
            MenhirLib.EngineTypes.endp = _endpos_ty200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = ty100;
              MenhirLib.EngineTypes.startp = _startpos_ty100_;
              MenhirLib.EngineTypes.endp = _endpos_ty100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = r0;
                MenhirLib.EngineTypes.startp = _startpos_r0_;
                MenhirLib.EngineTypes.endp = _endpos_r0_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x0;
                  MenhirLib.EngineTypes.startp = _startpos_x0_;
                  MenhirLib.EngineTypes.endp = _endpos_x0_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty200 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 35008 "parser_cocci_menhir.ml"
        ) = Obj.magic ty200 in
        let ty100 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 35013 "parser_cocci_menhir.ml"
        ) = Obj.magic ty100 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 35018 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty20 = ty200 in
          let ty10 = ty100 in
          let r = r0 in
          let ty =
            let ty2 = ty20 in
            let ty1 = ty10 in
            
# 519 "parser_cocci_menhir.mly"
    ( Ast0.wrap
	(Ast0.BaseType
	   (Ast.LongLongType,
	    [P.clt2mcode "long" ty1;P.clt2mcode "long" ty2])) )
# 35036 "parser_cocci_menhir.ml"
            
          in
          
# 553 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 35042 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 35050 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 35056 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 35093 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 35098 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 501 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.CharType,[P.clt2mcode "char" ty])) )
# 35111 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 35117 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 35125 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 35131 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 35168 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 35173 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 503 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.ShortType,[P.clt2mcode "short" ty])) )
# 35186 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 35192 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 35200 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 35206 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 35243 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 35248 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 505 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.IntType,[P.clt2mcode "int" ty])) )
# 35261 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 35267 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 35275 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 35281 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 64 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 35318 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 35323 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let p0 = p00 in
          let r = r0 in
          let ty =
            let p = p0 in
            
# 507 "parser_cocci_menhir.mly"
    ( let (nm,pure,clt) = p in
      Ast0.wrap(Ast0.MetaType(P.clt2mcode nm clt,pure)) )
# 35337 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 35343 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 35351 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 35357 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = r00;
                MenhirLib.EngineTypes.startp = _startpos_r00_;
                MenhirLib.EngineTypes.endp = _endpos_r00_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = r1;
                  MenhirLib.EngineTypes.startp = _startpos_r1_;
                  MenhirLib.EngineTypes.endp = _endpos_r1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x0;
                    MenhirLib.EngineTypes.startp = _startpos_x0_;
                    MenhirLib.EngineTypes.endp = _endpos_x0_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 59 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 35403 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let r00 : (
# 47 "parser_cocci_menhir.mly"
      (string)
# 35408 "parser_cocci_menhir.ml"
        ) = Obj.magic r00 in
        let r1 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 35413 "parser_cocci_menhir.ml"
        ) = Obj.magic r1 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let p0 = p00 in
          let r0 = r00 in
          let r = r1 in
          let ty =
            let p = p0 in
            let r = r0 in
            
# 510 "parser_cocci_menhir.mly"
    ( let nm = (r,P.id2name p) in
    (* this is only possible when we are in a metavar decl.  Otherwise,
       it will be represented already as a MetaType *)
    let _ = P.check_meta(Ast.MetaTypeDecl(Ast.NONE,nm)) in
    Ast0.wrap(Ast0.MetaType(P.clt2mcode nm (P.id2clt p),
			    Ast0.Impure (*will be ignored*))) )
# 35433 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 35439 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 35447 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 35453 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = r0;
              MenhirLib.EngineTypes.startp = _startpos_r0_;
              MenhirLib.EngineTypes.endp = _endpos_r0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 35490 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 35495 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let r = r0 in
          let ty =
            let ty = ty0 in
            
# 517 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.LongType,[P.clt2mcode "long" ty])) )
# 35508 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 35514 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 35522 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 35528 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty200;
            MenhirLib.EngineTypes.startp = _startpos_ty200_;
            MenhirLib.EngineTypes.endp = _endpos_ty200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = ty100;
              MenhirLib.EngineTypes.startp = _startpos_ty100_;
              MenhirLib.EngineTypes.endp = _endpos_ty100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = r0;
                MenhirLib.EngineTypes.startp = _startpos_r0_;
                MenhirLib.EngineTypes.endp = _endpos_r0_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x0;
                  MenhirLib.EngineTypes.startp = _startpos_x0_;
                  MenhirLib.EngineTypes.endp = _endpos_x0_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty200 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 35570 "parser_cocci_menhir.ml"
        ) = Obj.magic ty200 in
        let ty100 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 35575 "parser_cocci_menhir.ml"
        ) = Obj.magic ty100 in
        let r0 : (
# 51 "parser_cocci_menhir.mly"
      (Data.clt)
# 35580 "parser_cocci_menhir.ml"
        ) = Obj.magic r0 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty20 = ty200 in
          let ty10 = ty100 in
          let r = r0 in
          let ty =
            let ty2 = ty20 in
            let ty1 = ty10 in
            
# 519 "parser_cocci_menhir.mly"
    ( Ast0.wrap
	(Ast0.BaseType
	   (Ast.LongLongType,
	    [P.clt2mcode "long" ty1;P.clt2mcode "long" ty2])) )
# 35598 "parser_cocci_menhir.ml"
            
          in
          
# 555 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 35604 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 35612 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 35618 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x0;
              MenhirLib.EngineTypes.startp = _startpos_x0_;
              MenhirLib.EngineTypes.endp = _endpos_x0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 35650 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 501 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.CharType,[P.clt2mcode "char" ty])) )
# 35662 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 35668 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 35676 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 35682 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x0;
              MenhirLib.EngineTypes.startp = _startpos_x0_;
              MenhirLib.EngineTypes.endp = _endpos_x0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 35714 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 503 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.ShortType,[P.clt2mcode "short" ty])) )
# 35726 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 35732 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 35740 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 35746 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x0;
              MenhirLib.EngineTypes.startp = _startpos_x0_;
              MenhirLib.EngineTypes.endp = _endpos_x0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 35778 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 505 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.IntType,[P.clt2mcode "int" ty])) )
# 35790 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 35796 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 35804 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 35810 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x0;
              MenhirLib.EngineTypes.startp = _startpos_x0_;
              MenhirLib.EngineTypes.endp = _endpos_x0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 64 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 35842 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let p0 = p00 in
          let ty =
            let p = p0 in
            
# 507 "parser_cocci_menhir.mly"
    ( let (nm,pure,clt) = p in
      Ast0.wrap(Ast0.MetaType(P.clt2mcode nm clt,pure)) )
# 35855 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 35861 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 35869 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 35875 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = r00;
                MenhirLib.EngineTypes.startp = _startpos_r00_;
                MenhirLib.EngineTypes.endp = _endpos_r00_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x0;
                  MenhirLib.EngineTypes.startp = _startpos_x0_;
                  MenhirLib.EngineTypes.endp = _endpos_x0_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 59 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 35916 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let r00 : (
# 47 "parser_cocci_menhir.mly"
      (string)
# 35921 "parser_cocci_menhir.ml"
        ) = Obj.magic r00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let p0 = p00 in
          let r0 = r00 in
          let ty =
            let p = p0 in
            let r = r0 in
            
# 510 "parser_cocci_menhir.mly"
    ( let nm = (r,P.id2name p) in
    (* this is only possible when we are in a metavar decl.  Otherwise,
       it will be represented already as a MetaType *)
    let _ = P.check_meta(Ast.MetaTypeDecl(Ast.NONE,nm)) in
    Ast0.wrap(Ast0.MetaType(P.clt2mcode nm (P.id2clt p),
			    Ast0.Impure (*will be ignored*))) )
# 35940 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 35946 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 35954 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 35960 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x0;
              MenhirLib.EngineTypes.startp = _startpos_x0_;
              MenhirLib.EngineTypes.endp = _endpos_x0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 35992 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 517 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.LongType,[P.clt2mcode "long" ty])) )
# 36004 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 36010 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 36018 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 36024 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty200;
            MenhirLib.EngineTypes.startp = _startpos_ty200_;
            MenhirLib.EngineTypes.endp = _endpos_ty200_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = ty100;
              MenhirLib.EngineTypes.startp = _startpos_ty100_;
              MenhirLib.EngineTypes.endp = _endpos_ty100_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty200 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 36061 "parser_cocci_menhir.ml"
        ) = Obj.magic ty200 in
        let ty100 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 36066 "parser_cocci_menhir.ml"
        ) = Obj.magic ty100 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty20 = ty200 in
          let ty10 = ty100 in
          let ty =
            let ty2 = ty20 in
            let ty1 = ty10 in
            
# 519 "parser_cocci_menhir.mly"
    ( Ast0.wrap
	(Ast0.BaseType
	   (Ast.LongLongType,
	    [P.clt2mcode "long" ty1;P.clt2mcode "long" ty2])) )
# 36083 "parser_cocci_menhir.ml"
            
          in
          
# 556 "parser_cocci_menhir.mly"
                    ( ty )
# 36089 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 36097 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 36103 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x0;
              MenhirLib.EngineTypes.startp = _startpos_x0_;
              MenhirLib.EngineTypes.endp = _endpos_x0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 50 "parser_cocci_menhir.mly"
      (Data.clt)
# 36135 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 527 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.VoidType,[P.clt2mcode "void" ty])) )
# 36147 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 36153 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 36161 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 36167 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x0;
              MenhirLib.EngineTypes.startp = _startpos_x0_;
              MenhirLib.EngineTypes.endp = _endpos_x0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 36199 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 529 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.DoubleType,[P.clt2mcode "double" ty])) )
# 36211 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 36217 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 36225 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 36231 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty00;
            MenhirLib.EngineTypes.startp = _startpos_ty00_;
            MenhirLib.EngineTypes.endp = _endpos_ty00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x0;
              MenhirLib.EngineTypes.startp = _startpos_x0_;
              MenhirLib.EngineTypes.endp = _endpos_x0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty00 : (
# 49 "parser_cocci_menhir.mly"
      (Data.clt)
# 36263 "parser_cocci_menhir.ml"
        ) = Obj.magic ty00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let ty0 = ty00 in
          let ty =
            let ty = ty0 in
            
# 531 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.FloatType,[P.clt2mcode "float" ty])) )
# 36275 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 36281 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 36289 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 36295 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = i00;
            MenhirLib.EngineTypes.startp = _startpos_i00_;
            MenhirLib.EngineTypes.endp = _endpos_i00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = s00;
              MenhirLib.EngineTypes.startp = _startpos_s00_;
              MenhirLib.EngineTypes.endp = _endpos_s00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let i00 : 'tv_ident = Obj.magic i00 in
        let s00 : (
# 50 "parser_cocci_menhir.mly"
      (Data.clt)
# 36333 "parser_cocci_menhir.ml"
        ) = Obj.magic s00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let i0 = i00 in
          let s0 = s00 in
          let ty =
            let i = i0 in
            let s = s0 in
            
# 533 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.EnumName(P.clt2mcode "enum" s, i)) )
# 36347 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 36353 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 36361 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 36367 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = i00;
            MenhirLib.EngineTypes.startp = _startpos_i00_;
            MenhirLib.EngineTypes.endp = _endpos_i00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = s00;
              MenhirLib.EngineTypes.startp = _startpos_s00_;
              MenhirLib.EngineTypes.endp = _endpos_s00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let i00 : 'tv_ident = Obj.magic i00 in
        let s00 : 'tv_struct_or_union = Obj.magic s00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let i0 = i00 in
          let s0 = s00 in
          let ty =
            let i = i0 in
            let s = s0 in
            
# 535 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.StructUnionName(s, Some i)) )
# 36415 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 36421 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 36429 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 36435 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = r00;
            MenhirLib.EngineTypes.startp = _startpos_r00_;
            MenhirLib.EngineTypes.endp = _endpos_r00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = d00;
              MenhirLib.EngineTypes.startp = _startpos_d00_;
              MenhirLib.EngineTypes.endp = _endpos_d00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = l00;
                MenhirLib.EngineTypes.startp = _startpos_l00_;
                MenhirLib.EngineTypes.endp = _endpos_l00_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = s00;
                  MenhirLib.EngineTypes.startp = _startpos_s00_;
                  MenhirLib.EngineTypes.endp = _endpos_s00_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x0;
                    MenhirLib.EngineTypes.startp = _startpos_x0_;
                    MenhirLib.EngineTypes.endp = _endpos_x0_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let r00 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 36482 "parser_cocci_menhir.ml"
        ) = Obj.magic r00 in
        let d00 : 'tv_struct_decl_list = Obj.magic d00 in
        let l00 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 36488 "parser_cocci_menhir.ml"
        ) = Obj.magic l00 in
        let s00 : 'tv_struct_or_union = Obj.magic s00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let r0 = r00 in
          let d0 = d00 in
          let l0 = l00 in
          let s0 = s00 in
          let ty =
            let r = r0 in
            let d = d0 in
            let l = l0 in
            let s = s0 in
            let i =
              
# 39 "standard.mly"
    ( None )
# 36508 "parser_cocci_menhir.ml"
              
            in
            
# 538 "parser_cocci_menhir.mly"
    ( (if i = None && !Data.in_iso
    then failwith "structures must be named in the iso file");
      Ast0.wrap(Ast0.StructUnionDef(Ast0.wrap(Ast0.StructUnionName(s, i)),
				    P.clt2mcode "{" l,
				    d, P.clt2mcode "}" r)) )
# 36518 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 36524 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 36532 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 36538 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = r00;
            MenhirLib.EngineTypes.startp = _startpos_r00_;
            MenhirLib.EngineTypes.endp = _endpos_r00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = d00;
              MenhirLib.EngineTypes.startp = _startpos_d00_;
              MenhirLib.EngineTypes.endp = _endpos_d00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = l00;
                MenhirLib.EngineTypes.startp = _startpos_l00_;
                MenhirLib.EngineTypes.endp = _endpos_l00_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = x000;
                  MenhirLib.EngineTypes.startp = _startpos_x000_;
                  MenhirLib.EngineTypes.endp = _endpos_x000_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = s00;
                    MenhirLib.EngineTypes.startp = _startpos_s00_;
                    MenhirLib.EngineTypes.endp = _endpos_s00_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = x0;
                      MenhirLib.EngineTypes.startp = _startpos_x0_;
                      MenhirLib.EngineTypes.endp = _endpos_x0_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let r00 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 36590 "parser_cocci_menhir.ml"
        ) = Obj.magic r00 in
        let d00 : 'tv_struct_decl_list = Obj.magic d00 in
        let l00 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 36596 "parser_cocci_menhir.ml"
        ) = Obj.magic l00 in
        let x000 : 'tv_ident = Obj.magic x000 in
        let s00 : 'tv_struct_or_union = Obj.magic s00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let r0 = r00 in
          let d0 = d00 in
          let l0 = l00 in
          let x00 = x000 in
          let s0 = s00 in
          let ty =
            let r = r0 in
            let d = d0 in
            let l = l0 in
            let x0 = x00 in
            let s = s0 in
            let i =
              let x = x0 in
              
# 41 "standard.mly"
    ( Some x )
# 36620 "parser_cocci_menhir.ml"
              
            in
            
# 538 "parser_cocci_menhir.mly"
    ( (if i = None && !Data.in_iso
    then failwith "structures must be named in the iso file");
      Ast0.wrap(Ast0.StructUnionDef(Ast0.wrap(Ast0.StructUnionName(s, i)),
				    P.clt2mcode "{" l,
				    d, P.clt2mcode "}" r)) )
# 36630 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 36636 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 36644 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 36650 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = r00;
            MenhirLib.EngineTypes.startp = _startpos_r00_;
            MenhirLib.EngineTypes.endp = _endpos_r00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = d00;
              MenhirLib.EngineTypes.startp = _startpos_d00_;
              MenhirLib.EngineTypes.endp = _endpos_d00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = l00;
                MenhirLib.EngineTypes.startp = _startpos_l00_;
                MenhirLib.EngineTypes.endp = _endpos_l00_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = s00;
                  MenhirLib.EngineTypes.startp = _startpos_s00_;
                  MenhirLib.EngineTypes.endp = _endpos_s00_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x0;
                    MenhirLib.EngineTypes.startp = _startpos_x0_;
                    MenhirLib.EngineTypes.endp = _endpos_x0_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let r00 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 36697 "parser_cocci_menhir.ml"
        ) = Obj.magic r00 in
        let d00 : 'tv_struct_decl_list = Obj.magic d00 in
        let l00 : (
# 101 "parser_cocci_menhir.mly"
       (Data.clt)
# 36703 "parser_cocci_menhir.ml"
        ) = Obj.magic l00 in
        let s00 : (
# 64 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 36708 "parser_cocci_menhir.ml"
        ) = Obj.magic s00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let r0 = r00 in
          let d0 = d00 in
          let l0 = l00 in
          let s0 = s00 in
          let ty =
            let r = r0 in
            let d = d0 in
            let l = l0 in
            let s = s0 in
            
# 544 "parser_cocci_menhir.mly"
    ( let (nm,pure,clt) = s in
    let ty = Ast0.wrap(Ast0.MetaType(P.clt2mcode nm clt,pure)) in
    Ast0.wrap(Ast0.StructUnionDef(ty,P.clt2mcode "{" l,d,P.clt2mcode "}" r)) )
# 36728 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 36734 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 36742 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 36748 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = p00;
            MenhirLib.EngineTypes.startp = _startpos_p00_;
            MenhirLib.EngineTypes.endp = _endpos_p00_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x0;
              MenhirLib.EngineTypes.startp = _startpos_x0_;
              MenhirLib.EngineTypes.endp = _endpos_x0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let p00 : (
# 59 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 36780 "parser_cocci_menhir.ml"
        ) = Obj.magic p00 in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let ty =
          let p0 = p00 in
          let ty =
            let p = p0 in
            
# 548 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.TypeName(P.id2mcode p)) )
# 36792 "parser_cocci_menhir.ml"
            
          in
          
# 557 "parser_cocci_menhir.mly"
                        ( ty )
# 36798 "parser_cocci_menhir.ml"
          
        in
        let cv =
          let x = x0 in
          
# 41 "standard.mly"
    ( Some x )
# 36806 "parser_cocci_menhir.ml"
          
        in
        
# 574 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 36812 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = rp;
          MenhirLib.EngineTypes.startp = _startpos_rp_;
          MenhirLib.EngineTypes.endp = _endpos_rp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = lp;
              MenhirLib.EngineTypes.startp = _startpos_lp_;
              MenhirLib.EngineTypes.endp = _endpos_lp_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let rp : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 36843 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let t : 'tv_midzero_list_ctype_ctype_ = Obj.magic t in
        let lp : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 36849 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let _startpos = _startpos_lp_ in
        let _endpos = _endpos_rp_ in
        let _v : 'tv_typedef_ctype = 
# 576 "parser_cocci_menhir.mly"
    ( let (mids,code) = t in
      Ast0.wrap
	(Ast0.DisjType(P.clt2mcode "(" lp,code,mids, P.clt2mcode ")" rp)) )
# 36858 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_pure_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_typedef_ident = 
# 1640 "parser_cocci_menhir.mly"
         ( Ast0.wrap(Ast0.TypeName(P.id2mcode _1)) )
# 36882 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 64 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 36903 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_typedef_ident = 
# 1642 "parser_cocci_menhir.mly"
         ( let (nm,pure,clt) = _1 in
	 Ast0.wrap(Ast0.MetaType(P.clt2mcode nm clt,pure)) )
# 36911 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_postfix_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_expr_eexpr_dot_expressions_ = 
# 1318 "parser_cocci_menhir.mly"
                                         ( _1 )
# 36935 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_eexpr_dot_expressions_ = Obj.magic _2 in
        let _1 : (
# 85 "parser_cocci_menhir.mly"
       (Data.clt)
# 36962 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_dot_expressions_ = 
# 1320 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Infix (_2, P.clt2mcode Ast.Inc _1)) )
# 36969 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_eexpr_dot_expressions_ = Obj.magic _2 in
        let _1 : (
# 85 "parser_cocci_menhir.mly"
       (Data.clt)
# 36996 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_dot_expressions_ = 
# 1322 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Infix (_2, P.clt2mcode Ast.Dec _1)) )
# 37003 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_cast_expr_eexpr_dot_expressions_ = Obj.magic _2 in
        let _1 : 'tv_unary_op = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_dot_expressions_ = 
# 1324 "parser_cocci_menhir.mly"
      ( let mcode = _1 in Ast0.wrap(Ast0.Unary(_2, mcode)) )
# 37033 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_eexpr_dot_expressions_ = Obj.magic _2 in
        let _1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 37060 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_dot_expressions_ = 
# 1326 "parser_cocci_menhir.mly"
      ( let mcode = P.clt2mcode Ast.Not _1 in
      Ast0.wrap(Ast0.Unary(_2, mcode)) )
# 37068 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_eexpr_dot_expressions_ = Obj.magic _2 in
        let _1 : (
# 58 "parser_cocci_menhir.mly"
       (Data.clt)
# 37095 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_dot_expressions_ = 
# 1329 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.SizeOfExpr (P.clt2mcode "sizeof" _1, _2)) )
# 37102 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = rp;
          MenhirLib.EngineTypes.startp = _startpos_rp_;
          MenhirLib.EngineTypes.endp = _endpos_rp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = lp;
              MenhirLib.EngineTypes.startp = _startpos_lp_;
              MenhirLib.EngineTypes.endp = _endpos_lp_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = s;
                MenhirLib.EngineTypes.startp = _startpos_s_;
                MenhirLib.EngineTypes.endp = _endpos_s_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let rp : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 37138 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let t : 'tv_ctype = Obj.magic t in
        let lp : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 37144 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let s : (
# 58 "parser_cocci_menhir.mly"
       (Data.clt)
# 37149 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_rp_ in
        let _v : 'tv_unary_expr_eexpr_dot_expressions_ = 
# 1331 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.SizeOfType (P.clt2mcode "sizeof" s,
                                   P.clt2mcode "(" lp,t,
                                   P.clt2mcode ")" rp)) )
# 37158 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_postfix_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_expr_eexpr_invalid_ = 
# 1318 "parser_cocci_menhir.mly"
                                         ( _1 )
# 37182 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_eexpr_invalid_ = Obj.magic _2 in
        let _1 : (
# 85 "parser_cocci_menhir.mly"
       (Data.clt)
# 37209 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_invalid_ = 
# 1320 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Infix (_2, P.clt2mcode Ast.Inc _1)) )
# 37216 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_eexpr_invalid_ = Obj.magic _2 in
        let _1 : (
# 85 "parser_cocci_menhir.mly"
       (Data.clt)
# 37243 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_invalid_ = 
# 1322 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Infix (_2, P.clt2mcode Ast.Dec _1)) )
# 37250 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_cast_expr_eexpr_invalid_ = Obj.magic _2 in
        let _1 : 'tv_unary_op = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_invalid_ = 
# 1324 "parser_cocci_menhir.mly"
      ( let mcode = _1 in Ast0.wrap(Ast0.Unary(_2, mcode)) )
# 37280 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_eexpr_invalid_ = Obj.magic _2 in
        let _1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 37307 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_invalid_ = 
# 1326 "parser_cocci_menhir.mly"
      ( let mcode = P.clt2mcode Ast.Not _1 in
      Ast0.wrap(Ast0.Unary(_2, mcode)) )
# 37315 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_eexpr_invalid_ = Obj.magic _2 in
        let _1 : (
# 58 "parser_cocci_menhir.mly"
       (Data.clt)
# 37342 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_invalid_ = 
# 1329 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.SizeOfExpr (P.clt2mcode "sizeof" _1, _2)) )
# 37349 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = rp;
          MenhirLib.EngineTypes.startp = _startpos_rp_;
          MenhirLib.EngineTypes.endp = _endpos_rp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = lp;
              MenhirLib.EngineTypes.startp = _startpos_lp_;
              MenhirLib.EngineTypes.endp = _endpos_lp_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = s;
                MenhirLib.EngineTypes.startp = _startpos_s_;
                MenhirLib.EngineTypes.endp = _endpos_s_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let rp : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 37385 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let t : 'tv_ctype = Obj.magic t in
        let lp : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 37391 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let s : (
# 58 "parser_cocci_menhir.mly"
       (Data.clt)
# 37396 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_rp_ in
        let _v : 'tv_unary_expr_eexpr_invalid_ = 
# 1331 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.SizeOfType (P.clt2mcode "sizeof" s,
                                   P.clt2mcode "(" lp,t,
                                   P.clt2mcode ")" rp)) )
# 37405 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_postfix_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_expr_eexpr_nest_expressions_ = 
# 1318 "parser_cocci_menhir.mly"
                                         ( _1 )
# 37429 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_eexpr_nest_expressions_ = Obj.magic _2 in
        let _1 : (
# 85 "parser_cocci_menhir.mly"
       (Data.clt)
# 37456 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_nest_expressions_ = 
# 1320 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Infix (_2, P.clt2mcode Ast.Inc _1)) )
# 37463 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_eexpr_nest_expressions_ = Obj.magic _2 in
        let _1 : (
# 85 "parser_cocci_menhir.mly"
       (Data.clt)
# 37490 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_nest_expressions_ = 
# 1322 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Infix (_2, P.clt2mcode Ast.Dec _1)) )
# 37497 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_cast_expr_eexpr_nest_expressions_ = Obj.magic _2 in
        let _1 : 'tv_unary_op = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_nest_expressions_ = 
# 1324 "parser_cocci_menhir.mly"
      ( let mcode = _1 in Ast0.wrap(Ast0.Unary(_2, mcode)) )
# 37527 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_eexpr_nest_expressions_ = Obj.magic _2 in
        let _1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 37554 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_nest_expressions_ = 
# 1326 "parser_cocci_menhir.mly"
      ( let mcode = P.clt2mcode Ast.Not _1 in
      Ast0.wrap(Ast0.Unary(_2, mcode)) )
# 37562 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_eexpr_nest_expressions_ = Obj.magic _2 in
        let _1 : (
# 58 "parser_cocci_menhir.mly"
       (Data.clt)
# 37589 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_nest_expressions_ = 
# 1329 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.SizeOfExpr (P.clt2mcode "sizeof" _1, _2)) )
# 37596 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = rp;
          MenhirLib.EngineTypes.startp = _startpos_rp_;
          MenhirLib.EngineTypes.endp = _endpos_rp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = lp;
              MenhirLib.EngineTypes.startp = _startpos_lp_;
              MenhirLib.EngineTypes.endp = _endpos_lp_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = s;
                MenhirLib.EngineTypes.startp = _startpos_s_;
                MenhirLib.EngineTypes.endp = _endpos_s_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let rp : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 37632 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let t : 'tv_ctype = Obj.magic t in
        let lp : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 37638 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let s : (
# 58 "parser_cocci_menhir.mly"
       (Data.clt)
# 37643 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_rp_ in
        let _v : 'tv_unary_expr_eexpr_nest_expressions_ = 
# 1331 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.SizeOfType (P.clt2mcode "sizeof" s,
                                   P.clt2mcode "(" lp,t,
                                   P.clt2mcode ")" rp)) )
# 37652 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_postfix_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_expr_expr_invalid_ = 
# 1318 "parser_cocci_menhir.mly"
                                         ( _1 )
# 37676 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_expr_invalid_ = Obj.magic _2 in
        let _1 : (
# 85 "parser_cocci_menhir.mly"
       (Data.clt)
# 37703 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_expr_invalid_ = 
# 1320 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Infix (_2, P.clt2mcode Ast.Inc _1)) )
# 37710 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_expr_invalid_ = Obj.magic _2 in
        let _1 : (
# 85 "parser_cocci_menhir.mly"
       (Data.clt)
# 37737 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_expr_invalid_ = 
# 1322 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Infix (_2, P.clt2mcode Ast.Dec _1)) )
# 37744 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_cast_expr_expr_invalid_ = Obj.magic _2 in
        let _1 : 'tv_unary_op = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_expr_invalid_ = 
# 1324 "parser_cocci_menhir.mly"
      ( let mcode = _1 in Ast0.wrap(Ast0.Unary(_2, mcode)) )
# 37774 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_expr_invalid_ = Obj.magic _2 in
        let _1 : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 37801 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_expr_invalid_ = 
# 1326 "parser_cocci_menhir.mly"
      ( let mcode = P.clt2mcode Ast.Not _1 in
      Ast0.wrap(Ast0.Unary(_2, mcode)) )
# 37809 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_expr_invalid_ = Obj.magic _2 in
        let _1 : (
# 58 "parser_cocci_menhir.mly"
       (Data.clt)
# 37836 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_expr_invalid_ = 
# 1329 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.SizeOfExpr (P.clt2mcode "sizeof" _1, _2)) )
# 37843 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = rp;
          MenhirLib.EngineTypes.startp = _startpos_rp_;
          MenhirLib.EngineTypes.endp = _endpos_rp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = lp;
              MenhirLib.EngineTypes.startp = _startpos_lp_;
              MenhirLib.EngineTypes.endp = _endpos_lp_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = s;
                MenhirLib.EngineTypes.startp = _startpos_s_;
                MenhirLib.EngineTypes.endp = _endpos_s_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let rp : (
# 77 "parser_cocci_menhir.mly"
       (Data.clt)
# 37879 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let t : 'tv_ctype = Obj.magic t in
        let lp : (
# 76 "parser_cocci_menhir.mly"
       (Data.clt)
# 37885 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let s : (
# 58 "parser_cocci_menhir.mly"
       (Data.clt)
# 37890 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_rp_ in
        let _v : 'tv_unary_expr_expr_invalid_ = 
# 1331 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.SizeOfType (P.clt2mcode "sizeof" s,
                                   P.clt2mcode "(" lp,t,
                                   P.clt2mcode ")" rp)) )
# 37899 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 93 "parser_cocci_menhir.mly"
       (Data.clt)
# 37920 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_op = 
# 1335 "parser_cocci_menhir.mly"
                  ( P.clt2mcode Ast.GetRef _1 )
# 37927 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 99 "parser_cocci_menhir.mly"
       (Data.clt)
# 37948 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_op = 
# 1336 "parser_cocci_menhir.mly"
           ( P.clt2mcode Ast.DeRef _1 )
# 37955 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 98 "parser_cocci_menhir.mly"
       (Data.clt)
# 37976 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_op = 
# 1337 "parser_cocci_menhir.mly"
           ( P.clt2mcode Ast.UnPlus _1 )
# 37983 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 98 "parser_cocci_menhir.mly"
       (Data.clt)
# 38004 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_op = 
# 1338 "parser_cocci_menhir.mly"
           ( P.clt2mcode Ast.UnMinus _1 )
# 38011 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 99 "parser_cocci_menhir.mly"
       (Data.clt)
# 38032 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_op = 
# 1339 "parser_cocci_menhir.mly"
           ( P.clt2mcode Ast.Tilde _1 )
# 38039 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_exp = Obj.magic _2 in
        let _1 : 'tv_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_when_start = 
# 1860 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.DOTS((Ast0.wrap(Ast0.Exp(_1)))::_2)) )
# 38069 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_when_start = 
# 1862 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.DOTS(_1@_2)) )
# 38099 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = w;
          MenhirLib.EngineTypes.startp = _startpos_w_;
          MenhirLib.EngineTypes.endp = _endpos_w_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let w : 'tv_whens_when_start_rule_elem_statement_any_strict_ = Obj.magic w in
        let _startpos = _startpos_w_ in
        let _endpos = _endpos_w_ in
        let _v : 'tv_whenppdecs = 
# 921 "parser_cocci_menhir.mly"
    ( w )
# 38123 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = w;
            MenhirLib.EngineTypes.startp = _startpos_w_;
            MenhirLib.EngineTypes.endp = _endpos_w_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let w : 'tv_when_start = Obj.magic w in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_whens_when_start_rule_elem_statement_any_strict_ = 
# 1928 "parser_cocci_menhir.mly"
                                         ( [Ast0.WhenNot w] )
# 38159 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = w;
            MenhirLib.EngineTypes.startp = _startpos_w_;
            MenhirLib.EngineTypes.endp = _endpos_w_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let w : 'tv_rule_elem_statement = Obj.magic w in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_whens_when_start_rule_elem_statement_any_strict_ = 
# 1929 "parser_cocci_menhir.mly"
                                             ( [Ast0.WhenAlways w] )
# 38195 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _2 : 'tv_comma_list_any_strict_ = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_whens_when_start_rule_elem_statement_any_strict_ = 
# 1931 "parser_cocci_menhir.mly"
      ( List.map (function x -> Ast0.WhenModifier(x)) _2 )
# 38227 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let e : 'tv_eexpr = Obj.magic e in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_whens_when_start_rule_elem_statement_any_strict_ = 
# 1932 "parser_cocci_menhir.mly"
                                        ( [Ast0.WhenNotTrue e] )
# 38263 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let e : 'tv_eexpr = Obj.magic e in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_whens_when_start_rule_elem_statement_any_strict_ = 
# 1933 "parser_cocci_menhir.mly"
                                         ( [Ast0.WhenNotFalse e] )
# 38299 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      |]
  
  let recovery =
    false
  
  let trace =
    None
  
  end)

let rec script_meta_main =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1805 lexer lexbuf) : (
# 159 "parser_cocci_menhir.mly"
       (string * Ast_cocci.meta_name)
# 38323 "parser_cocci_menhir.ml"
    ))

and rule_name =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1735 lexer lexbuf) : (
# 153 "parser_cocci_menhir.mly"
      (Ast_cocci.rulename)
# 38331 "parser_cocci_menhir.ml"
    ))

and reinit =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1733 lexer lexbuf) : (
# 131 "parser_cocci_menhir.mly"
      (unit)
# 38339 "parser_cocci_menhir.ml"
    ))

and plus_main =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1697 lexer lexbuf) : (
# 140 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 38347 "parser_cocci_menhir.ml"
    ))

and plus_exp_main =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1689 lexer lexbuf) : (
# 143 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 38355 "parser_cocci_menhir.ml"
    ))

and never_used =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1683 lexer lexbuf) : (
# 168 "parser_cocci_menhir.mly"
      (unit)
# 38363 "parser_cocci_menhir.ml"
    ))

and minus_main =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1603 lexer lexbuf) : (
# 134 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 38371 "parser_cocci_menhir.ml"
    ))

and minus_exp_main =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1591 lexer lexbuf) : (
# 137 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 38379 "parser_cocci_menhir.ml"
    ))

and meta_main =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1588 lexer lexbuf) : (
# 157 "parser_cocci_menhir.mly"
      ((Ast_cocci.metavar,Ast_cocci.metavar) Common.either list)
# 38387 "parser_cocci_menhir.ml"
    ))

and iso_rule_name =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1584 lexer lexbuf) : (
# 149 "parser_cocci_menhir.mly"
      (Ast_cocci.rulename)
# 38395 "parser_cocci_menhir.ml"
    ))

and iso_meta_main =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1338 lexer lexbuf) : (
# 165 "parser_cocci_menhir.mly"
      ((Ast_cocci.metavar,Ast_cocci.metavar) Common.either list)
# 38403 "parser_cocci_menhir.ml"
    ))

and iso_main =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 18 lexer lexbuf) : (
# 162 "parser_cocci_menhir.mly"
      (Ast0_cocci.anything list list)
# 38411 "parser_cocci_menhir.ml"
    ))

and include_main =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 0 lexer lexbuf) : (
# 146 "parser_cocci_menhir.mly"
      (Data.incl_iso list)
# 38419 "parser_cocci_menhir.ml"
    ))




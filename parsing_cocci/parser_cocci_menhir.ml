exception Error

type token = 
  | Tvolatile of (
# 210 "parser_cocci_menhir.mly"
      (Data.clt)
# 8 "parser_cocci_menhir.ml"
)
  | Tvoid of (
# 206 "parser_cocci_menhir.mly"
      (Data.clt)
# 13 "parser_cocci_menhir.ml"
)
  | Tunsigned of (
# 207 "parser_cocci_menhir.mly"
      (Data.clt)
# 18 "parser_cocci_menhir.ml"
)
  | Tunion of (
# 206 "parser_cocci_menhir.mly"
      (Data.clt)
# 23 "parser_cocci_menhir.ml"
)
  | Ttypedef of (
# 209 "parser_cocci_menhir.mly"
      (Data.clt)
# 28 "parser_cocci_menhir.ml"
)
  | Tstruct of (
# 206 "parser_cocci_menhir.mly"
      (Data.clt)
# 33 "parser_cocci_menhir.ml"
)
  | Tstatic of (
# 209 "parser_cocci_menhir.mly"
      (Data.clt)
# 38 "parser_cocci_menhir.ml"
)
  | Tssize_t of (
# 205 "parser_cocci_menhir.mly"
      (Data.clt)
# 43 "parser_cocci_menhir.ml"
)
  | Tsize_t of (
# 205 "parser_cocci_menhir.mly"
      (Data.clt)
# 48 "parser_cocci_menhir.ml"
)
  | Tsigned of (
# 207 "parser_cocci_menhir.mly"
      (Data.clt)
# 53 "parser_cocci_menhir.ml"
)
  | Tshort of (
# 204 "parser_cocci_menhir.mly"
      (Data.clt)
# 58 "parser_cocci_menhir.ml"
)
  | Tregister of (
# 209 "parser_cocci_menhir.mly"
      (Data.clt)
# 63 "parser_cocci_menhir.ml"
)
  | Tptrdiff_t of (
# 205 "parser_cocci_menhir.mly"
      (Data.clt)
# 68 "parser_cocci_menhir.ml"
)
  | Tlong of (
# 204 "parser_cocci_menhir.mly"
      (Data.clt)
# 73 "parser_cocci_menhir.ml"
)
  | Tlist
  | Tint of (
# 204 "parser_cocci_menhir.mly"
      (Data.clt)
# 79 "parser_cocci_menhir.ml"
)
  | Tinline of (
# 209 "parser_cocci_menhir.mly"
      (Data.clt)
# 84 "parser_cocci_menhir.ml"
)
  | Tfloat of (
# 204 "parser_cocci_menhir.mly"
      (Data.clt)
# 89 "parser_cocci_menhir.ml"
)
  | Textern of (
# 209 "parser_cocci_menhir.mly"
      (Data.clt)
# 94 "parser_cocci_menhir.ml"
)
  | Texec of (
# 215 "parser_cocci_menhir.mly"
       (Data.clt)
# 99 "parser_cocci_menhir.ml"
)
  | Tenum of (
# 206 "parser_cocci_menhir.mly"
      (Data.clt)
# 104 "parser_cocci_menhir.ml"
)
  | Tdouble of (
# 204 "parser_cocci_menhir.mly"
      (Data.clt)
# 109 "parser_cocci_menhir.ml"
)
  | Tdecimal of (
# 215 "parser_cocci_menhir.mly"
       (Data.clt)
# 114 "parser_cocci_menhir.ml"
)
  | Tconst of (
# 210 "parser_cocci_menhir.mly"
      (Data.clt)
# 119 "parser_cocci_menhir.ml"
)
  | Tchar of (
# 204 "parser_cocci_menhir.mly"
      (Data.clt)
# 124 "parser_cocci_menhir.ml"
)
  | Tauto of (
# 209 "parser_cocci_menhir.mly"
      (Data.clt)
# 129 "parser_cocci_menhir.ml"
)
  | Tattr of (
# 211 "parser_cocci_menhir.mly"
      (string * Data.clt)
# 134 "parser_cocci_menhir.ml"
)
  | TXor of (
# 256 "parser_cocci_menhir.mly"
       (Data.clt)
# 139 "parser_cocci_menhir.ml"
)
  | TWords
  | TWhy0
  | TWhy of (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 146 "parser_cocci_menhir.ml"
)
  | TWhitespace of (
# 233 "parser_cocci_menhir.mly"
       (string)
# 151 "parser_cocci_menhir.ml"
)
  | TWhile of (
# 214 "parser_cocci_menhir.mly"
       (Data.clt)
# 156 "parser_cocci_menhir.ml"
)
  | TWhenTrue of (
# 236 "parser_cocci_menhir.mly"
       (Data.clt)
# 161 "parser_cocci_menhir.ml"
)
  | TWhenFalse of (
# 236 "parser_cocci_menhir.mly"
       (Data.clt)
# 166 "parser_cocci_menhir.ml"
)
  | TWhen of (
# 236 "parser_cocci_menhir.mly"
       (Data.clt)
# 171 "parser_cocci_menhir.ml"
)
  | TVirtual
  | TVAEllipsis of (
# 213 "parser_cocci_menhir.mly"
       (Data.clt)
# 177 "parser_cocci_menhir.ml"
)
  | TUsing
  | TUnderscore
  | TUndef of (
# 243 "parser_cocci_menhir.mly"
       (Data.clt * token)
# 184 "parser_cocci_menhir.ml"
)
  | TTypedef
  | TTypeId of (
# 216 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 190 "parser_cocci_menhir.ml"
)
  | TType
  | TTildeExclEq of (
# 258 "parser_cocci_menhir.mly"
       (Data.clt)
# 196 "parser_cocci_menhir.ml"
)
  | TTildeEq of (
# 258 "parser_cocci_menhir.mly"
       (Data.clt)
# 201 "parser_cocci_menhir.ml"
)
  | TTilde of (
# 263 "parser_cocci_menhir.mly"
       (Data.clt)
# 206 "parser_cocci_menhir.ml"
)
  | TSymbol
  | TSymId of (
# 216 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 212 "parser_cocci_menhir.ml"
)
  | TSwitch of (
# 214 "parser_cocci_menhir.mly"
       (Data.clt)
# 217 "parser_cocci_menhir.ml"
)
  | TSub of (
# 258 "parser_cocci_menhir.mly"
       (Data.clt)
# 222 "parser_cocci_menhir.ml"
)
  | TString of (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 227 "parser_cocci_menhir.ml"
)
  | TStrict of (
# 236 "parser_cocci_menhir.mly"
       (Data.clt)
# 232 "parser_cocci_menhir.ml"
)
  | TStatement
  | TSizeof of (
# 215 "parser_cocci_menhir.mly"
       (Data.clt)
# 238 "parser_cocci_menhir.ml"
)
  | TShROp of (
# 260 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 243 "parser_cocci_menhir.ml"
)
  | TShLOp of (
# 260 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 248 "parser_cocci_menhir.ml"
)
  | TScriptData of (
# 233 "parser_cocci_menhir.mly"
       (string)
# 253 "parser_cocci_menhir.ml"
)
  | TScript
  | TRuleName of (
# 202 "parser_cocci_menhir.mly"
      (string)
# 259 "parser_cocci_menhir.ml"
)
  | TRightIso
  | TReturn of (
# 214 "parser_cocci_menhir.mly"
       (Data.clt)
# 265 "parser_cocci_menhir.ml"
)
  | TPure
  | TPtrOp of (
# 268 "parser_cocci_menhir.mly"
       (Data.clt)
# 271 "parser_cocci_menhir.ml"
)
  | TPtVirg of (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 276 "parser_cocci_menhir.ml"
)
  | TPragma of (
# 244 "parser_cocci_menhir.mly"
       (Data.clt)
# 281 "parser_cocci_menhir.ml"
)
  | TPosition
  | TPosAny
  | TPlusFile of (
# 246 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 288 "parser_cocci_menhir.ml"
)
  | TPlus0
  | TPlus of (
# 262 "parser_cocci_menhir.mly"
       (Data.clt)
# 294 "parser_cocci_menhir.ml"
)
  | TPathIsoFile of (
# 241 "parser_cocci_menhir.mly"
       (string)
# 299 "parser_cocci_menhir.ml"
)
  | TParameter
  | TPOEllipsis of (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 305 "parser_cocci_menhir.ml"
)
  | TPCEllipsis of (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 310 "parser_cocci_menhir.ml"
)
  | TPArob of (
# 232 "parser_cocci_menhir.mly"
       (Data.clt)
# 315 "parser_cocci_menhir.ml"
)
  | TOrLog of (
# 253 "parser_cocci_menhir.mly"
       (Data.clt)
# 320 "parser_cocci_menhir.ml"
)
  | TOr of (
# 255 "parser_cocci_menhir.mly"
       (Data.clt)
# 325 "parser_cocci_menhir.ml"
)
  | TOn
  | TOPar0 of (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 331 "parser_cocci_menhir.ml"
)
  | TOPar of (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 336 "parser_cocci_menhir.ml"
)
  | TOInit of (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 341 "parser_cocci_menhir.ml"
)
  | TOEllipsis of (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 346 "parser_cocci_menhir.ml"
)
  | TOCro of (
# 266 "parser_cocci_menhir.mly"
       (Data.clt)
# 351 "parser_cocci_menhir.ml"
)
  | TOBrace of (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 356 "parser_cocci_menhir.ml"
)
  | TNothing
  | TNotEq of (
# 258 "parser_cocci_menhir.mly"
       (Data.clt)
# 362 "parser_cocci_menhir.ml"
)
  | TNever
  | TName
  | TMul of (
# 263 "parser_cocci_menhir.mly"
       (Data.clt)
# 369 "parser_cocci_menhir.ml"
)
  | TMinusFile of (
# 246 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 374 "parser_cocci_menhir.ml"
)
  | TMinus of (
# 262 "parser_cocci_menhir.mly"
       (Data.clt)
# 379 "parser_cocci_menhir.ml"
)
  | TMid0 of (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 384 "parser_cocci_menhir.ml"
)
  | TMetavariable
  | TMetaType of (
# 223 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 390 "parser_cocci_menhir.ml"
)
  | TMetaStmList of (
# 223 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 395 "parser_cocci_menhir.ml"
)
  | TMetaStm of (
# 223 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 400 "parser_cocci_menhir.ml"
)
  | TMetaPos of (
# 229 "parser_cocci_menhir.mly"
       (Parse_aux.pos_info)
# 405 "parser_cocci_menhir.ml"
)
  | TMetaParamList of (
# 225 "parser_cocci_menhir.mly"
       (Parse_aux.list_info)
# 410 "parser_cocci_menhir.ml"
)
  | TMetaParam of (
# 223 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 415 "parser_cocci_menhir.ml"
)
  | TMetaLocalIdExp of (
# 227 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 420 "parser_cocci_menhir.ml"
)
  | TMetaLocalFunc of (
# 220 "parser_cocci_menhir.mly"
       (Parse_aux.idinfo)
# 425 "parser_cocci_menhir.ml"
)
  | TMetaIterator of (
# 221 "parser_cocci_menhir.mly"
       (Parse_aux.idinfo)
# 430 "parser_cocci_menhir.ml"
)
  | TMetaInitList of (
# 225 "parser_cocci_menhir.mly"
       (Parse_aux.list_info)
# 435 "parser_cocci_menhir.ml"
)
  | TMetaInit of (
# 224 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 440 "parser_cocci_menhir.ml"
)
  | TMetaIdExp of (
# 227 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 445 "parser_cocci_menhir.ml"
)
  | TMetaId of (
# 219 "parser_cocci_menhir.mly"
       (Parse_aux.midinfo)
# 450 "parser_cocci_menhir.ml"
)
  | TMetaGlobalIdExp of (
# 228 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 455 "parser_cocci_menhir.ml"
)
  | TMetaFunc of (
# 220 "parser_cocci_menhir.mly"
       (Parse_aux.idinfo)
# 460 "parser_cocci_menhir.ml"
)
  | TMetaFieldList of (
# 226 "parser_cocci_menhir.mly"
       (Parse_aux.list_info)
# 465 "parser_cocci_menhir.ml"
)
  | TMetaField of (
# 224 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 470 "parser_cocci_menhir.ml"
)
  | TMetaExpList of (
# 225 "parser_cocci_menhir.mly"
       (Parse_aux.list_info)
# 475 "parser_cocci_menhir.ml"
)
  | TMetaExp of (
# 227 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 480 "parser_cocci_menhir.ml"
)
  | TMetaErr of (
# 222 "parser_cocci_menhir.mly"
       (Parse_aux.expinfo)
# 485 "parser_cocci_menhir.ml"
)
  | TMetaDeclarer of (
# 221 "parser_cocci_menhir.mly"
       (Parse_aux.idinfo)
# 490 "parser_cocci_menhir.ml"
)
  | TMetaDecl of (
# 224 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 495 "parser_cocci_menhir.ml"
)
  | TMetaConst of (
# 228 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 500 "parser_cocci_menhir.ml"
)
  | TMeta of (
# 224 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 505 "parser_cocci_menhir.ml"
)
  | TMPtVirg
  | TLogOp of (
# 259 "parser_cocci_menhir.mly"
       (Ast_cocci.logicalOp * Data.clt)
# 511 "parser_cocci_menhir.ml"
)
  | TLocal
  | TLineEnd of (
# 236 "parser_cocci_menhir.mly"
       (Data.clt)
# 517 "parser_cocci_menhir.ml"
)
  | TIteratorId of (
# 216 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 522 "parser_cocci_menhir.ml"
)
  | TIterator
  | TIsoType
  | TIsoTopLevel
  | TIsoToTestExpression
  | TIsoTestExpression
  | TIsoStatement
  | TIsoExpression
  | TIsoDeclaration
  | TIsoArgExpression
  | TIso
  | TInvalid
  | TInt of (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 538 "parser_cocci_menhir.ml"
)
  | TInitialize
  | TInitialiser
  | TIncludeNL of (
# 242 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 545 "parser_cocci_menhir.ml"
)
  | TIncludeL of (
# 242 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 550 "parser_cocci_menhir.ml"
)
  | TInc of (
# 248 "parser_cocci_menhir.mly"
       (Data.clt)
# 555 "parser_cocci_menhir.ml"
)
  | TIf of (
# 214 "parser_cocci_menhir.mly"
       (Data.clt)
# 560 "parser_cocci_menhir.ml"
)
  | TIdentifier
  | TIdent of (
# 216 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 566 "parser_cocci_menhir.ml"
)
  | TIdExpression
  | TGoto of (
# 215 "parser_cocci_menhir.mly"
       (Data.clt)
# 572 "parser_cocci_menhir.ml"
)
  | TGlobal
  | TGenerated
  | TFunction
  | TFunDecl of (
# 215 "parser_cocci_menhir.mly"
       (Data.clt)
# 580 "parser_cocci_menhir.ml"
)
  | TFresh
  | TFormat
  | TForall
  | TFor of (
# 214 "parser_cocci_menhir.mly"
       (Data.clt)
# 588 "parser_cocci_menhir.ml"
)
  | TFloat of (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 593 "parser_cocci_menhir.ml"
)
  | TFinalize
  | TField
  | TExtends
  | TExpression
  | TExists
  | TEver
  | TError
  | TEqEq of (
# 258 "parser_cocci_menhir.mly"
       (Data.clt)
# 605 "parser_cocci_menhir.ml"
)
  | TEq of (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 610 "parser_cocci_menhir.ml"
)
  | TElse of (
# 214 "parser_cocci_menhir.mly"
       (Data.clt)
# 615 "parser_cocci_menhir.ml"
)
  | TEllipsis of (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 620 "parser_cocci_menhir.ml"
)
  | TDotDot of (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 625 "parser_cocci_menhir.ml"
)
  | TDot of (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 630 "parser_cocci_menhir.ml"
)
  | TDo of (
# 214 "parser_cocci_menhir.mly"
       (Data.clt)
# 635 "parser_cocci_menhir.ml"
)
  | TDmOp of (
# 261 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 640 "parser_cocci_menhir.ml"
)
  | TDisable
  | TDirective of (
# 217 "parser_cocci_menhir.mly"
       (Ast_cocci.added_string * Data.clt)
# 646 "parser_cocci_menhir.ml"
)
  | TDepends
  | TDefineParam of (
# 245 "parser_cocci_menhir.mly"
       (Data.clt * token * int * int)
# 652 "parser_cocci_menhir.ml"
)
  | TDefine of (
# 243 "parser_cocci_menhir.mly"
       (Data.clt * token)
# 657 "parser_cocci_menhir.ml"
)
  | TDefault of (
# 214 "parser_cocci_menhir.mly"
       (Data.clt)
# 662 "parser_cocci_menhir.ml"
)
  | TDeclarerId of (
# 216 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 667 "parser_cocci_menhir.ml"
)
  | TDeclarer
  | TDeclaration
  | TDecimalCst of (
# 251 "parser_cocci_menhir.mly"
       (string * string (*n*) * string (*p*) * Data.clt)
# 674 "parser_cocci_menhir.ml"
)
  | TDec of (
# 248 "parser_cocci_menhir.mly"
       (Data.clt)
# 679 "parser_cocci_menhir.ml"
)
  | TCppConcatOp
  | TContinue of (
# 215 "parser_cocci_menhir.mly"
       (Data.clt)
# 685 "parser_cocci_menhir.ml"
)
  | TContext
  | TConstant
  | TComma of (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 692 "parser_cocci_menhir.ml"
)
  | TChar of (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 697 "parser_cocci_menhir.ml"
)
  | TCase of (
# 214 "parser_cocci_menhir.mly"
       (Data.clt)
# 702 "parser_cocci_menhir.ml"
)
  | TCPar0 of (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 707 "parser_cocci_menhir.ml"
)
  | TCPar of (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 712 "parser_cocci_menhir.ml"
)
  | TCEllipsis of (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 717 "parser_cocci_menhir.ml"
)
  | TCCro of (
# 266 "parser_cocci_menhir.mly"
       (Data.clt)
# 722 "parser_cocci_menhir.ml"
)
  | TCBrace of (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 727 "parser_cocci_menhir.ml"
)
  | TBreak of (
# 215 "parser_cocci_menhir.mly"
       (Data.clt)
# 732 "parser_cocci_menhir.ml"
)
  | TBang0
  | TBang of (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 738 "parser_cocci_menhir.ml"
)
  | TAttribute
  | TAssign of (
# 272 "parser_cocci_menhir.mly"
       (Ast_cocci.assignOp * Data.clt)
# 744 "parser_cocci_menhir.ml"
)
  | TArobArob
  | TArob
  | TAny of (
# 236 "parser_cocci_menhir.mly"
       (Data.clt)
# 751 "parser_cocci_menhir.ml"
)
  | TAndLog of (
# 254 "parser_cocci_menhir.mly"
       (Data.clt)
# 756 "parser_cocci_menhir.ml"
)
  | TAnd of (
# 257 "parser_cocci_menhir.mly"
       (Data.clt)
# 761 "parser_cocci_menhir.ml"
)
  | TAnalysis
  | EOF

and _menhir_jeton = token


# 27 "parser_cocci_menhir.mly"
  

(* Not clear how to allow function declarations to specify a return type
and how to allow both to be specified as static, because they are in
different rules.  The rules seem to have to be combined, which would allow
functions to be declared as local variables *)

(* Not clear how to let a function have a parameter of type void.  At the
moment, void is allowed to be the type of a variable, which is wrong, and a
parameter needs both a type and an identifier *)
module Ast0 = Ast0_cocci
module Ast = Ast_cocci
module P = Parse_aux

(* ---------------------------------------------------------------------- *)
(* support for argument lists *)

type 'a argorellipsis =
  | Nothing
  | Arg of 'a
  | Ellipsis of Data.clt
  | VAEllipsis of Data.clt
  | Separator of Data.clt

let string_of_arg = function
  | Nothing -> "Nothing"
  | Arg _ -> "Arg"
  | Ellipsis _ -> "Ellipsis"
  | VAEllipsis _ -> "VAEllipsis"
  | Separator _ -> "Comma"

let is_nothing = function
  | Nothing -> true
  | _ -> false

let is_separator = function
  | Separator _ -> true
  | _ -> false

let is_vaellipsis = function
  | VAEllipsis _ -> true
  | _ -> false

let rec adjacent_ellipsis = function
  | [] -> false
  | [_] -> false 
  | (Ellipsis _) :: (Ellipsis _) :: _ -> true
  | x::xs -> adjacent_ellipsis xs

let build_arg = function
  | Arg arg -> arg
  | Ellipsis e -> Ast0.wrap (Ast0.Pdots(P.clt2mcode "..." e))
  | Separator comma -> Ast0.wrap (Ast0.PComma (P.clt2mcode "," comma))
  | VAEllipsis _ -> assert false
  | Nothing -> assert false

let string_of_arglist l =
  "[" ^ (String.concat ";" (List.map string_of_arg l)) ^ "]"

let cleanup_arglist l =
  if l=[] then ([], None)
  else begin
    let (args, vararg) = match l with
      | (VAEllipsis vaellipsis)::(Separator comma)::rem ->
        let c = P.clt2mcode "," comma in
        let e = P.clt2mcode "......" vaellipsis in
        (rem, Some (c, e))
      | _ -> (l, None) in
    let just_args = List.filter (fun x -> not (is_separator x)) args in
    if List.exists is_vaellipsis just_args then failwith "...... can occur only as last argument"
    else if adjacent_ellipsis just_args then failwith "Argument list contains adjacent ellipsis"
    else
      let pure_args = List.filter (fun x -> not (is_nothing x)) args in
      (List.map build_arg (List.rev pure_args), vararg)
  end

(* ---------------------------------------------------------------------- *)
(* support for TMeta *)

let print_meta (r,n) = r^"."^n

let meta_metatable = Hashtbl.create(101)

let coerce_tmeta newty name builder matcher =
  try
    let x = Hashtbl.find meta_metatable name in
    if not (matcher x)
    then
      failwith
	(Printf.sprintf "Metavariable %s is used as %s"
	   (print_meta name) newty)
  with Not_found ->
    (if !Flag_parsing_cocci.show_SP
    then
      Common.pr2
	(Printf.sprintf
	   "Metavariable %s is assumed to be %s metavariable"
	   (print_meta name) newty));
    Hashtbl.add meta_metatable name builder

let tmeta_to_type (name,pure,clt) =
  (coerce_tmeta "a type" name (TMetaType(name,pure,clt))
     (function TMetaType(_,_,_) -> true | _ -> false));
  Ast0.wrap(Ast0.MetaType(P.clt2mcode name clt,pure))

let tmeta_to_field (name,pure,clt) =
  (coerce_tmeta "a field" name (TMetaField(name,pure,clt))
     (function TMetaField(_,_,_) -> true | _ -> false));
  P.meta_field (name,pure,clt)

let tmeta_to_exp (name,pure,clt) =
  (coerce_tmeta "an expression" name
     (TMetaExp(name,Ast0.NoConstraint,pure,None,clt))
     (function TMetaExp(_,_,_,_,_) -> true | _ -> false));
  Ast0.wrap
    (Ast0.MetaExpr(P.clt2mcode name clt,Ast0.NoConstraint,None,Ast.ANY,pure))

let tmeta_to_param (name,pure,clt) =
  (coerce_tmeta "a parameter" name (TMetaParam(name,pure,clt))
     (function TMetaParam(_,_,_) -> true | _ -> false));
  Ast0.wrap(Ast0.MetaParam(P.clt2mcode name clt,pure))

let tmeta_to_statement (name,pure,clt) =
  (coerce_tmeta "a statement" name (TMetaType(name,pure,clt))
     (function TMetaType(_,_,_) -> true | _ -> false));
  P.meta_stm (name,pure,clt)

let tmeta_to_seed_id (name,pure,clt) =
  (coerce_tmeta "an identifier" name
     (TMetaId(name,Ast.IdNoConstraint,Ast.NoVal,pure,clt))
     (function TMetaId(_,_,_,_,_) -> true | _ -> false));
  Ast.SeedId name

let tmeta_to_ident (name,pure,clt) =
  (coerce_tmeta "an identifier" name
     (TMetaId(name,Ast.IdNoConstraint,Ast.NoVal,pure,clt))
     (function TMetaId(_,_,_,_,_) -> true | _ -> false));
  Ast0.wrap(Ast0.MetaId(P.clt2mcode name clt,Ast.IdNoConstraint,Ast.NoVal,pure))

and  arithOp = function
    Ast.Plus -> "+"
  | Ast.Minus -> "-"
  | Ast.Mul -> "*"
  | Ast.Div -> "/"
  | Ast.Min -> "<?"
  | Ast.Max -> ">?"
  | Ast.Mod -> "%"
  | Ast.DecLeft -> "<<"
  | Ast.DecRight -> ">>"
  | Ast.And -> "&"
  | Ast.Or -> "|"
  | Ast.Xor -> "^"

and  logicalOp = function
    Ast.Inf -> "<"
  | Ast.Sup -> ">"
  | Ast.InfEq -> "<="
  | Ast.SupEq -> ">="
  | Ast.Eq -> "=="
  | Ast.NotEq -> "!="
  | Ast.AndLog -> "&&"
  | Ast.OrLog -> "||"


# 934 "parser_cocci_menhir.ml"
let _eRR =
  Error

module MenhirInterpreter = MenhirLib.TableInterpreter.Make (struct
  
  exception Error = Error
  
  type token = _menhir_jeton
  
  let token2terminal : token -> int =
    fun _tok ->
      match _tok with
      | EOF ->
          204
      | TAnalysis ->
          203
      | TAnd _ ->
          202
      | TAndLog _ ->
          201
      | TAny _ ->
          200
      | TArob ->
          199
      | TArobArob ->
          198
      | TAssign _ ->
          197
      | TAttribute ->
          196
      | TBang _ ->
          195
      | TBang0 ->
          194
      | TBreak _ ->
          193
      | TCBrace _ ->
          192
      | TCCro _ ->
          191
      | TCEllipsis _ ->
          190
      | TCPar _ ->
          189
      | TCPar0 _ ->
          188
      | TCase _ ->
          187
      | TChar _ ->
          186
      | TComma _ ->
          185
      | TConstant ->
          184
      | TContext ->
          183
      | TContinue _ ->
          182
      | TCppConcatOp ->
          181
      | TDec _ ->
          180
      | TDecimalCst _ ->
          179
      | TDeclaration ->
          178
      | TDeclarer ->
          177
      | TDeclarerId _ ->
          176
      | TDefault _ ->
          175
      | TDefine _ ->
          174
      | TDefineParam _ ->
          173
      | TDepends ->
          172
      | TDirective _ ->
          171
      | TDisable ->
          170
      | TDmOp _ ->
          169
      | TDo _ ->
          168
      | TDot _ ->
          167
      | TDotDot _ ->
          166
      | TEllipsis _ ->
          165
      | TElse _ ->
          164
      | TEq _ ->
          163
      | TEqEq _ ->
          162
      | TError ->
          161
      | TEver ->
          160
      | TExists ->
          159
      | TExpression ->
          158
      | TExtends ->
          157
      | TField ->
          156
      | TFinalize ->
          155
      | TFloat _ ->
          154
      | TFor _ ->
          153
      | TForall ->
          152
      | TFormat ->
          151
      | TFresh ->
          150
      | TFunDecl _ ->
          149
      | TFunction ->
          148
      | TGenerated ->
          147
      | TGlobal ->
          146
      | TGoto _ ->
          145
      | TIdExpression ->
          144
      | TIdent _ ->
          143
      | TIdentifier ->
          142
      | TIf _ ->
          141
      | TInc _ ->
          140
      | TIncludeL _ ->
          139
      | TIncludeNL _ ->
          138
      | TInitialiser ->
          137
      | TInitialize ->
          136
      | TInt _ ->
          135
      | TInvalid ->
          134
      | TIso ->
          133
      | TIsoArgExpression ->
          132
      | TIsoDeclaration ->
          131
      | TIsoExpression ->
          130
      | TIsoStatement ->
          129
      | TIsoTestExpression ->
          128
      | TIsoToTestExpression ->
          127
      | TIsoTopLevel ->
          126
      | TIsoType ->
          125
      | TIterator ->
          124
      | TIteratorId _ ->
          123
      | TLineEnd _ ->
          122
      | TLocal ->
          121
      | TLogOp _ ->
          120
      | TMPtVirg ->
          119
      | TMeta _ ->
          118
      | TMetaConst _ ->
          117
      | TMetaDecl _ ->
          116
      | TMetaDeclarer _ ->
          115
      | TMetaErr _ ->
          114
      | TMetaExp _ ->
          113
      | TMetaExpList _ ->
          112
      | TMetaField _ ->
          111
      | TMetaFieldList _ ->
          110
      | TMetaFunc _ ->
          109
      | TMetaGlobalIdExp _ ->
          108
      | TMetaId _ ->
          107
      | TMetaIdExp _ ->
          106
      | TMetaInit _ ->
          105
      | TMetaInitList _ ->
          104
      | TMetaIterator _ ->
          103
      | TMetaLocalFunc _ ->
          102
      | TMetaLocalIdExp _ ->
          101
      | TMetaParam _ ->
          100
      | TMetaParamList _ ->
          99
      | TMetaPos _ ->
          98
      | TMetaStm _ ->
          97
      | TMetaStmList _ ->
          96
      | TMetaType _ ->
          95
      | TMetavariable ->
          94
      | TMid0 _ ->
          93
      | TMinus _ ->
          92
      | TMinusFile _ ->
          91
      | TMul _ ->
          90
      | TName ->
          89
      | TNever ->
          88
      | TNotEq _ ->
          87
      | TNothing ->
          86
      | TOBrace _ ->
          85
      | TOCro _ ->
          84
      | TOEllipsis _ ->
          83
      | TOInit _ ->
          82
      | TOPar _ ->
          81
      | TOPar0 _ ->
          80
      | TOn ->
          79
      | TOr _ ->
          78
      | TOrLog _ ->
          77
      | TPArob _ ->
          76
      | TPCEllipsis _ ->
          75
      | TPOEllipsis _ ->
          74
      | TParameter ->
          73
      | TPathIsoFile _ ->
          72
      | TPlus _ ->
          71
      | TPlus0 ->
          70
      | TPlusFile _ ->
          69
      | TPosAny ->
          68
      | TPosition ->
          67
      | TPragma _ ->
          66
      | TPtVirg _ ->
          65
      | TPtrOp _ ->
          64
      | TPure ->
          63
      | TReturn _ ->
          62
      | TRightIso ->
          61
      | TRuleName _ ->
          60
      | TScript ->
          59
      | TScriptData _ ->
          58
      | TShLOp _ ->
          57
      | TShROp _ ->
          56
      | TSizeof _ ->
          55
      | TStatement ->
          54
      | TStrict _ ->
          53
      | TString _ ->
          52
      | TSub _ ->
          51
      | TSwitch _ ->
          50
      | TSymId _ ->
          49
      | TSymbol ->
          48
      | TTilde _ ->
          47
      | TTildeEq _ ->
          46
      | TTildeExclEq _ ->
          45
      | TType ->
          44
      | TTypeId _ ->
          43
      | TTypedef ->
          42
      | TUndef _ ->
          41
      | TUnderscore ->
          40
      | TUsing ->
          39
      | TVAEllipsis _ ->
          38
      | TVirtual ->
          37
      | TWhen _ ->
          36
      | TWhenFalse _ ->
          35
      | TWhenTrue _ ->
          34
      | TWhile _ ->
          33
      | TWhitespace _ ->
          32
      | TWhy _ ->
          31
      | TWhy0 ->
          30
      | TWords ->
          29
      | TXor _ ->
          28
      | Tattr _ ->
          27
      | Tauto _ ->
          26
      | Tchar _ ->
          25
      | Tconst _ ->
          24
      | Tdecimal _ ->
          23
      | Tdouble _ ->
          22
      | Tenum _ ->
          21
      | Texec _ ->
          20
      | Textern _ ->
          19
      | Tfloat _ ->
          18
      | Tinline _ ->
          17
      | Tint _ ->
          16
      | Tlist ->
          15
      | Tlong _ ->
          14
      | Tptrdiff_t _ ->
          13
      | Tregister _ ->
          12
      | Tshort _ ->
          11
      | Tsigned _ ->
          10
      | Tsize_t _ ->
          9
      | Tssize_t _ ->
          8
      | Tstatic _ ->
          7
      | Tstruct _ ->
          6
      | Ttypedef _ ->
          5
      | Tunion _ ->
          4
      | Tunsigned _ ->
          3
      | Tvoid _ ->
          2
      | Tvolatile _ ->
          1
  
  let error_terminal =
    0
  
  let token2value : token -> Obj.t =
    fun _tok ->
      match _tok with
      | EOF ->
          Obj.repr ()
      | TAnalysis ->
          Obj.repr ()
      | TAnd _v ->
          Obj.repr _v
      | TAndLog _v ->
          Obj.repr _v
      | TAny _v ->
          Obj.repr _v
      | TArob ->
          Obj.repr ()
      | TArobArob ->
          Obj.repr ()
      | TAssign _v ->
          Obj.repr _v
      | TAttribute ->
          Obj.repr ()
      | TBang _v ->
          Obj.repr _v
      | TBang0 ->
          Obj.repr ()
      | TBreak _v ->
          Obj.repr _v
      | TCBrace _v ->
          Obj.repr _v
      | TCCro _v ->
          Obj.repr _v
      | TCEllipsis _v ->
          Obj.repr _v
      | TCPar _v ->
          Obj.repr _v
      | TCPar0 _v ->
          Obj.repr _v
      | TCase _v ->
          Obj.repr _v
      | TChar _v ->
          Obj.repr _v
      | TComma _v ->
          Obj.repr _v
      | TConstant ->
          Obj.repr ()
      | TContext ->
          Obj.repr ()
      | TContinue _v ->
          Obj.repr _v
      | TCppConcatOp ->
          Obj.repr ()
      | TDec _v ->
          Obj.repr _v
      | TDecimalCst _v ->
          Obj.repr _v
      | TDeclaration ->
          Obj.repr ()
      | TDeclarer ->
          Obj.repr ()
      | TDeclarerId _v ->
          Obj.repr _v
      | TDefault _v ->
          Obj.repr _v
      | TDefine _v ->
          Obj.repr _v
      | TDefineParam _v ->
          Obj.repr _v
      | TDepends ->
          Obj.repr ()
      | TDirective _v ->
          Obj.repr _v
      | TDisable ->
          Obj.repr ()
      | TDmOp _v ->
          Obj.repr _v
      | TDo _v ->
          Obj.repr _v
      | TDot _v ->
          Obj.repr _v
      | TDotDot _v ->
          Obj.repr _v
      | TEllipsis _v ->
          Obj.repr _v
      | TElse _v ->
          Obj.repr _v
      | TEq _v ->
          Obj.repr _v
      | TEqEq _v ->
          Obj.repr _v
      | TError ->
          Obj.repr ()
      | TEver ->
          Obj.repr ()
      | TExists ->
          Obj.repr ()
      | TExpression ->
          Obj.repr ()
      | TExtends ->
          Obj.repr ()
      | TField ->
          Obj.repr ()
      | TFinalize ->
          Obj.repr ()
      | TFloat _v ->
          Obj.repr _v
      | TFor _v ->
          Obj.repr _v
      | TForall ->
          Obj.repr ()
      | TFormat ->
          Obj.repr ()
      | TFresh ->
          Obj.repr ()
      | TFunDecl _v ->
          Obj.repr _v
      | TFunction ->
          Obj.repr ()
      | TGenerated ->
          Obj.repr ()
      | TGlobal ->
          Obj.repr ()
      | TGoto _v ->
          Obj.repr _v
      | TIdExpression ->
          Obj.repr ()
      | TIdent _v ->
          Obj.repr _v
      | TIdentifier ->
          Obj.repr ()
      | TIf _v ->
          Obj.repr _v
      | TInc _v ->
          Obj.repr _v
      | TIncludeL _v ->
          Obj.repr _v
      | TIncludeNL _v ->
          Obj.repr _v
      | TInitialiser ->
          Obj.repr ()
      | TInitialize ->
          Obj.repr ()
      | TInt _v ->
          Obj.repr _v
      | TInvalid ->
          Obj.repr ()
      | TIso ->
          Obj.repr ()
      | TIsoArgExpression ->
          Obj.repr ()
      | TIsoDeclaration ->
          Obj.repr ()
      | TIsoExpression ->
          Obj.repr ()
      | TIsoStatement ->
          Obj.repr ()
      | TIsoTestExpression ->
          Obj.repr ()
      | TIsoToTestExpression ->
          Obj.repr ()
      | TIsoTopLevel ->
          Obj.repr ()
      | TIsoType ->
          Obj.repr ()
      | TIterator ->
          Obj.repr ()
      | TIteratorId _v ->
          Obj.repr _v
      | TLineEnd _v ->
          Obj.repr _v
      | TLocal ->
          Obj.repr ()
      | TLogOp _v ->
          Obj.repr _v
      | TMPtVirg ->
          Obj.repr ()
      | TMeta _v ->
          Obj.repr _v
      | TMetaConst _v ->
          Obj.repr _v
      | TMetaDecl _v ->
          Obj.repr _v
      | TMetaDeclarer _v ->
          Obj.repr _v
      | TMetaErr _v ->
          Obj.repr _v
      | TMetaExp _v ->
          Obj.repr _v
      | TMetaExpList _v ->
          Obj.repr _v
      | TMetaField _v ->
          Obj.repr _v
      | TMetaFieldList _v ->
          Obj.repr _v
      | TMetaFunc _v ->
          Obj.repr _v
      | TMetaGlobalIdExp _v ->
          Obj.repr _v
      | TMetaId _v ->
          Obj.repr _v
      | TMetaIdExp _v ->
          Obj.repr _v
      | TMetaInit _v ->
          Obj.repr _v
      | TMetaInitList _v ->
          Obj.repr _v
      | TMetaIterator _v ->
          Obj.repr _v
      | TMetaLocalFunc _v ->
          Obj.repr _v
      | TMetaLocalIdExp _v ->
          Obj.repr _v
      | TMetaParam _v ->
          Obj.repr _v
      | TMetaParamList _v ->
          Obj.repr _v
      | TMetaPos _v ->
          Obj.repr _v
      | TMetaStm _v ->
          Obj.repr _v
      | TMetaStmList _v ->
          Obj.repr _v
      | TMetaType _v ->
          Obj.repr _v
      | TMetavariable ->
          Obj.repr ()
      | TMid0 _v ->
          Obj.repr _v
      | TMinus _v ->
          Obj.repr _v
      | TMinusFile _v ->
          Obj.repr _v
      | TMul _v ->
          Obj.repr _v
      | TName ->
          Obj.repr ()
      | TNever ->
          Obj.repr ()
      | TNotEq _v ->
          Obj.repr _v
      | TNothing ->
          Obj.repr ()
      | TOBrace _v ->
          Obj.repr _v
      | TOCro _v ->
          Obj.repr _v
      | TOEllipsis _v ->
          Obj.repr _v
      | TOInit _v ->
          Obj.repr _v
      | TOPar _v ->
          Obj.repr _v
      | TOPar0 _v ->
          Obj.repr _v
      | TOn ->
          Obj.repr ()
      | TOr _v ->
          Obj.repr _v
      | TOrLog _v ->
          Obj.repr _v
      | TPArob _v ->
          Obj.repr _v
      | TPCEllipsis _v ->
          Obj.repr _v
      | TPOEllipsis _v ->
          Obj.repr _v
      | TParameter ->
          Obj.repr ()
      | TPathIsoFile _v ->
          Obj.repr _v
      | TPlus _v ->
          Obj.repr _v
      | TPlus0 ->
          Obj.repr ()
      | TPlusFile _v ->
          Obj.repr _v
      | TPosAny ->
          Obj.repr ()
      | TPosition ->
          Obj.repr ()
      | TPragma _v ->
          Obj.repr _v
      | TPtVirg _v ->
          Obj.repr _v
      | TPtrOp _v ->
          Obj.repr _v
      | TPure ->
          Obj.repr ()
      | TReturn _v ->
          Obj.repr _v
      | TRightIso ->
          Obj.repr ()
      | TRuleName _v ->
          Obj.repr _v
      | TScript ->
          Obj.repr ()
      | TScriptData _v ->
          Obj.repr _v
      | TShLOp _v ->
          Obj.repr _v
      | TShROp _v ->
          Obj.repr _v
      | TSizeof _v ->
          Obj.repr _v
      | TStatement ->
          Obj.repr ()
      | TStrict _v ->
          Obj.repr _v
      | TString _v ->
          Obj.repr _v
      | TSub _v ->
          Obj.repr _v
      | TSwitch _v ->
          Obj.repr _v
      | TSymId _v ->
          Obj.repr _v
      | TSymbol ->
          Obj.repr ()
      | TTilde _v ->
          Obj.repr _v
      | TTildeEq _v ->
          Obj.repr _v
      | TTildeExclEq _v ->
          Obj.repr _v
      | TType ->
          Obj.repr ()
      | TTypeId _v ->
          Obj.repr _v
      | TTypedef ->
          Obj.repr ()
      | TUndef _v ->
          Obj.repr _v
      | TUnderscore ->
          Obj.repr ()
      | TUsing ->
          Obj.repr ()
      | TVAEllipsis _v ->
          Obj.repr _v
      | TVirtual ->
          Obj.repr ()
      | TWhen _v ->
          Obj.repr _v
      | TWhenFalse _v ->
          Obj.repr _v
      | TWhenTrue _v ->
          Obj.repr _v
      | TWhile _v ->
          Obj.repr _v
      | TWhitespace _v ->
          Obj.repr _v
      | TWhy _v ->
          Obj.repr _v
      | TWhy0 ->
          Obj.repr ()
      | TWords ->
          Obj.repr ()
      | TXor _v ->
          Obj.repr _v
      | Tattr _v ->
          Obj.repr _v
      | Tauto _v ->
          Obj.repr _v
      | Tchar _v ->
          Obj.repr _v
      | Tconst _v ->
          Obj.repr _v
      | Tdecimal _v ->
          Obj.repr _v
      | Tdouble _v ->
          Obj.repr _v
      | Tenum _v ->
          Obj.repr _v
      | Texec _v ->
          Obj.repr _v
      | Textern _v ->
          Obj.repr _v
      | Tfloat _v ->
          Obj.repr _v
      | Tinline _v ->
          Obj.repr _v
      | Tint _v ->
          Obj.repr _v
      | Tlist ->
          Obj.repr ()
      | Tlong _v ->
          Obj.repr _v
      | Tptrdiff_t _v ->
          Obj.repr _v
      | Tregister _v ->
          Obj.repr _v
      | Tshort _v ->
          Obj.repr _v
      | Tsigned _v ->
          Obj.repr _v
      | Tsize_t _v ->
          Obj.repr _v
      | Tssize_t _v ->
          Obj.repr _v
      | Tstatic _v ->
          Obj.repr _v
      | Tstruct _v ->
          Obj.repr _v
      | Ttypedef _v ->
          Obj.repr _v
      | Tunion _v ->
          Obj.repr _v
      | Tunsigned _v ->
          Obj.repr _v
      | Tvoid _v ->
          Obj.repr _v
      | Tvolatile _v ->
          Obj.repr _v
  
  let default_reduction =
    (16, "\000\000\000\000\003@\000\147\000\000\000\000\003\157\001h\000\000\001f\001g\001e\000\000\001j\001i\000\001\000\000\001\164\000\000\000\000\000\164\002H\000\000\000\000\003\180\000\000\000\000\003\187\003\185\003\181\003\178\000\000\000\000\003\183\003\182\000\020\003\232\003\231\002M\002L\000\000\000\019\002N\000\000\002I\002K\000\000\004R\000\000\000\000\002\012\002\011\002\n\002\t\000\000\000\252\000\251\000\000\000\000\002*\000\000\001\180\002\014\000\000\000\000\000\000\000\000\000\000\001\004\000\000\000\000\001\027\001\\\001\026\001\025\001\024\001\023\001[\001Z\001\022\001\021\002n\000\000\000\000\002m\000\000\000\000\000\000\000\176\000\000\000\000\000\175\002q\001\019\000\000\002P\000\000\000\000\000\000\002Q\002J\000\000\000\000\000\000\000\000\000\000\002W\002X\000\163\002V\000\000\000\000\000\000\003e\000\000\003\224\003\223\003\225\000\000\004\030\000\000\003\217\000\000\000\000\000\000\000\000\001\b\000\021\000\000\000\000\000\000\004H\002\255\000\000\000\000\004F\000\000\003\031\000\000\000\000\000\000\000\000\000\000\000\000\004E\004G\003\006\001S\003\005\003\007\001R\003\004\003\003\003\002\002>\002\253\000\000\000\000\002\254\000\253\003\001\000\000\000\000\000\000\003\000\004I\000\000\002\252\004D\000\000\000\000\000\133\002\210\000\000\000\000\002\213\000\000\000\000\000\000\000\000\000\000\000\000\000\254\001Q\002\251\003\n\000}\000%\000\127\000\000\000\000\000a\000\000\000\000\000\000\000\000\000\000\000\000\000b\000\000\000c\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000t\002\246\000\128\000\000\000\000\000\158\001\000\002\170\002\245\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000&\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000'\000\000\000\000\000\000\000\000\000\000\000~\000v\000\000\000u\000\022\000\000\003)\000\000\000\192\000\000\000\000\002+\000\000\001\182\002\015\000\000\000\000\002)\000\000\000\000\000\000\000\000\000\000\002(\000\000\001\176\000\189\000\000\000\188\000\000\001\178\002\r\000\000\000\000\003(\000\000\000\000\000\000\003\015\000\000\000\000\000\000\003\b\000\000\000\000\000\000\000\000\003&\003%\003'\003$\003#\003\"\003\029\000\000\0043\000\000\000\000\000\000\002\211\002\214\000\000\002\212\002\215\003\030\003!\000\000\0044\003 \000\000\003\028\000\000\000\137\002\226\000\000\000\000\002\229\000\000\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000y\000\000\000x\000\168\003*\003\027\000\016\000\018\000w\000C\000\194\000\129\000\000\000\000\000\000\000\000\000\000\000\000\000\160\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000E\000\000\000\000\000\000\000\000\000\000\000\000\002_\002c\000\000\000\000\000\167\002`\001\012\001\n\000\000\002\232\000\000\000\000\002\227\002\230\000\000\002\228\002\231\0045\000\000\000\000\002\248\001.\000\000\002@\000\000\000\000\000\000\000\000\000\000\001\002\002G\000\000\000\000\001\196\002\247\000\000\000\000\003\025\000\000\000\000\003\024\000\000\000\000\000\000\000\000\000\000\002?\000\000\000\000\000\000\000\000\000\248\000\247\000\000\000\000\003\022\001{\001z\003\021\000\000\003\023\003\020\003\019\003\018\001}\003\r\000\000\004-\003\014\000\000\000\000\000\000\000\000\000\000\000\246\003\017\000\000\004.\003\016\000\000\003\012\000\000\000\000\000\135\002\218\000\000\000\000\002\221\000\000\000\000\002\224\000\000\000\000\002\219\002\222\000\000\002\220\002\223\003\026\003\011\004/\000\000\001\016\001v\000\000\000\000\000\000\000\000\001x\000\000\001\162\0004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0006\000\000\000\000\000\000\000\000\001y\000\000\001s\000\000\000\000\002t\000\000\000\000\000\000\000\180\000\000\000\000\000\179\002x\001|\001t\000\000\001\006\001r\002u\000\000\001w\000\000\002\225\000\136\000\000\002\217\0040\000\000\002\233\000\138\000\000\002\216\004)\004A\004@\004?\004(\000\000\000\000\004'\000\000\002<\000\000\003\t\000\000\000\000\000\134\000\000\000\000\000\000\0046\000\000\002=\000\000\000\000\000\000\004B\000\000\000\000\000\000\004*\000\000\000s\000\193\000\000\001\156\000\000\003\229\003d\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\143\000\198\000\199\000\000\000\000\000\000\000\000\000\000\002{\002\142\0022\000\000\000\000\000\000\000\000\000\000\001\018\000\202\000\000\0023\000\000\000\000\000\000\000\000\000\197\000\000\000\195\000\184\000\000\000\000\000\183\002\127\002|s\003r\003qmd\001c\001b\001a\001`\000\000\000\000\000\000\002\242\002\244\000\000\001q\002\243\000\000\002\\\000\000\000\000\000\000\000\000\004P\000\000\000\000\000\000\004Q\000\000\000\024\000\000\000\000\000\000\000\000\0038\000\000\000\000\000\000\0036\0035\0037\0034\0033\0032\003-\000\000\0049\003.\0031\000\000\004:\0030\000\000\003,\000\000\000\139\002\234\000\000\000\000\002\237\000\000\000\000\002\240\000\000\000\000\002\235\002\238\000\000\002\236\002\239\003:\003+\004;\000\000\000\000\000|\000\000\000{\000\000\000\000\000z\000R\002\250\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\162\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000S\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000T\000\000\000\000\000\000\000\000\000\000\0039\000\000\002\016\002\249\000\000\000\000\002\241\000\140\000\000\004L\000\000\001\198\000\000\000\000\000\000\000\203\003\192\001\152\000\000\001\151\001l\001kf\000\000\000\000\000\171\002j\002g\001\014\000\233\000\000\000\235\000\234\000\000\003\205\000\000\003\204\003\188\000\000\000\000\000\000\000\000\000\000\003\199\000\000\003\193\000\000\003\206\000\000\000\000\000\000\000\000\003\200\003\190\002\172\000\000\000\207\001n\000\000\003\210\000\000\001p\000\000\000\000\004\b\000\000\004\015\000\209\000\000\000\215\000\000\004\t\000\208\000\000\004\n\000\000\004\017\000\000\000\000\000\000\000\000\000\228\000\000\000\000\000\229\000\000\000\211\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\226\000\000\000\000\000\230\000\000\000\000\000\000\000\000\001U\000\000\000\000\000\000\000\216\000\000\000\213\000\000\000\000\000\000\000\000\000\000\000\223\000\000\000\219\000\205\000\204\000\000\004\018\004\019\000\000\004\020\000\000\004\021\000\000\001ow\000\000\003v\000\000\000\000\003y\000\000\003x\000\000\000\000\002/\000\000\003u\003t\000\000\001\190\002\020\000\000\003zp\000\000\000\000\002\005\000q\000\000\000\000\003J\003N\003R\003F\003W\003C\000\000\000\000\003O\003V\003G\003U\003E\003T\003I\003A\003H\003Q\003D\003K\003B\003M\003S\003P\003L\001\220\001\219\000\154\000\000\000\000\003\171\000\000\000\000\000\000\000\000\003\142\003\139\000\000\000\000\003\143\003\140\003\141\003b\000\000\000\000\003\177\003Y\003X\003Z\000\000\001\238\000o\001\147\000\003\000\000\000\000\003=\000\000\002\168\000\000\000\155\000\000\000\000\003\173\000\000\000\000\000\000\000\146\000\000\000\000\003\155\000\000\002\137\002\136\001\211\003c\000\000\002\000\000\000\000\000\000\000\000\000\000\000\001\201\001\200\001\199\000\000\000\000\000\148\000\000\000\000\003\159\000\000\002\b\000\000\002\007\000\151\000\000\000\000\003\165\000\000\000\000\003m\000\000\003l\003f\002\176\003]\000\000\002\006\000\000\003>\000\000\000\000\000\000\001\234\000\000\000\000\001\226\000\000\000\000\000\000\001\233\000\000\001\229\000\000\000\000\000\000\000\000\000\000\000\000\002\001\000\000\001\224\000\000\001\223\000\000\000\143\000\000\000\000\003\149\000\000\000\000\001\218\000\000\000\000\001\222\000\000\000\000\000\152\000\000\000\000\003\167\000\000\000\000\000\000\000\000\002\135\002\134\003j\002\180\003^\003k\000\000\001\241\000\000\000\000\000\000\001\237\000\000\001\243\000\000\000\000\000\000\000\000\000\000\000\000\002\004\000\000\001\228\000\000\001\227\000\000\000\000\000\000\003`\000\153\000\000\000\000\003\169\000\000\003_\000\000\001\239\000\000\000\000\000\000\000\000\000\000\000\000\002Z\000\000\000\000\001\217\000\150\000\000\000\000\003\163\000\000\000\000\000\000\000\000\003\234\003\233\000\000\000\000\000\000\002\133\002\132\003i\003g\002\178\003\\\003hr\000\000\000\000\004\006\000\000\000\000\000\000\000\000\004\023\000\000\000\000\004\022\002\"\002!\000\000\000\000\000\000\000\000\001\209\002\023\002\031\000\000\000\000\000\000\000\000\000 \002\139\000!\000\000\000\000\000\000\000\031\002\138\000\000\000\000\000\000\003p\003o\003n\000\000\000\000\000\000\000\000\001T\000\000\004\027\000\000\004\028\000\000\000\000\000\b\000\000\002%\002&\000\000\002$\000\000\002#\004\004\000\000\002F\002D\000\000\002C\002B\002E\000\t\000\000\000\n~\000\000\000\000\000\000\000\000\003\128\000\000\000\000\0014\000\000\000\000\000\000\000\000\000\000\003\145\000\141\000\000\000\000\000\250\000\000\001+\001*\000\000\001\128\001\127\000\000\003}\001\205\001\203\000\000\000\000\000\000\000\000\003\129\000\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003|\000\000\000\000\000\000\000\000\000\000\000\000\003{\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\137\000\000\000\000\003\136\000\000\003\132\000\000\000\000\000\000\000\000\000\000\003\133\000\000\000\000\000\000\003\134\000\014\000\000\003\130\000\000\003\131\000\000\000\015\000\000\000\000\000\000\000\000\003\138\000\000\003\135")
  
  let error =
    (205, "\000\000\000\000\005\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000P\128\000\000\000\000\000\000\000\000\016\000\001\000\b0\000\000\004\b0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bkA\192\000\001\0001\000\003\000\020\bP\b\128\016\004\016\000\000\000\0012\012 !:\006\128\005\024A\170\b\025\012\160B\128M\000\136s\192H\000\b9\144a\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b^\129\160\001F\016j\130\006C(\016\160\019@\"\028\240\018\000\002\014d\024@Bt\r\000\n0\131T\0162\025@\133\000\154\001\016\231\128\144\000\016sp\000\000@\012@\000\192\005\002\020\002 \004\001\004\000\000\000\000L\131\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\023\164h\000Q\132\026\160\129\144\202\004(\004\208\bbb\000\000\000\016@\000\002\000@\000\000 \000\000\128\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\128\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000 \000\000\004\000\128\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\bb\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 @\000\000\000\000\000\000\001\000\000\000\002\b\000\000@\b\000\000\004\000\000\000\000\000\002\000\000\000\000\000\000\000\btP4\000(\194\rP@\204e\002\020\002h\004C\158\002@\000A\204\131\b\000\000\000\000\000\002\000\000\000\004\016\000\000\128\016\000\000\bbb\025\140\160B\128M\000\136s\192H\000\b9\144az\246\167\192\000\016@\bb\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000z\246\167\192\000\016@\b\000\000\130\001\000\003\002\000\000\001\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\189\169\240\002\004\016\002\000\000 \128@\000\192\128\000\000@\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\175j|\000\001\004\000\128\000\bn\001\143\025\128\000B@\b\001\000\006\bD\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\164\128\000\144h\020\003\0303\000\000\132\128\016\002\000\012\016\b0\000\000\000\000\000\005$\000\004\131@\160\024\241\152\000\004$\000\128\016\000`\128A\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001I\000\001 \208(\006<f\000\001\t\000 \000\000\024 \016`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000R@\000H4\n\001\143\025\128\000B@\b\001\000\006\b\004\024\000\000\000\000\000\002\146\000\002A\160P\012x\204\000\002\018\000@\b\0000@ \199\175j|\000\001\020\144\128\018\r\002\144c\198`\000\016\144\002\000@\001\130\001\006={S\224\000\b\164\132\000\144h\020\131\0303\000\000\132\128\016\002\000\012\016\b0\000\000\000\000\000\005$\000\004\131@\160\024\241\152\000\004$\000\128\000\000`\128A\128\000\000\000\000\000) \000$\026\005\000\199\140\192\000! \004\000\128\003\004\002\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\144\000\018\r\002\128c\198`\000\016\144\002\000@\001\130\001\006={S\224\000\b\164\132\000\144h\020\131\0303\000\000\132\128\016\002\000\012\016\b0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nH\000\t\006\129@1\2270\000\bH\001\000 \000\193\000\131\000\000\000\000\000\000R@\000H4\n\001\143\025\128\000B@\b\001\000\006\b\004\024\000\000\000\000\000\002\146\000\002A\160P\012x\204\000\002\018\000@\bnH\000\t\006\129@1\2270\000\bH\001\000 \000\193\000\131\000\000\000\000\000\000R@\000H4\n\001\143\025\128\000B@\b\001\000\006\b\004\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\128\000\000b`\155,\150\000\000\000P\002\004\000\000\027\160\004'\195\180\000\000\000\000\000\001\000\000\000\002\000\000\000@\b\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000z\246\167\192\000\017I\b\001 \210)\006<\230\000\001\t\000 \004\000\024$\016c\215\181>\000\000\138H@\t\006\129H1\2270\000\bH\001\000 \000\193\000\131\000\000\000\002@\000\0001\016M\132K\000\000\000(\001\000\000\000\r\144\000\019\193\218\000\000\000\000\000\002\146\000\002A\160P\012x\204\000\002\018\000@\b\0000@ \192\000\000\000\144\000\000\012D\019a\018\192\000\000\n\000@\000\000\003d\000\004\240v\128\000\000\000\000\000\164\128\000\144h\020\003\0303\000\000\132\128\016\002\000\012\016\bb \155\b\150\000\000\000P\002\000\000\000\019 \000'\129\180\000\000\000\000\000\005$\000\004\131@\160\024\241\152\000\004$\000\128\016\000`\128A\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\000\000\196A6\017,\000\000\000\160\004\000\000\000&@\000O\003h\000\000\000\000\000\nH\000\t\006\129@1\2270\000\bH\001\000 \000\193\000\131\000\000\000\002@\000\0001\016M\132K\000\000\000(\001\000\000\000\t\144\000\019\224\218\000\000\000\000\000\002\146\000\002A\160P\012x\204\000\002\018\000@\b\0000@ \192\000\000\000\144\000\000\012D\019a\018\192\000\000\n\000@\000\000\002d\000\004\2486\128\000\000\000\000\000\164\128\000\144h\020\003\0303\000\000\132\128\016\002\000\012\016\b0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000) \000$\026\005\000\199\140\192\000! \004\000\128\003\004\002\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nH\000\t\006\129@1\2270\000\bH\001\000 \000\193\000\131\000\000\000\002@\000\0001\016M\132K\000\000\000(\001\000\000\000\t\144\000\019\224\218\000\000\000\000\000\002\146\000\002A\160P\012x\204\000\002\018\000@\b\0000@ \192\000\000\000\144\000\000\012D\019a\018\192\000\000\n\000@\000\000\002d\000\004\2486\128\000\000\000\000\000\164\128\000\144h\020\003\0303\000\000\132\128\016\002\000\012\016\b0\000\000\000$\000\000\003\017\004\216D\176\000\000\002\128\016\000\000\000\153\000\001>\r\160\000\000\000\000\000) \000$\026\005\000\199\140\192\000! \004\000\128\003\004\002\012\000\000\000\t\000\000\000\196A6\017,\000\000\000\160\004\000\000\000&@\000O\131h\000\000\000\000\000\nH\000\t\006\129@1\2270\000\bH\001\000 \000\193\000\131\000\000\000\002@\000\0001\016M\132K\000\000\000(\001\000\000\000\t\144\000\019\224\218\000\000\000\000\000\002\146\000\002A\160P\012x\204\000\002\018\000@\b\0000@ \192\000\000\000\144\000\000\012D\019a\018\192\000\000\n\000@\000\000\002d\000\004\2486\128\000\000\000\000\000\164\128\000\144h\020\003\0303\000\000\132\128\016\003\000\012\016\br\002\128c\198`\000\016\144\002\000@\001\130\001\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nH\000\t\006\129@1\2270\000\bH\001\000 \000\193\000\131\000\000\000\002@\000\0001\016M\132K\000\000\000(\001\000\000\000\t\144\000\019\192\218\000\000\000\000\000\002\146\000\002A\160P\012x\204\000\002\018\000@\b\0000@ \192\000\000\000\144\000\000\012D\019a\018\192\000\000\n\000@\000\000\002d\000\004\2406\128\000\000\000\000\000\164\128\000\144h\020\003\0303\000\000\132\128\016\002\000\012\016\b0\000\000\000$\000\000\003\017\004\216D\176\000\000\002\128\016\000\000\000\153\000\001<\r\160\000\000\000\000\000) \000$\026\005\000\199\140\192\000! \004\000\128\003\004\002\012\000\000\000\t\000\000\000\196A6\017,\000\000\000\160\004\000\000\000&@\000O\003h\000\000\000\000\000\nH\000\t\006\129@1\2270\000\bH\001\000 \000\193\000\131\000\000\000\002@\000\0001\016M\132K\000\000\000(\001\000\000\000\t\144\000\019\224\218\000\000\000\000\000\002\146\000\002A\160P\012x\204\000\002\018\000@\b\0000@ \192\000\000\000\144\000\000\012D\019a\018\192\000\000\n\000@\000\000\002d\000\004\2486\128\000\000\000\000\000\164\128\000\144h\020\003\0303\000\000\132\128\016\002\000\012\016\b0\000\000\000$\000\000\003\017\004\216D\176\000\000\002\128\016\000\000\000\153\000\001>\r\160\000\000\000\000\000) \000$\026\005\000\199\140\192\000! \004\000\128\003\004\002\012\000\000\000\t\000\000\000\196A6\017,\000\000\000\160\004\000\000\000&@\000O\003h\000\000\000\000\000\nH\000\t\006\129@1\2270\000\bH\001\000 \000\193\000\131\000\000\000\002@\000\0001\016M\132K\000\000\000(\001\000\000\000\t\144\000\019\192\218\000\000\000\000\000\002\146\000\002A\160P\012x\204\000\002\018\000@\b\0000@ \192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\164\128\000\144h\020\003\0303\000\000\132\128\016\002\000\012\016\b0\000\000\000$\000\000\003\017\004\216D\176\000\000\002\128\016\000\000\000\153\000\001<\r\160\000\000\000\000\000) \000$\026\005\000\199\140\192\000! \004\000\128\003\004\002\012\000\000\000\t\000\000\000\196A6\017,\000\000\000\160\004\000\000\000&@\000O\003h\000\000\000\000\000\nH\000\t\006\129@1\2270\000\bH\001\000 \000\193\000\131\000\000\000\002@\000\0001\016M\132K\000\000\000(\001\000\000\000\t\144\000\019\192\218\000\000\000\000\000\002\146\000\002A\160P\012x\204\000\002\018\000@\b\0000@ \192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\164\128\000\144h\020\003\0303\000\000\132\128\016\002\000\012\016\b0\000\000\000$\000\000\003\017\004\216D\176\000\000\002\128\016\000\000\000\153\000\001<\r\160\000\000\000\000\000) \000$\026\005\000\199\140\192\000! \004\000\128\003\004\002\012\000\000\000\t\000\000\000\196A6\017,\000\000\000\160\004\000\000\000&@\000O\003h\000\000\000\000\000\nH\000\t\006\129@1\2270\000\bH\001\000 \000\193\000\131\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\144\000\018\r\002\128c\198`b\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\020\144\000\018\r\002\128c\198`jt\000\001\000\000\128\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t@ \000\000\000\004\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000J\001\000\000\000\000 \000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000!\n\006\000\000\b\000\136\000\024\004\128B\128D\000\128 \128\000\000\000\t\144aA\bP\176\000\000@\004@\000\192$\002\020\002 \004\001\004\000\000\000\000L\131\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000B\020\012\000\000\016\001\016\0000\t\000\133\000\136\001\000A\000\000\000\000\019 \194\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132(\024\000\000 \002 \000`\018\001\n\001\016\002\000\130\000\000\000\000&A\132\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\189\169\240\000\004RB\000H4\nA\143\025\128\000B@\b\001\000\006\b\004\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\005$\000\004\131P\160\024\241\152\000\004$\000\128\000\000`\128A\128\000\000\000\000\000) \000$\027\197\000\223\140\192\000a \004\002\160\003\004\018\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nH\000\t\006\129@1\2270\000\bH\001\000 \000\193\000\131\030\189\169\240\000\004RB\000H4\nA\143\025\128\000B@\b\001\000\006\b\004\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000 \000\000\003\000\004\024\020\160\000\000\002\000\000\000\000\000\129\000\001\002\001\128\000\000\000\000\000) \000$\027\197\000\223\140\192\000a \004\002\160\003\004\018\012\000\000\000\000\000\001I\000\001 \208(\006<f\000\001\t\000 \000\000\024 \016`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001I\000\001 \208(\006<f\000\001\t\000 \004\000\024 \016`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\000\00010M\150K\000\000\000(\001\002\000\000\r\208\002\019\225\218\000\000\000\000\000\002\146\000\002A\160P\012x\204\000\002\018\000@\b\0000@ \192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\br\002\128c\198`\000\016\144\002\000@\001\130\001\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\002\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nH\000\t\006\129@1\2270\000\bH\001\000\000\000\193\000\131\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\000\000\012\b\017d\146\128\000\000\b\000\000\128\000\003T\000\132`F\000\000\000\000\000\000 \000\000\000@\000\000\b\001\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015^\212\248\000\002)!\000$\026E \199\156\192\000! \004\000\128\003\004\130\012z\246\167\192\000\017I\b\001 \210)\006<\230\000\001\t\000 \004\000\024 \016`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\000\245\237O\128\000\"\146\016\002A\164R\012y\204\000\002\018\000@\000\0000H \199\175j|\000\001\020\144\128\018\r\"\144c\206`\000\016\144\002\000@\001\130\001\006\000\000\000\004\128\000\000`\000\139\000\148\000\000\000@\000\000\000\000\026 \000#\0020\000\000\000\000\000\005$\000\004\131@\160\024\241\152\000\004$\000\128\016\000`\128A\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001I\000\001 \208(\006<f\000\001\t\000 \004\000\024 \016`r\002\128c\198`\000\016\144\002\000@\001\130\001\006\000\000\000\004\128\000\000`\000\139\000\148\000\000\000@\000\000\000\000\018 \000#\0000\000\000\000\000\000\005$\000\004\131@\160\024\241\152\000\004$\000\128\024\000`\128A\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\001I\000\001 \208(\006<f\000\001\t\000 \004\000\024 \016`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000R@\000H4\n\001\143\025\128\000B@\b\001\000\006\b\004\024\000\000\000\018\000\000\001\128\002,\002P\000\000\001\000\000\000\000\000H\128\000\140\000\192\000\000\000\000\000\020\144\000\018\r\002\128c\198`\000\016\144\002\000@\001\130\001\006\000\000\000\004\128\000\000`\000\139\000\148\000\000\000@\000\000\000\000\018 \000#\0000\000\000\000\000\000\005$\000\004\131@\160\024\241\152\000\004$\000\128\016\000`\128A\128\000\000\001 \000\000\024\000\"\192%\000\000\000\016\000\000\000\000\004\136\000\b\192\012\000\000\000\000\000\001I\000\001 \208(\006<f\000\001\t\000 \004\000\024 \016`\000\000\000H\000\000\006\000\b\176\t@\000\000\004\000\000\000\000\001\"\000\0020\003\000\000\000\000\000\000R@\000H4\n\001\143\025\128\000B@\b\001\000\006\b\004\024\000\000\000\018\000\000\001\128\002,\002P\000\000\001\000\000\000\000\000H\128\000\140\000\192\000\000\000\000\000\020\144\000\018\r\002\128c\198`\000\016\144\002\000@\001\130\001\006\000\000\000\004\128\000\000`\000\139\000\148\000\000\000@\000\000\000\000\018 \000#\0000\000\000\000\000\000\005$\000\004\131@\160\024\241\152\000\004$\000\128\016\000`\128A\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001I\000\001 \208(\006<f\000\001\t\000 \004\000\024 \016`\000\000\000H\000\000\006\000\b\176\t@\000\000\004\000\000\000\000\001\"\000\0020\003\000\000\000\000\000\000R@\000H4\n\001\143\025\128\000B@\b\001\000\006\b\004\024\000\000\000\018\000\000\001\128\002,\002P\000\000\001\000\000\000\000\000H\128\000\140\000\192\000\000\000\000\000\020\144\000\018\r\002\128c\198`\000\016\144\002\000@\001\130\001\006\000\000\000\004\128\000\000`\000\139\000\148\000\000\000@\000\000\000\000\018 \000#\0000\000\000\000\000\000\005$\000\004\131@\160\024\241\152\000\004$\000\128\016\000`\128A\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001I\000\001 \208(\006<f\000\001\t\000 \004\000\024 \016`\000\000\000H\000\000\006\000\b\176\t@\000\000\004\000\000\000\000\001\"\000\0020\003\000\000\000\000\000\000R@\000H4\n\001\143\025\128\000B@\b\001\000\006\b\004\024\000\000\000\018\000\000\001\128\002,\002P\000\000\001\000\000\000\000\000H\128\000\140\000\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004@\000={S\224\000\b\164\132\000\144i\020\131\030s\000\000\132\128\016\002\000\012\018\b0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\000\003\215\181>\000\000\138H@\t\006\145H1\2310\000\bf\000\001\t\000 \004\000\024 \016`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\b\000\000\001\000 \000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\004\000\000B\000\000\000\000\000\000\000\nH\000\t\006\129@1\2270\000\bH\001\000\000\000\193\000\131\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\016\000\000\b\000\000\000\000\000\001\000) \000$\026\005\000\199\140\192\000! \004\000\000\003\004\002\012\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nH\000\t\006\129@1\2270\000\bH\001\000 \000\193\000\131\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\164\128\000\144h\020\003\0303\000\000\132\128\016\000\000\012\016\b0\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\016\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nH\000\t\006\129@1\2270\000\bH\001\000 \000\193\000\131\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\175j|\000\001\020\144\128\018\r\002\144c\198`\000\016\144\002\000@\001\130\001\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\001I\000\001\000\196(\006<d\000\003\t\000 \000\000\024 \016`\000\000\000\000\000\nH\000\t\006\241@7\2270\000\024H\001\000\168\000\193\004\131\000\000\000\000\000\000R@\000H4\n\001\143\025\128\000B@\b\000\000\006\b\004\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\164\128\000\144h\020\003\0303\000\000\132\128\016\002\000\012\016\br\248\204\000\006\018\000@*\0000A \192\000\000\000\000\000\020\144\000\018\r\226\128o\198`\0000\144\002\001P\001\130\001\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000H\000\000\006&\t\178\201`\000\000\005\000 @\000\001\186\000BT;@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001I\000\001 \208(\006<f\000\001\t\000 \004\000\024 \016`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\129\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\164\128\000\144j\020\003>3\000\000\132\128\016\002\000\012\016\b0\000\000\000\000\000\005$\000\004\131x\160\027\241\152\000\012$\000\128T\000`\130A\128\000\000\000\000\000\b\000\000\000\016\000\000\002\000@\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000R@\000H4\n\001\143\025\128\000B@\b\001\000\006\b\004\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\b\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \000\000\024\152&\203%\128\000\000\020\000\129\000\000\006\232\001\tP\237\000\000\000\000\000\001I\000\001\000\192(\006<d\000\003\t\000 \000\000\024 \016`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\001\129\002\012\146P\000\000\001\000\000\016\000\000B\128\016\129\000\192\000\000\000\000\000\004\000\000\000\b\000\000\001\000 \000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\235\218\159\000\000E$ \004\131H\164\024\243\152\000\004$\000\128\016\000`\144A\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nH\000\t\006\129@1\2270\000\bH\001\000 \000\193\000\131\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000@\000\000\bf\128\016\145\b\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000) \000$\027\133\000\223\140\192\000a \004\002 \003\004\002\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\nH\000\t\006\225@7\2270\000\024H\001\000\136\000\193\000\131\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\003\000\004\024\004\160\000\000\002\000\000\000\000\000\129\000\001\002\001\128\000\000\000\000\000) \000$\026\005\000\199\140\192\000! \004\000\128\003\004\002\012\000\000\000\b\000\000\000\192\001\006\001(\000\000\000\128\000\000\000\000 @\000@\128`\000\000\000\000\000\nH\000\t\006\129@1\2270\000\bH\001\000 \000\193\000\131\000\000\000\002\000\000\0000\000A\128J\000\000\000 \000\000\000\000\b\016\000\016 \024\000\000\000\000\000\002\146\000\002A\160P\012x\204\000\002\018\000@\b\0000@ \192\000\000\000\128\000\000\012\000\016`\018\128\000\000\b\000\000\000\000\002\004\000\004\b\006\000\000\000\000\000\000\164\128\000\144h\020\003\0303\000\000\132\128\016\002\000\012\016\b0\000\000\000 \000\000\003\000\004\024\004\160\000\000\002\000\000\000\000\000\129\000\001\002\001\128\000\000\000\000\000) \000$\026\005\000\199\140\192\000! \004\000\128\003\004\002\012\000\000\000\b\000\000\000\192\001\006\001(\000\000\000\128\000\000\000\000 @\000@\128`\000\000\000\000\000\nH\000\t\006\129@1\2270\000\bH\001\000 \000\193\000\131\000\000\000\002\000\000\0000\000A\128J\000\000\000 \000\000\000\000\b\016\000\016 \024\000\000\000\000\000\002\146\000\002A\160P\012x\204\000\002\018\000@\b\0000@ \192\000\000\000\128\000\000\012\000\016`\018\128\000\000\b\000\000\000\000\002\004\000\004\b\006\000\000\000\000\000\000\164\128\000\144h\020\003\0303\000\000\132\128\016\002\000\012\016\b0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000) \000$\026\005\000\199\140\192\000! \004\000\128\003\004\002\012\000\000\000\b\000\000\000\192\001\006\001(\000\000\000\128\000\000\000\000 @\000@\128`\000\000\000\000\000\nH\000\t\006\129@1\2270\000\bH\001\000 \000\193\000\131\000\000\000\002\000\000\0000\000A\128J\000\000\000 \000\000\000\000\b\016\000\016 \024\000\000\000\000\000\002\146\000\002A\160P\012x\204\000\002\018\000@\b\0000@ \192\000\000\000\128\000\000\012\000\016`\018\128\000\000\b\000\000\000\000\002\004\000\004\b\006\000\000\000\000\000\000\164\128\000\144h\020\003\0303\000\000\132\128\016\002\000\012\016\b0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000) \000$\026\005\000\199\140\192\000! \004\000\128\003\004\002\012\000\000\000\b\000\000\000\192\001\006\001(\000\000\000\128\000\000\000\000 @\000@\128`\000\000\000\000\000\nH\000\t\006\129@1\2270\000\bH\001\000 \000\193\000\131\000\000\000\002\000\000\0000\000A\128J\000\000\000 \000\000\000\000\b\016\000\016 \024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\002\000\000\000\000\000\000\000) \000$\027\197\000\223\140\192\000a \004\002\160\003\004\018\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\004\000\000\000\000\000\000\000R@\000H7\138\001\191\025\128\000\194@\b\004@\006\b$\024\000\000\000\000\000\002\146\000\002A\188P\r\248\204\000\006\018\000@*\0000@ \192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 @\000\000\000\000\000\000\005$\000\004\131x\160\027\241\152\000\012$\000\128T\000`bnH\000\t\006\161@1\2270\000\bH\001\000 \000\193\000\131\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\245\237O\128\000\"\146\016\002A\160R\012x\204\000\002\018\000@\b\0000@ \192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\004\128\000\000`\000\139\002\148\000\000\000@\000\000\000\000\026 \000#\0020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\215\181>\000\000\138H@\t\006\129H1\2270\000\bH\001\000 \000\193\000\131\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\018\000\000\001\136\130l*X\000\000\001@\b\000\000\000l\128\000\159\014\208\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000={S\224\000\b\164\132\000\144h\020\131\0303\000\000\132\128\016\002\000\012\016\b0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\001 \000\000\024\136&\194\165\128\000\000\020\000\128\000\000\006\200\000\t\240\237\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\001\000\000\000 \004\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\235\218\159\000\000@\000 \000\002\b\004`\000\bj|\000\001\000\000\128\000\b \017\128\000 \000\000\000\000\000\000\000\000@\000={S\224\000\bbb\004`\000\b{S\224\000\bbb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\235\218\159\000\000A\000 \000\002\b\004\000\012\b\000\000\004\000\000\016\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000z\246\167\192\000\016@\b\000\000\130\001\000\003\002\000\000\001\000\000\000\000\000\000\128\003\215\181>\000\000\130\000@\000\004\016\b\000\024\016\000\000\b\000\000 \000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\149\003@\002\140 \213\004\012\198P!@&\128D9\224$\000\004\028\2000\189{S\224\000\bb\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\189{S\224\000\bb\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000?\255\127\240 (\180\1330\128c\020\227\158?\b\001\158\1600\000CM\016(1\235\218\159\000\000@\000 \000\002\000\004\000\000\b\000\000\000\000\000\000\000\000\000\000\015^\212\248\000\002\000\001\000\000\016\000 \000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\016\000\007\175j|\000\001\000\000\128\000\bb{S\160\000\b\000\004\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\016\000\163\b$A\000!\132\000\000\t \001\014h\t\000\001\006\000\000\000\000 \000\128\005\024A\"\b\001\012 \000\000I\000\bs@H\000\b0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\001\000\n0\130D\016\002\024@\000\000\146\000\016\230\128\144\000\016`b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000 \000\000\133\000\128\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\235\218\159\000\b@\000 \000\002\000\004`\000\bb\000\000\000\000\007\175j|\000!\000\000\128\000\bbP\b\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000z\246\167\192\002\016\000\b```\131&\148\000\000\000@\000\002\128\000\031\160\000\002\2000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\001 \000\000\024\024 \201\165\000\000\000\016\000\000\160\000\007\232\000\000\178\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000H\000\000\006\006\b2i@\000\000\004\000\000(\000\001\250\000\000,\131\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\000\000\012\004\016d\210\128\000\000\b\000\000P\000\003\228\000\000Y\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\000\000\192A\006M(\000\000\000\128\000\005\000\000>@\000\005\144`\000\000\000\000\000\002\000\000\000\000\000\000\001\130\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\128\000\000``\131&\148\000\000\000@\000\002\128\000\031\160\000\002\2000\000\000\000\000\000\001\000\000\000\002\000\000\000@\b\000\000\004\000\000\000\000\000\000\000\000\000\000\001 \000\000\024\024 \201\165\000\000\000\016\000\000\160\000\007\232\000\000\178\012\000\000\000\000\000\000@\000\000\000\128\000\000\016\002\000\000\001\000\000\000\000\000\000\000\000\000\000\000H\000\000\006\006\b2i@\000\000\004\000\000(\000\001\250\000\000,\131\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\000\000\012\004\016d\210\128\000\000\bd\210\128\000\000\br\002\128c\198`\000\016\144\002\000@\001\130\001\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000 \001\001\005\164\t\132\003\016\161\028\241\152@\012\245\001\128\002\024h\129A\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000R@\000H4\n\001\143\025\128\000B@\b\001\000\006\b\004\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000?\255{\240\000\b \004\000\000@\000\128\000\012\000\000\000\128\000\000\000\192\b@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\215\183>\000\000\130\000@\000\004\000\b\000\000\000\000\000\b\000\000\000\000\000\000\000\030\189\169\240\000\004\000\002\000\000 \000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\001\000\000\004(\004\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000={S\224\001\b\000\004\000\000@\000\140\000\001\000\000\000\000\000\002\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\004\000\000\000\128\016\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000 \000\000\128\000\000\000\000\000\000\000\020\144\000\018\rB\128g\198`\000\016\144\002\000@\001\130\001\006\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bb\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\215\181>\000\000\128\000@\000\004\016\b\192\000\016\000\000\000\000\000 \000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\164\128\000\144j\020\003>3\000\000\132\128\016\002\000\012\016\b0\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\215\181>\000\016\128\000@\000\004\000\b\192\000\016\000\000\000\000\000 \000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000$\000\000\000\000\000\000\000\000\000\bjt\000\001\004\000\128\000\000\000\016\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000@\000\000\b\001\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000@\000\001\000\000\000\000\000\000\000\000) \000$\026\133\000\207\140\192\000! \004\000\128\003\004\002\012\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\b\000\000\001\000 \000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\b\000\000 \000\000\000\000\000\000\000\005$\000\004\131P\160\025\241\152\000\004$\000\128\016\000`\128A\128\000\000\000\000\000\000\000\bj\020\227\158?\b\001\158\1600\002C\205\024h0\000\000\000$\000\001\003\019\004\219d\176\000@\n\128\016$\000\000\221\000!(\029\160\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001I\000\001 \208(\006<f\000\001\t\000 \004\000\024 \016c\215\181>\000\000\138H@\t\006\129H1\2270\000\bH\001\000 \000\193\000\131\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\018\000\000\001\136\130l*X\000\000\001@\b\000\000\000h\128\000\148\014\208\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\164\128 \144h\020\003\0303\000\000\132\128\016\002\000\012\016\b0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\002\000\000\000\000\000\000\000\128\016\000\000\bb\000\000\000\b\000\000\002\000\000\000\000 \000\000\128\000\000\000\000z\246\167\192\000\017I\b\001 \210)\006<\230\000\001\t\000 \004\000\024$\016`b\000\000\000\000\000\000\002\000\004\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\255\247\255\003\194\139HS\b\0061N9\227\240\128\025\234\003\000\0044\209\002\131\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\146\000\002A\160P\012x\204\000\002\018\000@\b\0000@ \192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000) \000$\026\005\000\199\140\192\000! \004\000\128\003\004\002\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000@\000\000\000\000\000\000\000 D\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\255\239\254\004\005\022\144\166\016\012B\156s\199\225\0003\212\006\000\bi\162\005\006?\255\127\240 (\180\1330\144j\022\227\158?\b\001\158\1600\002CM\020(1\235\218\159\000\000E$ \004\131@\164\024\241\152\000\004$\000\128\016\000`\128A\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000R@\000@1\n\001\143\025\000\000\194@\b\000\000\006\b\004\024\000\000\000\000\000\002\146\000\002\001\128P\012xx\204\000\002\018\000@\bc\198@\0000\144\002\000\000\001\130\001\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \000\000\024\152&\203%\128\000\000\020\000\129\000\000\006\168\001\t@\237\000\000\000\000\000\000@\000\000\000\128\000\000\016\002\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\189\169\240\000\004RB\000H4\138A\1439\128\000B@\b\001\000\006\t\004\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\164\128\000\144h\020\003\0303\000\000\132\128\016\002\000\012\016\b0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\004\000\000\000\128\016\000\000\bt@\237\000\000\000\000\000\001I\000\001 \208(\006<f\000\001\t\000 \004\000\024 \016`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000R@\000H4\n\001\143\025\128\000B@\b\001\000\006\b\004\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\003\001\000@\000\000\002\000@\000\000\000@\000\004\1600\128\000\000\000\000\000\164\128\000\128`\020\003\0302\000\001\132\128\016\000\000\012\016\b0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\000\0001\016M\132K\000\000\000(\001\000\000\000\t\016\000\018\128\218\000\000\000\000\000\002\146\000\002A\160P\012x\204\000\002\018\000@\b\0000@ \192\000\000\000\144\000\000\012D\019a\018\192\000\000\n\000@\000\000\002D\000\004\1606\128\000\000\000\000\000\164\128\000\144h\020\003\0303\000\000\132\128\016\003\000\012\016\b0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000) \000$\026\005\000\199\140\192\000! \004\000\128\003\004\002\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nH\000\t\006\129@1\2270\000\bH\001\000 \000\193\000\131\000\000\000\002@\000\0001\016M\132K\000\000\000(\001\000\000\000\t\016\000\018\128\218\000\000\000\000\000\002\146\000\002A\160P\012x\204\000\002\018\000@\b\0000@ \192\000\000\000\144\000\000\012D\019a\018\192\000\000\n\000@\000\000\002D\000\004\1606\128\000\000\000\000\000\164\128\000\144h\020\003\0303\000\000\132\128\016\002\000\012\016\b0\000\000\000$\000\000\003\017\004\216D\176\000\000\002\128\016\000\000\000\145\000\001(\r\160\000\000\000\000\000) \000$\026\005\000\199\140\192\000! \004\000\128\003\004\002\012\000\000\000\t\000\000\000\196A6\017,\000\000\000\160\004\000\000\000$@\000J\003h\000\000\000\000\000\nH\000\t\006\129@1\2270\000\bH\001\000 \000\193\000\131\000\000\000\002@\000\0001\016M\132K\000\000\000(\001\000\000\000\t\016\000\018\128\218\000\000\000\000\000\002\146\000\002A\160P\012x\204\000\002\018\000@\b\0000@ \192\000\000\000\144\000\000\012D\019a\018\192\000\000\n\000@\000\000\002D\000\004\1606\128\000\000\000\000\000\164\128\000\144h\020\003\0303\000\000\132\128\016\002\000\012\016\b0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000) \000$\026\005\000\199\140\192\000! \004\000\128\003\004\002\012\000\000\000\t\000\000\000\196A6\017,\000\000\000\160\004\000\000\000$@\000J\003h\000\000\000\000\000\nH\000\t\006\129@1\2270\000\bH\001\000 \000\193\000\131\000\000\000\002@\000\0001\016M\132K\000\000\000(\001\000\000\000\t\016\000\018\128\218\000\000\000\000\000\002\146\000\002A\160P\012x\204\000\002\018\000@\b\0000@ \192\000\000\000\144\000\000\012D\019a\018\192\000\000\n\000@\000\000\002D\000\004\1606\128\000\000\000\000\000\164\128\000\144h\020\003\0303\000\000\132\128\016\002\000\012\016\b0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000) \000$\026\005\000\199\140\192\000! \004\000\128\003\004\002\012\000\000\000\t\000\000\000\196A6\017,\000\000\000\160\004\000\000\000$@\000J\003h\000\000\000\000\000\nH\000\t\006\129@1\2270\000\bH\001\000 \000\193\000\131\000\000\000\002@\000\0001\016M\132K\000\000\000(\001\000\000\000\tf\000\003\t\000 \021\000\024 \144`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\255\239\254\007\133\022\144\166\016\012b\156s\199\225\0003\212\006\000\bi\162\005\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\255\251\255\193\225E\164)\132\003\024\183\028\241\248\192\012\245\017\128\002\030h\227M\160\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\254\255\224@Qi\na\000\198)\199<~\016\003=@`\000\134\154 Pc\255\247\255\002\002\139HS\t\006\161n9\227\240\128\025\234\003\000$4\209B\131\031\255\191\248\016\020ZB\152H5\nq\207\031\132\000\207P\024\001!\166\1364\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\255\251\255\193\001E\1649\132\195P\183\028\241\248\192\028\245\017\128:\030h\235M\160\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\146\000\002A\160P\012x\204\000\002\018\000@\b\0000@ \192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\004\000  \180\1290\128b\020#\1583\b\001\158\1600\000C\r\016(0\000\000 \001\001\005\164\t\132\003\016\161\028\241\152@\012\245\001\128\002\024h\129A\128\000\000\000\000\000\b\000\000\000\016\000\000\002\000@\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\247\253\239\192\000\"\146\016\130A\160R\012x\252\000\002\018\000@\b\0010@ \192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000={s\224\000\b \004\000\000@\000\128\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\002\000\000\000@\b\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nH\000\t\006\161@3\2270\000\bH\001\000 \000\193\000\131\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\012\000\000!@ \000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\002\000\000\000@\b\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\215\181>\000\000\128\000@\000\004\016\b\192\000\016\000\000\000\000\000 \000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\164\128\000\144j\020\003>3\000\000\132\128\016\002\000\012\016\b0\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000R@\000H5\n\001\159\025\128\000B@\b\001\000\006\b\004\024\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\029{S\160\000\b \004\000\000\000\000\128\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\002\000\000\000@\b\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nH\000\t\006\161@3\2270\000\bH\001\000 \000\193\000\131\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\b\000\000\001\000 \000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\br\002\128c\198`\000\016\144\002\000@\001\130\001\006\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005$\000\004\131@\160\024\241\152\000\004$\000\128\016\000`\144A\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\b\000@Ai\002a\000\196(G<f\016\003=@`\000\134\026 P`\000\000@\002\002\011H\019\b\006!B9\2270\128\025\234\003\000\0040\209\002\131\000\000\000\000\000\000\016\000\000\000\000\128\000\004\000\128\000\000@\000\001\000\000\001\000\000\000\000\000\000\000\000\128\000\000\000\004\000\000 \004\000\000\002\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004@\000\000\000\000\000\000\000 \000\000\000\001\000\000\b\001\000\000\000\128\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\b\000\000@\bbbh\020\003\0303\000\000\132\128\016\002\000\012\016\b0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\b`\144A\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\b\000@Ai\002a\000\196(G<f\016\003=@`\000\134\026 P`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\255\239\254\004\005\022\144\166\018\rB\156s\199\227\0003\212\006\000Hi\162\005\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\255\223\254\015\n-!L \024\197\184\231\143\198\000g\168\140\000\016\243G\026m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\253\255\192\128\162\210\020\194\001\140S\142x\252`\006z\128\192\001\r4@\160\192\000\000\000\000\000\000\000\000\002\001\000\000\000\000\002\000\000\000\000\000@\000\000\0000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\255\251\255\129\001E\164)\132\003\024\167\028\241\248\192\012\245\001\128\002\026h\129M\160\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000H\000\002\006&\t\182\201`\000\128\021\000 H\000\001\186\000BP;@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128@ \000\000\000\000@\000\000\000\000\b\000\000\000\006\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\255\251\255\129\001E\164)\132\131P\167\028\241\248\192\012\245\001\128\018\026h\129M\160\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\254\255\224@Qi\na\000\198)\199<~0\003=@`\000\134\154 Sh\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\245\237O\128\000\"\146\016\002A\164R\012y\204\000\002\018\000@\b\0000H \192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\bb\001\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000z\246\167\192\000\016\000\b\000\000\130\001\024\000\002\000\000\000\000\000\004\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\144\000\018\rB\128g\198`\000\016\144\002\000@\001\130\001\006\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000z\246\167\192\002\016\000\bj\020\003>3\000\000\132\128\016\002\000\012\016\bj\020\003>3\000\000\132\128\016\002\000\012\016\brB\156s\199\227\0003\212\006\000Hi\162\0056\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\004\002\000\000\000\000\004\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\255\247\255\002\002\139HS\t\006\161N9\227\241\128\025\234\003\000$4\209\002\131\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\128\001\128\000\004(\004@\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005$\001\004\131@\160\024\241\152\000\004$\000\128\016\000`\128A\128\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001I\000\001 \208(\006<f\000\001\t\000 \004\000\024$\016`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\002\000\016\016Z@\152@1\n\017\207\025\132\000\207P\024\000!\134\136\020\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\235\218\159\000\000E$ \004\131H\164\024\243\152\000\004$\000\128\016\000`\144A\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000R@\000H5\n\001\159\025\128\000B@\b\001\000\006\b\004\024\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000 \000`\000\001\nb\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\brB\128g\198`\000\016\144\002\000@\001\130\001\006\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007^\212\232\000\002\b\001\000\000\000\000 \000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\128\000\000\016\002\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\146\000\002A\168P\012\248\204\000\002\018\000@\b\0000@ \192\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\001\000\b\b- L \024\133\b\231\140\194\000g\168\012\000\016\195D\nb\n-!\204&\026\133\184\231\143\198\000\231\168\140\001\144\243GZm\000\000\b\000@Ai\002a\000\196(G<f\016\003=@`\000\134\026 P`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\255\191\248\016\020ZB\152@1\139q\207\031\132\000\207P\024\000!\230\1424\024\000\000\000\000\000\000\000\000\000@ \000\000\000\000\000\000\000\000\000\b\000\000\000\000\007\255\239\254\004\005\022\144\166\016\012b\220s\199\225\0003\212\006\000\by\163\141\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\128@\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\127\254\255\224@Qi\na \212-\199<~\016\003=@`\004\135\1548\208`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\255\191\248\016\020ZB\152H5\011qb\000\000\000\000\000\000\000\000\000\000\000\016\000\007\255\239\254\004\005\022\144\166\016\012b\220s\199\225\0003\212\006\000\bi\162\133\006\000\000\000\000\000\000\000\000\000\016\b\002\000\000\000\000\000\000\000\000\002\000\000\004\000\001\255\251\255\129\001E\164)\132\003\024\183\028\241\248@\012\245\001\128\002\026h\161A\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\b\004\001\000\000\000\000\000\000\000\000\001\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\255\239\254\004\005\022\144\166\018\rB\220s\199\225\0003\212\006\000Hi\162\133\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\006\000 \016\160\016\000\000\b\000\000\000\000\000@\000\000\000\000\000\000\000\000\001\000\012\004\000\000\000\000\000\001\000\000\000\001\000\000\000\128\002\255\253\255\192\128\162\210\020\194\001\140S\142x\252 \006z\128\192\001\r4@\160\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002 \024\b\000\000\000\000\000\002\000\000\000\002\000\000\001\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\255\223\252\b\n-!\204&\026\1338\231\143\194\000\231\168\012\000\144\211DJ\r\127\254\255\224@Qi\na\000\198)\199<~\016\003=@`\000\134\154 P`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\253\255\192\128\162\210\028\194a\168S\142x\252 \014z\128\192\t\r4D\160\208\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\016\000\007\255\239\254\004\005\022\144\166\018\rB\220s\199\225\0003\212\006\000Hib\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000?\255\127\240 (\180\1330\144j\020\227\158?\024\001\158\1600\002CM\016(0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\223\247\191\000\000\138HR\b\006\001H1\227\224\000\024H\001\000\000\004\209\002\131\000\000\000\000\000\000R@\016H4\n\001\143\025\128\000B@\b\001\000\006\b\004\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\239\251\223\128\000E$)\004\003\000\164\024\241\240\000\012$\000\128\000\002h\129A\128\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\016\000\007\191\239~\000\001\020\144\164\016\012\002\144c\199\192\0000\144\002\000\000\tbP\bi\na\000\198)\199<~\016\003=@`\000\134\154 P`\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\144\000\018\r\002\128c\198`\000\016\144\002\000@\001\130\001\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\001\255\251\255\129\001E\164)\132\131P\167\028\241\248@\012\245\001\128\018\030h\195A\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\004 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\255\239~\000\001\004\000\128\000\b\000\016\000\001\128\000\000\016\000\000\000\024\001\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\001\127\254\255\224@Qi\na\000\198)\199<~\016\003=@`\000\134\154 P`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\255\191\248\016\020ZB\152@1\138q\207\031\132\000\207P\024\000!\166\136\020\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001I\000\001 \208(\006<f\000\001\t\000 \004\000\024 \016`\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000@\000\000\000\000\000R@\000H4\n\001\143\025\128\000B@\b\001\000\006\b\004\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\144\000\018\r\002\128c\198`\000\016\144\002\000@\001\130\001\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000R@\000H4\n\001\143\025\128\000B@\b\001\000\006\b\004\024\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\255\251\255\129\001E\164)\132\003\016\165\028\241\248@\012\245\001\128\002\026h\129A\143^\212\248\000\002)!\000 \024\005 \199\140\128\000a \004\000\000\003\004\002\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000_\255\191\248\016\020ZB\152@1\nQ\207\031\132\000\207P\024\000!\166\136\020\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000?\255\127\240 (\180\1330\128b\020\163\158?\bx\204\000\002\018\000@\b\0000@ \192\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\255\222\252\000\002\b\001\000\000\016\000 \000\003\000\000\000 \000\000\000\016\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\011\255\247\191\000\000\130\000@\000\004\000\b\000\000\192\000\000\bnH\000\t\006\129@1\2270\000\bH\001\000 \000\193\000\131\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\235\218\159\b\000\226\b$I\002\016\012\000\000\t \001\n\172)\000\001\134\000\160\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\128\002\000\020A\004\136 \000 \000\000\000$\000!\205\001 \000 \192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\128\002\000\020A\000\136 \000 \000\000\000$\000!\205\001 \000 \192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\016\000\000\000\002\000\b\000Q\004\018 \128\000\128\000\000\000\144\000\1354\004\128\000\131\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\b\000\000 \000\000\000\000\000\000\016\000  \000\000\000\000\000@\bbj|\000\003\128 \145\004\b@0\000\000$\128\004*\144\164\000\006\024\000\128={S\224\000\028\001\004\000 B\001\128\000\001$\000!T\005 \0000\192\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\128\005\016A#\b\000\b\000\000\000\t\000\bs@H\000\b0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bbb$A\000\001\000\000\000\001 \005\014h\tb\016\000\000\001\000\004\000(\130\tb\000\000\000\001\000\004\000(\130\tj|\000\003\128 \144\004\b@0\000\000$\128\004*\128\164\000\006\b\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\235\218\159\000\000\224\b \001\002\016\012\000\000\t \001\n\160)\000\001\130\000 \000\000 \000\128\005\016A\"\b\000\b\000\000\000\t\000\bs@H\000\b0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\001\000\n \130D\016\000\016\000\000\000\018\000\016\230\128\144\000\016`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\002\000\020A\004\136 \000 \000\000\000$\000!\205\001 \000 \192\000\000\000\004\000\016\000\162\b$A\000\001\000\000\000\005 \001\014h\t\000\001\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\b\000Q\004\018 \128\000\128\000\000\000\144\000\1354\004\128\000\131\000\000\000\000\016\000@\002\136 \145\004\000\132\000\000\000\020\128\0049\160$\000\004\028\000\000\000\000\128\002\002\020A\004\136 \000 \000\000\000$\000\161\205\001 \000 \192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000 \000\128\005\016A\"\b\000\b\000\000\000\t\000\bs@H\000\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\016\000@\002\136 \145\004\000\006\000\000\000\004\128\0049\160$\000\004\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\016\000\162\b$A\000\001\000\000\000\001 \001\014h\t\000\001\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004@\000\000\000\000\000\000\000\000@\001\000\n \130D\016\000\016\000\000\000\018\000\016\230\128\144\000\016`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\004\000\000\000\000\128\002\000\020A\004\136 \000 \000\000\000$\000!\205\001 \000 \192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\192\000\000\000\000 \000\000\000 \000\000\000\000\000\000\000\b\000\000\000\001\000\004\000(\130\t\016@\004@\000\000\000H\000C\154\002@\000A\128\000\000\000\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\bb\000 \001D\016H\130\000\002\000\000\000\002@\002\028\208\018\000\002\012\000\000\000\000@\001\000\n \130D\016\002\016\000\000\000R\000\016\230\128\144\000\016p\000\000\000\002\000\b\bb\000\000\000\000\000\000\000\002\000\000\000\000@\001\001\n \130D\016\000\016\000\000\000\018\000\016\230\128\144\000\016`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000`b\000\000\018@\002\028\208\018\000\002\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\002\000\b\000Q\004\002 \128\000\128\000\000\000\144\000\1354\004\128\000\131\000\000\000\000\016\000@\002\233 \145\004\000\150\000\000\000\020\128\0049\160$\000\004\028\000\000\000\000\128\002\000\020A\004\136 \0000\000\000\000$\000!\205\001 \000 \192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\128\005\016A\"\b\001\b\000\000\000\t\000\bs@H\000\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\016\000\162\b$A\000\001\000\000\000\001 \001\014h\t\000\001\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bb$A\000\001\000\000\000\001 \001\014h\t\000\001\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000 \001D\016H\130\000\002\000\000\000\002@\002\028\208\018\000\002\012\000\000\000\000@\001\000\n \130D\016\002\016\000\000\000R\000\016\230\128\144\000\016p\000\000\000\002\000\b\bQ\004\018 \128\000\128\000\000\000\144\002\1354\004\128\000\131\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\128\002\000\020A\004\136 \000 \000\000\000$\000!\205\001 \000 \192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\160\016@@\002\136 \145\004\000\006\000\000\000\004\128\0049\160$\000\004\024\000\000\000\000\128\002\000\020A\004\136 \0000\000\000\000$\000!\205\001 \000 \192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\128\005\016A\"\b\000\012\000\000\000\t\000\bs@H\000\b0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000 \001D\144H\130\000J\000\000\000\n@\002\028\208\018\000\002\014\000\000\000\000@\001\001\n \130D\016\000\016\000\000\000\018\000P\230\128\144\000\016`bb\000\000\000\000\000\000\000\000@\000\000\000\004\000\000\000\000\000\001\001\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\b\bbbb$A\000\001\000\000\000\001 \001\014h\t\000\001\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000 \001D\016H\130\000\002\000\000\000\002@\002\028\208\018\000\002\012\000\000\000\000@\001\000\011\160\130D\016\000P\000\000\000R\000\016\230\128\144\000\016p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\128\005\016A\"\b\000\b\000\000\000\t\000\bs@H\000\b0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\189\233\241\000\014 \130D\016!\016@\000\000\146\000\016\230\128\144\000\016`\000\000\000\002\000\bt\016@\000@\000\000\000H\000C\154\002@\000A\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\007\175z|@\003\136 \145\004\bF\016\000\000$\128\0049\160$\000\004\024\000\000\000\000\128\002\000\020A\004\136 \000 \000\000\000$\000!\205\001 \000 \192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\004\000(\130\t\016@\000@\000\000\000H\000C\154\002@\000A\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\175j| \003\136 \145$\bs\142x\252 \006z\136\192\t\rt\007\161N9\227\240\128\025\234#\000$4\209\002\155^\255\189\252\000\004\000\002\000\000 \000@\000\000\000\000\000\001\000\000\000\000\000\000\000\247\253\239\224\000 \000\016\000\001\000\002\000\000\000\000\000\000\b\000\000\000\000\000\000\007\191\239\127\000\001\000\000\128\000\b\000\016\000\000\000\000\000\000@\000\000\000\000\000\000=\255{\248\000\b\000\004\000\000@\000\128\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000!\n\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\001\bP0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\bb\000\000\000\000\000\000 \000\000\000\000\000\000\000B\020\012\000\000\016\000\000\000 \000\000\133\000\128\000\000A\000\000\000\000\000\000\000\002\016\160`\000\000\128\000\000\001\000\000\004(\004\000\000\002\b\000\000\000\000\000\000\007\255\239\254\007\133\022\144\166\016\012b\156s\199\225\0003\212\006\000\bi\162\005\006?\255\127\240 (\180\1330\128c\020\227\158?\b\001\158\1600\000CM\016(0\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\255\223\252\b\n-!L \024\1978\231\143\194\000g\168\012\000\016\211D\nm\000\000\000\000\000\000\000\000\000 \016\000\000\000\000\000\000\000\000\000\004\000\000\000\003\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128@ \000\000\000\000\000\000\000\000\000\b\000\000\000\006\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000?\255\127\240 (\180\1330\144j\020\227\158?\b\001\158\1600\002CM\016)\180\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000) \000$\027\197\000\223\140\192\000a \004\002\160\003\004\018\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\255\191\248\030\020ZB\152@1\138q\207\031\132\000\207P\024\000!\166\136\020\024\255\253\255\192\128\162\210\020\194\001\140S\142x\252 \006z\128\192\001\r4@\160\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000?\255\127\240 (\180\1330\128c\020\227\158?\b\001\158\1600\000CM\016)\180\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\255\223\252\015\n-!L \024\1978\231\143\194\000g\168\012\000\016\211D\n\012\127\254\255\224@Qi\na\000\198)\199<~\016\003=@`\000\134\154 P`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\191\239\127\000\001\004\000\128\000\b\000\016\000\000\000\000\000\016@\000\000\000\000\000\000=\255{\248\000\b\000\004\000\000@\000\128\000\000\000\000\000\002\000\000\000\000\000\000\000\004!@\192\000\001\000\000\000\002\000\000\bP\b\000\000\004\016\000\000\000\000\000\000\000!\n\006\000\000\b\000\000\000\024\000\000B\128@\000\000 \128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\b\000\000!@ \000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\235\218\159\000\b@\000 \000\002\000\004`\000\bb\000\000\000\000\007\175j|\000!\000\000\128\000\b\000\017\128\000 \000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\024\000\000\002\000@\000\000 \000\000\000\000\b\128\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\004\000\000\000\128\016\000\000\bb\n-!L$\026\1338\231\143\194\000g\168\012\000\144\211D\026\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\b\004\000\000\000\000\000\000\000\000\000\001\000\000\000\000\194\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\255\239\254\004\005\022\144\166\018\rB\156s\199\225\0003\212\006\000Hi\162\0056\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004!@\192\000\001\000\001\000\003\000\000\bP\b`\128A\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\001\000\000@\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nH\000\t\006\129\1921\2270\000\btb\n-!L$\030\1338\231\143\194\000g\168\140\000\144\211D\nm\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\255\247\255\130\002\139HS\b\0061N9\227\240\128\025\234#\000\0044\209\002\155@\000\000\000\000\000\000\000\000\b\004\000\000\000\000\000\000\000\000\000\001\000\000\000\000\194\255\253\255\224\128\162\210\020\194\001\140S\142x\252 \006z\136\192\001\r4@\166\208\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000?\255\127\248 (\180\1330\144j\020\227\158?\b\001\158\1620\002CM\016)\181\255\251\255\193\001E\164)\132\003\024\167\028\241\248@\012\245\017\128\002\026h\129M\160\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@ \016\000\000\000\000\000\000\000\000\000\004\000\000\000\003\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\255\191\252\016\020ZB\152H5\nq\207\031\132\000\207Q\024\001!\166\136\020\218\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\255\239\255\004\005\022\144\166\018\rB\156s\199\225\0003\212F\000Hi\162\0056\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\255\251\255\193\001E\164)\132\131P\167\028\241\248@\012\245\017\128\018\026h\129M\160\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\bh\129M\160\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@ \016\000\000\000\000\000\000\000\000\000\004\000\000\000\003\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\255\191\252\016\020ZB\152H5\nq\207\031\132\000\207Q\024\001!\166\136\020\218\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\133\003\000\000\004\000\004\000\012\000\000!@ \000\000\016@\000\000\000\000\0000\189{S\224\000\b\164\132\000\144h\028\131\0303\000\000\132\128\016\002\000\012\016\b0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\175j|\000\001\020\144\128\018\r\002\144c\198`b\000\000\000@\000\000\b\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\129\000\000\000\000\000\000\000\000\001\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000 @\000\000\000\000\000\000\000\000@\000\000\000\b\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\004\b\000\000\000\000\000\000\000\000\b\000\000\000\001\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000 \000\000\000\000\000\000\000 \000\001\002\000\000\000\000\000\000\000\000\002\000\000\000\000@\000\000\000\000\000!\000\000\000\000\128\000\000\000\000\000\000\000\000\016`\004\000\000\128(\000\000\000\000\000\000\000\b\000\000@\128\000\000\000\000\000\000\000\000\128\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\bbb\000\000\000\000\000\000\000\000\000\000\000\000\000\135\000(\000\000\001\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\016\000\000\000\000\000\000\000\000\000\000\000\000\001\006\000P\000\000\002\000\000\000\000\000\016\128\000\000\000\000\000\000\000\000\000\000\000\000\bbbb`\004\000\000\000 \000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\131\000 \000\000\001\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\004\024\000\000\000\000\b`\004\000\000\000 \000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\131\000\000\000\000\001\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")
  
  let action =
    ((16, "\000b\000\201\000\000\000\000\011\022\000\201\000\000\000\000\000-\000\000\000\000\000\000\001\005\000\000\000\000\000\000\000b\000\000\006^@\204\000\000\000\000LP\"P\000\000\029\184#\128\000\000\000\000\000\000\000\000\000\209\000q\000\000\000\000\000\000\000\000\000\000\000\000\000\000M2\000\000\000\000\029\184\000\000\000\000\004\226\000\000\000\017\000\029\000\000\000\000\000\000\000\000\000)\000\000\000\000\000\159\000\029\000\000\000\159\000\000\000\000\000\017\001\004\000\230\000\029\000\226\000\000\002\234\012\218\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0015\000\017\000\000\000\219\000\150\000\017\000\000\000j\011\190\000\000\000\000\000\000\000\134\000\000$\176\000\017\000\194\000\000\000\000\001\228\012\218\001J\012\218\0018\000\000\000\000\000\000\000\000@\204%\224f\018\000\000f\018\000\000\000\000\000\000\000\029\000\000f\018\000\000d\026\002@f\018\002 \000\000\000\000\000\029\003\190Kp\000\000\000\000]\000]\152\000\000_\208\000\000^hKp*\026*\026_\208Kp\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000_\000*\026\000\000\000\000\000\000_\000_\000_\000\000\000\000\000\000\b\000\000\000\000KpKp\000\000\000\0008\012\000\029\000\000\031F*\026AdKpB\024Kp\000\000\000\000\000\000\000\000\000\000\000\000\000\000M\196Kp\000\000N\238KpB\144KpC\186Kp\000\000Kp\000\000KpD$KpENKpE\184KpF\226KpGLKpHvKp\004\140Kp\000\000\000\000\000\000\002RKp\000\000\000\000\000\000\000\000KpOXKpP\130KpP\236KpR\022KpH\224KpJ\nKpJtKpR\128KpS\170Kp\000\000KpT\020KpU>KpU\168Kp\000\000KpV\210KpW<Kp\000\000\000\000Kp\000\000\000\000\002F\000\000\002\150\000\000\000%Kp\000\000\000%\000\000\000\000\002\028@\204\000\000\"(\007\194\007\194t\204dP\000\000t\204\000\000\000\000t\204\000\000\002\028\000\000\000\000*\026\003\030\000\000\003J_\208:<\000\000`f*\026\003\194\000\000\003\216\027\142:<_\208\000\000\000\000\000\000\000\000\000\000\000\000\000\000_\000\000\0009:Kp\004<\000\000\000\000\000\029\000\000\000\000\000\000\000\000_\000\000\000\000\000\000\b\000\000_\208\000\000\000\000uD\000\029\000\000\031F\031F\000\000\001r'n\031F2\016Kp\000\000Kp\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Z*Kp\130$Kp\004\154Kp\000\000Kp\130\170Kp\131\020Kp\131tKp\131\192Kp\132DKp\132\144Kp\000\000Kp\132\220Kp\133`Kp\133\172Kp\000\000Kp\133\248Kp\134|\003\160 <\000\000\000\000\003\234!2\000\000\000\000\000\000\000\000\004x\000\000Kp\004\138\000\000\000\000\000\029\000\000\000\000\000\000\001P_\208\000\000\000\000\005v\000\000\000_`\254\005\250Kp\005\224\000\000\000\000_\208\000_\000\000\000\000Kp\005\150\000\000*\026\005\172\000\000\005\238d~:<_\208\006:\000\000Kp\000KKp\006J\000\000\000\000:<:<\000\000\000\000\000\000\000\000<\190\000\000\000\000\000\000\000\000\000\000\000\000_\000\000\000\000\000\002F\007,Kp:<\000\029\000\000\000\000_\000\000\000\000\000\000\b\000\000=Dd~\000\000\000\000\129\182\000\029\000\000\031F\006l\000\000Kp\006p\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\0003\158\000\000\000\000\006\226:<\006\236:<\000\000\000\026\000\000\000\000\030NKp)\"Kp_\142Kp\134\200Kp\134\236Kp\135\"Kp\135zKp\136\018Kp\000\000Kp\1366Kp\136\130Kp\136\166Kp\000\000Kp\136\220Kp\137\196\000\000\006\192\000\000\000\244;\012\000\000\001\158>F:<\000\000\003*;\220\000\000\000\000\000\000\000\000\007N\000\000\000\000\000\000\006\196\000\000\006\198\000\000\000\000\006\206\000\000\000\000\006\214\000\000\000\000\006\250\000\000\000\000\000\000\000\000\000\000\000\000\007\b\007\220\000\000\007\012\000\000\007\020\000\000\007\022X8\000\000*\026\007\026\129d\000\000\b\b\000\000*\026\007*?\194\000\000*\026\007,@\236\000\000\007*\000\000\000\000\003\190\000\000\b*\000\000\000\000\000\029\b\006\000\029\007N\b0u\252u\252\000\000\000\000\000\000\003\252{\208u\252\004\016v\218\000\000\000\000\000\000\002.\b \007t\b4u\252\000\000\000\000\007l\000\000\007p\bNu\252\007z\000\000\000Q\000\000\000\000\004Nw\018\000\000\000\000\000\000\007~\b|\000\000\b~\000\0004V\000\029\b\144\000\000\000\000\000\000\007\150\000\000f\018\000\000r:f|\000\000\000\000(\140f\018\007\154\000\000\000\000\002rf\018\000\000\002r\000\000\000\000\007\164\000\000\r\022\007\162\000\000\000|@\204\000\000@\204\000\000\007\140\000\000\000|\000\000\023\2228\012@\204\000\000\007\184\000\000\003\n@\204\000\000\000\000\003\n\000\000\000\000\000\000\005\236\000\000\000\000\004\138\005\236\000\000\000\000\000\000\b\180\000\000\"(f\172f\172\000\000\000\000f\172\000\000\000\000\000\000@\204\000\000\000\000@\204\001\188\000\000\000\000\b\160w\224\000\000\000\000\000\000\004Tx\170w\224\000\000\000\000\000\000\000\000\000\000\007\210\b\204\000\000\000\000\001\188\b\182w\224\007\224\b\222\000\000\bFr\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0005\150\bH5\150\bJ5\150\000\000\000\000r\142\000\000\000\000\000\000r\142\004\226\000\000\000\000\000\000b\028\000\029b\028\000\029b\028\000\000\000\000r\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000r\142\000\000\000\000\000\000\000\000\b\234\000\000\b\206Kp\007\248,\198\b\134\000\000\b\220Kp\b\012\b\226@\204\000\000\000\000\000\000w\018@\204\001\188\t\nw\224\bJ\tD\000\000\000\029\000\000\000\188Kp\tF\000\000\000\029\000\000\000\188\tL\000\000\b\028\t\030\000\029\bZ\t6u\252\b`\003@\000\000Kp\t\\\000\000\tFw\224\bp\tl\000\000\b\156\001`Kp\tr\000\000\tv\000\0004V\000\029\001pKp\tx\000\000\t|\000\000\000\029\002<Kp\t~\000\000\t\128\000\000\000q\b\192\t\1422p\000\000a\148*\026\b\154Y\026\000\000Z\028\000\000\t\148\000\000\b\014\000\000\000\000\000\000\000\000\000\000\000\b\031F\b\158\000\000\000\000\t&\000\000\000\000\000\b\000\000\003.\tpKp\t,\000\000\txKp\t4\000\000\001\150\000\000\t\142\t\142*\026\b\176\000\000\b\178gTgT\000\000\000\000\000\000\000\000\000\000\000\000\000\000_\000\000\000\000\000\000\000_\000\000\000\000\000\000\b\000\000gT\000\000\000\000>\252\000\029\000\000\031F\b\184\000\000Kp\b\184\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000/\228Kp\000\000Kp\000\000\007\188gT\000\000\000\000\000\000\000\000g\194Kph\136Kp\b\238Kp\000\000Kph\242Kpi\184Kpj\"Kpj\232KpkRKpl\024Kp\000\000Kpl\130KpmHKpm\178Kp\000\000KpnxKpn\226\b\196\000\000\000%\000\000\000\000:<\b\190\000\000\000\000\003.\000\000\003.\000\000\023\222\t\142\t\142\000\000\000\000\000\000\000\003\000\000\000\000\000\000\t\158Kp\b\202,\198-\226\000\029\t\200\000\000\t\176\027\006\000\000w\018\000\029\004\164\000\000Kp\t\210\000\000\011\190\t\162\000\029\b\228\t\190u\252\b\240\004\240\000\000Kp\t\234\000\000\004\246\000\000Kp\t\236\000\0004V\000\029\005`\000\000Kp\t\252\000\000\000\029\005r\000\000Kp\t\254\000\0003\158\n\006Z\180\n\bKp\t\018,\198,\198\011\000\001\188\004\182\bP\001\188\000\000\000\000\004\208\0142\000\000\005*\015\198\000\000\000\000\000\000\000\000\000\000\t\020\000\000\000\000\n\014\000\000\n\016\000\000\000\000\nR\t\244Kp\t&\n(\000\000\n0\000\000\tj\000\000\n$\031F\tT,\198\000\000\000\000\000\000\014V\000\000\000\000\003.\000\000\t\220\000\000\017\130\000\154\000\000\017\130\000\000\000\0003\158\000\000\002\232\000\000\000\000\012\190\000\000\017\130\000\000\n2\031F\t`\005t\000\000Kp\nZ\000\000\001\188\000\000\n,\000\029\tj\nNu\252\tx\005\168\000\000Kp\nv\000\000\nZw\224\t\132\n~\000\000\003\158Kp\n\134\000\000\n\144\000\0004V\000\029\004\206Kp\n\148\000\000\n\150\000\000\000\000\000\000\012\190\000\000\000\000\002\232\000\000\t\142\000\000\003^\000\000\000\000Z\180\n\152Kp\t\164,\198\000\000\000\000\n\130\031F\t\202\006\\\000\000Kp\n\228\000\000\003R\000\000\n\188\000\029\t\248\n\210u\252\t\252\006v\000\000Kp\n\248\000\000\006\138\000\000Kp\n\252\000\0004V\000\029\006\150\000\000Kp\n\254\000\000\005\132-\226\000\000\005\132\000\000\000\000\n\020\000\000\000%\001\150,\198\000\000\014V\000M\014V\000\000\000M\000\000\t\142\000\000\t\142\000\000\000\000\000\000\n\016\000\000\000\000\n\026\000\000\006:\022J\000M\014V\000\000\000\000\000\000\000M\000\000\t\142\000\000\006:\000\000\000\000\025\152\004\184\023\222\000\000\004\184\000\000\t\142\023\222\000\000\000\000\t\142\000\000\000\000\n\026\000\000\000\000\n \000\000\006\228\t\142\000\000\006\228\000\000\000\000\n\166\000\000\002\232\000\000\t\142\000\000\000\000\000\000\028\154[\132\000\000\011\026\000\000\028\154\011\030\000\000\011\"\000\000\006\240\028\154\000\000\011$\000\000\000\000\006\240\000\000\000\000\n6\000\000\"~\n\188\000\000\000\000\000\000\n\190\000\000\000b\001\150\000\000\023\222\011 \000\000\000\000Kp\nl\t\142\000\000\n>\000\000\000q\000\000@\204\000\000\000\000\002^\023\222\000\000\023\222\000\000\n(\000\000\002^\000\000Kp\004\000Kp\000\000Kp\000\000\n*\000\000\004\000\000\000Kp\004\000\n,\000\000\025r/v\000\000\005\020\025r\000\000\000\000\025r\000\000\n2\000\000\005\020\000\000Kp\004\000\n6\000\000@\204\005\152@\204\000\000@\204\000\000\n:\000\000\005\152\000\000Kp\004\000\n<\000\000\000\000+\174\000\000\000\201\n\234\000\000\000\000\n\192p\012\000\000\000\000\000\000\000\000\000\000\000\000\n\146\006^\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\174p\012\000\000\000\165\006\172\n\148\000\201\000\000\000\000\n\156\000\201\000\000\000\000\000\000\000\000\001\252\006\172\000\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\0002\01656\000\000|\012\000\000p\012\000\000\001\250p\012\000\000\000;\000\017\000\017\000\000\004\156\000\017\000\000\nv\000\000\000\000\000\000\000\000\011\n\000\000}\160p\012p\012\n\180\000\201\000\000\000\000\000\000\n\136p\012\000\000\002\228p\012\000\000\011&\000\000\011(\000\000\000\000\002\152p\012\000\000\003.\011\176\000\000\011\178\000\000\000\000\000\000\000\000\0114\000\0006\166\000\0008\012p\012\0116\000\000p\012\0118\000\000~\004p\012\011:\000\000\011<\000\000~\198x\180p\012\n\176p\012\011B\000\000\011H\000\000\011J\000\000@\204\000\000\005\204@\204\000\000\n\194f\172\000\000p\012\011^\000\000\006tp\012\000\000\002\232p\012\000\000\003\030p\012p\012\n\206\000\000\000\000\000\000\000\000\000\000\000\000\011h\000\000~\254pn\011n\000\000\011t\000\000\127by\022p\012\n\230p\012\011x\000\000\011z\000\000\011~\000\000pn\011 \000\201\000\000\000\000\005\252pn\000\000\003\030\000\000\011\132\000\000\011T0\160\011*\128\192\\T|b\000\000}h\n\254\000\000\000\000\006\194p\012\000\000\000\022\006P\000\017\n\254\000\000\000\000\006\164\000\201\011\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000p\012\011\162\000\000p\012\011\174\000\000\011\176\000\000p\012\011\178\000\000\128$z\018p\012\011(p\012\011\192\000\000\011\194\000\000\011\200\000\000s2f\172\000\000f\172\000\000q\130p\012\011>p\012\012\006\000\000\012\b\000\000f\172\000\000\000\000\006\250p\012\000\000\002\012\001\234\001\234\000\000\000\000\000\000\000\000\006$\001\234\000\000\011x\000\000\000\000\000\000\000\000\000\000\000\000\000\000p\012\012\012\000\000\012\014\000\000p\012\012\016\000\000\128\\pn\012\020\000\000\012\022\000\000p\012\012\024\000\0000\160p\012\012\028\000\000\012\030\000\000p\012\012 \000\000\011\2420\160p\012\012(\000\000p\012\012*\000\000\012,\000\000p\012\0120\000\000\000\201\011\150\000\000\000\000+\174\000\000\000\000\004J\012\158\000\000\000\000\001K\000\000\000\000\000\000Kp\000\000\000\000\000\000\004\198\000\000\000B\000\000\000\000\000\000\006^t\162t\162t\162t\162\000\000\003\148\003\148\003\148\003\148\000\000\000\000\000\000\000\000\000\000\000\000t\162\017\000\017\000\003.\023\222\012\148\019\026\000\154\000\000\000\000\002\232\000\000\012\190\000\000:<\011\174\000\000\003.\023\222\011\180\020\178\000\000\003.\019\026\000\000\000\000\000\000c\176t\162\017\000\027j\000\000\000\000\000\000\012\b\001\188\012\146z\200\000\000\000\000\000\000\006:{\146z\200\000\000\000\000\r \012\132\000\029\000\000\000\000\000\000\011\202\012\156\t\142\011\200\000\000\002\232\000\000\012\190\000\000\029\136\004\198\000\000\004\024\000\000\000\000\011\178\000\000*\026\000\000\000\000\004\030\000\000\000\000\012\138\000\000\000\000\000\000\000\000\004J\000\000\002\012\000\000\000\000\000\000Kp\000\000\004\198\000\000\002\224\000\000\000\000\000\000\007\246\000\000\015\234\007\232\015\234\000\000\011&\015\234\000\000\007\232\000\000\011&\000\000\011&\000\000\011&\000\000\029\136\000\000\000\000\000\000\000\000\000\000\011&\000\000\007\232\000\000\011&\000\000'\210\004\198\000\000\004>\000\000\000\000\011\184\000\000*\026\000\000\t\142\012\b\000\201\003\016\012\184\000\204\000\000\000\204\012\224\000\000\012\226\000\000\007\196\000\000\000\204\005T\000\204\000\162\000\204\000\000\000\000\006\020\000\000\005\b\002\246\011\206\000\000\011\212\000\000\012\026\000\201\002\246\011\220\000\000\t~\012\244\000\000\n.\000\204\r\006\005\148\r\006\000\000\000\000\005\254\000\201\000\000\001\n\000\000\000\000\002\168\000\000\000\000\011\226\000\000\000\000\000\000\012(\000\201\002\246\011\236\000\000\000\000\t~\n.\000\204\005\254\001\n\002\168\011\246\000\000\n.\000\204\005\254\001\n\002\168\011\248\000\000\001\128\004\"\012\028\000\201\012\022\006,\003\220\012L\000\201\000\000\012N\000\201\000\000\012\176\000\000\012:\007\132\012@\006,\012\208\000\000\012N\006,\012\224\000\000\000\000\006,\000\000\012\236\000\000\000\201\000\000\rl\r\152\012\150\000\201\000\000\012\248\000\000"), (16, "\014\249\014\249\014\249\014\249\014\249\014\249\014\249\014\249\014\249\014\249\014\249\014\249\014\249\014\249\000\234\014\249\014\249\014\249\014\249\014\249\014\249\014\249\014\249\014\249\014\249\014\249\014\249\n\173\007\t\001\222\000&\001N\014\249\027s\027w\000\190\014&\r\129\t\169\027{\014\249\000\190\014\249\000\n\002\n\015\210\014\249\n\173\014\249\014\249\000*\014\249\022R\000\190\014\249\005)\023\206\023\214\023>\014\249\014\249\014\249\025~\000\130\014\249\014\249\000\198\tj\0007\000;\014\249\001\226\000\198\014\249\014\249\0042\001Z\023B\000\254\014\249\014\249\022\186\014\249\t\185\014\249\014\002\000\006\000\134\000\"\014\249\007E\014\249\014\249\000\202\014\249\014\249\014\249\006\214\025\146\000\202\014\249\014\249\014\249\r\129\000\206\014\249\014\249\014\249\014\249\006\201\000\206\001\"\014\249\014\249\014\249\014\249\014\249\014\249\006~\r\178\003\197\014\249\014\249\n\150\000\190\003\197\ti\017\158\006\222\000\n\n\193\021\018\014\249\014\249\014\249\000\n\006q\014\249\014\249\014\249\014\249\030\150\014\249\007\t\014\249\006i\007%\000\n\014\249\006i\005)\014&\014\249\014\249\006\234\000\198\007E\001\002\003\197\014U\015\210\001^\030\018\014\249\014\249\b)\001\006\014\249\000\222\014\014\006\209\014E\014\249\014\249\014\249\014\249\006\129\004\173\014\249\014\249\007>\014\249\000\202\030\022\t\173\014\249\014\249\014\249\000.\014\249\030\026\014\249\014\249\000\206\014\249\n\158\n\193\014\249\014\249\0165\014\249\014\249\001\n\014\249\015\005\015\005\015\005\015\005\015\005\015\005\015\005\015\005\015\005\015\005\015\005\015\005\015\005\015\005\000\n\015\005\015\005\015\005\015\005\015\005\015\005\015\005\015\005\015\005\015\005\015\005\015\005\027\155\027\159\003\197\020\250\001\018\015\005\027\163\001j\003\197\003\197\014U\017\158\003\225\015\005\002\177\015\005\006\137\006\137\014U\015\005\003\197\015\005\015\005\007%\015\005\014N\012\242\015\005\001~\007%\007%\030\"\015\005\015\005\015\005\006\145\t\189\015\005\015\005\003\197\000\190\007%\0316\015\005\0165\0165\015\005\015\005\012\254\003\197\0165\030B\015\005\015\005\030\186\015\005\018\014\015\005\001\142\014R\004\173\030\190\015\005\000\190\015\005\015\005\030*\015\005\015\005\015\005\007%\000\198\018\018\015\005\015\005\015\005\b^\016\238\015\005\015\005\015\005\015\005\025~\t\197\004\t\015\005\015\005\015\005\015\005\015\005\015\005\004\t\001\154\011N\015\005\015\005\0072\000\190\000\202\026f\011R\004\173\003\225\014\165\000\n\015\005\015\005\015\005\r^\000\206\015\005\015\005\015\005\015\005\001\170\015\005\r~\015\005\026b\001\162\014U\015\005\006f\001\174\020~\015\005\015\005\003\225\000\198\t\178\012\254\020\130\004J\021B\000\n\020\134\019\130\015\005\012\254\005N\015\005\014\173\014\189\t\129\001\242\015\005\015\005\015\005\015\005\026j\n\177\015\005\015\005\030\198\015\005\000\202\016\242\000\n\015\005\015\005\015\005\bj\015\005\001\250\015\005\015\005\000\206\015\005\t\213\022\174\015\005\015\005\020\230\015\005\015\005\nj\015\005\007\017\007\017\007\017\007\017\007\017\007\017\007\017\007\017\007\017\007\017\007\017\007\017\007\017\007\017\000\n\007\017\007\017\007\017\007\017\007\017\007\017\007\017\007\017\007\017\007\017\007\017\007\017\022\234\021J\n\173\0232\014\189\007\017\014*\014:\014J\023\206\023\214\014&\n\177\007\017\r\154\007\017\014\141\023\206\023\214\007\017\015\210\007\017\007\017\006\193\007\017\0293\0297\007\017\003r\003\r\0112\029;\007\017\003\r\007\017\0116\012\254\007\017\007\017\000\190\027\194\004\017\011>\007\017\004\"\000\190\r2\n\210\004\017\011B\027\198\024\162\007\017\007\017\014u\018\250\014\149\007\017\007\017\0165\004M\018\014\007\017\030\202\007\017\007\017\007\001\007\017\007\017\007\017\000\198\018\254\006\177\007\017\007\017\007\017\000\198\018\018\007\017\007\017\007\017\007\017\023\194\n\201\004*\007\017\007\017\007\017\007\017\007\017\007\017\n\185\011N\014U\007\017\007\017\031N\000\202\011N\011R\000\n\001\026\017\158\000\202\005\245\011R\007\017\007\017\000\206\006i\007\017\007\017\007\017\007\017\000\206\007\017\030\n\007\017\018\178\031Z\023\162\007\017\024\150\004M\029\011\007\017\007\017\014u\002\n\030\n\004M\029S\029W\000\n\031:\0165\0165\029[\021j\000\n\007\017\0165\006\233\003\205\r6\007\017\007\017\007\017\007\017\n\201\029\015\007\017\007\017\004\146\007\017\bz\003\205\n\185\007\017\007\017\007\017\0075\002\193\0075\007\017\007\017\0075\007\017\029\018\0075\007\017\007\017\004\245\007\017\007\017\004\154\007\017\0075\0075\0075\0075\0075\0075\0075\0075\0075\0075\0075\0075\0075\0075\018V\0075\0075\0075\0075\0075\0075\0075\0075\0075\0075\0075\0075\0075\027b\0075\006i\004!\0075\021r\014\181\004!\012\254\006\022\0075\0075\0075\tq\0075\0075\0075\0075\0075\016B\0075\0075\0075\0075\006i\b\217\0075\0075\006i\n\173\004\178\0075\000\n\0075\000\190\004!\0075\0075\014&\b\217\014U\004\186\0075\003\209\0075\0075\006&\015\210\003\209\0075\002\145\0075\0075\0075\0075\t\146\0075\016r\029\027\t\241\016\134\0075\027b\0075\004!\t\158\0075\0075\0075\t\225\000\194\021\170\0075\0075\0075\004!\006\161\0075\0075\0075\0075\030:\028\235\028\239\0075\0075\0075\0075\0075\0075\029\031\012*\001\"\004\246\0075\0075\t\246\b\217\012.\011n\002\209\029\227\029\231\000u\0075\0075\0075\004!\004!\0075\0075\0075\0075\016\162\0075\005\162\0075\016F\014=\030:\0075\006>\016\186\017\250\0075\0075\n\254\003^\000\n\017\158\004!\004!\006J\004!\006v\023N\0075\021\230\018v\0075\004!\004!\014e\021\182\0075\0075\004!\0075\016\246\018.\0075\0075\t\157\0075\b\217\016v\003\209\0075\016\138\019^\012\254\017\n\003\209\003\209\0075\t\141\0075\001\198\b\217\0075\0075\007-\0075\0075\003\209\0075\000R\000V\000Z\000\146\n\186\000\150\0112\000\154\000\158\000\162\000^\0116\000\170\000\174\022:\000v\027\170\000\182\011>\011\178\000\186\001\146\001\150\001\178\000z\011B\027\178\003\209\022>\030B\017\022\031J\012\142\021\238\002\161\016\166\006\134\n\242\006\169\030:\012\158\022B\001\182\022F\016\190\017\254\002\014\022J\r\186\012\166\014=\r\190\022R\022N\r\194\030J\014=\014=\006\142\000~\n\246\r\214\022Z\018\230\n\169\r\230\022^\030B\014=\014\157\002\030\0182\022b\027\242\019\210\022\190\019\026\025\130\006\249\015\230\014Z\028\030\028*\030\158\015\234\000\n\019.\006\174\022f\002B\022\202\002F\019J\031\159\001\190\017\150\015\242\014=\022\206\006\186\014r\002N\015\246\007-\006\153\014v\007\006\014z\002Z\007-\007-\024f\014~\014\130\012\186\012\190\014\134\015\250\014M\025\150\022j\030\174\015\254\022n\000N\n\182\021b\021\138\021\154\021\206\021\222\022\006\006\194\007\026\014\138\025*\022r\016\002\016\006\014\142\016\n\022v\000\n\022z\016\030\022\218\022~\022\130\004\225\022\134\007-\030R\016*\014\150\n\149\026~\022\222\022\138\024\138\020R\022\142\018\234\014]\030B\028>\020\178\028\142\016\230\014\133\006\217\000m\006\210\016\234\0176\019\030\012\194\022\146\000\n\014\154\014\158\006\230\017:\022\150\022\154\0192\014\166\031v\000\190\000^\0076\019N\000f\017B\000v\002\150\007\130\014}\007=\007=\007\142\014\170\002\162\000z\007=\000R\000V\000Z\000\146\n\186\000\150\0112\000\154\000\158\000\162\000^\0116\000\170\000\174\000\198\000v\027\170\000\182\011>\011\178\000\186\001\146\001\150\001\178\000z\011B\027\178\007\190\r\234\007\198\025r\004\177\012\142\000~\030.\004\177\bV\b\146\b\162\b\170\012\158\000\202\001\182\b\182\004\177\004\177\002\014\b\194\r\186\012\166\006\225\r\190\000\206\004\177\r\194\0302\006\241\n\173\026V\000~\000\190\r\214\b\206\004\177\n\169\r\230\014&\000\190\000\138\b\234\002\030\004\190\b\246\014&\b\254\015\210\t\006\000\n\t\022\015\230\014Z\028\030\015\210\t\"\015\234\000\n\t.\t>\tJ\002B\t^\002F\004\177\000\190\001\190\017\150\015\242\tn\000\198\r\022\014r\002N\015\246\004\177\tv\014v\007\006\014z\002Z\tz\t\182\t\190\014~\014\130\012\186\012\190\014\134\015\250\r\238\t\206\011N\t\214\015\254\t\186\t\218\000\202\t\226\011R\n\n\r\242\016\250\n\014\n\022\007\026\014\138\004\177\000\206\016\002\016\006\014\142\016\n\n&\000\n\n6\016\030\n^\n\130\006i\004\225\n\142\n\171\000\202\016*\014\150\000\n\015\022\n\202\017\158\004\177\011\018\004\177\000\n\000\206\004\213\017\158\011Z\002\n\016\230\004\177\004\177\011\142\011\146\016\234\0176\004\177\012\194\011\162\011\170\014\154\014\158\011\174\017:\011\182\011\254\012\006\014\166\012\138\000\n\012\146\012\154\n\229\n\229\017B\012\162\002\150\012\170\n\229\007M\007M\012\178\014\170\002\162\012\182\007M\000R\000V\000Z\000\146\n\186\000\150\0112\000\154\000\158\000\162\000^\0116\000\170\000\174\012\214\000v\011:\000\182\011>\011\178\000\186\001\146\001\150\001\178\000z\011B\012\222\012\226\012\250\t\161\004\201\r\014\012\142\r\026\r\"\004\201\r&\r.\004\201\r>\012\158\006i\001\182\004\201\rF\rN\002\014\rR\r\186\012\166\rf\r\190\rn\r\134\r\194\r\142\r\162\r\170\029\254\000~\b\225\r\214\r\182\006i\n\169\r\230\r\206\r\226\014\n\014\022\002\030\014.\0146\014&\b\225\014>\014F\014b\014j\014V\014Z\014\210\015\210\014\222\015\234\015>\015\178\015\202\016\014\002B\016\022\002F\0051\016&\001\190\015\238\015\242\016.\016N\016Z\014r\002N\015\246\016b\016f\014v\007\006\014z\002Z\016n\016~\016\146\014~\014\130\012\186\012\190\014\134\015\250\003\205\016\174\016\198\016=\015\254\003\205\016\210\016\218\016\226\0172\017>\017F\017R\017V\b\225\007\026\014\138\030n\017^\016\002\016\006\014\142\016\n\017b\000\n\004\201\016\030\017j\030\130\017r\030\134\004\201\004\201\004\201\016*\014\150\030\222\017z\030\134\004\201\004\201\017\130\017\170\004\201\017\238\004\201\017\158\017\246\018\006\016\230\018\022\004\201\018\030\004\201\016\234\0176\0051\012\194\018\"\018*\014\154\014\158\018:\017:\018B\018J\018N\014\166\0051\0051\018^\b\225\004\201\0051\017B\018f\002\150\018~\018\134\018\194\004\201\018\202\014\170\002\162\018\218\b\225\000R\000V\000Z\000\146\n\186\000\150\0112\000\154\000\158\000\162\000^\0116\000\170\000\174\018\226\000v\027\170\000\182\011>\011\178\000\186\001\146\001\150\001\178\000z\011B\027\178\003\205\014m\000\190\014m\018\242\012\142\003\205\003\205\014m\019\002\019\n\019\014\019\022\012\158\019&\001\182\019:\019V\003\205\002\014\030\n\r\186\012\166\019v\r\190\019\190\019\202\r\194\020>\020J\020j\020\150\000~\020\162\r\214\020\170\020\190\n\169\r\230\016\238\020\214\020\226\020\242\002\030\021\n\021\026\014&\003\205\021&\021W\021\127\021\151\014V\014Z\021\195\015\210\021\219\015\234\021\251\022\019\000\202\022+\002B\0226\002F\022V\022\194\001\190\015\238\015\242\022\210\000\206\023\003\014r\002N\015\246\023Z\023o\014v\007\006\014z\002Z\023\130\014m\023\150\014~\014\130\012\186\012\190\014\134\015\250\023\175\023\183\023\210\023\218\015\254\000\n\000\190\023\239\024\007\024\019\024#\024+\014m\024>\024G\007\026\014\138\024O\024W\016\002\016\006\014\142\016\n\024r\000\n\014m\016\030\016\242\024\131\024\174\004\225\014m\014m\024\203\016*\014\150\024\219\000\198\016V\024\227\024\246\024\255\025\007\000\254\025\015\025\026\017\158\025?\025F\016\230\025N\0041\025f\025\138\016\234\0176\025\158\012\194\000\022\011N\014\154\014\158\025\195\017:\000\202\014m\011R\014\166\025\207\025\215\025\227\014m\014m\025\246\017B\000\206\002\150\025\255\026\007\n\237\n\237\026\015\014\170\002\162\0262\n\237\000R\000V\000Z\000\146\n\186\000\150\0112\000\154\000\158\000\162\000^\0116\000\170\000\174\000\n\000v\011:\000\182\011>\011\178\000\186\001\146\001\150\001\178\000z\011B\026;\026C\026\138\026\175\026\183\026\195\012\142\026\211\026\219\026\231\001\002\026\247\026\255\027\011\012\158\027\018\001\182\027\031\027+\0273\002\014\027?\r\186\012\166\027K\r\190\027f\027\254\r\194\028&\0286\028r\028z\000~\028\166\r\214\000\190\002\181\n\169\r\230\028\186\028\190\028\198\028\247\002\030\029\023\029\239\014&\030\002\030\014\030\030\030&\030c\014V\014Z\030k\015\210\030r\015\234\030\127\030\138\030\154\030\211\002B\030\226\002F\000\190\030\239\001\190\015\238\015\242\000\190\031\019\031/\014r\002N\015\246\031>\031F\014v\007\006\014z\002Z\031R\031^\031k\014~\014\130\012\186\012\190\014\134\015\250\031r\001\030\001\"\016=\015\254\000\198\tj\031z\001&\031\131\000\198\028\162\001*\001.\031\138\007\026\014\138\031\147\004J\016\002\016\006\014\142\016\n\031\167\000\n\031\182\016\030\031\186\031\190\031\203\0012\000\000\000\202\000\000\016*\014\150\000\000\000\202\000\n\000\000\000\000\000\000\000\000\000\206\000\000\000\000\017\158\000\000\000\206\016\230\000\000\000\000\000\000\000\000\016\234\0176\000\000\012\194\000\000\000\000\014\154\014\158\000\000\017:\000\000\000\000\000\000\014\166\000\n\000\000\000\000\000\000\000\000\000\n\017B\000\000\002\150\000\000\000\000\016=\016=\000\000\014\170\002\162\000\000\016=\000R\000V\000Z\000\146\n\186\000\150\0112\000\154\000\158\000\162\000^\0116\000\170\000\174\000\000\000v\011:\000\182\011>\011\178\000\186\001\146\001\150\001\178\000z\011B\000\000\006\193\000\000\003\r\000\190\000\000\012\142\003\r\000\000\000\000\000\000\000\000\000\000\000\000\012\158\000\000\001\182\000\000\000\000\000\000\002\014\000\000\r\186\012\166\000\000\r\190\000\000\000\000\r\194\000\000\000\000\000\000\000\000\000~\000\000\r\214\000\000\000\000\n\169\r\230\000\000\016\238\000\000\000\000\002\030\000\000\000\000\014&\000\000\000\000\000\000\000\000\000\000\015\230\014Z\000\000\015\210\000\000\015\234\019\142\000\000\000\000\000\202\002B\000\000\002F\005\005\000\000\001\190\017\150\015\242\000\000\000\000\000\206\014r\002N\015\246\000\000\000\000\014v\007\006\014z\002Z\000\000\000\000\000\000\014~\014\130\012\186\012\190\014\134\015\250\000\000\000\000\000\000\017\154\015\254\000\000\000\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\026\014\138\000\000\000\000\016\002\016\006\014\142\016\n\000\000\000\n\000\000\016\030\000\000\016\242\000\000\000\000\000\000\000\000\000\000\016*\014\150\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\158\000\000\000\000\016\230\000\000\000\000\t\145\000\000\016\234\0176\005\005\012\194\000\000\000\000\014\154\014\158\000\000\017:\000\000\000\000\000\000\014\166\005\005\005\005\000\000\000\000\000\000\005\005\017B\000\000\002\150\000\000\000\000\000\000\000\000\000\000\014\170\002\162\000R\000V\000Z\000\146\n\186\000\150\0112\000\154\000\158\000\162\000^\0116\000\170\000\174\000\000\000v\027\170\000\182\011>\011\178\000\186\001\146\001\150\001\178\000z\011B\027\178\000\000\000\000\000\000\000\190\000\000\012\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\158\000\000\001\182\000\000\000\000\000\000\002\014\000\000\r\186\012\166\000\000\r\190\000\000\000\000\r\194\000\000\000\000\000\000\000\000\000~\000\000\r\214\000\000\000\000\n\169\r\230\000\000\016\238\000\000\000\000\002\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\230\014Z\000\000\000\000\000\000\015\234\029j\000\000\000\000\000\202\002B\000\000\002F\000\000\000\000\001\190\017\150\015\242\000\000\000\000\000\206\014r\002N\015\246\000\000\000\000\014v\007\006\014z\002Z\000\000\000\000\000\000\014~\014\130\012\186\012\190\014\134\015\250\000\000\000\000\000\000\000\000\015\254\000\000\000\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\026\014\138\000\000\000\000\016\002\016\006\014\142\016\n\000\000\000\n\000\000\016\030\0112\016\242\000\000\004\225\000\000\0116\000\000\016*\014\150\000\000\027\194\000\000\011>\000\000\000\000\000\000\000\000\000\000\000\000\011B\027\198\000\000\016\230\000\000\000\000\002\165\000\000\016\234\0176\000\000\012\194\000\000\000\000\014\154\014\158\000\000\017:\000\000\000\000\000\000\014\166\000\000\000\190\000\000\000\000\000\000\000\000\017B\000\000\002\150\000\000\000\000\n\209\n\209\000\000\014\170\002\162\000\000\n\209\000R\000V\000Z\000\146\n\186\000\150\0112\000\154\000\158\000\162\000^\0116\000\170\000\174\000\198\000v\011:\000\182\011>\011\178\000\186\001\146\001\150\001\178\000z\011B\000\000\000\000\000\000\000\000\000\000\000\000\012\142\000\000\000\000\000\000\011N\000\000\000\000\000\000\012\158\000\202\001\182\011R\000\000\000\000\002\014\000\000\r\186\012\166\000\000\r\190\000\206\000\000\r\194\000\000\000\000\000\000\000\000\000~\000\000\r\214\000\000\000\000\n\169\r\230\000\000\000\000\000\000\000\000\002\030\000\000\000\000\000\000\000\000\000\000\000\000\000\n\000\000\015\230\014Z\000\000\000\000\004\245\015\234\017\178\000\000\000\000\000\000\002B\000\000\002F\000\000\000\000\001\190\017\150\015\242\000\000\000\000\000\000\014r\002N\015\246\000\000\000\000\014v\007\006\014z\002Z\000\000\000\000\000\000\014~\014\130\012\186\012\190\014\134\015\250\000\000\000\000\000\000\016\025\015\254\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\026\014\138\000\000\000\000\016\002\016\006\014\142\016\n\000\000\000\nn\186\000\150\0112\000\154\000\158\000\162\000^\0116\000\170\000\174\000\000\000v\011:\000\182\011>\011\178\000\186\001\146\001\150\001\178\000z\011B\000\000\000\000\000\000\000\000\000\000\000\000\012\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\158\000\000\001\182\000\000\000\000\000\000\002\014\000\000\r\186\012\166\000\000\r\190\000\000\000\000\r\194\000\000\000\000\000\000\000\000\000~\000\000\r\214\000\000\000\000\n\169\r\230\000\000\000\000\000\000\000\000\002\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\230\014Z\000\000\000\000\000\000\015\234\028\002\000\000\000\000\000\000\002B\000\000\002F\000\000\000\000\001\190\017\150\015\242\000\000\000\000\000\000\014r\002N\015\246\000\000\000\000\014v\007\006\014z\002Z\000\000\000\000\000\000\014~\014\130\012\186\012\190\014\134\015\250\000\000\000\000\000\000\000\000\015\254\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\026\014\138\000\000\000\000\016\002\016\006\014\142\016\n\000\000\000\n\000\000\016\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016*\014\150\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\230\000\000\000\000\000\000\000\000\016\234\0176\000\000\012\194\000\000\000\000\014\154\014\158\000\000\017:\000\000\000\000\000\000\014\166\000\000\000\000\000\000\000\000\000\000\000\000\017B\000\000\002\150\000\000\000\000\016e\016e\000\000\014\170\002\162\000\000\016e\000R\000V\000Z\000\146\n\186\000\150\0112\000\154\000\158\000\162\000^\0116\000\170\000\174\000\000\000v\011:\000\182\011>\011\178\000\186\001\146\001\150\001\178\000z\011B\000\000\000\000\000\000\000\000\000\000\000\000\012\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\158\000\000\001\182\000\000\000\000\000\000\002\014\000\000\r\186\012\166\000\000\r\190\000\000\000\000\r\194\000\000\000\000\000\000\000\000\000~\000\000\r\214\000\000\000\000\n\169\r\230\000\000\000\000\000\000\000\000\002\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\230\014Z\000\000\000\000\000\000\015\234\028\002\000\000\000\000\000\000\002B\000\000\002F\000\000\000\000\001\190\017\150\015\242\000\000\000\000\000\000\014r\002N\015\246\000\000\000\000\014v\007\006\014z\002Z\000\000\000\000\000\000\014~\014\130\012\186\012\190\014\134\015\250\000\000\000\000\000\000\000\000\015\254\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\026\014\138\000\000\000\000\016\002\016\006\014\142\016\n\000\000\000\n\000\000\016\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016*\014\150\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\230\000\000\000\000\000\000\000\000\016\234\0176\000\000\012\194\000\000\000\000\014\154\014\158\000\000\017:\000\000\000\000\000\000\014\166\000\000\000\000\000\000\000\000\000\000\000\000\017B\000\000\002\150\000\000\000\000\016a\016a\000\000\014\170\002\162\000\000\016a\000R\000V\000Z\000\146\n\186\000\150\0112\000\154\000\158\000\162\000^\0116\000\170\000\174\000\000\000v\011:\000\182\011>\011\178\000\186\001\146\001\150\001\178\000z\011B\000\000\000\000\000\000\000\000\000\000\000\000\012\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\158\000\000\001\182\000\000\000\000\000\000\002\014\000\000\r\186\012\166\000\000\r\190\000\000\000\000\r\194\000\000\000\000\000\000\000\000\000~\000\000\r\214\000\000\000\000\n\169\r\230\000\000\000\000\000\000\000\000\002\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\230\014Z\000\000\000\000\000\000\015\234\019\214\000\000\000\000\000\000\002B\000\000\002F\005\021\000\000\001\190\017\150\015\242\000\000\000\000\000\000\014r\002N\015\246\000\000\000\000\014v\007\006\014z\002Z\000\000\000\000\000\000\014~\014\130\012\186\012\190\014\134\015\250\000\000\000\000\000\000\000\000\015\254\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\026\014\138\000\000\000\000\016\002\016\006\014\142\016\n\000\000\000\n\000\000\016\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016*\014\150\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\230\000\000\000\000\000\000\000\000\016\234\0176\000\000\012\194\000\000\000\000\014\154\014\158\000\000\017:\000\000\000\000\000\000\014\166\000\000\005\021\000\000\000\000\000\000\000\000\017B\000\000\002\150\000\000\000\000\000\000\000\000\000\000\014\170\002\162\000R\000V\000Z\000\146\n\186\000\150\0112\000\154\000\158\000\162\000^\0116\000\170\000\174\000\000\000v\011:\000\182\011>\011\178\000\186\001\146\001\150\001\178\000z\011B\000\000\000\000\000\000\000\000\000\000\000\000\012\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\158\000\000\001\182\000\000\000\000\000\000\002\014\000\000\r\186\012\166\000\000\r\190\000\000\000\000\r\194\000\000\000\000\000\000\000\000\000~\000\000\r\214\000\000\000\000\n\169\r\230\000\000\000\000\000\000\000\000\002\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\230\014Z\000\000\000\000\000\000\015\234\020\n\000\000\000\000\000\000\002B\000\000\002F\000\000\000\000\001\190\017\150\015\242\000\000\000\000\000\000\014r\002N\015\246\000\000\000\000\014v\007\006\014z\002Z\000\000\000\000\000\000\014~\014\130\012\186\012\190\014\134\015\250\000\000\000\000\000\000\000\000\015\254\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\026\014\138\000\000\000\000\016\002\016\006\014\142\016\n\000\000\000\n\000\000\016\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016*\014\150\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\230\000\000\000\000\000\000\000\000\016\234\0176\000\000\012\194\000\000\000\000\014\154\014\158\000\000\017:\000\000\000\000\000\000\014\166\000\000\000\000\000\000\000\000\000\000\000\000\017B\000\000\002\150\000\000\000\000\000\000\000\000\000\000\014\170\002\162\000R\000V\000Z\000\146\n\186\000\150\0112\000\154\000\158\000\162\000^\0116\000\170\000\174\000\000\000v\011:\000\182\011>\011\178\000\186\001\146\001\150\001\178\000z\011B\000\000\000\000\000\000\000\000\000\000\000\000\012\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\158\000\000\001\182\000\000\000\000\000\000\002\014\000\000\r\186\012\166\000\000\r\190\000\000\000\000\r\194\000\000\000\000\000\000\000\000\000~\000\000\r\214\000\000\000\000\n\169\r\230\000\000\000\190\000\000\000\000\002\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\158\014Z\000\000\000\000\018\014\015\234\000\000\000\000\000\000\000\000\002B\000\000\002F\000\000\000\000\001\190\000\000\015\242\000\000\000\198\018\018\014r\002N\015\246\000\000\000\000\014v\007\006\014z\002Z\000\000\000\000\004J\014~\014\130\012\186\012\190\014\134\015\250\000\000\000\000\011N\000\000\015\254\000\000\000\000\000\202\000\000\011R\000\000\000\000\000\000\000\000\000\000\007\026\014\138\000\000\000\206\016\002\016\006\014\142\016\n\000\000\000\n\000\000\016\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016*\014\150\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\000\000\000\016\230\000\000\000\000\000\000\000\000\016\234\0176\000\000\012\194\000\000\000\000\014\154\014\158\000\000\017:\000\000\000\000\000\000\014\166\000\000\000\000\000\000\000\000\000\000\000\000\017B\000\000\002\150\000\000\000\000\000\000\000\000\000\000\014\170\002\162\000R\000V\000Z\000\146\006\193\000\150\0112\000\154\000\158\000\162\000^\0116\000\170\000\174\000\000\000v\011:\000\182\011>\000\000\000\186\001\146\001\150\001\178\000z\011B\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\182\000\000\000\000\000\000\002\014\000\000\r\186\000\000\000\000\002\018\000\000\000\000\002\022\000\000\0112\000\000\000\000\000~\000\000\0116\000\000\000\000\n\161\000\000\027\194\000\000\011>\000\000\002\030\000\000\000\000\002\"\000\000\011B\027\198\000\000\000\000\0026\0022\000\000\002:\000\000\000\000\000\000\000\000\000\000\000\000\002B\000\000\002F\000\000\000\000\001\190\016\193\000\000\000\000\000\190\000\000\002J\002N\000\000\000\000\000\000\002R\001\"\002V\002Z\000\000\000\000\000\000\002^\002b\012\186\0162\002f\002j\000\000\000\000\000\000\000\000\000\000\016\193\016\193\000\000\000\000\000\000\000\000\000\198\r\022\000\000\000\000\000\000\002n\000\000\000\000\000\000\016\193\002r\000\000\000\000\000\n\000\000\016\193\016\193\000\000\000\000\000\000\000\000\000\000\011N\004\190\002z\016\193\000\000\000\202\016\193\011R\016\193\000\000\000\000\000\000\000\000\002~\000\000\000\000\000\206\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\194\000\000\000\000\002\130\002\134\000\000\000\000\000\000\000\000\000\000\002\146\000\000\016\193\000\000\000\000\000\000\000\000\000\n\000\000\002\150\000\000\000\000\000\000\004\245\000\000\002\154\002\162\000R\000V\000Z\000\146\000\000\000\150\0112\000\154\000\158\000\162\000^\0116\000\170\000\174\000\000\000v\011:\000\182\011>\000\000\000\186\001\146\001\150\001\178\000z\011B\000\000\016\193\000\000\000\000\000\000\000\000\000\000\000\000\016\193\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\182\000\000\000\000\000\000\002\014\000\000\r\186\000\000\016\193\r\190\000\000\000\000\r\194\000\000\000\000\016\193\000\000\000~\000\000\020\138\000\000\000\000\n\169\000\000\016\193\016\193\000\000\000\000\002\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\154\014Z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002B\000\000\002F\000\000\000\000\001\190\000\000\000\000\000\000\000\000\000\000\014r\002N\000\000\000\000\000\000\014v\001\"\014z\002Z\000\000\000\000\000\000\014~\014\130\012\186\0162\014\134\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0112\000\000\000\000\000\000\000\000\0116\000\000\000\000\007\026\014\138\027\194\000\000\011>\000\000\014\142\000\000\000\000\000\n\000\000\011B\027\198\000\000\000\000\000\000\014\221\000\000\000\000\000\000\014\150\014\221\000\000\000j\014\221\000rn\000\000\014\221\014\221\000\000\014\221\004\245\000\000\000\000\000\000\000\000\000\000\007\230\007\238\014\221\000\000\000\000\000\000\014\221\000\000\000\000\000\000\000\000\014\221\014\221\014\221\000\000\007\246\014\221\014\221\014\221\014\221\000\000\007\254\b\006\000\000\000\000\000\000\000\000\014\221\000\000\000\000\014\221\b\014\000\000\000\000\b\022\000\000\b\030\000\000\000\000\000\000\000\000\000\000\000\000\b}\b}\000\000\014\221\000\000\000\000\b}\000\000\000\000\014\221\014\221\014\221\000\000\000\000\014\221\014\221\000\000\000\000\014\221\000\000\000\000\b&\000\000\000\000\014\221\014\221\000R\000V\000Z\000\146\014\221\000\150\000\000\000\154\000\158\000\162\000^\000\000\000\170\000\174\000\000\000v\000\000\000\182\000\000\000\000\000\186\001\146\001\150\001\178\000z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b.\000\000\000\000\000\000\000\000\001\182\000\000\b6\000\000\002\014\000\000\000\190\000\000\000\000\002&\000\000\000\000\002*\000\000\000\000\000\000\000\000\000~\005\209\000\000\000\000\000\000\000\000\000\000\000\000\005\209\000\000\000\000\002\030\000\000\000\000\002\"\000\000\000\000\b>\bF\000\000\002\198\004\138\000\000\002:\000\000\000\000\005B\000\000\000\000\000\000\002B\000\000\002F\000\000\000\000\001\190\000\000\000\000\000\000\000\000\000\000\004\198\002N\000\000\000\000\000\000\004\202\001\"\004\206\002Z\000\000\000\000\005F\004\210\004\214\000\000\000\000\004\218\002j\000\000\000\000\000\000\000\000\000\000\000R\000V\000Z\000\146\000\000\000\150\000\000\000\154\000\158\000\162\000^\004\222\000\170\000\174\000\000\000v\004\226\000\182\000\000\000\n\000\186\001\146\001\150\001\178\000z\000\000\000\000\000\000\000\000\000\000\005\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005J\001\182\000\000\000\000\000\000\002\014\000\000\000\190\000\000\000\000\002&\000\000\000\000\002*\005\014\005\018\000\000\000\000\000~\000\000\000\000\005\026\000\000\000\000\004)\000\000\000\000\000\000\000\000\002\030\002\150\000\000\002\"\000\000\000\000\000\000\005\030\002\162\002\198\004\138\000\000\002:\000\000\000\000\005B\000\000\000\000\000\000\002B\000\000\002F\000\000\000\000\001\190\000\000\000\000\000\000\000\000\000\000\004\198\002N\000\000\000\000\000\000\004\202\001\"\004\206\002Z\000\000\000\000\005F\004\210\004\214\000\000\000\000\004\218\002j\000\000\000\000\000\000\000\000\000\000\000R\000V\000Z\000\146\000\000\000\150\000\000\000\154\000\158\000\162\000^\004\222\000\170\000\174\000\000\000v\004\226\000\182\000\000\000\n\000\186\001\146\001\150\001\178\000z\000\000\000\000\000\000\000\000\000\000\005\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005J\001\182\000\000\000\000\000\000\002\014\000\000\000\190\000\000\000\000\002&\000\000\000\000\002*\005\014\005\018\000\000\000\000\000~\000\000\000\000\005\026\000\000\000\000\tu\000\000\000\000\000\000\000\000\002\030\002\150\000\000\002\"\000\000\000\000\000\000\005\030\002\162\002\198\004\138\000\000\002:\000\000\000\000\005B\000\000\000\000\000\000\002B\000\000\002F\000\000\000\000\001\190\000\000\000\000\000\000\000\000\000\000\004\198\002N\000\000\000\000\000\000\004\202\001\"\004\206\002Z\000\000\000\000\005F\004\210\004\214\000\000\000\000\004\218\002j\000\000\000\000\000\000\000\000\000\000\000\000\000V\004V\000\146\000\000\000\150\000\000\000\154\000\158\004Z\000^\004\222\000\170\000\174\000\000\000v\004\226\000\182\000\000\000\n\000\186\001\146\001\150\000\000\000z\000\000\014\201\000\000\000\000\000\000\005\n\014\201\000\000\000\000\014\201\000b\014\201\000\000\014\201\000\000\000\000\005J\001\182\000\000\000\000\014\201\014\201\000\000\014\201\000\000\000\000\000\000\000\000\000\000\000\000\005\014\005\018\000\000\000\000\000~n\014\229\000nt9\000\000\014\229\000\000\000\000\t9\000\000\000\000\t9\000\000\t9\000\000\t9\000\000\000\000\000\000\000\000\000\000\014\229\t9\t9\000\000\t9\000\000\014\229\014\229\014\229\000\000\000\000\014\229\014\229\000\000\000\000\014\229\000\000\t9\000\000\t9\000\000\014\229\014\229\t9\t9\000\000\000\000\014\229\000\000\t9\000\000\000\000\000\000\000\000\000\000\t9\t9\000\000\t9\000\000\t9\000\000\t9\000\000\000\000\000\000\000\000\000\000\t9\000\000\000\000\000\000\000\000\000\000\000\000\t9\t9\000\000\000\000\t9\001\134\000\000\000\000\000\000\t9\t9\000\000\000\000\t9\000\000\t9\000\000\000\000\000\000\000\000\000\000\000\000\t9\000\000\000\000\000\000\000\000\t9\000\000\t9\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t9\000\000\000\000\t9\t9\000\000\t9\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t9\000\000\000\000\000\000\t9\000\000\000\000\000\000\000\000\t9\t9\t9\000\000\000\000\t9\t9\t9\t9\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t9\014\213\000\000\t9\000\000\000\000\014\213\000\000\000\000\014\213\000\000\014\213\000\000\014\213\000\000\000\000\000\000\000\000\000\000\t9\014\213\014\213\000\000\014\213\000\000\t9\t9\t9\000\000\000\000\t9\t9\000\000\000\000\t9\000\000\014\213\000\000\014\213\000\000\t9\t9\014\213\014\213\000\000\000\000\tv\000\000\000\182\000\000\000\000\000\186\001\146\001\150\001\178\000z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\182\000\000\000\000\000\000\002\014\000\000\000\190\000\000\000\000\002&\000\000\000\000\002*\000\000\0112\000\000\000\000\000~\000\000\0116\000\000\000\000\000\000\000\000\027\194\000\000\011>\000\000\002\030\000\000\000\000\002\"\000\000\011B\027\198\000\000\000\000\002\198\004\138\000\000\002:\000\000\000\000\005R\000\000\000\000\000\000\002B\000\000\002F\000\000\000\000\001\190\000\000\000\000\000\000\000\190\000\000\004\198\002N\000\000\000\000\000\000\004\202\001\"\004\206\002Z\000\000\000\000\005F\004\210\004\214\018\014\000\000\004\218\002j\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\198\018\018\000\000\000\000\000\000\004\222\000\000\000\000\000\000\000\000\004\226\000\000\000\000\000\n\000\000\000\000\000\000\000\000\000\000\000\000\tE\000\000\011N\000\000\005\n\tE\000\000\000\202\tE\011R\tE\000\000\tE\000\000\000\000\000\000\000\000\000\000\000\206\tE\tE\000\000\tE\000\000\000\000\000\000\000\000\000\000\000\000\005\014\005\018\000\000\000\000\000\000\000\000\tE\005\026\tE\000\000\t\133\000\000\tE\tE\000\n\000\000\002\150\000\000\tE\000\000\004\245\000\000\005\030\002\162\tE\tE\000\000\tE\000\000\tE\000\000\tE\000\000\000\000\000\000\000\000\000\000\tE\000\000\000\000\000\000\000\000\000\000\000\000\tE\tE\000\000\000\000\tE\nV\000\000\000\000\000\000\tE\tE\000\000\000\000\tE\000\000\tE\000\000\000\000\000\000\000\000\000\000\000\000\tE\000\253\000\000\011\029\011\029\tE\000\000\tE\000\000\011\029\000\000\000\000\000\000\000\000\000\000\000\000\tE\000\000\000\000\tE\tE\000\000\tE\000\000\000\000\000\000\000\000\000\000\000\000\003\006\003.\tE\000\000\000\000\000\000\tE\000\000\000\000\000\000\000\000\tE\tE\tE\000\000\003\014\tE\tE\tE\tE\000\000\000\253\000\253\000\000\000\000\000\000\000\000\tE\000\000\000\000\tE\0036\000\000\000\000\003\022\000\000\003&\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\tE\000\000\000\000\000\000\000\000\000\000\tE\tE\tE\000\000\000\000\tE\tE\000\000\000\000\tE\000\000\000\000\003>\000\000\000\000\tE\tE\000R\000V\000Z\000\146\tE\000\150\000\000\000\154\000\158\000\162\000^\000\000\000\170\000\174\000\000\000v\000\000\000\182\000\000\000\000\000\186\001\146\001\150\001\178\000z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003F\000\000\000\000\000\000\000\000\001\182\000\000\003\030\000\000\002\014\000\000\000\190\000\000\000\000\002\018\000\000\000\000\002\022\000\000\000\000\000\000\000\000\000~\000\253\000\000\000\000\000\000\000\000\000\000\000\000\000\253\000\000\000\000\002\030\000\000\000\000\002\"\000\000\000\000\000\253\003N\000\000\0026\0022\000\000\002:\000\000\000\000\000\000\000\000\000\000\000\000\002B\000\000\002F\000\000\000\000\001\190\000\000\000\000\000\000\000\000\000\000\002J\002N\000\000\000\000\000\000\002R\001\"\002V\002Z\000\000\000\000\000\000\002^\002b\000\000\000\000\002f\002j\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002n\000\000\000\000\000\000\000\000\002r\000\000\000\000\000\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002~r\190\000\000\023\006\r\194\001\197\000\000\000\000\000\000\000\000\000\000\r\214\000\000\000\000\n\169\r\230\000\000\000\000\000\000\000\000\002\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\026\014Z\000\000\000\000\000\000\015\234\000\000\000\000\000\000\000\000\002B\000\000\002F\000\000\000\000\000\000\000\000\015\242\000\000\000\000\000\000\014r\002N\015\246\000\000\000\000\014v\007\006\014z\002Z\000\000\000\000\000\000\014~\014\130\000\000\000\000\014\134\015\250\000\000\000\000\000\000\000\000\015\254\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\026\014\138\000\000\000\000\016\002\016\006\014\142\016\n\000\000\000\n\000\000\016\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016*\014\150\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\178\000\000\000\000\000\000\000\000\000\000\016\230\000\000\000\000\000\000\000\000\016\234\0176\012\142\000\000\000\000\000\000\014\154\014\158\000\000\017:\012\158\000\000\000\000\014\166\000\000\000\000\002\014\000\000\000\190\012\166\017B\r\190\002\150\000\000\r\194\000\000\000\000\000\000\014\170\002\162\000\000\r\214\000\000\000\000\n\169\r\230\000\000\000\000\000\000\000\000\002\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014n\014Z\000\000\000\000\000\000\015\234\000\000\000\000\000\000\000\000\002B\000\000\002F\000\000\000\000\000\000\000\000\015\242\000\000\000\000\000\000\014r\002N\015\246\000\000\000\000\014v\007\006\014z\002Z\000\000\000\000\000\000\014~\014\130\000\000\000\000\014\134\015\250\000\000\000\000\000\000\000\000\015\254\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\026\014\138\000\000\000\000\016\002\016\006\014\142\016\n\000\000\000\nv\000\000\000\182\000\000\000\000\000\186\001\146\001\150\001\178\000z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\182\000\000\000\000\000\000\002\014\000\000\000\190\000\000\000\000\r\190\000\000\000\000\r\194\000\000\000\000\000\000\000\000\000~\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\158\014Z\000\000\002)\000\000\000\000\002)\000\000\000\000\000\000\002B\000\000\002F\000\000\000\000\001\190\000\000\000\000\000\000\000\000\000\000\014r\002N\000\000\000\000\000\000\014v\001\"\014z\002Z\000\000\002)\002)\014~\014\130\000\000\002)\014\134\000\000\000\000\002)\000\000\000\000\000\000\000\000\000\000\002)\000\000\000\000\002)\002)\000\000\002)\002)\007\026\014\138\000\000\000\000\002)\000\000\014\142\000\000\002)\000\n\000\000\002)\000\000\002)\002)\000\000\000R\000V\004V\000\146\014\150\000\150\000\000\000\154\000\158\004Z\000^\000\000\000\170\000\174\022:\000v\000\000\000\182\000\000\000\000\000\186\001\146\001\150\001\178\000z\002)\000\000\002)\022>\014\154\014\158\000\000\000\000\000\000\000\000\000\000\014\166\000\000\002)\000\000\000\000\022B\001\182\022F\000\000\002\150\000\000\022J\000\000\000\000\000\000\014\170\002\162\022N\000\000\000\000\000\000\000\000\000\000\025J\000\000\000\000\022Z\000\000\000\000\000\000\022^\002)\015\002\000\000\002)\000\000\022b\000\000\002)\000\000\000\000\000\000\000\000\n\190\000\000\000\000\000\000\000\000\024Z\000\000\000\000\000\000\022f\025V\002)\000\000\000\000\002)\001\190\002)\000\000\000\000\000\000\000\000\000\000\000\000\015\n\002)\002)\000\000\002)\002)\000\000\002)\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\234\000\000\000\000\022j\000\000\000\000\022n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022r\000\000\000\000\000\000\000\000\022v\000\n\022z\000\000\000\000\022~r\145\000\000\000\000\000\000\000\000\000\000\000\000\017E\017E\000\000\000\000\000\000\017E\000\000\000\000\017E\017E\000\000\000\000\000\000\000\000\012\249\017E\002!\012\249\017E\017E\012\249\017E\017E\000\000\r\145\017E\000\000\017E\017E\000\000\000\000\017E\000\000\012\249\017E\000\000\017E\017E\012\249\000\000\012\249\000\000\012\249\000\000\012\249\000\000\000\000\023r\000\000\000\000\000\000\r\145\012\249\000\000\012\249\000\000\000\000\012\249\002!\005Z\000\000\002!\r\145\000\000\017E\002!\017E\000\000\000\000\000\000\000\000\000\000\000\000\012\249\012\249\000\000\000\000\017E\000\000\023\242\012\249\002!\000\000\000\000\017E\002!\002!\r\145\000\000\000\000\000\000\000\000\012\249\005b\000\000\000\000\000\000\002!\002!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017E\017E\000\000\017E\017E\017E\000\000\017E\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005e\017E\000\000\005e\000\000\000\000\017E\000\000\000\000\017E\000\000\017E\000\000\000\000\000\000\000\000\000\000\000\000\017E\017E\017E\r\141\017E\017E\000\000\017E\000\000\000\000\005e\005e\000\000\000\000\000\000\005e\000\000\000\000\005e\005e\000\000\000\000\000\000\000\000\000\000\005e\000\000\000\000\005e\005e\000\000\005e\005e\000\000\r\141\005e\000\000\005e\005e\000\000\000\000\005e\000\000\000\000\005e\000\000\005e\005e\000V\004V\000\146\000\000\000\150\000\000\000\154\000\158\004Z\000^\000\000\000\170\000\174\r\141\000v\000\000\000\182\000\000\000\000\000\186\001\146\001\150\000\000\000z\r\141\000\000\005e\000\000\005e\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005e\000\000\001\182\000\000\000\000\000\000\000\000\005e\001\198\000\000\r\141\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000~\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005e\005e\000\000\005e\b!\005e\000\000\005e\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005e\000\000\000\000\000\000\000\000\005e\000\000\001\190\005e\000\000\005e\000\000\005e\000\000\000\000\000\000\000\000\005e\005e\005e\000\000\005e\005e\000\000\005e\012\233\012\233\012\233\012\233\000\000\012\233\000\000\012\233\012\233\012\233\012\233\000\000\012\233\012\233\000\000\012\233\000\000\012\233\000\000\000\000\012\233\012\233\012\233\012\233\012\233\000\000\000\000\000\000\000\000\000\000\000\nv\012\237\000\182\000\000\000\000\000\186\001\146\001\150\001\178\000z\000\000\000\000\016\149\000\000\000\000\016\149\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\254\001\182\024\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\022\000\000\016\149\016\149\000\000\000\000\000~\016\149\000\000\000\000\002\186\016\149\000\000\000\000\000\000\000\000\000\000\016\149\000\000\024.\016\149\016\149\000\000\016\149\016\149\000\000\n\190\002\194\000\000\016\149\004\238\024Z\000\000\016\149\000\000\000\000\016\149\000\000\016\149\016\149\024z\001\190\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\234\000\000\016\149\024\134\016\149\000\000\024\206\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\149\000\000\000\000\000\000\024\230\000\000\000\000\004\250\000\000\025\018\000\000\nn\002Z\000\000\000\000\000\000\007\014\007\018\000\000\000\000\007\022\000\206\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\026\007\030\000\000\000\000\000\000\000\000\007\"\000\000\000\000\000\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\014\000\000\000\190\007*\000\000\004\162\000\000\000\000\004\166\000\000\000\000\000\000\006\129\000\000\007.\000\000\007>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\030\000\000\000\000\004\194\007F\007J\000\000\000\000\000\000\006\166\006\178\007R\006\202\006\214\006\238\006\242\000\000\0049\000\000\002B\002\150\002F\000\000\000\000\000\000\000\000\007V\002\162\000\000\000\000\006\246\002N\000\000\006\250\006\254\007\002\007\006\007\n\002Z\000\000\000\000\000\000\007\014\007\018\000\000\000\000\007\022\000\206\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\026\007\030\000\000\000\000\000\000\000\000\007\"\000\000\000\000\000\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\014\000\000\000\190\007*\000\000\004\162\000\000\000\000\004\166\000\000\000\000\000\000\006\129\000\000\007.\000\000\007>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\030\000\000\000\000\004\194\007F\007J\000\000\000\000\000\000\006\166\006\178\007R\006\202\006\214\006\238\006\242\000\000\t\201\000\000\002B\002\150\002F\000\000\000\000\000\000\000\000\007V\002\162\000\000\000\000\006\246\002N\000\000\006\250\006\254\007\002\007\006\007\n\002Z\000\000\000\000\000\000\007\014\007\018\000\000\000\000\007\022\000\206\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\026\007\030\000\000\000\000\000\000\000\000\007\"\005m\000\000\000\n\005m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007*\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\129\000\000\007.\000\000\007>\000\000\005m\005m\000\000\000\000\000\000\005m\000\000\000\000\005m\005m\007F\007J\000\000\000\000\000\000\005m\000\000\007R\005m\005m\000\000\005m\005m\002\197\000\000\005m\002\150\005m\005m\000\000\000\000\005m\007V\002\162\005m\000\000\005m\005m\000\000\005i\000\000\000\000\005i\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005m\000\000\005m\005i\005i\000\000\000\000\000\000\005i\000\000\000\000\005i\005i\005m\000\000\000\000\000\000\000\000\005i\000\000\005m\005i\005i\000\000\005i\005i\000\000\000\000\005i\000\000\005i\005i\000\000\000\000\005i\000\000\000\000\005i\000\000\005i\005i\000\000\005m\005m\000\000\005m\b-\005m\000\000\005m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005m\000\000\000\000\000\000\000\000\005m\000\000\005i\005m\005i\005m\000\000\005m\000\000\000\000\000\000\000\000\005m\005m\005m\005i\005m\005m\000\000\005m\000\000\000\000\005i\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005i\005i\000\000\005i\b%\005i\000\000\005i\000\000\000\000\000\000\000\000\000\000\000\000\002\014\000\000\000\190\000\000\005i\004\162\000\000\000\000\004\166\005i\000\000\000\000\005i\000\000\005i\000\000\005i\000\000\000\000\000\000\000\000\005i\005i\005i\002\030\005i\005i\004\194\005i\000\000\000\000\000\000\000\000\006\166\006\178\000\000\006\202\006\214\006\238\bn\000\000\000\000\000\000\002B\000\000\002F\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\246\002N\000\000\006\250\006\254\007\002\007\006\007\n\002Z\000\000\000\000\000\000\007\014\007\018\000\000\000\000\007\022\000\206\016\221\000\000\000\000\016\221\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\026\007\030\000\000\000\000\000\000\000\000\007\"\000\000\000\000\000\n\000\000\000\000\000\000\016\221\016\221\000\000\000\000\000\000\016\221\000\000\007*\014\194\016\221\000\000\000\000\000\000\000\000\000\000\016\221\006\129\000\000\016\221\016\221\007>\016\221\016\221\000\000\000\000\014\202\000\000\016\221\014\214\000\000\000\000\016\221\007F\007J\016\221\000\000\016\221\016\221\000\000\007R\000\000\000\000\000\000\000\000\000\000\t\217\000\000\000\000\002\150\000\000\000\000\000\000\000\000\000\000\007V\002\162\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\221\000\000\016\221\000\000\000\000\000\000\000\000\017\t\000\000\000\000\017\t\000\000\000\000\016\221\000\000\000\000\000\000\000\000\000\000\000\000\014\226\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\t\017\t\000\000\000\000\000\000\017\t\000\000\016\221\016\221\017\t\016\221\000\000\014\230\000\000\016\221\017\t\000\000\000\000\017\t\017\t\000\000\017\t\017\t\000\000\000\000\014\238\000\000\017\t\000\000\004\190\016\221\017\t\000\000\016\221\017\t\016\221\017\t\017\t\000\000\000\000\000\000\000\000\016\221\016\221\016\221\000\000\016\221\016\221\000\000\016\221\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\t\000\000\017\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\t\000R\000V\000Z\000\146\n\186\000\150\0112\000\154\000\158\000\162\000^\0116\000\170\000\174\000\000\000v\011:\000\182\011>\000\000\000\186\001\146\001\150\001\178\000z\011B\000\000\000\000\017\t\017\t\000\000\017\t\017\t\000\000\000\000\017\t\000\000\000\000\000\000\000\000\000\000\000\000\001\182\016\169\000\000\000\000\016\169\000\000\001\198\000\000\000\000\017\t\000\000\000\000\017\t\017\t\017\t\017\t\017\t\000~\000\000\000\000\000\000\017\t\017\t\017\t\000\000\017\t\017\t\000\000\017\t\016\169\016\169\000\000\000\000\000\000\016\169\000\000\000\000\001\186\016\169\000\000\000\000\000\000\000\000\000\000\016\169\000\000\000\000\016\169\016\169\000\000\016\169\016\169\001\190\000\000\000\000\000\000\016\169\000\000\004\190\000\000\016\169\002\017\000\000\016\169\002\017\016\169\016\169\000\000\000\000\000\000\000\000\000\000\012\186\012\190\000\000\n\194\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\017\002\017\000\000\000\000\016\169\002\017\016\169\000\000\000\000\002\017\000\000\000\n\000\000\000\000\000\000\002\017\000\000\016\169\002\017\002\017\000\000\002\017\002\017\000\000\000\000\000\000\000\000\002\017\000\000\000\000\000\000\002\017\000\000\000\000\002\017\000\000\002\017\002\017\000\000\000\000\000\000\000\000\000\000\006y\012\194\000\000\016\169\016\169\000\000\016\169\016\169\000\000\000\000\016\169\000\000\006y\000\000\000\000\000\000\000\000\006yb\138\002R\001\"\002V\002Z\000\000\000\000\000\000\002^\002b\000\000\000\000\002f\002j\002\249\000\000\000\000\000\000\000^\002\249\000\000\000f\000\000\000v\002\249\000\000\002\249\000\000\000\000\000\000\002n\000\000\000z\002\249\002\249\002r\000\000\000\000\000\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002z\000\000\000\000\000\000\000\000\000\000\000\000\002\249\000\000\000\000\000\000\002~\n\161\000\000\000\000\000\000\000\000\000\000\000~\002\249\000\000\000\000\000\000\002\249\000\000\002\130\002\134\000\000\000\000\000\000\000\000\000\000\002\146\000\000\000\000\n\161\000\000\n\161\002\249\002\249\000\000\002\150\000\000\000\000\000\000\000\000\000\000\002\154\002\162\000\000\000\000\002\249\000\000\000\138\000\000\000\000\000\000\000\000\000\000\000\000\002\249\000\000\000\000\000\000\000\000\002\249\000\000\002\249\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\249\000\000\002\245\000\000\002\249\000\000\000^\002\245\000\000\000f\000\000\000v\002\245\000\000\002\245\002\249\000\000\000\000\000\000\000\000\000z\002\245\002\245\000\000\000\000\002\249\000\000\000\000\000\000\000\000\000\000\002\249\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\245\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000~q\000\000\000\000\000\000\002q\000\000\000\000\000\000\000\000\002\245\003\150\000\000\000\000\002q\002q\002\245\003\158\003\190\000\000\000\000\000\000\000\000\002q\000\000\000\000\000\000\003\198\000\000\000\000\003\206\000\000\003\214\002q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\245\000\000\000\000\002\245\002\245\000\000\000\000\002\245\003\222\000\000\002q\000\000\000\000\002\245\002\245\000\000\000\000\000\000\000\000\002\245\000\000\002q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\230\000\000\000\000\002q\002q\000\000\000\000\003\238\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\193\000\000\000\000\000\193\000\000\000\000\000\000\000\000\002q\000\000\000\000\002q\002q\002q\002q\000\000\000\000\000\000\000\000\000\000\000\000\002q\002q\000\000\003\246\003\254\000\000\002qb\000\000\000\000\002f\002j\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002n\000\000\000\000\000\000\000\000\002r\016\241\000\000\000\n\016\241\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002~r\218\000\000\000\000\016\241\016\241\016\241\002\030\016\241\016\241\002\"\016\241\000\000\000\000\005\186\000\000\002.\0022\002y\002:\005\194\005\202\000\000\000\000\000\000\000\000\002B\000\000\002F\000\000\005\210\000\000\000\000\005\218\000\000\005\226\000\000\002J\002N\000\000\000\000\000\000\002R\001\"\002V\002Z\000\000\000\000\000\000\002^\002b\000\000\000\000\002f\002j\000\000\000\000\000\000\000\000\002\014\000\000\000\190\000\000\005\234\002\018\000\000\000\000\002\022\000\000\000\000\000\000\002n\000\000\000\000\000\000\000\000\002r\n\161\000\000\000\n\000\000\000\000\000\000\002\030\000\000\000\000\002\"\000\000\000\000\000\000\002z\000\000\002.\0022\000\000\002:\000\000\000\000\000\000\000\000\000\000\002~\002B\000\000\002F\005\242\000\000\000\000\002y\000\000\000\000\000\000\005\250\002J\002N\002\130\002\134\000\000\002R\001\"\002V\002Z\002\146\000\000\000\000\002^\002b\000\000\002y\002f\002j\002\150\002y\002y\000\000\000\000\000\000\002\154\002\162\000\000\000\000\000\000\000\000\000\000\006\002\006\n\000\000\002n\000\000\000\000\000\000\000\000\002r\000\000\000\000\000\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\014\000\000\000\190\002z\000\000\002\018\000\000\000\000\002\022\000\000\000\000\000\000\000\000\000\000\002~\000\000\000\000\000\000\020\142\000\000\000\000\000\000\000\000\000\000\002\030\000\000\000\000\002\"\002\130\002\134\000\000\000\000\000\000\002.\0022\002\146\002:\000\000\000\000\000\000\000\000\000\000\000\000\002B\002\150\002F\000\000\000\000\000\000\000\000\002\154\002\162\000\000\000\000\002J\002N\000\000\000\000\000\000\002R\001\"\002V\002Z\000\000\000\000\000\000\002^\002b\000\000\000\000\002f\002j\014\217\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\217\000\000\002n\000\000\000\000\000\000\000\000\002r\000\000\000\000\000\n\000\000\000\000\014\217\000\000\014\217\012\253\012\253\000\000\014\217\000\000\002z\012\253\000\000\000\000\014\217\000\000\000\000\000\000\000\000\000\000\014\217\002~t6\000\000\002:\000\000\000\000\000\000\000\000\000\000\000\000\002B\014\217\002F\000\000\000\000\000\000\000\000\014\217\014\217\012\253\000\000\002J\002N\000\000\000\000\000\000\002R\001\"\002V\002Z\000\000\000\000\000\000\002^\002b\000\000\000\000\002f\002j\000\000\000\000\000\000\000\000\002\014\000\000\000\190\000\000\000\000\002\018\000\000\000\000\002\026\000\000\000\000\000\000\002n\000\000\000\000\000\000\000\000\002\138\000\000\000\000\000\n\000\000\000\000\000\000\002\030\000\000\000\000\002\"\000\000\000\000\000\000\002z\000\000\002.\t&\000\000\002:\000\000\000\000\000\000\000\000\000\000\002~\002B\000\000\002F\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002J\002N\002\130\002\142\000\000\002R\001\"\002V\002Z\002\146\000\000\000\000\002^\002b\000\000\000\000\002f\002j\002\150\000\000\000\000\000\000\000\000\000\000\002\154\002\162\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002n\000\000\000\000\000\000\000\000\002\138\000\000\000\000\000\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\014\000\000\000\190\002z\000\000\002\018\000\000\000\000\002\026\000\000\000\000\000\000\000\000\000\000\002~\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\030\000\000\000\000\002\"\002\130\002\142\000\000\000\000\000\000\002.\t\014\002\146\002:\000\000\000\000\000\000\000\000\000\000\000\000\002B\002\150\002F\000\000\000\000\000\000\000\000\002\154\002\162\000\000\000\000\002J\002N\000\000\000\000\000\000\002R\001\"\002V\002Z\000\000\000\000\000\000\002^\002b\000\000\000\000\002f\002j\000\000\000\000\000\000\000\000\002\014\000\000\000\190\000\000\000\000\002\018\000\000\000\000\002\026\000\000\000\000\000\000\002n\000\000\000\000\000\000\000\000\002\138\000\000\000\000\000\n\000\000\000\000\000\000\002\030\000\000\000\000\002\"\000\000\000\000\000\000\002z\000\000\002.\002v\000\000\002:\000\000\000\000\000\000\000\000\000\000\002~\002B\000\000\002F\000\000\000\000\000\000\000\000\000\000\000\000\000\229\000\000\002J\002N\002\130\002\142\000\000\002R\001\"\002V\002Z\002\146\000\000\000\000\002^\002b\000\000\000\000\002f\002j\002\150\000\000\000\000\000\000\000\000\000\000\002\154\002\162\000\229\000\229\000\000\000\000\000\000\000\000\000\000\000\000\002n\000\000\000\000\000\000\000\000\002\138\000\000\003\014\000\n\000\000\000\000\000\000\000\000\000\229\000\229\000\000\002\014\000\000\000\190\002z\000\000\002&\000\000\000\229\002*\000\000\003\022\000\000\003&\000\000\002~\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\030\000\000\000\000\002\"\002\130\002\142\000\000\000\000\000\000\002>\004\138\002\146\002:\000\000\004\158\000\000\000\229\000\000\000\000\002B\002\150\002F\000\000\000\000\000\000\000\000\002\154\002\162\000\000\000\000\004\198\002N\000\000\000\000\000\000\004\202\001\"\004\206\002Z\000\000\000\000\000\000\004\210\004\214\000\000\000\000\004\218\002j\000\000\000\000\000\000\002\014\000\000\000\190\000\000\000\000\002\018\000\000\000\229\002\026\000\000\000\000\000\000\000\000\004\222\003\030\000\000\000\000\000\000\004\226\000\000\000\000\000\n\000\000\000\000\002\030\000\000\000\000\002\"\000\000\000\000\000\229\000\000\005\n\002.\004\170\000\000\002:\000\229\000\000\000\000\000\000\000\000\000\000\002B\000\000\002F\000\229\000\229\000\000\000\000\000\000\000\000\000\000\000\000\002J\002N\000\000\005\014\005\018\002R\001\"\002V\002Z\000\000\005\026\006\130\002^\002b\000\000\000\000\002f\002j\000\000\002\150\000\000\000\000\004\001\000\000\004\001\005\030\002\162\004\001\000\000\000\000\004\001\000\000\000\000\000\000\002n\000\000\000\000\000\000\000\000\002\138\000\000\000\000\000\n\000\000\000\000\000\000\004\001\000\000\000\000\004\001\000\000\000\000\000\000\002z\000\000\004\001\004\001\000\000\004\001\000\000\000\000\000\000\000\000\000\000\002~r\198\000\000\002:\000\000\000\000\000\000\000\000\000\000\000\000\002B\000\000\002F\000\000\000\000\000\000\004y\000\000\000\000\004y\000\000\002J\002N\000\000\004\001\004\001\002R\001\"\002V\002Z\000\000\004\001\000\000\002^\002b\000\000\000\000\002f\002j\000\000\004\001\000\000\000\000\000\000\004y\004y\004\001\004\001\000\000\000\000\000\000\000\000\012:\004y\000\000\002n\000\000\000\000\000\000\004y\002\138\000\000\000\000\000\n\000\000\004y\004y\000\000\000\000\004y\000\000\000\000\004y\004y\002z\004y\000\000\000\000\004y\000\000\004y\000\000\000\000\000\000\000\000\002~\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\130\002\142\000\000\000\000\000\000\000\000\000\000\002\146\000\000\004y\000\000\000\000\000\000\000\000\000\000\000\000\002\150\000\000\000\000\000\000\000\000\000\000\002\154\002\162\000\000\000\000\000\000\000\000\000\000\000\000\004y\000\000\004y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004y\004y\004y\004y\004y\012B\000\000\004y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004y\000\000\004y\004y\000\000\000\000\004y\000\000\000\000\000\000\000\000\000\000\004y\004y\000R\000V\000Z\000\146\000\000\000\150\0112\000\154\000\158\000\162\000^\0116\000\170\000\174\000\000\000v\028V\000\182\011>\000\000\000\186\001\146\001\150\001\178\000z\011B\027\178\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\182\000\000\000\000\000\000\000\000\000\000\001\198\000\000\000\000\000\000\000\000\004\025\004\025\004\025\004\025\000\000\004\025\000~\004\025\004\025\004\025\004\025\000\000\004\025\004\025\000\000\004\025\000\000\004\025\000\000\000\000\004\025\004\025\004\025\004\025\004\025\000\000\001\186\000R\000\000\000\000\000\000\000\000\000\000\b\153\000\000\001\238\000\000\000\000\b\153\000\000\000\000\001\190\004\025\b\153\000\000\b\153\000\000\000\000\004\025\000\000\001\178\000\000\b\153\b\153\000\000\000\000\000\000\000\000\000\000\004\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\153\000\000\000\000\000\000\004\025\000\000\000\000\000\000\000\000\000\000\004\025\000\000\b\153\000\000\000\n\000\000\b\153\000\000\000\000\004\025\004\225\002\014\000\000\000\190\000\000\000\000\004\162\000\000\000\000\004\166\000\000\b\153\b\153\000\000\004\025\004\025\000\000\000\000\000\000\000\000\000\000\b\153\004\025\000\000\b\153\002\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\153\006\166\006\178\000\000\000\000\b\153\006\198\b\153\000\000\000\000\000\000\002B\000\000\002F\004\025\000\000\b\153\000\000\000\000\000\000\b\153\000\000\006\246\002N\000\000\000\000\000\000\007\002\001\"\007\n\002Z\b\153\000\000\000\000\007\014\007\018\000\000\000\000\007\022\000\000\000\000\b\153\000\000\000\000\000\000\000\000\000\000\b\153\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\026\007\030\000\000\000\000\000\000\000\000\007\"\000\000\004\025\000\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007*\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\153\000\000\000\000\b\153\b\153\000\000\000\000\b\153\000\000\000\000\000\000\000\000\000\000\b\153\b\153\000\000\000\000\007F\007J\b\153\000\000\000\000\000\000\000\000\007R\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\150\000\000\000\000\000\000\000\000\000\000\007V\002\162\000R\000V\000Z\000\146\000\000\000\150\000\000\000\154\000\158\000\162\000^\000\000\000\170\000\174\000\000\000v\000\000\000\182\000\000\000\000\000\186\001\146\001\150\001\178\000z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\182\000\000\000\000\000\000\000\000\000\000\001\198\000\000\000\000\000\000\000\000\000R\000V\000Z\000\146\000\000\000\150\000~\000\154\000\158\000\162\000^\000\000\000\170\000\174\000\000\000v\000\000\000\182\000\000\000\000\000\186\001\146\001\150\001\178\000z\000\000\001\202\000\000\000\000\000\000\000\000\000\000\001\230\000\000\000\000\000\000\000\000\000\000\006a\000\000\000\000\001\190\001\182\000\000\000\000\000\000\000\000\000\000\001\198\000\000\000\000\000\000\006a\000\000\000\000\000\000\001\206\001\210\000\000\000~\000\000\000\000\000\000\000\000\001\214\006a\000\000\006a\000\000\000\000\000\000\006a\006a\000\000\000\000\000\000\000\000\006a\000\000\001\202\000\000\000\000\000\000\006a\000\000\001\230\006a\000\000\000\000\000\n\006a\000\000\000\000\000\000\001\190\000\000\006a\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006a\000\000\001\206\001\210\001\234\006a\011\030\000\000\000\000\000\000\001\214\006a\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015m\000\000\000\000\006a\000\n\000\000\006a\000\000\000\000\006a\000\000\000\000\000\000\000\000\000\000\000\000\002\014\000\000\000\190\000\000\000\000\r\190\006a\000\000\r\194\000\000\001\234\006a\006a\006a\000\000\000\000\006a\006a\000\000\006a\000\000\000\000\000\000\000\000\002\030\000\000\000\000\006a\000\000\000\000\006a\000\000\000\000\014n\014Z\000\000\015.\002\233\015\194\0156\000\000\000\000\000\000\002B\000\000\002F\006a\000\000\000\000\000\000\000\000\000\000\006a\006a\014r\002N\000\000\000\000\000\000\014v\001\"\014z\002Z\000\000\015F\015N\014~\014\130\000\000\002\129\014\134\000\000\000\000\002\129\000\000\000\000\000\000\000\000\000\000\015V\000\000\000\000\002\129\002\129\000\000\015^\015f\007\026\014\138\000\000\000\000\002\129\000\000\014\142\000\000\015n\000\n\000\000\015v\000\000\015~\002\129\000\000\000\000\000\000\000\000\000\000\014\150\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\134\000\000\002\129\000\000\014\154\014\158\000\000\001u\000\000\000\000\001u\014\166\000\000\002\129\000\000\000\000\000\000\000\000\000\000\000\000\002\150\000\000\000\000\000\000\000\000\000\000\014\170\002\162\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\006\003.\000\000\000\000\000\000\001u\000\000\015\142\000\000\001u\002\129\000\000\000\000\000\000\015\150\003\014\000\000\000\000\001u\001u\000\000\001u\001u\000\000\000\000\001]\000\000\001u\001]\000\000\002\129\0036\000\000\002\129\003\022\002\129\003&\001u\000\000\000\000\000\000\000\000\000\000\002\129\002\129\000\000\015\158\015\166\000\000\002\129\000\000\000\000\000\000\001]\001]\000\000\000\000\000\000\001]\000\000\000\000\000\000\001]\000\000\003>\000\000\001u\000\000\003\014\000\000\000\000\001]\001]\000\000\001]\001]\000\000\001u\000\000\000\000\001]\000\000\000\000\000\000\001]\000\000\000\000\003\022\000\000\003&\001]\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003F\000\000\000\000\001u\000\000\000\000\000\000\003\030\000\000\000\000\000\000\001]\000\000\001]\000\000\000\000\000\000\000\000\001Y\000\000\000\000\001Y\000\000\001u\001]\000\000\001u\000\000\001u\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001u\001u\000\000\001u\003N\000\000\001u}\000\000\001Y\001Q\000\000\001Y\000\000\001Y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001Y\001Y\000\000\001Y\001Y\000\000\001Y\000\000\000\000\000\000\003\006\003.\000\000\000\000\000\000\001}\000\000\001Q\000\000\001}\001Q\000\000\000\000\000\000\003\030\003\014\000\000\000\000\001}\001}\000\000\001}\003\174\000\000\000\000\003\166\000\000\001}\001q\000\000\001Q\0036\000\000\001Q\003\022\001Q\003&\001}\000\000\000\000\000\000\000\000\000\000\001Q\001Q\000\000\001Q\001Q\000\000\001Q\000\000\000\000\000\000\003\006\003.\000\000\000\000\000\000\001q\000\000\000\000\000\000\001q\000\000\003>\000\000\001}\000\000\003\014\000\000\000\000\001q\001q\000\000\001q\001q\000\000\001}\000\000\000\000\001q\000\000\000\000\000\000\0036\000\000\000\000\003\022\000\000\003&\001q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003F\000\000\000\000\001}\000\000\000\000\000\000\003\030\000\000\000\000\000\000\003>\000\000\001q\000\000\000\000\000\000\000\000\001i\000\000\000\000\001i\000\000\001}\001q\000\000\001}\000\000\001}\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001}\001}\000\000\003\182\003N\000\000\001}\000\000\000\000\000\000\003\006\003.\000\000\000\000\000\000\001i\000\000\003F\000\000\001i\001q\000\000\000\000\000\000\003\030\003\014\000\000\000\000\001i\001i\000\000\001i\001i\000\000\000\000\001U\000\000\001i\001U\000\000\001q\001i\000\000\001q\003\022\001q\003&\001i\000\000\000\000\000\000\000\000\000\000\001q\001q\000\000\001q\003N\000\000\001q\000\000\000\000\000\000\001U\001U\000\000\000\000\000\000\001U\000\000\000\000\000\000\001U\000\000\003>\000\000\001i\000\000\001U\000\000\000\000\001U\001U\000\000\001U\001U\000\000\001i\000\000\000\000\001U\000\000\000\000\000\000\001U\000\000\000\000\003\022\000\000\001U\001U\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001i\000\000\000\000\001i\000\000\000\000\000\000\003\030\000\000\000\000\000\000\001U\000\000\001U\000\000\000\000\000\000\000\000\001a\000\000\000\000\001a\000\000\001i\001U\000\000\001i\000\000\001i\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001i\001i\000\000\001i\001i\000\000\001i\000\000\000\000\000\000\003\006\003.\000\000\000\000\000\000\001a\000\000\001U\000\000\001a\001U\000\000\000\000\000\000\003\030\003\014\000\000\000\000\001a\001a\000\000\001a\001a\000\000\000\000\001e\000\000\001a\001e\000\000\001U\001a\000\000\001U\003\022\001U\003&\001a\000\000\000\000\000\000\000\000\000\000\001U\001U\000\000\001U\001U\000\000\001U\000\000\000\000\000\000\003\006\003.\000\000\000\000\000\000\001e\000\000\000\000\000\000\001e\000\000\001a\000\000\001a\000\000\003\014\000\000\000\000\001e\001e\000\000\001e\001e\000\000\001a\000\000\000\000\001e\000\000\000\000\000\000\001e\000\000\000\000\003\022\000\000\003&\001e\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001a\000\000\000\000\001a\000\000\000\000\000\000\003\030\000\000\000\000\000\000\003>\000\000\001e\000\000\000\000\000\000\000\000\003\166\000\000\000\000\001y\000\000\001a\001e\000\000\001a\000\000\001a\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001a\001a\000\000\001a\001a\000\000\001a\000\000\000\000\000\000\003\006\003.\000\000\000\000\000\000\001y\000\000\001e\000\000\001y\001e\000\000\000\000\000\000\003\030\003\014\000\000\000\000\001y\001y\000\000\001y\003\174\000\000\000\000\001m\000\000\001y\001m\000\000\001e\0036\000\000\001e\003\022\001e\003&\001y\000\000\000\000\000\000\000\000\000\000\001e\001e\000\000\001e\001e\000\000\001e\000\000\000\000\000\000\003\006\003.\000\000\000\000\000\000\001m\000\000\000\000\000\000\001m\000\000\003>\000\000\001y\000\000\003\014\000\000\000\000\001m\001m\000\000\001m\001m\000\000\001y\000\000\000\000\001m\000\000\000\000\000\000\0036\000\000\000\000\003\022\000\000\003&\001m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003F\000\000\000\000\001y\000\000\000\000\000\000\003\030\000\000\000\000\000\000\003>\000\000\001m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001y\001m\000\000\001y\000\000\001y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001y\001y\000\000\001y\003N\000\000\001y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003F\000\000\022:\001m\000\000\000\000\000\000\003\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022>\000\000\000\000\000\000\000\000\000\000\000\000\001m\023~\000\000\001m\000\000\001m\022B\000\000\022F\r%\r%\000\000\022J\001m\001m\000\000\001m\001m\022N\001m\000\000\000\000\000\000\000\000\022R\000\000\000\000\022Z\022:\000\000\000\000\022^\000\000\000\000\000\000\000\000\000\000\022b\000\000\000\000\000\000\000\000\022>\000\000\000\000\000\000\000\000\000\000\023z\024\166\025\022\000\000\000\000\022f\000\000\022B\000\000\022F\rQ\rQ\000\000\022J\000\000\000\000\000\000\000\000\000\000\022N\000\000\000\000\000\000\000\000\000\000\022R\000\000\000\000\022Z\000\000\000\000\000\000\022^\000\000\000\000\r%\000\000\022j\022b\000\000\022n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\138\rQ\022r\022f\000\000\000\000\000\000\022v\000\n\022z\000\000\000\000\022~\022\130\000\000\022\134\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\138\000\000\000\000\022\142\000\000\000\000\000\000\000\000\000\000\000\000\rQ\000\000\022j\000\000\000\000\022n\000\000\000\000\000\000\022\146\000\000\000\000\000\000\000\000\000\000\022\150\022\154\r%\022r\000\000\000\000\000\000\000\000\022v\000\n\022z\000\000\000\000\022~\022\130\000\000\022\134\000\000\000\000\022:\000\000\000\000\000\000\000\000\022\138\000\000\000\000\022\142\000\000\000\000\000\000\000\000\000\000\022>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\146\000\000\000\000\022B\000\000\022F\022\150\022\154\rQ\022J\000\000\000\000\r%\000\000\000\000\022N\000\000\000\000\000\000\000\000\000\000\022R\000\000\000\000\022Z\000\000\000\000\000\000\022^\000\000\000\000\000\000\000\000\000\000\022b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026*\000\000\000\000\r%\000\000\022f\000\000\000\000\000\000\000R\000V\000Z\000\146\000\000\000\150\000\000\000\154\000\158\000\162\000^\000\000\000\170\000\174\000\000\000v\000\000\000\182\000\000\000\000\000\186\001\146\001\150\001\178\000z\000\000\r%\000\000\022j\000\000\000\000\022n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\182\000\000\022r\000\000\000\000\000\000\001\198\022v\000\n\022z\000\000\000\000\022~\022\130\000\000\022\134\000\000\000~\000\000\000\000\000\000\000\000\000\000\022\138\000\000\000\000\022\142\011\186\000\000\000\000\011\190\000\000\000\000\000\000\000\000\000\000\000\000\001\202\000\000\000\000\000\000\000\000\022\146\001\230\000\000\000\000\000\000\000\000\022\150\022\154\r%\000\000\001\190\000\000\000\000\011\194\011\198\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\145\000\000\000\000\001\206\001\210\000\000\011\202\000\000\000\000\000\000\000\000\001\214\011\206\011\210\000\000\000\000\011\214\000\000\000\000\011\218\011\222\026\022\011\226\026\030\000\000\011\230\000\000\011\234\000\000\000\000\000\000\000\000\026&\000\000\000\000\000\000\000\n\000\000\026F\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\238\000\000\000\000\000\000\022B\000\000\022F\000\000\000\000\000\000\022J\000\000\000\000\000\000\000\000\000\000\022N\000\000\000\000\000\000\000\000\011\242\022R\011\246\000\000\022Z\000\000\000\000\000\000\022^\002\225\000\000\000\000\000\000\000\000\022b\000\000\000\000\000\000\000\000\000\000\000\000\012\022\012\026\012\030\012\"\012&\000\000\000\000\012V\000\000\022f\025V\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012Z\000\000\012^\012b\000\000\000\000\012f\000\000\000\000\000\000\000\000\000\000\012j\012n\022j\000\000\000\000\022n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022r\000\000\000\000\000\000\000\000\022v\000\n\022z\000\000\000\000\022~\022\130\000\000\022\134\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\138\000\000\000\000\022\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\146\000\000\000\000\000\000\000\000\000\000\022\150\022\154\000R\000V\000Z\000\146\000\000\000\150\0112\000\154\000\158\000\162\000^\0116\000\170\000\174\000\000\000v\027\174\000\182\011>\000\000\000\186\001\146\001\150\001\178\000z\011B\027\178\006\185\000\000\000\000\000\000\000\000\006\185\000\000\000\000\000\000\000\000\006\185\000\000\006\185\000\000\000\000\001\182\000\000\000\000\000\000\006\185\006\185\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000~\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\185\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\186\000\000\006\185\000\000\000\000\000\000\006\185\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\190\000\000\000\000\000\000\000\000\000\000\006\185\006\185\000\000\000\000\000\000\000\000\000\000\000\000\016\197\000\000\004bv\000\000\000\182\000\000\000\000\000\186\001\146\001\150\001\178\000z\000\000\000\000\016\197\000\000\000\000\000\000\000\000\006\185\000\000\000\000\006\185\006\185\000\000\000\000\006\185\000\000\000\000\001\182\000\000\000\000\006\185\006\185\006N\000\000\000\000\000\000\006\185\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000~\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\197\016\197\000\000\016\197\000\000\006R\000\000\016\197\000\000\000\000\001\186\000\000\000\000\000\000\000\000\000\000\t~\000\000\006Z\000\000\000\000\000\000\000\000\016\197\000\000\001\190\000\000\016\197\016\197\t\130\t\134\000\000\000\000\000\000\000\000\016\197\000\000\000\000\000\000\016\197\016\197\000\000\000R\000V\000Z\000\146\000\000\000\150\t\138\000\154\000\158\000\162\000^\000\000\000\170\000\174\000\000\000v\000\000\000\182\000\000\000\000\000\186\001\146\001\150\001\178\000z\000\000\000\000\000\000\000R\000V\000Z\000\146\000\000\000\150\000\000\000\154\000\158\000\162\000^\000\000\000\170\000\174\001\182\000v\012\202\000\182\000\000\000\000\000\186\001\146\001\150\001\178\000z\t\142\000\000\000\000\000\000\000\000\000\000\000~\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\182\000\000\000\000\000\000\000\000\000\000\001\198\004A\000\000\001\186\000\000\000\000\000\000\000\000\000\000\t~\000\000\000~\000\000\000\000\000\000\000\000\000\000\000\000\001\190\000\000\000\000\000\000\t\130\t\134\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\186\000\000\000\000\000\000\000\000\000\000\t~\000\000\000\000\000\000\t\138\000\000\000\000\000\000\000\000\001\190\000\000\000\000\000\000\t\130\t\134\000\000\000\000\000\000\000R\000V\000Z\000\146\000\000\000\150\000\000\000\154\000\158\000\162\000^\000\000\000\170\000\174\t\138\000v\000\000\000\182\000\000\000\000\000\186\001\146\001\150\001\178\000z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\142\000\000\000\000\000\000\011^\000\000\000\n\000\000\000\000\001\182\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\229\000\000\000~\000\000\t\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\186\000\000\000\000\000\000\000\000\000\000\002\213\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\190\000\000\000\000\000\000\011b\t\134\000\000\000R\000V\000Z\000\146\000\000\000\150\000\000\000\154\000\158\000\162\000^\000\000\000\170\000\174\000\000\000v\t\138\000\182\000\000\022:\000\186\001\146\001\150\001\178\000z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022>\000\000\000\000\000\000\011^\000\000\000\000\000\000\000\000\001\182\000\000\000\000\000\000\022B\000\000\022F\000\000\000\000\000\000\022J\000\000\000\000\000\000\000\000\000\000\022N\000~\000\000\000\000\000\000\011f\022R\000\000\000\000\022Z\022:\000\000\000\000\022^\000\000\000\000\000\000\000\000\000\000\022b\000\000\001\186\000\000\000\000\022>\000\000\000\000\011r\000\000\000q\0246\000\000\000\000\000\000\000\000\022f\001\190\022B\000\000\022F\011b\t\134\000\000\022J\000\000\000\000\000\000\000\000\000\000\022N\000\000\000\000\000\000\000\000\000\000\022R\000\000\000\000\022Z\t\138\000\000\000\000\022^\000\000\000\000\r%\000\000\022j\022b\000\000\022n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\238\000\000\000\000\000\000\022r\022f\000\000\000\000\000\000\022v\000\n\022z\000\000\000\000\022~\022\130\000\000\022\134\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\138\000\000\011f\022\142\000\000\000\000\000\000\000\000\000\000\000\000\r%\000\000\022j\000\000\000\000\022n\000\000\000\000\000\000\022\146\000\000\000\000\000\000\000\000\000\000\022\150\022\154\r%\022r\000\000\000\000\000\000\022:\022v\000\n\022z\000\000\000\000\022~\022\130\000\000\022\134\000\000\000\000\000\000\000\000\022>\000\000\000\000\022\138\000\000\000\000\022\142\000\000\000\000\000\000\000\000\000\000\000\000\022B\000\000\022F\000\000\000\000\000\000\022J\000\000\000\000\022\146\000\000\000\000\022N\000\000\000\000\022\150\022\154\r%\022R\000\000\000\000\022Z\000\000\000\000\000\000\022^\000\000\000\000\000\000\000\000\000\000\022b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\025\238\000\000\000\000\000\000\000\000\022f\000\000\000\000\000R\000V\000Z\000\146\000\000\000\150\000\000\000\154\000\158\000\162\000^\000\000\000\170\000\174\000\000\000v\000\000\000\182\000\000\000\000\000\186\001\146\001\150\001\178\000z\000\000\000\000\r%\000\000\022j\000\000\000\000\022n\000\000\000\000\000\000\000\000\028~\000\000\000\000\000\000\000\000\001\182\000\000\000\000\022r\000\000\000\000\000\000\000\000\022v\000\n\022z\000\000\000\000\022~\022\130\000\000\022\134\000~\000\000\000\000\000\000\000\000\000\000\000\000\022\138\000\000\000\000\022\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\186\000\000\000\000\000\000\000\000\000\000\022\146\000\000\000\000\000\000\000\000\000\000\022\150\022\154\r%\001\190\000\000\000\000\000\000\028\130\t\134\000\000\000R\000V\000Z\000\146\000\000\000\150\000\000\000\154\000\158\000\162\000^\000\000\000\170\000\174\000\000\000v\t\138\000\182\000\000\000\000\000\186\001\146\001\150\001\178\000z\000\000\000\000\000\000\000\000\000\000\000\000\000R\000V\000Z\000\146\000\000\000\150\028~\000\154\000\158\000\162\000^\001\182\000\170\000\174\000\000\000v\000\000\000\182\000\000\000\000\000\186\001\146\001\150\001\178\000z\000\000\000\000\000\000\000~\000\000\000\000\000\000\028\134\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\182\000\000\n\153\000\000\000\000\000\000\001\186\000\000\000\000\000\000\000\000\000\000\028\146\000\000\000i\000\000\n\153\000~\000\000\000\000\000\000\001\190\000\000\000\000\000\000\028\130\t\134\000\000\000\000\n\153\000\000\n\153\000\000\000\000\000\000\n\153\000\000\001\186\000\000\000\000\000\000\n\153\000\000\t\150\t\138\ta\000\000\n\153\000\000\000\000\n\153\000\000\001\190\000\000\n\153\023\"\t\130\t\134\000\000\ta\n\153\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\ta\000\000\ta\t\138\n\153\000\000\ta\000\000\000\000\000\000\000\000\000\000\ta\000\000\000\000\000\000\000\000\000\000\ta\028\134\000\000\ta\000\000\000\000\000\000\ta\000\000\000\000\000\000\000\000\000\000\ta\000\000\000\000\000\000\000\000\n\153\000\000\000\000\n\153\000\000\000\000\000\000\000\000\000\000\000\000\000\000\ta\025V\000\000\000\000\000\000\n\153\000\000\000\000\000\000\000\000\n\153\n\153\n\153\000\000\000\000\n\153\n\153\000\000\n\153\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\153\t\245\000\000\n\153\000\000\000\000\ta\000\000\000\000\ta\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\153\000\000\000\000\ta\000\000\000\000\n\153\n\153\ta\ta\ta\000\000\007]\ta\ta\000\000\ta\000\000\000\000\000\000\000\000\000\000\000\000\000\000\ta\000\000\007]\ta\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007]\023v\007]\000\000\ta\000\000\007]\000\000\000\000\000\000\ta\ta\007]\000\000\000\000\022>\000\000\000\000\007]\000\000\000\000\007]\000\000\000\000\000\000\007]\000\000\000\000\022B\000\000\022F\007]\000\000\000\000\022J\000\000\000\000\000\000\000\000\000\000\022N\000\000\025b\000\000\000\000\000\000\022R\007]\000\000\022Z\000\000\024\026\000\000\022^\000\000\000\000\000\000\000\000\000\000\022b\000\000\000\000\000\000\000\000\000\000\022>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022f\000\000\000\000\022B\007]\022F\000\000\007]\000\000\022J\000\000\000\000\000\000\000\000\000\000\022N\000\000\000\000\000\000\000\000\007]\022R\000\000\000\000\022Z\007]\007]\007]\022^\000\000\007]\007]\022j\007]\022b\022n\000\000\000\000\000\000\000\000\000\000\007]\000\000\000\000\007]\000\000\000\000\000\000\022r\000\000\022f\000\000\000\000\022v\000\n\022z\000\000\000\000\022~\022\130\007]\022\134\000\000\000\000\000\000\000\000\007]\007]\000\000\022\138\000\000\000\000\022\142\0242\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022j\000\000\000\000\022n\000\000\022>\022\146\000\000\000\000\000\000\000\000\000\000\022\150\022\154\000\000\000\000\022r\000\000\022B\022:\022F\022v\000\n\022z\022J\000\000\022~\022\130\000\000\022\134\022N\000\000\000\000\022>\000\000\000\000\022R\022\138\000\000\022Z\022\142\000\000\000\000\022^\000\000\000\000\022B\000\000\022F\022b\000\000\000\000\022J\000\000\000\000\000\000\022\146\000\000\022N\000\000\000\000\000\000\022\150\022\154\022R\022f\000\000\022Z\000\000\024\234\000\000\022^\000\000\000\000\000\000\000\000\000\000\022b\000\000\000\000\000\000\000\000\000\000\022>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\210\000\000\000\000\022B\022j\022F\000\000\022n\000\000\022J\000\000\000\000\000\000\000\000\000\000\022N\000\000\000\000\000\000\000\000\022r\022R\000\000\000\000\022Z\022v\000\n\022z\022^\000\000\022~\022\130\022j\022\134\022b\022n\000\000\000\000\000\000\000\000\000\000\022\138\000\000\000\000\022\142\000\000\000\000\000\000\022r\000\000\022f\000\000\000\000\022v\000\n\022z\000\000\000\000\022~\022\130\022\146\022\134\000\000\000\000\000\000\000\000\022\150\022\154\000\000\022\138\000\000\000\000\022\142\025\234\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022j\000\000\000\000\022n\000\000\022>\022\146\000\000\000\000\000\000\000\000\000\000\022\150\022\154\000\000\000\000\022r\000\000\022B\022:\022F\022v\000\n\022z\022J\000\000\022~\022\130\000\000\022\134\022N\000\000\000\000\022>\000\000\000\000\022R\022\138\000\000\022Z\022\142\000\000\000\000\022^\000\000\000\000\022B\000\000\022F\022b\000\000\000\000\022J\000\000\000\000\000\000\022\146\000\000\022N\000\000\000\000\000\000\022\150\022\154\022R\022f\000\000\022Z\000\000\022:\000\000\022^\000\000\000\000\000\000\000\000\000\000\022b\000\000\000\000\000\000\000\000\000\000\022>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\202\000\000\000\000\022B\022j\022F\000\000\022n\000\000\022J\000\000\000\000\000\000\000\000\000\000\022N\000\000\000\000\000\000\000\000\022r\000\000\000\000\000\000\022Z\022v\000\n\022z\022^\000\000\022~\022\130\022j\022\134\022b\022n\000\000\000\000\000\000\000\000\000\000\022\138\000\000\000\000\022\142\000\000\000\000\000\000\022r\000\000\022f\000\000\000\000\022v\000\n\022z\000\000\000\000\022~\022\130\022\146\022\134\000\000\000\000\000\000\000\000\022\150\022\154\000\000\022\138\000\000\016\217\022\142\000\000\016\217\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022j\000\000\000\000\022n\000\000\000\000\022\146\000\000\000\000\000\000\000\000\000\000\022\150\022\154\000\000\000\000\022r\016\217\016\217\000\000\000\000\022v\025R\022z\000\000\000\000\022~\022\130\000\000\022\134\016\173\000\000\016\217\000\000\000\000\000\000\016\217\022\138\016\217\016\217\022\142\000\000\000\000\000\000\000\000\000\000\004\190\000\000\016\217\000\000\000\000\016\217\000\000\016\217\000\000\000\000\022\146\000\000\016\173\016\173\000\000\000\000\022\150\022\154\000\000\000\000\007r\000\000\000\000\000\000\000\000\000\000\000\000\016\173\000\000\000\000\000\000\000\000\000\000\016\173\016\173\016\217\000\000\007z\000\000\0019\007\134\000\000\0019\016\173\000\000\000\000\016\173\000\000\016\173\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\006\003.\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\173\016\217\016\217\000\000\016\217\000\000\003\014\000\000\016\217\000\000\0019\000\000\0019\0019\000\000\000\000\000\000\000\000\000\000\000\000\007\146\000\000\0036\000\000\016\217\003\022\000\000\003&\016\217\016\217\001!\000\000\000\000\001!\000\000\000\000\016\217\000\000\000\000\000\000\016\217\016\217\016\173\000\000\000\000\000\000\000\000\007\150\000\000\016\173\000\000\000\000\000\000\000\000\000\000\003>\000\000\000\000\001!\001!\007\158\000\000\000\000\000\000\000\000\016\173\000\000\000\000\000\000\000\000\000\000\000\000\016\173\003\014\000\000\000\000\000\000\001!\000\000\001!\001!\016\173\016\173\001\029\000\000\000\000\001\029\000\000\000\000\001!\000\000\000\000\003\022\000\000\003&\000\000\000\000\003F\000\000\000\000\0019\000\000\000\000\000\000\003\030\000\000\000\000\000\000\000\000\000\000\000\000\001\029\001\029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0019\000\000\001!\000\000\0019\0019\003\014\000\000\000\000\000\000\001\029\001\021\001\029\001\029\001\021\000\000\0019\003N\000\000\000\000\000\000\000\000\001\029\000\000\000\000\003\022\000\000\003&\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\021\001\021\000\000\000\000\000\000\001!\000\000\000\000\001!\000\000\003\166\000\000\003\030\001A\000\000\001\021\001\029\000\000\000\000\001\021\000\000\001\021\001\021\000\000\000\000\000\000\000\000\000\000\001!\000\000\000\000\001\021\001!\001!\003\022\000\000\001\021\000\000\003\006\003.\000\000\000\000\000\000\000\000\001!\001!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\014\000\000\000\000\000\000\001A\001\029\001A\003\174\001\029\000\000\000\000\001\021\003\030\000\000\000\000\000\000\0036\000\000\000\000\003\022\000\000\003&\000\000\003\166\000\000\000\000\0015\000\000\001\029\000\000\000\000\000\000\001\029\001\029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\029\001\029\000\000\000\000\000\000\003>\000\000\003\006\003.\001\021\000\000\000\000\001\021\000\000\000\000\000\000\003\030\001-\000\000\000\000\001-\000\000\003\014\000\000\000\000\000\000\0015\000\000\0015\0015\000\000\000\000\001\021\000\000\000\000\000\000\001\021\001\021\0036\000\000\000\000\003\022\000\000\003&\000\000\003\006\003.\003F\001\021\001\021\001A\000\000\000\000\000\000\003\030\001\025\000\000\000\000\001\025\000\000\003\014\000\000\000\000\000\000\001-\000\000\001-\001-\000\000\000\000\001A\003>\000\000\000\000\001A\001A\001-\000\000\000\000\003\022\000\000\003&\000\000\001\025\001\025\000\000\003\182\003N\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\025\000\000\000\000\000\000\001\025\000\000\001\025\001\025\000\000\000\000\000\000\003>\000\000\000\000\000\000\003F\001\025\000\000\0015\003\022\000\000\001\025\003\030\001%\000\000\000\000\001%\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0015\000\000\000\000\000\000\0015\0015\000\000\000\000\000\000\000\000\000\000\001\025\000\000\003\006\003.\001-\0015\003N\001-\000\000\000\000\000\000\003\030\001)\000\000\000\000\001)\000\000\003\014\000\000\000\000\000\000\001%\000\000\001%\001%\000\000\000\000\001-\000\000\000\000\000\000\001-\001-\001%\000\000\000\000\003\022\000\000\003&\000\000\003\006\003.\001\025\001-\001-\001\025\000\000\000\000\000\000\003\030\003\166\000\000\000\000\001=\000\000\003\014\000\000\000\000\000\000\001)\000\000\001)\001)\000\000\000\000\001\025\001%\000\000\000\000\001\025\001\025\001)\000\000\000\000\003\022\000\000\003&\000\000\003\006\003.\000\000\001\025\001\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\014\000\000\000\000\000\000\001=\000\000\001=\003\174\000\000\000\000\000\000\003>\000\000\000\000\000\000\001%\0036\000\000\001%\003\022\000\000\003&\003\030\0011\000\000\000\000\0011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001%\000\000\000\000\000\000\001%\001%\000\000\000\000\000\000\000\000\000\000\003>\000\000\003\006\003.\001)\001%\001%\001)\000\000\000\000\000\000\003\030\000\225\000\000\000\000\000\000\000\000\003\014\000\000\000\000\000\000\0011\000\000\0011\0011\000\000\000\000\001)\000\000\000\000\000\217\001)\001)\0036\000\000\000\000\003\022\000\000\003&\000\000\000\225\000\225\003F\001)\001)\001=\000\000\000\000\000\000\003\030\000\000\000\000\000\000\000\000\000\000\003\014\000\000\003\166\000\217\000\217\000\000\000\225\000\225\000\000\000\000\001=\003>\000\000\000\000\001=\001=\000\225\000\000\000\217\003\022\000\000\003&\000\000\000\000\000\217\000\217\001=\003N\000\000\000\000\003\006\003.\000\000\000\000\000\217\000\000\000\000\003\022\000\000\000\217\000\000\000\000\000\000\000\000\000\000\003\014\003\166\000\000\000\000\000\225\000\000\001\005\003\174\003F\000\000\000\000\0011\000\000\000\000\000\000\003\030\0036\000\000\000\000\003\022\000\000\003&\000\217\000\000\000\000\000\000\000\000\000\000\000\000\003\006\003.\0011\000\000\000\000\000\000\0011\0011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\014\000\000\000\225\0011\0011\003>\000\249\000\249\000\000\003\030\000\000\000\000\000\000\000\000\000\000\000\000\0036\000\000\000\000\003\022\000\217\003&\000\000\000\000\000\000\000\225\000\000\003\030\000\000\000\000\000\000\000\000\000\225\000\241\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\225\000\225\000\217\000\000\000\000\000\000\003F\000\000\003>\000\217\000\221\000\000\000\000\003\030\000\000\000\000\000\000\000\000\000\217\000\217\003\006\003.\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\005\000\000\000\000\000\000\000\000\000\000\003\014\001\005\000\000\000\221\000\221\000\000\000\241\000\241\000\000\000\000\003\182\003N\000\000\000\233\000\000\003F\000\241\000\000\000\221\003\022\000\000\003&\003\030\000\000\000\221\000\221\000\000\000\000\000\000\000\000\000\000\000\237\000\000\000\000\000\221\000\000\000\000\003\022\000\249\000\221\000\000\003\006\003.\000\000\000\000\000\249\000\000\000\000\000\000\003>\000\000\000\000\000\000\000\000\000\249\003N\003\014\000\000\003\166\003\006\003.\000\000\000\233\000\233\000\000\000\000\000\000\000\221\000\000\000\000\000\000\000\000\000\233\000\000\003\014\003\022\000\000\003&\000\000\000\000\000\237\000\237\000\000\000\000\000\000\000\000\003\006\003.\000\000\000\000\000\237\000\241\000\000\003\022\000\000\003&\000\000\000\000\003\030\000\000\000\000\003\014\000\000\000\000\000\000\000\233\000\000\001\001\003\174\000\221\000\000\000\000\000\000\000\000\000\241\000\000\003\030\0036\000\000\000\000\003\022\000\241\003&\003>\000\000\000\000\000\000\000\000\000\000\000\000\000\241\000\241\000\221\000\000\000\000\000\000\000\000\000\000\000\000\000\221\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\233\000\221\000\221\003>\000\000\000\000\000\000\003\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\237\000\000\000\000\000\000\000\000\000\233\000\000\003\030\000\000\000\245\000\000\000\000\000\233\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\233\000\233\000\237\000\000\000\000\000\000\003F\000\000\000\000\000\237\000\000\000\000\000\000\003\030\000\000\000\000\003\006\003.\000\237\000\237\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\001\000\000\003\014\000\000\000\000\000\000\000\000\001\001\000\245\000\245\000\000\000\000\000\000\000\000\000\000\000\000\001\001\003N\0036\000\000\000\000\003\022\000\000\003&\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003F\000\000\000\000\000\000\000\000\000\000\000\000\003\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\245\000\000\000\000\000\000\000\000\000\000\000\000\000\245\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\245\000\245"))
  
  let lhs =
    (16, "\000\014\000\r\000\012\000\011\000\n\000\t\000\br\001\r\001\012\001\012\001\011\001\n\001\t\001\t\001\b\001\b~\000~\000}\000}\000|\000|\000{\000{\000z\000z\000y\000y\000y\000y\000y\000y\000y\000y\000y\000y\000y\000y\000y\000y\000y\000y\000y\000y\000y\000y\000y\000x\000x\000w\000w\000v\000v\000u\000u\000t\000t\000s\000s\000r\000r\000q\000q\000p\000p\000p\000p\000p\000o\000o\000n\000n\000n\000n\000m\000l\000k\000k\000k\000j\000j\000j\000i\000i\000i\000i\000i\000i\000h\000g\000g\000g\000f\000f\000f\000f\000f\000f\000f\000f\000e\000e\000e\000e\000e\000e\000e\000e\000d\000d\000d\000d\000d\000d\000d\000d\000c\000c\000c\000c\000c\000c\000c\000c\000b\000b\000b\000a\000a\000`\000`
  
  let goto =
    ((16, "\000(\002\140\000\000\000\000\000\000\000n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\187\000\000\001\163\017n\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000j\000\000\000\000\000\000\000\000\000\000\003X\000\000\000\r\003$\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\025\005N\000\000\000F\000\000\000\000\000|\000\000\000\000\007\218\000\000\000\000\000\000\001*\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\184\000\000\000\000\006\130\002\254\000\000\000\000\004\244\000\000\000\000\000\000\000\000\000\000\000\000\0022\000\000\000\000\000\000\000\000\003\242\000\000\004\004\000\000\000\000\000\000\000\000\000\000\000\t\000\000\001B\000\000\011\244\000\000\000\000\000\000\004\014\000\000\007\230\000\000\000\000\000\000\t\156\000\000\000\000\000\000\004\196\001Y\000\162\000\000\000\000\r\170\020^\000\000\007>\000\000\020\172\t48\222\t42\020\014\198\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\"\1729\180\000\000\000\000\000\000#\140(60,\000\000\000\000\004@\000\000\000\000\015\162+\178\000\000\000\000\000\000\b\136\000\000,\1703\028\000\000\n@\000\000\r\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\186\000\000\000\000\017\162\000\000\026b\000\000\027B\000\000\029\226\000\000\030\194\000\000 \160\000\000!b\000\000!\128\000\000$\226\000\000%\000\000\000\016B\000\000X\020\000\000\000\000\000\000\000\000;p\000\000\000\000\000\000\000\000%\194\000\000):\000\000+\024\000\000,\b\000\0000\160\000\0007\198\000\000B\006\000\000D\002\000\000L\130\000\000S:\000\000X\208\000\000X\240\000\000X\254\000\000Y\130\000\000Y\178\000\000Y\228\000\000\019\128\000\000\000\000\022\002\000\000\000\000\000\000\000\000\000\000\000\000\000\160O\150\000\000\001\212\000\000\000\000\001,\024\162\000\000\000\142\000\029\000j\001\248\0011\000\000\003^\000\000\000\000\003\226\000\000\004\168\000\000\000\000:.\000\000\000\000\000\000\000\007\028\026\000\0001\178:\214\000\000\000\000\000\000\000\000#\0263\154\000\000\000\000\000\000\000\000\000\000\000\000\000\00056\000\000\000\000O\254\000\000\000\000\000\000\011R\000\000\000\000\000\000\000\0006d\000\000\000\000\005\140\000\000\n\176\000\000\000\000\000\000\014\176\000\000.\158\003,\000\000\000\000;n;\186\000\000\022\226\000\000\023\194\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Z\b\000\000'\218\000\000U\210\000\000Z$\000\000ZR\000\000Z^\000\000Z\134\000\000Z\196\000\000Z\236\000\000[&\000\000\\\020\000\000\\>\000\000\\B\000\000\\^\000\000\\b\000\000\\z\000\000\000\000<R\000\000\000\000\000\000<\198\000\000\000\000\000\000\000\000\000\000\000\000Pn\000\000\000\000\000\000\015:\000\000\000\000\000\000\000\000'\000\000\000\000\000\000\000\000\000\001M\000\000\000\000P\194\000\000\000\000\000\000\007\186\000l\000\000\000\000)\170\000\000\000\000=d\000\000\000\000\000\000\005\182D\250C\b\000\000\000\000Q\206\000\000Q\218\000\000\000\000\000\000E\022\003\230\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0006\132\000\000\000\000\000\000\000\000F\248E\228\017\182\000\000\000\0007\174\000\000\000\000\006&\000\000\000\000\n>\000\000\000\000\000\000\020\150\000\0004\\\000\000\000\000Q\242\000\000\000\000\000\000\022J\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000>\026\000\000XJ\000\000\001\149\000\000\000\000\000\000\\\134\000\000\\\180\000\000]&\000\000]L\000\000]\136\000\000]\244\000\000^N\000\000^j\000\000^\160\000\000^\198\000\000_\002\000\000_\030\000\000_r\000\000_\202\000\000\000\000\000\000\000\000\000\000\005\220\000\000\000\000?|6\164\000\000\000\000F\198\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000/\166\000\000>\004\000\000\000\000\000\000\000\000\000\000>\228\000\000\000\000\000\000?2\000\000\000\000\000\000\000\000\000\000\000\000\001:\000\000\000\000\000\000\000\000\002\204\000\000\b\176\000\000\000\000\019\164\001\212\000\000\000\000\000\000\000\000\012\240\014\194\000\000\031 \000\000\000\000\000\000\023\026\000\000\023*\000\000 \016\000\000\000\000\000\000\000\000\000\000\000\000 \196\000\000\000\000\001\190\000\000\000\000\000\000 \224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\0168\000\000\000\000\000\000\000\000\000\000\000\000\007d\000\0003\166\026\150\000\000\000\000\000\000\018\182\000\000\000\000\000\000\005b\027v\000\000\006R\000\000\000\000\000\000\000\000\002\204\000\000\000\000\000\147\026b\000\000\027B\000\000\000\000\000\000\0005\000\000\017\224\006\180\004$\000\000\000\000\000\000\006h\005\136\000\000\000\000\006z\000\000\000\000\000\000\000L\000\000\000\000\000\000\003>\000\000\000\000\000\000\000\000\000\000\002\146\000\172\001t\000\000\000\000\001\246\000\000\000\000\000\000\014\166\000\000\000\000\029H\b\224\000\000\000\000\000\000\001\184\000\000\000\000\000\000\000\000\020\160\023\194\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\b\000\000\016Z\000\000\000\000\000\000\000\000\0002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\214\000\000\002\178\000\000\002\244\000\000\000\000\001\144\000\000\000\000\000\000\002r\001\022\000\000\000\000\000\000\003\012\023J\003\206\023n\003\250\000\000\000\000\003\232\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\138\000\000\000\000\000\000\000\000\000\000\000\000\000\000R\022\000\000?\252\000\000\000\000\000\000R\176\000\000\000\000\t\030\000\000\000\000\000\000\0146\030\b\015(\000\000\021\"\000\000\000\000\000\000\005f\000\000\000\000G2\000\000\000\000\012\170\000\000\000\000\000\000\000\000\011(\000\000\017\252\000\000\000\000(\174\000\000\000\000\000\000HV\000\000\000\000\000\000\022\002\000\000\000\000\000\000\001Y\000\000Hj\000\000\000\000\000\000\000\000\001\b\007^\000\000H\130\000\000\000\000\000\000\000\000\007\170\000\000I\018\000\000\000\000\000\000\000\000\002|\000\000\nL\000\000\000\0007\240@\018\000\000\000\000\000\000R\226\000\000\000\000\000\000\001\n\000\000\000\000\000\000\000\000\000\000\000\2184\168\000\000\000\000\000\000\000\000\000\000\000\000\004,\000\000\000\031\000\000R\254\000\000\000\000\000\000S\220\000\000\000\000\000\234\000\000\"\128\000\031@\202\000\000\000\000\000\000\0000\000\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000:\024\000\000\000\000\000\000<\224\000\000\000\000\006H\000\000\011\n\000\000\000\000\000\000\023\250\000\0005\168\000\000\000\000T\000\000\000\000\000\000\000\024\n\000\000\000\000\000\000\000\000\000\000\000\000\024\162\000\000\025\130\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000_\226\000\000I@\000\000Wr\000\000`\004\000\000`&\000\000`X\000\000`|\000\000a(\000\000aJ\000\000ab\000\000a\148\000\000a\152\000\000a\172\000\000a\186\000\000b\134\000\000b\136\000\000\000\000\000\000\006\234\000\000\000\000F<\000\000\000\000\000\000\000\224\000\000\001P\000\000\018\192\003\014\011,\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000TN\000\000A6\017\198\024*\000\000\000\000\000\0002R\000\000\028\022\018\222\000\000\000\000I\186\000\000\000\000\007\250\000\000\019>\000\000\000\000*F\000\000\000\000\000\000I\224\000\000\000\000\000\000\000\000Jz\000\000\000\000\011P\020B\000\000\000\000K>\000\000\000\000\020\178\000\000\000\000KR\000\000\000\000\000\000\000\000K\250\000\000L\014\000\000B\bB\162\004\012\007\\\000\000\004l\t\208\000\000\000\000\000\000\011\130\000\000\000\000\rn\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000T\190\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0006\160\000\000C,\000\000\000\000\000\000\019\160\000\000\000\000\001\214\000\000\000\000\000\000#`\002\000\000\000$@\000\000\000\000\000\000\000\000\004\204\000\000\000\000\020\128\000\000% \000\000\000\0006\236\000\000\000\000\000\000Lj\000\000\000\000\001,\000\000\000\000\022\250\000\000\000\000*b\000\000\000\000\000\000L~\000\000\000\000\000\000\022\226\000\000\000\000\000\000\000\000L\198\000\000\000\000\000\000\000\000\r\n\n<\000\000MJ\000\000\000\000\000\000\000\000\000\000\000\000\021`\000\000\000\000\005\184\000\000\022@\000\000\001,\000\000\000\000MN\000\000N~\000\000C\206\000\000\000\000\000\0007|\000\000\000\000\000\000N\190\000\000\000\000\003\208\000\000\000\000\023\172\000\000\000\000,\158\000\000\000\000\000\000O>\000\000\000\000\000\000\000\000OB\000\000\000\000\015\170\023\218\000\000\000\000OV\000\000\000\000\007$D\186\000\000\007B\000\000\000\000\000\000\000\000\006\234\000\000D\128\000\000&\000\001@&\224\000\000\003\230\000\000\023 \000\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007`(\n\0058(\234\000\000\000\000\000\000\0062\000\000\024\224\000\000\007f\000\000\000\000\001,\001\164)\202\000\000\003P\000\000\025\192*\244\000\000\000\000\026\160\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007t\012\012\000\000\007\214\000\000\000\000\000\000\000\000\005\232\000\000\027\128\000\000\000\000\000\0003\\T\222\000\000\000\000\000\0001\154\000\000\000\000\000\000\000\000\007\2524F\000\000\000\000\000\000\000\000\b\006\000\000\000\000\000\000\000\000\003\208\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\218\000\000\028`\000\000\000\000\000\000U\012\000\000\012\236\000\000\000\000\000\000\003\246\000\000\011N\000\000\000\000\004\228\029@\000\000\030 \000\000\000\000\000\000\005\030\000\000U\230\005zV.\000\000VB\000\000\000\000\000\000\005\180\000\000V\180\006\024\000\000\000\000.\220\000\t\000\000\006\184/\218\000\000\000\0000\208\000\000\000\000\000\000\006\200\000\000W\002\007.\000\000\000\000%\b\007n%\230\000\000-\174\000\000\000\000\000\000\007\154\000\000WV\007\180\000\000\000\000\000\000\001\r\000\000\002\142\000\000\000\000\000\000\000\000\003\236\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\194\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000O\000\000\000\000\002|\000\000\005\176\000\000\000\000\000\000\005\196\000\000\000\000\000\000\000\000\000\000\005\230\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006t\000\000\000\000\006\174\000\000\015\202\000\000\000\000\012B\000\000\005\138\006\166\001\192\000\000\000\000\006rn\020\000\000\000\000\006\178\000\000\030\162\000\000\000\000\000\000\r\242\000\000\000\000\r\158\000\000\000a\006\176\030\230\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\\#\226\000\000\000\000\000\000\000\000$\016%\006\005l\000\000%\162\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\b,\000\000\000\000\000\000\000G\000\000\b<\000\000\000\000\000\000\000\000\000!\000\000\002\194\000\000\007\214\000\000\000\000\000\000\000\000\000\000\000\000\000\n\000\000\000x\b\030\004\204\000\000\000\000\000\000\t\012\004\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000=\000\000\000\000\016\216\000\000\000\000\000\000\000\000\015\030\000\000\000\000'\226(<\016\254\000\000)0\000\000\000\000\000\000\000\000\000\000\000\000\002\238\b\030\000\000\b&\000\000)\154\017H\000\000+8\000\000\000\000\000\000\000\000\b2\000\000\000\000\000\000\019\198\000\000\003\170\004\028\0010\000\000\000\000\000\000\000\000\000\000\001H\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\019t\000\000\000\000\000\000\000\000\021\216\000\000\000\000\015x+Z\000\000\000\000\000\000\000\000,\168\000\000\000\000\005\164\022\180\000\000\000\000\000\000\000\000,\184\000\000\000\000\000\000\n\228\026&\000\000\000\000\027\006\000\000\000\000\000\000\000\000\006\222\000\000\000\000\0070\000\000\000\000\000\000\001Q\000\000\000\000\000\161\000\000\000\000\000\000\000\000\000\000\000\000\000\0008>\000\000\000\000\000\000\0054\000\000\000\000\000\000\000\000\000\000\000\194\015\144\019\002&B&\246\000\000\002\\\004J\007\200\007\242\000\000\000\000\000\000\000\000\000\000\000\000*\146\028\004%\164\003\218\031\000\000\000+\242\007F\000\000\000\000\007d\000\000\031\224\000\000Fb\000\000\000\000\006\168 \192\000\000,\232\000\000\007L-\230\000\000\000\000\000\000(\232*\192'\158\011(\000\000\000\000\000\000\000\000\027\226\000\000\002t\000\000\000\000\000\000\000\000\016@#\144\000\000\000\000\023\026\000\000\023*\000\000\000\000\000\000\000\000\000\000\r\204\000\000\000\000\007\148\000\000!\160\000\000\r\024\001\019\000\000\000\000\000\000\000\000\000\000\000\0008>\000\000\000\000\b\198\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\016\000\000\000\000\000\000\000\000\000\0009&\000\000\011\150\000\000\000\000\000\000\000\000\000\000\001\236\000\000\014\246\006D\015\214\000\000\004j\017\000\000\000\b:\000\000\005\004\000\000\006`\000\000\006\250\000\000\r\024\000\000\000\000\000\000\000\000\000\000\bV\000\000\t>\000\000\b\240\000\000\r\024\b\"\000\000\000\000\000\000\000\000\000\000\000\0009&\000\000\001\232\000\000\t6\004\250\000\000\007\212\000\000\007\218\000\000\000\000\000\000\000\000\000\000\000\000\007\234\000\000\007\242\000\000\007\246\000\000\000\000\000\000\000\000\000\000\007\252\000\000\000\000\000\000\000\000\000\000\tx\b\018\000\000\000\000\bX\000\000\000\000\b \006\242\t\198\000\000\t\208\000\000\000\000\006l\b\248\000\000\bd\000\000\000\000\b\158\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\166\bF\000\000\000\000\000\000\b\134\bV\b*\007\238\b\138\b\198\000\000\000\000\bj\b.\bD\b\166\b\248\000\000\000\000\t\024\n\002\000\000\n\004\000\000\n@\000\000\000\000\n\026\000\000\000\000\n\"\000\000\000\000\000\000\000\000\n.\000\000\nZ\000\000\000\000\000\000\n^\000\000\000\000\000\000\nl\000\000\000\000\000\000\t.\000\000\n~\000\000\000\000\n\\\000\000\000\000\000\000"), (16, "\001\216\003\246\003\247\001\245\003\173\005\134\003\192\006\214\006\215\0005\006X\000N\000N\005\173\000=\003\173\001J\003\192\006L\001K\0079\007:\001\165\000w\000w\007=\006[\006.\006/\0032\004\227\004\163\000\128\000\128\000$\000w\002T\005\231\006X\000N\006[\005\195\005\171\003\173\000\128\003\174\007?\006J\005\174\005\189\005\190\000w\006M\005\189\005\190\006\\\000?\006_\005\189\005\190\000\128\006^\003\029\002\191\003e\0060\005\232\005\189\005\190\006\\\001\244\006_\005\189\005\190\004r\005\242\003\175\0005\0061\005\196\003\197\006\219\006\220\0006\003\176\000O\000O\003\175\002\195\001L\006\\\003\197\006_\005\189\005\190\003\176\000N\001M\006j\001\166\000\171\000*\004Z\006\224\005\240\000\179\006\227\005\243\005\189\005\190\000w\000\018\001\216\000O\000\007\003\175\003\173\002\194\003\192\000\128\006o\001\007\001\007\003\176\000N\007\019\000^\002Y\003\246\003\247\002\170\007\020\006\196\001\007\000\017\006k\000w\006l\005\191\001\\\001\026\007\021\005\191\004q\000\005\000\128\002\172\005\191\003~\001\007\002\136\0006\002U\005\018\000N\003\236\005\191\005\197\001\n\004\\\002Y\005\191\006r\006\227\000N\0005\003\236\006\156\0009\001\n\000O\000w\005A\005@\006m\000\173\003e\002\173\000\215\006\156\000\128\005;\005\191\000\174\003\246\003\247\004r\006n\003\175\000=\006\206\005\197\003\197\002\172\000R\004^\003\176\005\191\000O\002R\000w\002\139\002\140\002\163\002\143\004\229\003\189\003\133\001\007\000\128\004c\003^\003;\006\157\004Z\000\184\004s\003\189\003\190\005\020\004\241\002Y\003\127\000\183\000\r\006\161\000\184\000\184\000O\003\190\001]\000>\004\223\001\015\001\007\0005\0009\003\029\000O\0006\000\129\006\158\001\168\003\238\003\135\003\189\000\016\000\017\000S\000_\002Y\003\246\003\247\006\158\000\184\005\004\007\025\003\190\000V\000w\004e\001\216\004\164\000F\004\235\003\173\004{\003\192\000\128\001\007\005\002\004\\\006p\000w\003\"\001\017\002\198\004\155\003\199\007\026\007Y\001\018\000\128\005\237\005\210\000w\006u\004n\001\021\003\199\007\021\007Z\004q\002\219\000\128\002\202\0005\003\200\001\007\003\249\005\248\004o\003\240\005\249\002\198\001 \003\202\004^\003\200\0006\0022\000\184\003\203\003\240\000\185\007\189\000S\003\202\003\189\001\166\002\203\001\030\004c\003\203\0009\003e\000V\000\184\004s\007\027\003\190\000F\001\030\007\190\002\196\004r\003\244\003\175\007\028\003\136\005\250\003\197\000\224\002\222\0073\003\176\006\243\001\"\002\203\000\186\003\029\007m\000U\000w\005\014\003\248\002g\001\007\005\228\005\189\005\190\003\128\000\128\004Z\002\129\002V\002\223\005\185\000w\003\r\0006\001\007\004e\0005\004v\0075\000\217\000\128\004{\000P\002j\006\159\0077\001\007\005\186\000\004\000\004\001\015\007#\004\155\003\199\003\014\004\144\006\159\0009\002\201\000\188\004\237\0005\000N\000\225\005\211\000Q\003\173\000\219\003\192\001\216\001\024\001\027\003\200\003\173\000\190\003\192\000^\003\240\000\005\000\005\0005\003\202\003V\004\\\000N\004i\002\145\003\203\001J\007n\005<\001V\001\016\000w\002{\006\148\001\030\004\149\0032\004\227\004\163\007&\000\128\002\191\005\168\005\169\000N\005>\000w\002Z\0006\005\191\003!\001\029\001\007\005>\002\135\000\128\0009\004^\005\229\004\153\006\162\002\204\006\149\006\152\005\189\005\190\002\193\001\007\003\189\001\024\005\004\003e\004c\0006\000O\000S\003\175\000\184\004s\007o\003\190\004r\002U\003\175\003\176\000V\003\005\003\197\007\028\007\198\000F\003\176\0006\000N\007q\002\194\000O\000\171\001\030\001L\007K\007L\000\172\002k\0005\002Y\002l\001M\006\165\004Z\003\246\003\247\006\169\001\021\001 \001\216\000Y\002k\000O\001\217\002l\000N\004e\001\218\004v\007s\005I\001\021\004{\001\007\000N\005\214\007u\0009\0005\0005\000S\000c\003\029\004\155\003\199\001\140\006\156\006\247\001\007\004\229\000V\002\149\002U\001\\\000N\000F\002\226\005\191\002\227\005\170\001\"\001\030\0009\003\200\000N\004\242\003\236\003 \003\240\001\n\004\\\000O\003\202\005\007\000w\001\030\000\173\000\004\003\203\0007\007P\0009\0006\000\128\000\174\001\216\0005\001\030\005\171\003\173\006\166\003\192\001\027\001\236\005\174\005\189\005\190\001\219\006\243\000O\003\004\007'\006\167\006\168\007(\001\220\004^\000\005\000O\000w\003\189\001\021\0006\0006\007\021\007_\004\163\003\189\000\128\000\184\006\158\004c\003\190\003\029\000\183\006\170\000\184\004s\000O\003\190\0005\004\244\000\130\003\003\001\028\002'\000\b\005\138\000O\005K\006\227\000\184\000S\004\223\001]\001\238\003\021\002\133\001 \003e\004u\007-\000V\007.\0005\001\030\004J\000F\001\027\004r\0006\003\175\001\216\000a\004o\003\197\003\173\0009\003\192\003\176\002\199\004e\001\007\004\164\003\137\004\235\000:\004{\001\239\005\210\007j\005\002\003\199\006\173\005\191\006\254\000w\004Z\004\155\003\199\001\"\007\021\007_\004\163\001^\000\128\001_\004A\0009\0005\001\031\003\200\002\178\001\021\0006\001`\003\201\001\007\003\200\001\241\003\202\0005\000\184\003\240\002\180\000\185\003\203\003\202\004\247\005L\005\228\005\189\005\190\003\203\001a\001\233\003e\002\023\0006\001b\000N\007\151\001\030\001c\000\184\004\144\004r\001\234\003\175\001d\000P\004\232\003\197\003\020\004\\\004A\003\176\001\030\001\133\000P\000\186\000N\000w\006X\003\031\001\217\001 \007d\003;\001\218\006\164\000\128\003V\000h\004Z\003\019\000w\002\026\004\169\003\136\001\216\000\\\000j\0006\001\217\000\128\001\244\004\203\001\218\000\168\004^\004K\004o\006[\001\007\0006\005\228\005\189\005\190\0009\004B\003\189\005\029\002\153\006\246\004c\005\211\000\192\001!\004L\000\184\004s\007e\003\190\000O\005\192\004o\000N\000\193\005\188\005\191\007\028\006\\\0009\006_\005\189\005\190\004d\001\246\006\015\002\183\004\\\005\178\006g\000N\000O\005\186\001\021\005K\001\219\005U\006\229\005\182\001\247\006\230\003\030\001\216\001\220\004E\005\217\003\173\002\157\003\192\004\247\001\236\004e\005W\004\164\001\219\007g\001\007\004{\007\\\0005\006\234\007i\001\220\004^\0009\005X\000w\004H\004\155\003\199\001\007\007\021\007_\004\163\003\189\000\128\0009\001\030\004c\003\246\003\247\005W\005\191\000\184\004s\007e\003\190\000O\003\200\002\159\000\130\006=\002\025\003\240\007\028\002\188\005\213\003\202\002\182\000S\004d\005\218\001\238\003\203\000O\002W\003e\005\239\000w\000V\005\191\006\188\001\030\005_\000F\004\249\004r\000\128\003\175\001\216\006\227\007\154\003\197\003\173\007k\003\192\003\176\005\255\004e\005a\004\164\006b\007g\0006\004{\001\239\005\240\007f\007i\005\243\005\189\005\190\005b\000w\004Z\004\155\003\199\006\148\007\021\007_\004\163\001I\000\128\000N\006-\005\189\005\190\001J\005a\000<\001V\003\246\003\247\001\233\001\007\003\200\001\241\002\157\0005\0005\003\240\000\130\000\184\007\002\003\202\001\234\006\149\006\152\005\189\005\190\003\203\002\184\001\233\003e\002\023\005\202\003<\004o\007\005\001\030\002\184\000\184\005e\004r\001\234\003\175\000w\002\139\002\144\003\197\002\143\004\\\004o\003\176\002\183\000\128\001\007\0005\005a\002\158\003C\001\021\0074\005\211\007h\000N\003;\007\174\0009\001J\006\210\004Z\001V\002\186\002\026\002\198\004o\000O\001\215\005\191\001L\0005\002\185\001\244\001\153\006\191\000\129\004^\001M\005\216\004\252\001\007\0006\0006\005\191\003\172\002Y\0005\003\189\001\015\007\012\006\243\004c\005\234\003;\001\030\002,\000\184\004s\007e\003\190\000w\002\139\002\140\002\141\002\143\005\226\005\191\007\028\002\203\000\128\005p\006\243\004\218\004d\001\246\001\156\006\030\004\\\005s\001\\\0006\005\232\005\189\005\190\007\171\004I\005r\004\218\000O\001\247\003\239\001L\001\216\001\007\005r\001\153\003\173\000Z\003\192\001M\000\129\004e\007\182\004\164\0006\007g\004\255\004{\007\\\004\255\002Y\007i\000F\004^\004\220\005\023\000w\0005\004\155\003\199\0006\007\021\007_\004\163\003\189\000\128\004A\0009\004c\004\219\005v\007\017\000]\000\184\004s\007e\003\190\0005\003\200\006.\006/\001\\\006\212\003\240\007\028\006H\005a\003\202\005\001\006W\004d\005\000\005\251\003\203\007w\007x\003e\005\025\001\007\007{\002\198\0005\001\030\005~\005\023\0009\004r\000\184\003\175\001\216\001]\005\191\003\197\003\173\007b\003\192\003\176\006N\004e\005\128\004\164\0052\007g\002H\004{\005\129\0052\007p\007i\0009\0061\0006\006\207\000w\004Z\004\155\003\199\005\132\007\021\007_\004\163\005\128\000\128\000N\002\203\0009\005\024\000\171\001\159\007\194\007\183\0006\000\179\005a\001\007\003\200\000w\007\173\002\145\004B\003\240\0032\000\130\0054\003\202\000\128\006d\000w\0053\000\184\003\203\001`\001]\003e\007}\0006\000\128\003_\007\\\001\030\007\193\002Z\007\200\004r\007\230\003\175\006\245\000\005\002\135\003\197\001a\004\\\007\201\003\176\007\236\001\169\003e\006i\006\135\001c\000\130\003c\006\137\007\231\007t\001d\002Y\006\244\006\147\000D\001\167\004Z\007I\003Q\007\237\003f\0009\000O\007\130\000w\000~\0005\000\173\002\145\000F\000\215\007\150\004^\000\128\007\148\000\174\001\007\001\030\001`\006\227\007\182\0009\007\142\003\189\003j\003V\007\144\004c\007\146\007r\007\152\002Z\000\184\004s\007e\003\190\007\158\001a\002\135\001\007\004!\007\159\001\169\007\028\000\129\0009\001c\007\164\007\165\004d\001\007\007\170\001d\004\\\002Y\000\183\007\169\007\177\007\180\007\186\0005\000N\000N\007\182\000w\001\217\000\171\007\187\001\216\001\218\007\191\000\181\003\173\000\128\003\192\007\192\007\195\004e\007\196\004\164\0006\007g\001\030\004{\002?\007\199\001\n\007i\006\027\004^\007\202\007\183\000w\007\183\004\155\003\199\000\176\0032\004\227\004\163\003\189\000\128\001\007\007\203\004c\007\220\007\209\003;\003l\000\184\004s\007e\003\190\002\214\003\200\007\218\000\130\007\214\000N\003\240\007\028\007\217\001J\003\202\004@\001K\004d\007\226\007\224\003\203\007\228\002]\003e\004s\0006\000O\000O\007\233\001\030\001\219\002\230\000\173\004r\000\184\003\175\007\242\000\185\001\220\003\197\000\174\007\241\000\000\003\176\000\000\004e\006X\004\164\000\000\007g\000\000\004{\000\000\001\007\000N\007i\004A\000\000\003\173\000w\003\174\004Z\004\155\003\199\000\000\001\012\000\000\000\000\000\128\0005\005M\001\216\000\186\000\000\004{\003\173\006[\003\192\004\131\000\000\000\183\001\007\003\200\000O\000\000\004\155\001L\003\240\000\000\001\018\0005\003\202\000\000\000\000\001M\000w\001\021\003\203\006\243\000\217\0032\004\227\004\163\000\000\000\128\006\\\001\030\006_\005\189\005\190\0009\000\000\000w\000w\0005\000\000\003;\0032\004\\\000\188\000\000\000\128\000\128\000\225\000\000\000\000\000\000\000\219\000O\001\030\003\175\000\000\000\000\000\000\000\190\003e\001\\\000\000\003\176\000\000\001\030\002Z\000\000\0006\000\000\004r\000\000\003\175\002\135\004B\000\000\003\197\003e\004'\004^\003\176\006\198\001\007\001\233\000\000\000\000\000\000\002Y\002Y\0006\003\189\000\000\000\184\000\184\004c\001\234\000\185\000\000\004Z\000\184\004s\000w\003\190\005D\004\241\000\000\0005\000\000\001\216\000\000\000\128\000\000\003\173\0006\003\192\000\000\004d\001\030\001\007\000\000\000w\002\154\005\191\006\201\000\000\006\024\006\025\000\000\000\000\000\128\000\130\000\186\000w\001\021\000\000\001\007\001\007\0032\004\227\004\163\007S\000\128\000\000\007T\004e\004\157\004\164\000\000\004\235\000\184\004{\000\000\001]\0009\004\131\004\\\000\000\004D\000\187\000\000\000\129\004\155\003\199\000\000\000\000\000\000\000\000\000\000\000\000\004\161\002Y\005\206\003e\000\000\0009\000\000\001\235\001\030\000\188\000\000\0006\003\200\004r\001\004\003\175\003\189\003\240\0005\003\197\000\000\003\202\004^\003\176\000\190\000\184\000\000\003\203\003\190\004A\001\007\005\204\000\000\003\189\000\000\005N\001\030\004c\005\207\005\189\005\190\004Z\000\184\004s\000\000\003\190\004\239\004\241\007X\001\007\006\247\001\216\003Q\000\000\000\000\003\173\000\000\003\192\000\000\004d\004s\001\007\000\000\001\152\000\000\003A\000\000\000\000\002\198\000\000\000\000\000\000\000\000\0005\000\000\000w\002\160\000w\006\204\003V\0032\004\227\004\163\000\000\000\128\001\n\000\128\004e\000\000\004\164\000w\004\235\0006\004{\003W\000\000\0009\004\131\004\\\000\128\001A\000\000\006\243\000\000\004\155\003\199\005M\003\191\006\227\000\000\004{\000\000\002\203\000\000\004\131\003e\0005\000\000\003[\000\000\003;\004\155\004B\000\000\003\200\004r\000\000\003\175\005\191\003\240\004\156\003\197\000N\003\202\004^\003\176\000\171\000\000\000\000\003\203\002Y\000\181\000\000\000\000\000\000\003\189\000N\0006\001\030\004c\000\170\002Q\000\000\004Z\000\184\004s\000\000\003\190\005\022\004\241\002}\000\000\000\000\001\216\002\232\001\030\001\024\003\173\000\000\003\192\000\000\004d\000\000\001\007\000\000\001\007\000\000\0009\006\025\006'\000\000\000\000\000\000\000\000\002j\001\021\000\000\000w\001\007\000\000\0006\002\230\0032\004\227\004\163\000\000\000\128\002\162\000\000\004e\000\000\004\164\006\028\004\235\002\135\004{\000O\000\000\006%\004\131\004\\\000\173\006(\005\189\005\190\000\000\004\155\003\199\000\000\000\174\000O\006$\000\000\000\000\000\000\000\173\000\000\003e\000\000\001\030\000\000\000\000\0009\001;\004G\000\000\003\200\004r\000\000\003\175\000w\003\240\000\000\003\197\000\000\003\202\004^\003\176\001\030\000\128\006%\003\203\000\000\000\000\006(\005\189\005\190\003\189\000\000\000\183\001\030\004c\000\000\000\000\000\000\004Z\000\184\004s\000\000\003\190\005H\004\241\000\130\000\183\006$\004A\000\000\0005\000\000\000\000\003:\000\000\000\000\004d\000\000\001\007\000\000\003B\000N\000\000\002Y\000\000\000\171\000\000\000\000\000\000\000w\000\179\006\247\000\000\004\144\002\210\005\191\006%\000\000\000\128\000\000\006(\005\189\005\190\000w\004e\001\216\004\164\000\000\004\235\003\173\004{\003\192\000\128\002k\004\131\004\\\002l\000\000\002\128\000\000\003V\004\155\003\199\001\021\000\000\000\000\000\000\000\000\000\000\000w\0005\001\007\000\000\000\000\007\021\004\149\004q\005\191\000\128\0005\000\184\003\200\000\000\000\185\0006\000\000\003\240\000\000\006I\000\000\003\202\004^\000\000\000\000\000\184\000O\003\203\000\185\000\000\004\153\000\173\004B\003\189\000\215\006$\001\030\004c\001\030\000\174\003e\000\000\000\184\004s\000\000\003\190\0071\004\241\006J\000\186\004r\001\024\003\175\006M\005\189\005\190\003\197\002g\001\007\004d\003\176\005\191\000N\000\186\006%\002|\000\171\000\000\006(\005\189\005\190\000\172\001\007\007l\000\000\0006\000\187\000w\004Z\000\183\006$\002j\006\250\000\000\0006\000\000\000\128\004e\001\216\004\164\000w\004\235\003\173\004{\003\192\000\000\000\188\004\131\001\007\000\128\0009\000\189\000\000\000\000\004\155\003\199\000\000\000\000\001\b\006%\000\000\000\190\000w\006(\005\189\005\190\000\000\007\021\005\203\004q\000\000\000\128\000\000\000\000\003\200\000\000\000\000\000\000\000\000\003\240\004\209\0062\000\000\003\202\000\000\004\\\000O\0005\000\000\003\203\002Y\000\173\000N\005\191\000\000\000\000\000\171\005\204\001\030\000\174\003E\000\179\003e\000\000\005\207\005\189\005\190\003]\005\191\000\000\0009\000\000\004r\000\000\003\175\000w\000\000\000\184\003\197\0009\000\185\004^\003\176\000\000\000\128\001\007\000\000\000\000\000w\000\000\000\000\000\000\003\189\000\000\0068\007]\004c\000\128\001\007\000\183\004Z\000\184\004s\007^\003\190\001O\000\000\000\000\001\012\000\000\000\000\001\030\007\028\005\191\000\000\000\186\002\231\000\000\007a\000\000\001\007\0006\002\219\001\021\000\000\000\000\000O\002k\000\000\000\000\002l\000\173\000\000\000\000\000\215\000\000\000\000\001\021\0035\000\174\000\000\000\000\000\217\000\000\000\000\000\000\004e\001\216\004v\007c\000\000\003\173\004{\003\192\005\191\000\220\007i\004\\\000\000\000\000\007&\000\000\000\188\004\155\003\199\002\230\000\225\001\030\006[\000\000\000\219\000w\002\222\001\007\001\150\006O\007\021\000\190\004q\000\183\000\128\001\030\000\000\003\200\000\000\000\000\001\007\000\184\003\240\006\249\000\185\006x\003\202\004^\000\000\002\223\000\000\006\\\003\203\006_\005\189\005\190\000\000\000\000\003\189\000\000\0009\001\030\004c\000\000\000\000\003e\000\000\000\184\004s\007^\003\190\000\000\005\228\005\189\005\190\004r\000\000\003\175\007\028\000\186\000w\003\197\000N\000\000\007a\003\176\000\171\006\252\000\000\000\128\006\182\000\172\0005\000\000\001\021\000\000\000\000\000\000\007`\000\000\001\216\000\000\000\000\004Z\003\173\000\000\003\192\000\000\000\000\005\228\005\189\005\190\004e\001\216\004v\007c\000\000\003\173\004{\003\192\000\000\000\184\007i\001\007\000\185\000\000\0026\0005\005\219\004\155\003\199\004\215\000\000\000\000\000\000\000\000\000\000\000w\001\030\000\000\000\000\000\000\0032\005\191\004q\000\000\000\128\000\000\000\000\003\200\000\000\001\024\000\224\000\000\003\240\000\130\000O\000\000\003\202\000\186\004\\\000\173\005\191\000\000\003\203\000\000\0006\000\000\000\000\000\174\002\137\006}\007'\001\030\001\236\007(\003\175\003e\001\007\000\000\003\197\000\000\001\021\000\000\003\176\002k\000\217\004r\002l\003\175\000\000\000\000\000\000\003\197\000\000\001\021\004^\003\176\000\000\005\191\000\000\0006\004Z\000\000\000\000\000\000\000\188\003\189\006\140\000\183\000\225\004c\000\000\000\000\000\219\004Z\000\184\004s\007^\003\190\000\000\000\190\007,\000\000\000\000\001\216\001\030\007\028\000\000\003\173\000\000\003\192\000\000\007a\002\226\001\007\002\234\000\000\005P\001\030\0005\000\000\000\000\005\017\000w\002\139\002\140\002\151\002\143\000w\004\221\0009\000\000\000\128\0032\003\236\004q\000\000\000\128\004\\\000\000\004e\000\000\004v\007c\000\000\000\000\004{\006s\000\000\000\000\007i\004\\\000\000\000\000\000\000\000\000\000\000\004\155\003\199\000\000\000\000\000w\000\000\000\129\000\000\0009\006\238\0005\003e\000\000\000\128\000\000\000\000\002Y\004^\000\000\000\184\003\200\004r\000\185\003\175\000\000\003\240\000\000\003\197\003\189\003\202\004^\003\176\004c\000\000\000\000\003\203\0006\000\184\000\000\000\000\003\190\003\189\000\000\000N\001\030\004c\000\000\000\171\002\165\004Z\000\184\004s\000\181\003\190\004\223\001\021\000\000\000\186\000\000\001\216\000\000\000\000\000\000\003\173\001\007\003\192\000\000\005\006\001\209\001\007\000\000\000\000\005\015\004j\000\000\000\000\000\000\005\017\006[\000\000\000\000\000\000\004e\000w\0006\000w\000\000\000\000\0032\004l\004q\000\000\000\128\000\000\000\128\004e\005\231\004v\005\b\001\030\003\199\004{\001\007\000\130\000\192\004\131\004\\\006\\\000\000\006_\005\189\005\190\004\155\003\199\000\000\000\195\000\000\000O\003H\003\200\006\151\0009\000\173\003e\003\240\005\232\005\189\005\190\003\202\000\000\000\174\000\000\003\200\004r\003\203\003\175\000\000\003\240\000\000\003\197\0005\003\202\004^\003\176\000\000\000\000\000\000\003\203\000\000\006\149\006\152\005\189\005\190\003\189\000N\000\000\001\030\004c\000\170\002M\000\000\004Z\000\184\004s\000\000\003\190\000\000\000\000\002g\0009\000\183\001\216\000\000\000\000\000\000\003\173\002q\003\192\000\000\005\006\000\000\001\007\0005\001\007\000\000\000\000\004x\000\000\000\000\002\145\000\000\000\000\002j\000N\000\000\000w\0005\000\170\002G\005\191\0032\004y\004\163\000\000\000\128\000\000\006\249\004e\000\000\004v\005\b\000w\002Z\004{\0006\005\191\000\130\004\131\004\\\002\135\000\128\000\000\000\000\000\000\004\155\003\199\000\000\000\000\000O\000\000\000\000\004\016\000\000\000\173\000\000\003e\000\000\000\000\000\000\000\000\005\191\001;\000\000\000\000\003\200\004r\000\000\003\175\000\000\003\240\006\240\003\197\000\000\003\202\004^\003\176\0006\001\021\000\184\003\203\000\000\000\185\000\000\001\030\000\130\003\189\000\000\000O\001\030\004c\0006\000\000\000\173\004Z\000\184\004s\000w\003\190\000\000\004\024\001;\000\183\000\000\001\216\000\000\000\128\000\000\003\173\000\000\003\192\000\000\004\168\000\000\001\007\000\000\002\222\000\186\000\000\004\166\0009\000\000\001\030\002r\000\000\000\000\000\000\000\000\000w\000\000\001\007\002\219\000\000\0032\004y\004\163\000\000\000\128\000\000\002\223\004e\000\183\004v\004\170\000\187\006\171\004{\002\130\000\000\002k\004\172\004\\\002l\000\000\000\000\000\000\000\000\004\155\003\199\001\021\000\000\000\000\0009\005\235\000\188\000\000\000\000\000\000\003e\001\003\000\000\000\000\000\000\000\000\000\000\000\000\0009\003\200\004r\000\190\003\175\002\222\003\240\005\231\003\197\000N\003\202\004^\003\176\000\171\000\184\000\000\003\203\000\185\000\181\001\007\000\000\000\000\003\189\000\000\000\000\001\030\004c\001\030\002\223\006[\004Z\000\184\004s\000w\003\190\000\000\005\232\005\189\005\190\000\130\001\216\000\000\000\128\000\000\003\173\0005\003\192\000\000\004d\000\000\001\007\000\000\000\186\000\184\004(\004\171\000\185\000\000\006\\\000\000\006_\005\189\005\190\000\000\000w\000\000\000\000\002\219\000\000\0032\004y\004\163\000\000\000\128\000\000\000\000\004e\005\231\004\164\000\000\004\165\001\222\004{\000O\000\000\000\000\004\131\004\\\000\173\000\000\000\000\000\186\000\000\004\155\003\199\000\130\000\174\000\000\000\000\002k\000\000\000\000\002l\000\000\003e\000\000\005\232\005\189\005\190\001\021\004.\000\000\000\000\003\200\004r\000\000\003\175\002\222\003\240\0006\003\197\000N\003\202\004^\003\176\000\171\005\191\000\000\003\203\000\000\000\181\001\007\000\000\0005\003\189\000\000\000\183\001\030\004c\006[\002\223\000\000\004Z\000\184\004s\000w\003\190\000\000\002\225\0005\005\191\000\000\001\216\001\030\000\128\000\000\003\173\0005\003\192\000\000\004d\000\000\001\007\000\000\002k\000\000\000\000\002l\006\\\000\000\006_\005\189\005\190\0005\001\021\000\000\000w\000\000\000\000\002\219\000\000\0032\004\227\004\163\000\000\000\128\000\000\000\000\004e\000\000\004\164\0005\004\165\000\000\004{\000O\005\191\000\000\004\131\004\\\000\173\000\000\000\000\000\000\0009\004\155\003\199\0006\000\174\000\000\000\000\000\000\000\000\002\226\000\000\0037\003e\000\000\001\030\000\000\000\000\000\000\0005\0006\000\184\003\200\004r\000\185\003\175\002\222\003\240\0006\003\197\000N\003\202\004^\003\176\000\171\000\000\000\000\003\203\000\000\000\181\001\007\000\000\0005\003\189\0006\000\183\001\030\004c\000\000\002\223\006\001\004Z\000\184\004s\000w\003\190\000\000\005\191\0005\000\186\000\000\001\216\0006\000\128\000\000\003\173\0005\003\192\000\000\004d\000\000\001\007\006\176\002k\000\000\000\000\002l\000\000\000\000\000\000\000\000\000\000\0005\001\021\000\000\000w\000\187\000\000\000\000\0009\0032\004\227\004\163\0006\000\128\000\000\001\231\004e\000\000\004\164\000\000\004\165\000\000\004{\000O\0009\000\188\004\131\004\\\000\173\000\000\001\006\000\000\0009\004\155\003\199\0006\000\174\000\000\000\000\006\004\000\190\002\226\000\000\003S\003e\000\000\001\030\000\000\0009\000\000\000\000\0006\000\184\003\200\004r\000\185\003\175\002\222\003\240\0006\003\197\000N\003\202\004^\003\176\000\171\0009\000\000\003\203\000\000\000\181\001\007\000\000\000\000\003\189\0006\000\183\001\030\004c\000\000\002\223\000\000\004Z\000\184\004s\000w\003\190\000\000\004\234\000\000\000\186\000\000\001\216\000\000\000\128\000\000\003\173\0009\003\192\000\000\004d\006\189\001\007\000\130\002k\000\000\000\000\002l\000\000\000\000\000\000\000\000\000\000\000\000\001\021\000\000\000w\000\187\004\135\002z\0009\0032\004\227\004\163\000\000\000\128\000\000\002u\004e\000\000\004\164\000\000\004\235\000\000\004{\000O\0009\000\188\004\131\004\\\000\173\000\000\001X\003\016\0009\004\155\003\199\000\000\000\174\000\000\000\000\000\000\000\190\002\226\000\000\004\146\003e\000\000\001\030\000\000\0009\003\018\000\000\000\000\000\184\003\200\004r\000\185\003\175\000\000\003\240\000\000\003\197\000N\003\202\004^\003\176\000\171\000\000\000\000\003\203\000\000\000\181\001\007\000\000\000\000\003\189\000\000\000\183\001\030\004c\000\000\000\130\000\000\004Z\000\184\004s\000\000\003\190\000\000\004\236\000\000\000\186\000\000\001\216\000\000\000\000\004\194\003\173\000\000\003\192\000\000\004d\000\000\001\007\000\130\002k\000\000\000\000\002l\000\000\000\000\000\000\000\000\000\000\000\000\001\021\000\000\000w\000\187\004\210\003\178\000\000\0032\005\t\004\163\000\000\000\128\000\000\003\187\004e\000\000\004\164\000\000\004\235\000\000\004{\000O\000\000\000\188\004\131\004\\\000\173\000\000\001Z\004\t\000\000\004\155\003\199\000\000\000\174\000\000\000\000\000\000\000\190\002\224\000\000\000\000\003e\000\000\001\030\000\000\000\000\000\000\005\231\000\000\000\184\003\200\004r\000\185\003\175\000\000\003\240\000\000\003\197\000N\003\202\004^\003\176\000\171\000\000\000\000\003\203\000\000\000\172\000\000\006[\000\000\003\189\000\000\000\183\001\030\004c\005\232\005\189\005\190\004Z\000\184\004s\000w\003\190\000\000\004\254\000\000\000\186\000\000\001\216\000\000\000\128\000\000\003\173\000\000\003\192\000\000\004d\006\\\001\007\006_\005\189\005\190\000\000\001\020\005\011\000\000\000\000\000w\002\139\002\147\001\021\002\143\000w\000\187\000\000\000\000\000\128\0032\005\t\004\163\000\000\000\128\000\000\000\000\004e\000\000\004\164\000\000\004\235\000\000\004{\000O\000\000\000\188\004\131\004\\\000\173\000\000\003\194\000\000\000\000\004\155\003\199\000\000\000\174\000\000\000\000\000\129\000\190\000\000\000\000\000\000\003e\000\000\001\030\000\000\000\000\002Y\000\000\000\000\000\184\003\200\004r\000\185\003\175\005\191\003\240\000\000\003\197\000N\003\202\004^\003\176\000\171\000\000\000\000\003\203\000\000\000\172\001\007\006[\000\000\003\189\000\000\000\183\001\030\004c\000\000\000\000\005\191\004Z\000\184\004s\000w\003\190\000\000\000\000\000\000\000\186\000\000\001\216\000\000\000\128\000\000\003\173\001\007\003\192\000\000\004d\006\\\001\007\006_\005\189\005\190\000\000\005\031\005\r\000\000\000\000\000w\002\156\000\000\000\000\000\000\000w\000\187\000\000\000\000\000\128\0032\004y\004\163\000\000\000\128\000\000\000\000\004e\000\000\004\164\000\000\005\012\000\000\004{\000O\000\000\000\188\004\131\004\\\000\173\0005\003\196\000\000\000\000\004\155\003\199\000\000\000\174\000\000\000\000\000\129\000\190\000\000\000\000\000\000\003e\000\000\0005\000\000\000\000\002Y\000\000\000\000\000\184\003\200\004r\000\185\003\175\001\216\003\240\000\000\003\197\001\217\003\202\004^\003\176\001\218\000\000\000\000\003\203\000\000\000\000\001\007\006\n\000\000\003\189\006\243\000\183\001\030\004c\000w\000\000\005\191\004Z\000\184\004s\000\000\003\190\000\000\000\128\000\000\000\186\000\000\001\216\000\000\006\199\000\000\003\173\001\007\003\192\000\000\004d\000\000\001\007\0006\000\000\000\000\000\000\002\167\000\000\000\000\002\145\000\000\000\000\000\000\001\021\000\000\000w\000\000\000\000\004\015\0006\0032\000\000\004q\000\000\000\128\000\000\000\000\004e\002Y\004\164\001\236\005\012\002Z\004{\001\219\000\000\000\192\004\131\004\\\002\135\000\000\000\000\001\220\000\000\004\155\003\199\000\000\000\197\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003e\000\000\001\030\000\000\000\000\000\000\005\231\000\000\000\184\003\200\004r\000\185\003\175\000\000\003\240\000\000\003\197\001\237\003\202\004^\003\176\001\007\000\000\000\000\003\203\000\000\000\000\001\238\001\030\000\000\003\189\000\000\0009\001\030\004c\005\232\005\189\005\190\004Z\000\184\004s\000\000\003\190\000\000\000\000\000\000\000\186\000\000\001\216\0009\006\202\000\000\003\173\000\000\003\192\000\000\004d\000\000\001\007\000\000\001\239\005B\000\000\002\169\000\000\000\000\005\017\000\000\000\000\000\000\001\021\000\000\000w\000\000\000\000\000\000\000w\0032\000\000\004q\000\000\000\128\000\000\000\000\004e\000\128\004\164\000\000\004\165\002Z\004{\001\241\000\000\000\192\004\131\004\\\002\135\000\000\000\000\000\000\007\030\004\155\003\199\000\000\000\199\000\000\000\000\001\233\0020\002\023\000\000\000\000\003e\000\000\001\030\006\247\000\184\002\214\000\000\001\234\000\000\003\200\004r\000\000\003\175\005\191\003\240\002\230\003\197\000N\003\202\004^\003\176\000\171\000\000\000\000\003\203\000\000\000\172\000\000\001\030\000\000\003\189\002\"\002\230\001\030\004c\000\000\000\000\002\026\004Z\000\184\004s\000\000\003\190\000\000\000\000\000\000\001\244\000\000\001\216\000\000\000\000\000\000\003\173\000\000\003\192\000\000\005\006\004\021\001\007\000\000\000w\005R\001\007\000\000\004&\000\000\005\017\000\000\000\000\000\128\000\000\000\000\000w\000\000\000\000\000\000\005\231\0032\000\000\004q\000\000\000\128\000\000\000\000\004e\005\231\004v\005\b\001\246\000\000\004{\000O\000\000\000\000\004\131\004\\\000\173\000\000\000\000\000\000\000\000\004\155\003\199\001\247\000\174\005\232\005\189\005\190\001\030\000\000\000\000\000\000\003e\000\000\005\232\005\189\005\190\000\000\005\231\000\000\000\000\003\200\004r\000\000\003\175\000\000\003\240\000\000\003\197\000N\003\202\004^\003\176\000\171\000\000\000\000\003\203\000\000\000\172\000\000\006\b\000\000\003\189\000\000\000\183\001\030\004c\005\232\005\189\005\190\004Z\000\184\004s\000\000\003\190\000\000\005\231\000\000\001\007\000\000\001\216\000\000\000\000\000\000\003\173\000\000\003\192\000\000\005\006\000\000\001\007\000\000\000\000\005T\000\000\000\000\000\000\000\000\005\017\000\000\000\000\000\000\000\000\000\000\000w\005\232\005\189\005\190\000\000\0032\005\231\004q\000\000\000\128\000\000\005\191\004e\000\000\004v\005\b\000w\000\000\004{\000O\005\191\000\000\004\131\004\\\000\173\000\128\002\211\000\000\000\000\004\155\003\199\000\000\000\174\001\021\000\000\005\232\005\189\005\190\000\000\000\000\003e\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\184\003\200\004r\000\185\003\175\005\191\003\240\000\000\003\197\000\000\003\202\004^\003\176\000\000\000\000\000\000\003\203\000\000\000\000\000\000\000\000\000\000\003\189\000\000\000\183\001\030\004c\000\000\000\000\001\030\004Z\000\184\004s\000\000\003\190\000\000\000\000\000\000\000\186\000\000\001\216\000\000\000\000\005\191\003\173\000\000\003\192\000\000\005\006\000\000\001\007\002g\000\000\006\255\000\000\007\007\000\000\000\000\005\017\002i\000\000\000\000\000\000\000\000\000w\000\000\001\007\000\000\000\000\0032\004y\004\163\000\000\000\128\0034\002j\004e\005\191\004v\005\b\000\000\001\021\004{\000\000\000\000\000\192\004\131\004\\\000w\000\000\006\021\000\000\000\000\004\155\003\199\000\000\000\201\000\128\000\000\006\019\000\000\000\000\000\000\000\000\003e\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\184\003\200\004r\000\185\003\175\000\000\003\240\000\000\003\197\000\000\003\202\004^\003\176\001\030\000\000\000\000\003\203\000\000\000\000\000\000\006\017\000\000\003\189\000\000\000N\001\030\004c\000\000\000\171\000\000\004Z\000\184\004s\000\172\003\190\000\000\000\000\000\000\000\186\000\000\001\216\000\000\000\000\000\000\003\173\000\000\003\192\000\000\005\006\000\000\001\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006 \002g\000\000\000\000\000\000\000\000\000w\000\000\000w\002q\000\000\0032\000\000\004q\000\000\000\128\001\007\000\128\004e\000\000\004v\005\b\000w\000\000\004{\002j\000\000\000\192\004\131\004\\\000\000\000\128\000\000\000\000\006+\004\155\003\199\000\000\000\203\000\000\000O\002k\000\000\000\000\002l\000\173\003e\000\000\000\000\000\000\000\000\001\021\000\000\000\174\000\000\003\200\004r\000\000\003\175\000\000\003\240\000\000\003\197\000N\003\202\004^\003\176\000\171\000\000\000\000\003\203\000\000\000\172\000\000\000\000\000\000\003\189\000\000\000N\001\030\004c\000\000\000\171\000\000\004Z\000\184\004s\000\172\003\190\000\000\000\000\002g\000\000\000\183\001\216\001\030\000\000\000\000\003\173\002q\003\192\000\000\004d\000\000\001\007\002g\001\007\007\r\000\000\0076\000\000\000\000\005\017\002\127\000\000\002j\000\000\000\000\000w\000\000\001\007\000\000\000\000\0032\004y\004\163\000\000\000\128\000\000\002j\004e\000\000\004\164\000\000\004\165\002r\004{\000O\000\000\000\000\004\131\004\\\000\173\000\000\000\000\000\000\000\000\004\155\003\199\000\000\000\174\000\000\000O\000\000\000\000\000\000\000\000\000\173\003e\002s\000\000\002k\000\000\000\000\002l\000\174\000\000\003\200\004r\000\000\003\175\001\021\003\240\000\000\003\197\000\000\003\202\004^\003\176\000\000\000\000\000\184\003\203\000\000\000\185\000\000\000\000\000\000\003\189\000\000\000\183\001\030\004c\000\000\000\000\000\000\004Z\000\184\004s\000\000\003\190\000\000\000\000\000\000\000\000\000\183\001\216\000\000\000\000\005\026\003\173\000\000\003\192\000\000\005\006\001\030\001\007\000\000\000\000\000\186\000\000\000\000\000\000\000\000\000\000\002r\000\000\000\000\000N\000\000\000w\000\000\000\170\002<\000\000\0032\000\000\004\163\000\000\000\128\000\000\000\000\004e\000\000\004v\005\b\000\000\000\000\004{\002x\000\000\002k\004\131\004\\\002l\000\000\000\000\000\000\000\000\004\155\003\199\001\021\000\000\000\000\000\000\002k\000\192\000\000\002l\000\000\003e\000\000\000\000\000\000\000\000\001\021\000\000\000\205\000\184\003\200\004r\000\185\003\175\001\216\003\240\000\000\003\197\001\217\003\202\004^\003\176\001\218\000\000\000\184\003\203\000\000\000\185\000\000\000\000\000\000\003\189\000\000\000O\001\030\004c\001\030\000\000\000\173\004Z\000\184\004s\000\000\003\190\000\000\000\000\001;\000\186\000\000\001\216\001\030\000\000\000\000\003\173\000\000\003\192\000\000\004d\000\000\001\007\000\000\000\000\000\186\000\000\000\000\000\000\000\000\004\167\000\000\000\000\000\000\000N\000\000\000w\000\000\000\170\0029\000\000\0032\000\000\004q\000\000\000\128\000\000\000\000\004e\000\183\004\164\001\236\004\165\000\000\004{\001\219\000\000\000\192\004\131\004\\\000w\000\000\000\000\001\220\000\000\004\155\003\199\000\000\000\207\000\128\000\000\000\000\000\192\000\000\000\000\000\000\003e\000\000\000\000\000\000\000\000\000\000\000\000\000\209\000\000\003\200\004r\000\000\003\175\000\000\003\240\000\000\003\197\001\237\003\202\004^\003\176\000\000\000\000\000\000\003\203\000\000\000\000\001\238\000\000\000\000\003\189\000\000\000O\001\030\004c\000\000\000\000\000\173\004Z\000\184\004s\000\000\003\190\000\000\005\231\001;\000\000\000\000\001\216\000\000\000\000\000\000\003\173\000\000\003\192\000\000\005\028\000\000\001\007\000\000\001\239\000\184\000\000\000\000\000\185\000\000\004p\005\231\000\000\007&\000\000\000\000\000w\005\232\005\189\005\190\000\000\0032\000\000\004q\000\000\000\128\001\007\000\000\004e\000\183\004\164\000\000\005\030\000\000\004{\001\241\000\000\000\000\004\131\004\\\005\232\005\189\005\190\000\186\000\000\004\155\003\199\000\000\000\000\000\000\000\000\001\233\002-\002\023\000\000\000\000\003e\000\000\000\000\000\000\000\184\000\000\000\000\001\234\000\000\003\200\004r\000\000\003\175\000\000\003\240\000\000\003\197\000N\003\202\004^\003\176\000\171\000\000\000\000\003\203\000\000\000\172\000\000\000\000\000\000\003\189\002\"\000N\001\030\004c\000\000\000\171\002\026\004Z\000\184\004s\000\172\003\190\000\000\000\000\000\000\001\244\000\000\001\216\000\000\000\000\005\191\003\173\000\000\003\192\000\000\004t\000\000\001\007\000\000\000w\000\184\000\000\000\000\000\185\0032\004z\000\000\000\000\000\128\000\000\000\000\000w\000\000\005\191\000\000\000\000\0032\005\231\004q\000\000\000\128\000\000\000\000\004e\000\000\004v\004w\001\246\000\000\004{\000O\000\000\000\000\004\131\004\\\000\173\000\000\000\000\000\186\003e\004\155\003\199\001\247\000\174\000\000\000O\005\232\005\189\005\190\002Y\000\173\003e\000\000\0005\007'\000\000\000\000\007(\000\174\000\000\003\200\004r\000\000\003\175\001\021\003\240\000\000\003\197\000N\003\202\004^\003\176\000\171\000\000\000\000\003\203\000\000\000\172\000\000\000\000\000\000\003\189\006\243\000\183\001\030\004c\000\000\000\000\000\000\004Z\000\184\004s\000\000\003\190\000\000\005\231\000\000\001\007\000\183\001\216\000\000\000\000\000\000\003\173\007+\003\192\000\000\004t\001\030\001\007\000w\000\000\000\000\000\000\000\000\0032\000\000\0066\000\000\000\128\000\000\000\000\000\000\000w\005\232\005\189\005\190\0006\0032\000\000\004q\000\000\000\128\000\000\000\000\004e\005\191\004v\004w\000\000\006C\004{\000O\000\000\000\000\004\131\004\\\000\173\000\000\000\000\003e\000\000\004\155\003\199\000\000\000\174\000w\000\000\000\000\000\000\002Y\006\238\000\000\003e\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\184\003\200\004r\000\185\003\175\000\000\003\240\000\000\003\197\000\000\003\202\004^\003\176\000\000\000\000\000\184\003\203\000\000\000\185\000\000\004s\000\000\003\189\000\000\000\183\001\030\004c\000\000\000\000\000\000\004Z\000\184\004s\000\000\003\190\000\000\000\000\001\007\000\186\000\000\001\216\0009\000\000\005\191\003\173\000\000\003\192\000\000\004t\000\000\001\007\000\000\000\000\000\186\000\000\000\000\000N\000\000\000\000\000\000\001J\000\000\000\000\001V\000w\000\000\005y\000\000\000\000\0032\004{\004q\000\000\000\128\004\131\000w\004e\000\000\004v\004w\006\238\004\155\004{\001\007\000\128\000\192\004\131\004\\\000\000\000\000\000\000\000\000\006A\004\155\003\199\000\000\000\211\000\000\000\000\000\000\000\192\000\000\000\000\000\000\003e\000\000\000\000\006\247\000\000\002\232\000\000\000\213\000\184\003\200\004r\000\185\003\175\000\000\003\240\000\000\003\197\000\000\003\202\004^\003\176\001\030\000\000\000\000\003\203\000\000\000O\004s\000\000\001L\003\189\0005\002\230\001\030\004c\000\000\000\000\001M\004Z\000\184\004s\000\000\003\190\000\000\000\000\000\000\000\186\000\000\004\238\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\231\000\000\001\007\000\000\006\243\000N\000\000\000\000\000\000\000\171\006?\000\000\000\000\001\007\000\179\000\000\000\000\005{\000\000\000\000\000\000\004{\000\000\001\\\000\000\004\131\000\000\006\248\004e\001\216\004v\004\233\004\155\003\173\004{\003\192\000\000\000\192\004\131\004\\\000\000\000\000\000\000\000\000\000\000\004\155\003\199\000\000\000\227\0006\000\000\000N\005\231\000w\000\000\000\170\0028\000\000\0032\000\000\004q\000\000\000\128\000\000\000\000\003\200\000\000\000\000\000\000\000\000\003\240\006\240\000\000\000\000\003\202\004^\001\030\000\000\001\021\000O\003\203\005\232\005\189\005\190\000\173\000\000\003\189\000\215\000\000\001\030\004c\000\000\000\174\003e\000\000\000\184\004s\005\231\003\190\000\000\000\000\000\000\000\000\004r\004\230\003\175\000\000\000\000\001h\003\197\000\000\000\184\004\231\003\176\001]\000\000\000\000\006\239\000\000\000\000\000\000\000\000\001\030\000\000\000\000\000O\005\232\005\189\005\190\000\000\000\173\004Z\000\183\000\000\0009\000w\000\000\000\000\001;\000\000\004e\001\216\004v\004\233\000\128\003\173\004{\003\192\000\000\000\000\004\131\001\007\000\000\000\000\000\000\000\000\000\000\004\155\003\199\000\000\000\000\006\240\000\000\000\000\000w\000w\000\000\000\000\001\021\006\238\0032\005\191\004q\000\128\000\128\001`\000\000\003\200\000\183\000\000\000\000\000N\003\240\000\000\000\000\000\171\003\202\000\000\004\\\000\000\000\172\000\000\003\203\000\000\001a\000\000\000\000\000\000\000\000\001\155\006\247\001\030\0035\001c\003:\003e\000\000\000\000\000\000\001d\000\000\000\000\001\030\000\000\002Y\004r\005\191\003\175\002g\005\231\000\184\003\197\000\000\000\185\004^\003\176\002q\000\000\000\000\002\230\000\000\000\000\000\000\001\007\000\000\003\189\000\000\000N\000\000\004c\000\000\000\171\002j\004Z\000\184\004s\000\179\003\190\005\232\005\189\005\190\000\224\004\250\001\216\000\000\000O\000\000\003\173\000\186\003\192\000\173\004\251\001\007\001\007\000\000\000\000\000\184\000\000\000\174\000\185\000\000\000\000\005\231\000\000\000\000\000\000\000\000\000w\000\000\000\000\000\000\000\000\0032\000\000\004q\000\217\000\128\000\000\000\000\004e\000\000\004v\004\253\000\000\000\000\004{\000\000\000\000\006\131\004\131\004\\\005\232\005\189\005\190\000\186\000\188\004\155\003\199\000\183\000\225\000\000\000O\000\000\000\219\000\000\000\000\000\173\003e\000\000\000\215\000\190\000\000\000\000\000\000\000\174\000\000\003\200\004r\000\000\003\175\000\000\003\240\000\000\003\197\000\000\003\202\004^\003\176\005\191\000w\000\000\003\203\000\000\006\129\000\000\000\000\000\000\003\189\000\128\000\000\001\030\004c\002r\000w\000\000\004Z\000\184\004s\000\000\003\190\000\000\000\000\000\128\000\000\000\183\004\248\006\239\000\000\000\000\000\000\000\000\000\000\000\000\004\231\000\000\001\007\003K\000w\002k\000\000\000\000\002l\006\238\005\005\000\000\000\000\000\128\000\000\001\021\000\000\000\000\005\191\000\000\001\171\000\000\000\000\000\184\000\000\000\000\000\185\000w\004e\001\216\004v\004\233\006\238\003\173\004{\003\192\000\128\007\024\004\131\004\\\000\000\000\000\000\000\000\000\003]\004\155\003\199\000N\000\000\002g\000\000\000\171\000\000\000w\000\000\000\000\000\172\002q\0032\001\030\004q\000\186\000\128\002g\001\007\003\200\000\000\000\000\000\000\000\000\003\240\002q\000\000\002j\003\202\004^\000\000\000\000\001\007\000\184\003\203\000\000\000\185\000\000\000\000\000\000\003\189\002j\001\030\001\030\004c\000\000\006\127\003e\000\000\000\184\004s\000\000\003\190\000\000\000\000\000\000\001\007\004r\000\000\003\175\005\231\000\000\000\192\003\197\001\012\000\000\005\006\003\176\000\000\000\000\000\000\000\186\000\000\000\229\000\000\000O\000\000\005\231\000N\001\007\000\173\000\000\000\171\000\000\000\000\004Z\000\000\000\172\000\174\005\232\005\189\005\190\000\000\000\000\004e\000\000\004v\005\b\000\217\006\144\004{\000\000\000\000\000\000\004\131\001\007\005\232\005\189\005\190\000\000\001\216\004\155\003\199\005\n\003\173\000\000\003\192\000\000\000\188\000\000\000\000\000N\000\225\000\000\000\000\000\171\000\219\007\003\000\183\000\000\000\172\003\200\000\000\000\190\000w\000\000\003\240\002r\000\000\0032\003\202\004q\004\\\000\128\000\000\000\000\003\203\000\000\000\000\000\000\000\000\002r\000O\000\000\000\000\001\030\000\000\000\173\000\000\000\000\006\239\004\027\000\000\002k\000\000\000\174\002l\000\000\000\000\000\000\000\000\000\000\000\000\001\021\003e\004\138\000\000\002k\004^\005\191\002l\000\000\000\000\006\249\004r\000\000\003\175\001\021\000\000\003\189\003\197\000\000\000\000\004c\003\176\000O\005\191\000\000\000\184\004s\000\173\003\190\000N\000\000\006\251\000\183\001J\000\000\000\174\001V\000\000\001\021\004Z\000\000\000\000\005\006\000\184\001\030\000\000\000\185\000w\000\000\000\000\000\000\000\000\000\000\000w\007\023\000\000\000\128\000\000\001\030\001\007\001\216\001\021\000\128\000\000\003\173\000\000\003\192\000\000\000\000\000\000\004e\005\231\004v\005\b\000\000\000\183\004{\007\015\000\000\005\231\004\131\000\186\001\030\000\000\000w\000\000\000\000\004\155\003\199\0032\000\000\004q\000\000\000\128\000\000\000\000\004\\\000\000\000\000\000\000\005\232\005\189\005\190\000O\000\000\001\030\001L\003\200\005\232\005\189\005\190\000\000\003\240\000\000\001M\000\000\003\202\000\000\000\000\000\000\000\184\000\000\003\203\000\185\003e\000\000\000\000\000\000\000\192\000\000\002g\001\030\004^\006\142\004r\000\000\003\175\000\000\002q\000\231\003\197\000\000\000\000\003\189\003\176\001\007\000\000\004c\001\141\000\000\006\180\001\007\000\184\004s\002j\003\190\001\\\000\000\000\186\000\000\000\000\000\000\004Z\000\184\000\000\000\000\000\185\000\000\000\000\007\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\007\000w\000\000\000\000\000\000\001\216\0032\000\000\005\191\003\173\000\128\003\192\000\000\000\000\000\000\004e\005\191\004v\007\006\000\186\000\000\004{\007\018\0025\000\000\004\131\000\000\000\000\000\000\000w\000\000\000\000\004\155\003\199\0032\000\000\004q\004\\\000\128\000\000\000\000\003e\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002Y\003\200\000\000\000\000\000\000\000\000\003\240\000\000\000\000\000\000\003\202\000\184\000\000\000\000\001]\000\192\003\203\000\000\003e\000\000\000\000\000\000\004^\000\000\000\000\001\030\000\233\000\000\004r\000\000\003\175\002r\000\000\003\189\003\197\000\000\000\000\004c\003\176\000\000\001\142\0023\000\184\004s\000\000\003\190\000N\000\000\001\007\000\000\001J\000\000\000\000\001V\000\000\004\197\004Z\002k\000\000\007\004\002l\000\000\000\000\000\000\001^\000\000\001_\001\021\000\000\000\000\000w\000\000\000\000\001\021\000\000\001`\001\007\001\216\000\000\000\128\000\000\003\173\000\000\003\192\006\185\000\000\000\000\004e\000\000\004v\007\006\000\000\006\194\004{\001a\000\000\000\000\004\131\000\000\001b\000\000\000w\000\000\001c\004\155\003\199\0032\000\000\005i\001d\000\128\001\030\000\000\004\\\000\000\000\000\000\000\001\030\001\133\000\000\000O\000\000\000\000\001L\003\200\000\000\000\000\000\000\000\000\003\240\000\000\001M\000\000\003\202\000\000\000\000\000\000\000\000\000\000\003\203\000\000\003e\004s\000\000\000\000\000\000\000\000\000\000\001\030\004^\000\000\004r\000\000\003\175\000\000\000\000\000\000\003\197\000\000\000\000\003\189\003\176\000\000\000\000\004c\001\141\000\000\000\000\001\007\000\184\004s\000\000\003\190\001\\\000\000\000\000\000\000\000\000\000N\004Z\000\000\000\000\000\171\000\000\000\000\000\000\007\004\000\172\005}\000\000\000\000\000\000\004{\000\000\000\000\000\000\004\131\000\000\000\000\001\007\000\000\000\000\000\000\004\155\001\216\000\000\000\000\000\000\003\173\000\000\003\192\000\000\000\000\000\000\004e\000\000\004v\007\006\000\000\000\000\004{\000\000\000\000\000\000\004\131\000\000\000\000\000\000\000w\000\000\000\000\004\155\003\199\0032\000\000\005i\004\\\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000N\000\000\001\030\000\000\000\170\0027\003\200\000O\000\000\000\000\000\000\003\240\000\173\000\000\000\000\003\202\000\184\000\000\000\000\001]\000\174\003\203\000\000\003e\000\000\000\000\000\000\004^\005j\000\000\001\030\000\000\000\000\004r\000\000\003\175\000\000\000\000\003\189\003\197\000\000\000\000\004c\003\176\000\000\001\142\001\143\000\184\004s\000\000\003\190\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000N\000\000\000\183\004Z\000\171\000\000\004d\000\000\000\000\000\172\000\000\001^\000\000\001_\000\000\000\000\000O\000\000\000\000\000\000\001\021\000\173\001`\001\007\001\216\000\000\000\000\000\000\003\173\001;\003\192\000\000\000\000\000\000\004e\000\000\005m\000\000\000\000\000\000\004{\001a\000\000\000\000\004\131\000\000\001b\000\000\000w\000\000\001c\004\155\003\199\0032\000\000\005i\001d\000\128\000\000\000\000\004\\\000\000\000\000\000\000\001\030\001\133\000\000\000\000\000\000\000\183\000\000\003\200\000\000\000\000\000O\000\000\003\240\000\000\000\000\000\173\003\202\000\000\000\000\000\000\000\000\000\000\003\203\000\174\003e\000\000\000\184\000\000\000\000\000\185\000\000\001\030\004^\005l\004r\000\000\003\175\000\000\000\000\000\000\003\197\000\000\000\000\003\189\003\176\000\000\000\000\004c\000\000\000\000\000\000\000\000\000\184\004s\000\000\003\190\000\000\000\000\000\000\000\000\000\000\000N\004Z\000\183\000\186\003\173\000\000\003\192\000\000\004d\000\000\000\000\000\000\000N\000\000\000\000\000\000\000\170\002/\000\000\000\000\000\000\001\007\000\000\000\000\000w\000\000\000\000\000\000\000\000\004\014\000\000\000\000\000\184\000\128\000\000\000\185\004e\000\000\005m\000\000\000\000\000\000\004{\000\000\000\000\000\000\004\131\000\000\000\000\000\000\002C\000\000\000\000\004\155\003\199\000\000\000\000\005,\004\\\000\000\000\000\000N\000\000\000\000\004-\001J\000\000\000\000\001V\000\000\000\186\000\000\000\000\003\200\0043\000\000\003\175\000\000\003\240\000\000\003\197\000\000\003\202\000\000\003\176\000\000\000O\000\000\003\203\000\000\000\184\000\173\000N\000\185\004^\005o\000\171\001\030\000\000\001;\000\000\000\179\005/\000\000\000\000\003\189\0051\000\000\000\000\004c\000\000\000\000\000\000\000\000\000\184\004s\000w\003\190\000\000\000\000\000\000\004\014\001\007\000\000\000\000\000\128\000\000\000\000\000\186\000\000\000\000\004d\000\000\000\000\000\000\000O\000\000\000\000\001L\000\183\000\000\000\000\001\153\000\000\000\000\000\000\001M\000\000\000\000\000\000\000\000\0055\000\000\000\000\000\000\003\236\004-\000\000\001\n\004e\000\000\005m\000\000\000\000\000\000\004{\0043\000\000\000\000\004\131\000\000\000\173\000\000\000\000\000\215\000\192\004\155\003\199\000\000\000\174\000\000\000\000\000\000\000\000\001\156\000\000\000\235\000\000\001\\\000\000\000\000\000\000\000\000\000N\000\000\0044\003\200\000\171\004\175\000\000\000\000\003\240\000\179\000\000\000\000\003\202\003\189\000\000\000\000\000\000\000\000\003\203\000\000\000\000\001\007\000\184\004\181\000w\003\190\000\183\001\030\000\000\000\000\000\000\000\000\000N\000\128\000\184\000\000\003\173\000\185\003\192\004\223\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000w\000\000\000\000\000\000\000\000\004\014\000\000\000N\000\000\000\128\000\000\001J\000\000\000\000\001V\000\000\000\186\004\182\000O\000\000\000\000\0057\000\000\000\173\000\000\000\000\000\215\000\184\004\208\003\199\001]\000\174\000\000\0058\000\000\000\000\000\000\000w\002\139\000\000\004-\002\146\000\000\002=\000\000\000\000\000\128\000\000\003\200\000\000\0043\000\000\003\175\003\240\000\000\000\000\003\197\003\202\000\184\004\181\003\176\000\185\000\000\003\203\000\000\000\000\001\007\000\000\001\159\000\000\000\000\000\183\001\030\000\000\000\000\000\000\000\000\000\129\005/\000\000\000\000\000O\0051\000\000\001L\000\000\000\000\002Y\001\153\000\224\000\000\001`\001M\000N\000\000\000\000\000\186\003\173\001\007\003\192\001\b\000\000\001\n\000\000\000N\000\000\000\000\000\000\001J\004\182\001a\001V\000\000\004\190\000\000\001\169\000\000\000w\000\000\001c\004\208\000\000\004\014\000\217\000\000\001d\000\128\000\000\000w\000\000\001\156\000\000\000\000\000\000\001\\\001\007\000\000\000\128\000\000\000\000\000\000\000\000\000N\000\188\000\000\000\000\001J\000\225\000\000\001V\005.\000\219\000\000\000\000\000\000\000\000\000\000\004-\000\190\000\184\000\000\000\000\000\185\000\000\001\030\000\000\000w\0043\000\000\003\175\000\000\000\000\000\000\003\197\000\000\000\128\000\000\003\176\000O\000\000\000\000\001L\003\189\000\000\000\000\000\000\000\000\000\000\000\000\001M\001\012\000\184\004\181\000\000\003\190\005/\000\000\000\186\000\000\0051\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004d\000\000\000\000\000\000\000\000\000N\001\018\001\007\000O\000\170\001:\001L\000\000\001\021\000\184\001\141\000\217\001]\001\007\001M\000\000\000\000\000\000\001\\\000\000\000\000\000\000\000\000\000\000\000\000\001\157\000\000\000\000\000\000\004\182\000\000\000\188\000\000\004\190\000\000\000\225\000\000\000\000\000\000\000\219\004\208\003\199\000\000\000\000\000\000\000\000\000\190\000\000\001\141\000\000\001\159\001\007\001\030\000\000\000\000\000\000\001\\\000N\000\000\000\000\003\200\001J\000\000\000\000\001V\003\240\000\000\000\000\000\000\003\202\002Z\002\148\000\000\001`\000O\003\203\000\000\002\135\000\000\000\173\000\000\000w\000\000\000\000\001\030\000\000\003\189\001;\000\000\000\000\000\128\000\000\001a\000\000\000\000\000\184\004\181\001\169\003\190\000\000\000\000\001c\000\000\000\000\000\000\000\000\000\184\001d\000\000\001]\000\000\000\000\004d\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\030\000\000\000\000\000\000\000\000\000\000\000\183\000\000\000\000\000\000\000O\000\000\000\000\001L\001\142\001\224\000\000\000\000\000\000\000\000\000\000\001M\000\000\000\184\000\000\004\182\001]\000\000\000\000\004\190\000N\000\000\000\000\000\000\000\170\001F\004\208\003\199\001^\000\000\001_\000\000\000\000\000\000\000\000\000\000\000N\001\021\000\000\001`\000\170\001\202\001\142\003\130\000\000\001\141\003\200\000\000\001\007\000\000\000N\003\240\001\216\001\\\001J\003\202\001\217\001V\001a\000\000\001\218\003\203\000\000\001b\000\000\000\000\001^\001c\001_\000\000\001\030\000\000\000\000\001d\000w\001\021\000\000\001`\000\000\000\000\000\000\001\030\001\133\000\128\000\184\000\000\000\000\000\185\000N\000\000\000\000\000\000\001J\000\000\000O\001V\001a\000\000\000\000\000\173\000\000\001b\000\000\000\000\000\000\001c\000\000\001;\000\000\000\000\000O\001d\000w\000\000\000\000\000\173\000\000\000\000\000\000\001\030\001\133\000\128\000\186\001;\000O\000\000\001\236\001L\000\000\000\000\001\219\000\000\000\000\000\000\000\000\001M\000\000\000\000\001\220\000\000\000\000\000\184\000\000\000\000\001]\000\000\000\000\000\183\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000N\000\000\000O\000\183\001J\001L\000\000\001V\002\029\001\141\001\142\003\180\001\007\001M\000\000\000\000\000\000\001\\\001\238\000\000\000\000\000\000\000\000\000\000\000w\000N\000\000\000\000\000\000\000\170\001\212\000\000\000\000\000\128\001^\000\000\001_\000N\000\000\000\000\000\000\000\171\000\000\001\021\000\000\001`\000\172\001\141\000\000\000\000\001\007\001\239\000\000\000\000\000\000\001\\\000\000\000\000\000N\000\000\000\000\000\000\000\170\003u\001a\000\000\000\000\000\000\000\000\001b\000\000\000\000\000\000\001c\000O\000\184\000\000\001L\000\185\001d\000\000\000\000\001\241\000\000\000\000\001M\000\000\001\030\001\133\000\000\000\000\000\184\000\000\000\000\000\185\000\000\000\000\000N\001\233\000O\002\023\000\171\000\000\000\000\000\173\000\184\000\179\000\184\001]\000\000\001\234\000O\001;\000\186\000\000\000\000\000\173\006\225\007@\001\141\000\000\000w\001\007\000\000\000\174\000\000\000\000\001\\\000\000\000\186\000\128\000\000\000O\000\000\001\142\004`\000\000\000\173\000\000\000\000\002\026\000\000\000\000\000\184\000\000\001;\001]\000\000\000\000\001\244\000\000\000\000\000\183\000\000\000\000\000\000\000\000\000\000\001^\000\000\001_\000\000\000\000\000\000\000\183\000\000\000\000\001\021\000\000\001`\000\000\000O\001\142\004}\000\000\000\000\000\173\000N\000\000\000\215\000\000\000\171\000\000\000\000\000\174\000\183\000\179\000\000\001a\000\000\000\000\001\246\000\000\001b\000\000\000\000\001^\001c\001_\000\000\000\000\000w\000\000\001d\000\000\001\021\001\247\001`\000\000\000\000\000\128\001\030\001\133\000N\000\000\000\184\000\000\000\171\001]\001\007\000\000\000\000\000\179\000\000\000\183\000\000\001a\000\000\000\000\000\000\000\000\001b\000\000\007Q\007~\001c\000\000\000w\000\000\000\000\000\184\001d\000\000\000\185\001\142\004\184\000\128\000\000\000\000\001\030\001\133\000O\000\184\000\000\000\000\000\185\000\173\000\000\000\000\000\215\000\000\000\000\000\000\000\000\000\174\000\000\000\000\000\000\001^\000\000\001_\000\000\000\000\000\184\000\000\000\000\000\185\001\021\000\186\001`\000\000\000\000\000\000\000\000\000N\000\000\000\000\000O\000\171\000\000\000\186\000\000\000\173\000\179\000\000\000\215\000\000\000\000\001a\001\007\000\174\000\000\000\000\001b\000\183\000\000\000\000\001c\000w\000\000\000\000\000\186\000\184\001d\000\000\000\185\000\000\000\128\000\000\000\000\000\000\001\030\001\133\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000N\001\007\000\000\000\192\000\170\003\165\000\183\000\000\000\000\006\226\000\000\000N\000\000\000\000\000\237\000\171\000\186\000\000\000\000\000\000\000\179\000\000\000\000\000\000\000O\000\000\000\000\000\000\000\000\000\173\000\000\000\000\000\215\007A\000\000\000ww\001\021\000\000\000\000\000\217\000\000\006\226\000\000\000\183\000\128\000\000\000\000\000\000\000\186\001\007\000\000\000\000\000\000\000\000\000\183\000\000\000\000\000\000\000\000\000\188\000\000\000\000\000\000\000\225\000\000\007A\000\000\000\219\000\000\000\000\000\000\000\000\001\021\000\000\000\190\000\217\000\000\000\000\000\000\000\000\001\030\000\184\000\000\000\000\000\185\000O\000\000\000N\000N\000\000\000\173\001J\000\171\000\215\001V\000\188\000\000\000\179\000\174\000\225\000\000\000\000\000\000\000\219\000\000\000\000\000\000\000\000\000\000\000\000\000\190\000w\001,\000\000\000\000\000\000\001\030\000\000\000\000\000\186\000\128\000\000\000\000\000\000\000\000\000N\000\000\000\000\000\000\001J\000\000\000\184\001V\001\007\000\185\000\000\002:\000\000\000\183\000\000\000\000\000\000\000\184\001\021\000\000\000\185\000\217\000\000\000\000\000ww\000\184\000\188\000\000\000\185\000\000\000\225\000\000\000\000\000\128\000\219\000\000\000\000\000\000\000\000\000\000\000\000\000\190\000\000\001[\000\000\000\000\001\007\001\030\000\000\000\000\000\000\001\\\000\000\000\000\000\000\000\000\001,\000\000\000N\000\000\000\000\000\000\001J\000\186\000\000\001V\000\000\000\000\000\000\000\000\000\000\000N\000\000\000\000\000O\000\170\003\169\001L\000\000\000\000\001.\000\000\000ww\001\136\001\021\000\000\001`\000\000\000\217\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\001\139\000\000\000\000\001\007\000\000\000\000\000\000\001a\001\\\000\000\000\188\000\000\001b\000\000\000\223\001^\001c\001_\000\219\000\000\000\000\000\183\001d\000\000\001\021\000\190\001`\000\000\000\000\000\000\001\030\001\137\000\000\000\000\000O\000\000\000\000\000\000\000\184\000\173\000N\001]\000\215\000\000\000\171\001a\000\000\000\174\000\000\000\179\001b\001\216\000\000\000\000\001c\001\217\000\000\000\000\000\000\001\218\001d\000\000\000\000\000\000\000w\000\000\000\000\000\000\001\030\001\133\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\007\000\000\000\000\000\000\000\000\000\183\000\000\000\000\000\000\001^\000\000\001_\000\000\000\000\000\184\000\000\000\000\001]\001\021\000\000\001`\000\000\000\000\000\000\000\000\000\000\000\000\000\184\000\000\000\000\000\185\000\000\000O\000\000\000\000\000\000\000\000\000\173\000\000\001a\000\215\000\000\000\000\001\236\001b\000\174\000\000\001\219\001c\000\000\000\000\000\000\000\000\000\000\001d\001\220\000\000\000\000\000\000\000\000\000\000\000\000\001\030\001\133\000\000\000\186\000\000\001^\000\000\001_\000N\000\000\000\000\000\000\000\171\000\000\001\021\000\000\001`\000\179\001\007\000\000\000\000\000\000\000\000\000\183\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\184\000w\001\238\000\185\001a\000\000\000\000\000\000\000\000\001b\000\128\000\000\000\000\001c\000\000\000\000\000N\000\000\000\000\001d\000\171\000\000\000\000\000\000\000\000\000\179\000\000\001\030\001\133\000\000\000\000\001\174\000\000\000\000\000\000\001\239\000\000\000\000\000\186\000\000\000www\000\000\000\000\002K\000\000\000\000\001\007\000\000\000\000\000\128\001\021\000\183\000\000\000\217\000\000\001\233\000\000\002\030\001,\000\000\000\000\000\000\000\000\000\000\000\184\000\186\000\000\001\234\000\000\000\000\001\216\000\000\004\\\000\188\003\173\000\000\003\192\000\225\000\000\000\000\000\000\000\219\002O\000\000\000\000\000\000\000\000\000\000\000\190\001\021\000O\000\000\000\217\000\000\001\030\000\173\000\000\000\000\000\215\000\000\000\000\004S\004\224\000\174\000\000\000\000\001\244\000\000\004^\000\000\000\000\000\000\000\188\000\000\000\000\000\000\000\225\000\000\000\000\003\189\000\219\000\000\002!\004c\000\000\000\000\000\000\000\190\000\184\000\000\000\000\003\190\000\000\001\030\000\000\000\000\000\000\000\000\001\007\000\184\000\000\000\000\000\185\000\183\001\236\004d\003\175\000\000\001\246\000\000\003\197\000\000\000\000\000\000\003\176\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\247\000\000\000\000\000\000\000\000\000\000\000\000\001,\000\000\004Z\004e\000N\001\216\000\000\000\186\000\171\003\173\000\000\003\192\000\000\000\172\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\199\000\000\000\000\003sc\000\000\000\000\004S\004T\000\184\003\154\000\000\003\190\000\000\000\000\000\000\000\000\001\021\000\000\000\000\000\217\000\000\000\000\000\000\000\000\000\183\004d\000N\000\000\000\000\000\000\001J\000\000\000\000\001V\000\000\000\000\000\000\000\000\000\000\000\188\000\000\000\000\000\000\000\225\001\216\000\000\000\000\000\219\003\173\001\236\003\192\003\175\000\000\004e\000\190\003\197\000\000\004\\\000\000\003\176\001\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\199\000\000\000\000\000\000\004S\004b\004Z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\200\000\000\000\000\004^\000\000\003\240\000\000\000\000\000\000\003\202\000O\000\000\000\000\001L\003\189\003\203\000\000\001\153\004c\000\000\000\000\001M\000\184\000\184\000\000\000\185\003\190\000\000\001\236\000\000\003\175\000\000\000\000\000\000\003\197\001\216\000\000\000\000\003\176\003\173\004d\003\192\000\000\000\000\004\\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004Z\000\000\000\000\001\156\000\186\000N\000\000\001\\\000\000\000\171\004S\004\180\004e\000\000\000\172\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004^\000\000\000\000\000\000\000\000\000\000\003\199\000\000\000\000\000\000\000\000\003\189\000\000\000\000\000\000\004c\000\000\000\000\000\000\000\000\000\184\000\000\000\000\003\190\000\000\003\200\000\000\000\192\000\000\001\236\003\240\003\175\000\000\004\\\003\202\003\197\000\000\004d\000\239\003\176\003\203\000\000\000\000\000\000\001\216\000\000\000\000\000\000\003\173\000\000\003\192\000\000\000\000\000\000\000\000\000O\000\000\004Z\000\000\000\000\000\173\000\000\000\000\000\000\000\000\004e\000\000\000\000\000\174\004^\000\000\000\184\000\000\001\216\001]\004S\004\226\003\173\000\000\003\192\003\189\000\000\000\000\003\199\004c\000\000\000\000\001\180\000\000\000\184\000\000\000\000\003\190\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\200\000\000\004\217\001\216\004d\003\240\000\183\001\217\000\000\003\202\001\159\001\218\004\\\000\000\000\000\003\203\001\236\001\216\003\175\000\000\000\000\001\217\003\197\000\000\000\000\001\218\003\176\000\000\000\000\000\000\000\000\000\000\004e\001`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004Z\001\236\000\000\003\175\004^\000\000\003\199\003\197\001a\000\000\000\000\003\176\000\000\001\169\000\000\003\189\000\000\001c\000\000\004c\000\000\000\000\000\000\001d\000\184\003\200\000\000\003\190\000\000\004Z\003\240\000\000\000\000\001\236\003\202\000\000\000\000\001\219\000\000\000\000\003\203\004d\000\000\000\000\000\000\001\220\000\000\001\236\000\000\000\000\000\184\001\219\000\000\000\185\000\000\000\000\000\000\004\\\000\000\001\220\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004e\000\000\000\000\000\000\000\000\000\000\001\237\001\216\000\000\000\000\000\000\001\217\000\000\000\000\000\000\001\218\001\238\004\\\003\199\000\186\001\237\000\000\000\000\000\000\004^\000\000\000\000\000\000\000\000\000\000\001\238\000\000\000\000\000\000\000\000\003\189\000\000\003\200\000\000\004c\000\000\000\000\003\240\000\000\000\184\000\000\003\202\003\190\000\000\001\239\000\000\001\216\003\203\004^\000\000\001\217\000\000\000\000\000\000\001\218\000\000\004d\000\000\001\239\003\189\000\000\000\192\000\000\004c\000\000\001\216\000\000\000\000\000\184\001\217\000\000\003\190\000\241\001\218\000\000\001\241\001\236\000\000\000\000\000\000\001\219\000\000\000\000\000\000\004e\004d\000\000\000\000\001\220\001\241\000\000\001\233\002*\002\023\000\000\000\000\000\000\000\000\000\000\000\000\000\184\000\000\003\199\001\234\000\000\001\233\002(\002\023\000\000\000\000\000\000\000\000\000\000\004etahxjd\000\225\000\190\000\000\000O\000\219\000\000\000\186\000\184\000\173\000\000\000\185\000\190\000\000\000\000\000\000\000\000\000\174\000\000\000\000\000\000\000\000\000\000\000\000\000N\000\000\000\000\000\000\000\171\000\000\000\000\001\236\000\000\000\172\000\217\001\219\000\000\000\000\000\000\005uf\000\185\000N\000\192\000\000\000\186\000\171\000\000\000N\000\000\000\000\000\172\000\171\000\000\001l\000\000\000\000\000\172\000\184\000\000\000\000\000\185\000\000\000\000\000\000\000O\000\192\000\000\000\000\000\000\000\173\000N\000\192\000\000\000\000\000\171\000\186\001n\000\174\000\000\000\172\000\000\000\000\001p\000\000\000\000\000O\000\184\000O\000\000\000\185\000\173\000\192\000\173\000\000\000\000\000\186\000\000\000\000\000\174\000\000\000\174\000O\001r\000O\000\000\000\000\000\173\000\000\000\173\000\000\000\000\000\000\000\000\000\000\000\174\000O\000\174\000\183\000\000\000\000\000\173\000O\000\192\000\000\000\186\000\000\000\173\000N\000\174\000\000\000\000\000\171\000\000\001t\000\174\000\000\000\172\000\000\000\183\000\000\000\183\000\000\000\192\000\000\000O\000\000\000N\000\000\000\000\000\173\000\171\000\000\000\000\001v\000\183\000\172\000\183\000\174\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\183\000\000\000\000\000\192\000\000\000\000\000\183\000\000\000N\000\000\000\000\000\000\000\171\000\000\001xz\000\000\000\183\000O\000\000\000\000\000\000\000\000\000\173\000\000\000\192\000\000\000\192\000\000\000\000\000N\000\174\000\000\000\000\000\171\000\000\001|\000\186\001~t\000O\000\000\000\000\000\000\000\186\000\173\000\000\000\192\000\184\000\000\000\183\000\185\000N\000\174\000\000\000\000\000\171\000\000\002\011\000\000\000\000\000\172\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000N\000\000\000\000\000\000\000\171\000\000\000\183\000\000\000\192\000\172\000\000\000\000\000N\000\000\000\000\000\000\000\171\000\186\000\000\002\r
  
  let semantic_action =
    [|
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        raise (MenhirLib.TableInterpreter.Accept _1));
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_dargexpr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_aexpr = 
# 2605 "parser_cocci_menhir.mly"
             ( Ast0.set_arg_exp _1 )
# 1953 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 225 "parser_cocci_menhir.mly"
       (Parse_aux.list_info)
# 1974 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_aexpr = 
# 2607 "parser_cocci_menhir.mly"
      ( let (nm,lenname,pure,clt) = _1 in
      let nm = P.clt2mcode nm clt in
      let lenname =
	match lenname with
	  Ast.AnyLen -> Ast0.AnyListLen
	| Ast.MetaLen nm -> Ast0.MetaListLen(P.clt2mcode nm clt)
	| Ast.CstLen n -> Ast0.CstListLen n in
      Ast0.wrap(Ast0.MetaExprList(nm,lenname,pure)) )
# 1988 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_ctype = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_aexpr = 
# 2616 "parser_cocci_menhir.mly"
      ( Ast0.set_arg_exp(Ast0.wrap(Ast0.TypeExp(_1))) )
# 2012 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = r;
            MenhirLib.EngineTypes.startp = _startpos_r_;
            MenhirLib.EngineTypes.endp = _endpos_r_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let ty : 'tv_signable_types = Obj.magic ty in
        let r : (
# 207 "parser_cocci_menhir.mly"
      (Data.clt)
# 2039 "parser_cocci_menhir.ml"
        ) = Obj.magic r in
        let _startpos = _startpos_r_ in
        let _endpos = _endpos_ty_ in
        let _v : 'tv_all_basic_types = 
# 884 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,Some ty)) )
# 2046 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = r;
            MenhirLib.EngineTypes.startp = _startpos_r_;
            MenhirLib.EngineTypes.endp = _endpos_r_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let ty : 'tv_signable_types = Obj.magic ty in
        let r : (
# 207 "parser_cocci_menhir.mly"
      (Data.clt)
# 2073 "parser_cocci_menhir.ml"
        ) = Obj.magic r in
        let _startpos = _startpos_r_ in
        let _endpos = _endpos_ty_ in
        let _v : 'tv_all_basic_types = 
# 886 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,Some ty)) )
# 2080 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let ty : 'tv_signable_types = Obj.magic ty in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : 'tv_all_basic_types = 
# 887 "parser_cocci_menhir.mly"
                    ( ty )
# 2104 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let ty : 'tv_non_signable_types = Obj.magic ty in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : 'tv_all_basic_types = 
# 888 "parser_cocci_menhir.mly"
                        ( ty )
# 2128 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_any_strict = 
# 2726 "parser_cocci_menhir.mly"
            ( Ast.WhenAny )
# 2150 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_any_strict = 
# 2727 "parser_cocci_menhir.mly"
            ( Ast.WhenStrict )
# 2172 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_any_strict = 
# 2728 "parser_cocci_menhir.mly"
            ( Ast.WhenForall )
# 2194 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_any_strict = 
# 2729 "parser_cocci_menhir.mly"
            ( Ast.WhenExists )
# 2216 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_arg_list_decl_ = let arglist =
          let xs =
            
# 1226 "parser_cocci_menhir.mly"
    ( [] )
# 2235 "parser_cocci_menhir.ml"
            
          in
          
# 1223 "parser_cocci_menhir.mly"
    ( xs )
# 2241 "parser_cocci_menhir.ml"
          
        in
        
# 1201 "parser_cocci_menhir.mly"
     ( let (args,vararg) = cleanup_arglist arglist in
       ((Ast0.wrap (Ast0.DOTS args)), vararg) )
# 2248 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs00;
          MenhirLib.EngineTypes.startp = _startpos_xs00_;
          MenhirLib.EngineTypes.endp = _endpos_xs00_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let xs00 : 'tv_reverse_separated_nonempty_llist_TComma_argorellipsis_one_arg_decl___ = Obj.magic xs00 in
        let _startpos = _startpos_xs00_ in
        let _endpos = _endpos_xs00_ in
        let _v : 'tv_arg_list_decl_ = let arglist =
          let xs0 = xs00 in
          let xs =
            let xs = xs0 in
            
# 1228 "parser_cocci_menhir.mly"
    ( xs )
# 2276 "parser_cocci_menhir.ml"
            
          in
          
# 1223 "parser_cocci_menhir.mly"
    ( xs )
# 2282 "parser_cocci_menhir.ml"
          
        in
        
# 1201 "parser_cocci_menhir.mly"
     ( let (args,vararg) = cleanup_arglist arglist in
       ((Ast0.wrap (Ast0.DOTS args)), vararg) )
# 2289 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_arg_list_name_opt_decl_ = let arglist =
          let xs =
            
# 1226 "parser_cocci_menhir.mly"
    ( [] )
# 2308 "parser_cocci_menhir.ml"
            
          in
          
# 1223 "parser_cocci_menhir.mly"
    ( xs )
# 2314 "parser_cocci_menhir.ml"
          
        in
        
# 1201 "parser_cocci_menhir.mly"
     ( let (args,vararg) = cleanup_arglist arglist in
       ((Ast0.wrap (Ast0.DOTS args)), vararg) )
# 2321 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs00;
          MenhirLib.EngineTypes.startp = _startpos_xs00_;
          MenhirLib.EngineTypes.endp = _endpos_xs00_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let xs00 : 'tv_reverse_separated_nonempty_llist_TComma_argorellipsis_one_arg_name_opt_decl___ = Obj.magic xs00 in
        let _startpos = _startpos_xs00_ in
        let _endpos = _endpos_xs00_ in
        let _v : 'tv_arg_list_name_opt_decl_ = let arglist =
          let xs0 = xs00 in
          let xs =
            let xs = xs0 in
            
# 1228 "parser_cocci_menhir.mly"
    ( xs )
# 2349 "parser_cocci_menhir.ml"
            
          in
          
# 1223 "parser_cocci_menhir.mly"
    ( xs )
# 2355 "parser_cocci_menhir.ml"
          
        in
        
# 1201 "parser_cocci_menhir.mly"
     ( let (args,vararg) = cleanup_arglist arglist in
       ((Ast0.wrap (Ast0.DOTS args)), vararg) )
# 2362 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = arg;
          MenhirLib.EngineTypes.startp = _startpos_arg_;
          MenhirLib.EngineTypes.endp = _endpos_arg_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let arg : 'tv_one_arg_decl_ = Obj.magic arg in
        let _startpos = _startpos_arg_ in
        let _endpos = _endpos_arg_ in
        let _v : 'tv_argorellipsis_one_arg_decl__ = 
# 1205 "parser_cocci_menhir.mly"
          ( Arg arg )
# 2386 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : (
# 213 "parser_cocci_menhir.mly"
       (Data.clt)
# 2407 "parser_cocci_menhir.ml"
        ) = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_argorellipsis_one_arg_decl__ = 
# 1206 "parser_cocci_menhir.mly"
                ( VAEllipsis (x) )
# 2414 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = y;
          MenhirLib.EngineTypes.startp = _startpos_y_;
          MenhirLib.EngineTypes.endp = _endpos_y_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let y : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 2435 "parser_cocci_menhir.ml"
        ) = Obj.magic y in
        let _startpos = _startpos_y_ in
        let _endpos = _endpos_y_ in
        let _v : 'tv_argorellipsis_one_arg_decl__ = 
# 1207 "parser_cocci_menhir.mly"
              ( Ellipsis (y) )
# 2442 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = arg;
          MenhirLib.EngineTypes.startp = _startpos_arg_;
          MenhirLib.EngineTypes.endp = _endpos_arg_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let arg : 'tv_one_arg_name_opt_decl_ = Obj.magic arg in
        let _startpos = _startpos_arg_ in
        let _endpos = _endpos_arg_ in
        let _v : 'tv_argorellipsis_one_arg_name_opt_decl__ = 
# 1205 "parser_cocci_menhir.mly"
          ( Arg arg )
# 2466 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : (
# 213 "parser_cocci_menhir.mly"
       (Data.clt)
# 2487 "parser_cocci_menhir.ml"
        ) = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_argorellipsis_one_arg_name_opt_decl__ = 
# 1206 "parser_cocci_menhir.mly"
                ( VAEllipsis (x) )
# 2494 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = y;
          MenhirLib.EngineTypes.startp = _startpos_y_;
          MenhirLib.EngineTypes.endp = _endpos_y_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let y : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 2515 "parser_cocci_menhir.ml"
        ) = Obj.magic y in
        let _startpos = _startpos_y_ in
        let _endpos = _endpos_y_ in
        let _v : 'tv_argorellipsis_one_arg_name_opt_decl__ = 
# 1207 "parser_cocci_menhir.mly"
              ( Ellipsis (y) )
# 2522 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_cast_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1813 "parser_cocci_menhir.mly"
                                            ( _1 )
# 2546 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 263 "parser_cocci_menhir.mly"
       (Data.clt)
# 2578 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1815 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Mul _1 _2 _3 )
# 2586 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 261 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 2618 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1817 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.arith_op op _1 clt _3 )
# 2626 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 262 "parser_cocci_menhir.mly"
       (Data.clt)
# 2658 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1819 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Plus _1 _2 _3 )
# 2666 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 262 "parser_cocci_menhir.mly"
       (Data.clt)
# 2698 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1821 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Minus _1 _2 _3 )
# 2706 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 260 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 2738 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1823 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.arith_op op _1 clt _3 )
# 2746 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 260 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 2778 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1825 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.arith_op op _1 clt _3 )
# 2786 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 259 "parser_cocci_menhir.mly"
       (Ast_cocci.logicalOp * Data.clt)
# 2818 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1827 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.logic_op op _1 clt _3 )
# 2826 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 258 "parser_cocci_menhir.mly"
       (Data.clt)
# 2858 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1829 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.Eq _1 _2 _3 )
# 2866 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 258 "parser_cocci_menhir.mly"
       (Data.clt)
# 2898 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1831 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.NotEq _1 _2 _3 )
# 2906 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 257 "parser_cocci_menhir.mly"
       (Data.clt)
# 2938 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1833 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.And _1 _2 _3 )
# 2946 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 255 "parser_cocci_menhir.mly"
       (Data.clt)
# 2978 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1835 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Or _1 _2 _3 )
# 2986 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 256 "parser_cocci_menhir.mly"
       (Data.clt)
# 3018 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1837 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Xor _1 _2 _3 )
# 3026 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 254 "parser_cocci_menhir.mly"
       (Data.clt)
# 3058 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1839 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.AndLog _1 _2 _3 )
# 3066 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 253 "parser_cocci_menhir.mly"
       (Data.clt)
# 3098 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_dot_expressions_ = 
# 1841 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.OrLog _1 _2 _3 )
# 3106 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_cast_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1813 "parser_cocci_menhir.mly"
                                            ( _1 )
# 3130 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 263 "parser_cocci_menhir.mly"
       (Data.clt)
# 3162 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1815 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Mul _1 _2 _3 )
# 3170 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 261 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 3202 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1817 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.arith_op op _1 clt _3 )
# 3210 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 262 "parser_cocci_menhir.mly"
       (Data.clt)
# 3242 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1819 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Plus _1 _2 _3 )
# 3250 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 262 "parser_cocci_menhir.mly"
       (Data.clt)
# 3282 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1821 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Minus _1 _2 _3 )
# 3290 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 260 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 3322 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1823 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.arith_op op _1 clt _3 )
# 3330 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 260 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 3362 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1825 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.arith_op op _1 clt _3 )
# 3370 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 259 "parser_cocci_menhir.mly"
       (Ast_cocci.logicalOp * Data.clt)
# 3402 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1827 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.logic_op op _1 clt _3 )
# 3410 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 258 "parser_cocci_menhir.mly"
       (Data.clt)
# 3442 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1829 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.Eq _1 _2 _3 )
# 3450 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 258 "parser_cocci_menhir.mly"
       (Data.clt)
# 3482 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1831 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.NotEq _1 _2 _3 )
# 3490 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 257 "parser_cocci_menhir.mly"
       (Data.clt)
# 3522 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1833 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.And _1 _2 _3 )
# 3530 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 255 "parser_cocci_menhir.mly"
       (Data.clt)
# 3562 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1835 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Or _1 _2 _3 )
# 3570 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 256 "parser_cocci_menhir.mly"
       (Data.clt)
# 3602 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1837 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Xor _1 _2 _3 )
# 3610 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 254 "parser_cocci_menhir.mly"
       (Data.clt)
# 3642 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1839 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.AndLog _1 _2 _3 )
# 3650 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 253 "parser_cocci_menhir.mly"
       (Data.clt)
# 3682 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_invalid_ = 
# 1841 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.OrLog _1 _2 _3 )
# 3690 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_cast_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1813 "parser_cocci_menhir.mly"
                                            ( _1 )
# 3714 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 263 "parser_cocci_menhir.mly"
       (Data.clt)
# 3746 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1815 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Mul _1 _2 _3 )
# 3754 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 261 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 3786 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1817 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.arith_op op _1 clt _3 )
# 3794 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 262 "parser_cocci_menhir.mly"
       (Data.clt)
# 3826 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1819 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Plus _1 _2 _3 )
# 3834 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 262 "parser_cocci_menhir.mly"
       (Data.clt)
# 3866 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1821 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Minus _1 _2 _3 )
# 3874 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 260 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 3906 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1823 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.arith_op op _1 clt _3 )
# 3914 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 260 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 3946 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1825 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.arith_op op _1 clt _3 )
# 3954 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 259 "parser_cocci_menhir.mly"
       (Ast_cocci.logicalOp * Data.clt)
# 3986 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1827 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.logic_op op _1 clt _3 )
# 3994 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 258 "parser_cocci_menhir.mly"
       (Data.clt)
# 4026 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1829 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.Eq _1 _2 _3 )
# 4034 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 258 "parser_cocci_menhir.mly"
       (Data.clt)
# 4066 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1831 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.NotEq _1 _2 _3 )
# 4074 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 257 "parser_cocci_menhir.mly"
       (Data.clt)
# 4106 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1833 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.And _1 _2 _3 )
# 4114 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 255 "parser_cocci_menhir.mly"
       (Data.clt)
# 4146 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1835 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Or _1 _2 _3 )
# 4154 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 256 "parser_cocci_menhir.mly"
       (Data.clt)
# 4186 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1837 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Xor _1 _2 _3 )
# 4194 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 254 "parser_cocci_menhir.mly"
       (Data.clt)
# 4226 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1839 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.AndLog _1 _2 _3 )
# 4234 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 253 "parser_cocci_menhir.mly"
       (Data.clt)
# 4266 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_eexpr_nest_expressions_ = 
# 1841 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.OrLog _1 _2 _3 )
# 4274 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_cast_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1813 "parser_cocci_menhir.mly"
                                            ( _1 )
# 4298 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 263 "parser_cocci_menhir.mly"
       (Data.clt)
# 4330 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1815 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Mul _1 _2 _3 )
# 4338 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 261 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 4370 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1817 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.arith_op op _1 clt _3 )
# 4378 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 262 "parser_cocci_menhir.mly"
       (Data.clt)
# 4410 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1819 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Plus _1 _2 _3 )
# 4418 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 262 "parser_cocci_menhir.mly"
       (Data.clt)
# 4450 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1821 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Minus _1 _2 _3 )
# 4458 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 260 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 4490 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1823 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.arith_op op _1 clt _3 )
# 4498 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 260 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 4530 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1825 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.arith_op op _1 clt _3 )
# 4538 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 259 "parser_cocci_menhir.mly"
       (Ast_cocci.logicalOp * Data.clt)
# 4570 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1827 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.logic_op op _1 clt _3 )
# 4578 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 258 "parser_cocci_menhir.mly"
       (Data.clt)
# 4610 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1829 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.Eq _1 _2 _3 )
# 4618 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 258 "parser_cocci_menhir.mly"
       (Data.clt)
# 4650 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1831 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.NotEq _1 _2 _3 )
# 4658 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 257 "parser_cocci_menhir.mly"
       (Data.clt)
# 4690 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1833 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.And _1 _2 _3 )
# 4698 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 255 "parser_cocci_menhir.mly"
       (Data.clt)
# 4730 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1835 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Or _1 _2 _3 )
# 4738 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 256 "parser_cocci_menhir.mly"
       (Data.clt)
# 4770 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1837 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Xor _1 _2 _3 )
# 4778 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 254 "parser_cocci_menhir.mly"
       (Data.clt)
# 4810 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1839 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.AndLog _1 _2 _3 )
# 4818 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 253 "parser_cocci_menhir.mly"
       (Data.clt)
# 4850 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_expr_invalid_ = 
# 1841 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.OrLog _1 _2 _3 )
# 4858 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_cast_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_arith_expr_bis = 
# 1846 "parser_cocci_menhir.mly"
                                                             ( _1 )
# 4882 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 263 "parser_cocci_menhir.mly"
       (Data.clt)
# 4914 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_bis = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_bis = 
# 1848 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Mul _1 _2 _3 )
# 4922 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 261 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 4954 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_bis = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_bis = 
# 1850 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.arith_op op _1 clt _3 )
# 4962 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 262 "parser_cocci_menhir.mly"
       (Data.clt)
# 4994 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_bis = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_bis = 
# 1852 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Plus _1 _2 _3 )
# 5002 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 262 "parser_cocci_menhir.mly"
       (Data.clt)
# 5034 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_bis = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_bis = 
# 1854 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Minus _1 _2 _3 )
# 5042 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 260 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 5074 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_bis = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_bis = 
# 1856 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.arith_op op _1 clt _3 )
# 5082 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 260 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 5114 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_bis = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_bis = 
# 1858 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.arith_op op _1 clt _3 )
# 5122 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 259 "parser_cocci_menhir.mly"
       (Ast_cocci.logicalOp * Data.clt)
# 5154 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_bis = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_bis = 
# 1860 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in P.logic_op op _1 clt _3 )
# 5162 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 258 "parser_cocci_menhir.mly"
       (Data.clt)
# 5194 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_bis = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_bis = 
# 1862 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.Eq _1 _2 _3 )
# 5202 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 258 "parser_cocci_menhir.mly"
       (Data.clt)
# 5234 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_bis = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_bis = 
# 1864 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.NotEq _1 _2 _3 )
# 5242 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 257 "parser_cocci_menhir.mly"
       (Data.clt)
# 5274 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_bis = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_bis = 
# 1866 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.And _1 _2 _3 )
# 5282 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 255 "parser_cocci_menhir.mly"
       (Data.clt)
# 5314 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_bis = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_bis = 
# 1868 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Or _1 _2 _3 )
# 5322 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 256 "parser_cocci_menhir.mly"
       (Data.clt)
# 5354 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_bis = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_bis = 
# 1870 "parser_cocci_menhir.mly"
      ( P.arith_op Ast.Xor _1 _2 _3 )
# 5362 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_arith_expr_bis = Obj.magic _3 in
        let _2 : (
# 254 "parser_cocci_menhir.mly"
       (Data.clt)
# 5394 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_arith_expr_bis = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_arith_expr_bis = 
# 1872 "parser_cocci_menhir.mly"
      ( P.logic_op Ast.AndLog _1 _2 _3 )
# 5402 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_arity = 
# 786 "parser_cocci_menhir.mly"
              ( Ast.UNIQUE )
# 5424 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_arity = 
# 787 "parser_cocci_menhir.mly"
              ( Ast.OPT )
# 5446 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_arity = 
# 788 "parser_cocci_menhir.mly"
              ( Ast.MULTI )
# 5468 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_arity = 
# 789 "parser_cocci_menhir.mly"
                   ( Ast.NONE )
# 5485 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = l;
              MenhirLib.EngineTypes.startp = _startpos_l_;
              MenhirLib.EngineTypes.endp = _endpos_l_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let r : (
# 266 "parser_cocci_menhir.mly"
       (Data.clt)
# 5516 "parser_cocci_menhir.ml"
        ) = Obj.magic r in
        let i : 'tv_option_eexpr_ = Obj.magic i in
        let l : (
# 266 "parser_cocci_menhir.mly"
       (Data.clt)
# 5522 "parser_cocci_menhir.ml"
        ) = Obj.magic l in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_array_dec = 
# 1602 "parser_cocci_menhir.mly"
                                           ( (l,i,r) )
# 5529 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_cond_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assign_expr_eexpr_dot_expressions_ = 
# 1784 "parser_cocci_menhir.mly"
                                           ( _1 )
# 5553 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_assign_expr_bis = Obj.magic _3 in
        let _2 : (
# 272 "parser_cocci_menhir.mly"
       (Ast_cocci.assignOp * Data.clt)
# 5585 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_unary_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_assign_expr_eexpr_dot_expressions_ = 
# 1786 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in
      Ast0.wrap(Ast0.Assignment(_1,P.clt2mcode op clt,
				Ast0.set_arg_exp _3,false)) )
# 5595 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_assign_expr_bis = Obj.magic _3 in
        let _2 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 5627 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_unary_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_assign_expr_eexpr_dot_expressions_ = 
# 1790 "parser_cocci_menhir.mly"
      ( Ast0.wrap
	  (Ast0.Assignment
	     (_1,P.clt2mcode Ast.SimpleAssign _2,Ast0.set_arg_exp _3,false)) )
# 5637 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_cond_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assign_expr_eexpr_nest_expressions_ = 
# 1784 "parser_cocci_menhir.mly"
                                           ( _1 )
# 5661 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_assign_expr_bis = Obj.magic _3 in
        let _2 : (
# 272 "parser_cocci_menhir.mly"
       (Ast_cocci.assignOp * Data.clt)
# 5693 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_unary_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_assign_expr_eexpr_nest_expressions_ = 
# 1786 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in
      Ast0.wrap(Ast0.Assignment(_1,P.clt2mcode op clt,
				Ast0.set_arg_exp _3,false)) )
# 5703 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_assign_expr_bis = Obj.magic _3 in
        let _2 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 5735 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_unary_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_assign_expr_eexpr_nest_expressions_ = 
# 1790 "parser_cocci_menhir.mly"
      ( Ast0.wrap
	  (Ast0.Assignment
	     (_1,P.clt2mcode Ast.SimpleAssign _2,Ast0.set_arg_exp _3,false)) )
# 5745 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_cond_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assign_expr_expr_invalid_ = 
# 1784 "parser_cocci_menhir.mly"
                                           ( _1 )
# 5769 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_assign_expr_bis = Obj.magic _3 in
        let _2 : (
# 272 "parser_cocci_menhir.mly"
       (Ast_cocci.assignOp * Data.clt)
# 5801 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_unary_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_assign_expr_expr_invalid_ = 
# 1786 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in
      Ast0.wrap(Ast0.Assignment(_1,P.clt2mcode op clt,
				Ast0.set_arg_exp _3,false)) )
# 5811 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_assign_expr_bis = Obj.magic _3 in
        let _2 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 5843 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_unary_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_assign_expr_expr_invalid_ = 
# 1790 "parser_cocci_menhir.mly"
      ( Ast0.wrap
	  (Ast0.Assignment
	     (_1,P.clt2mcode Ast.SimpleAssign _2,Ast0.set_arg_exp _3,false)) )
# 5853 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_cond_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_assign_expr_bis = 
# 1795 "parser_cocci_menhir.mly"
                                                            ( _1 )
# 5877 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_assign_expr_bis = Obj.magic _3 in
        let _2 : (
# 272 "parser_cocci_menhir.mly"
       (Ast_cocci.assignOp * Data.clt)
# 5909 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_unary_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_assign_expr_bis = 
# 1797 "parser_cocci_menhir.mly"
      ( let (op,clt) = _2 in
      Ast0.wrap(Ast0.Assignment(_1,P.clt2mcode op clt,
				Ast0.set_arg_exp _3,false)) )
# 5919 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_assign_expr_bis = Obj.magic _3 in
        let _2 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 5951 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_unary_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_assign_expr_bis = 
# 1801 "parser_cocci_menhir.mly"
      ( Ast0.wrap
	  (Ast0.Assignment
	     (_1,P.clt2mcode Ast.SimpleAssign _2,Ast0.set_arg_exp _3,false)) )
# 5961 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_assign_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_basic_expr_eexpr_dot_expressions_ = 
# 1781 "parser_cocci_menhir.mly"
                                                           ( _1 )
# 5985 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_assign_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_basic_expr_eexpr_nest_expressions_ = 
# 1781 "parser_cocci_menhir.mly"
                                                           ( _1 )
# 6009 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_assign_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_basic_expr_expr_invalid_ = 
# 1781 "parser_cocci_menhir.mly"
                                                           ( _1 )
# 6033 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_fun_start = Obj.magic _3 in
        let _2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 6065 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 214 "parser_cocci_menhir.mly"
       (Data.clt)
# 6070 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_case_line = 
# 1459 "parser_cocci_menhir.mly"
      ( Ast0.wrap
	  (Ast0.Default(P.clt2mcode "default" _1,P.clt2mcode ":" _2,_3)) )
# 6078 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let _4 : 'tv_fun_start = Obj.magic _4 in
        let _3 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 6115 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_eexpr = Obj.magic _2 in
        let _1 : (
# 214 "parser_cocci_menhir.mly"
       (Data.clt)
# 6121 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_case_line = 
# 1462 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Case(P.clt2mcode "case" _1,_2,P.clt2mcode ":" _3,_4)) )
# 6128 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_unary_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_cast_expr_eexpr_dot_expressions_ = 
# 1877 "parser_cocci_menhir.mly"
                                          ( _1 )
# 6152 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = rp;
            MenhirLib.EngineTypes.startp = _startpos_rp_;
            MenhirLib.EngineTypes.endp = _endpos_rp_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = lp;
                MenhirLib.EngineTypes.startp = _startpos_lp_;
                MenhirLib.EngineTypes.endp = _endpos_lp_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let e : 'tv_cast_expr_eexpr_dot_expressions_ = Obj.magic e in
        let rp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 6189 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let t : 'tv_ctype = Obj.magic t in
        let lp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 6195 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let _startpos = _startpos_lp_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_cast_expr_eexpr_dot_expressions_ = 
# 1879 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Cast (P.clt2mcode "(" lp, t,
			     P.clt2mcode ")" rp, e)) )
# 6203 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_unary_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_cast_expr_eexpr_invalid_ = 
# 1877 "parser_cocci_menhir.mly"
                                          ( _1 )
# 6227 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = rp;
            MenhirLib.EngineTypes.startp = _startpos_rp_;
            MenhirLib.EngineTypes.endp = _endpos_rp_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = lp;
                MenhirLib.EngineTypes.startp = _startpos_lp_;
                MenhirLib.EngineTypes.endp = _endpos_lp_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let e : 'tv_cast_expr_eexpr_invalid_ = Obj.magic e in
        let rp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 6264 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let t : 'tv_ctype = Obj.magic t in
        let lp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 6270 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let _startpos = _startpos_lp_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_cast_expr_eexpr_invalid_ = 
# 1879 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Cast (P.clt2mcode "(" lp, t,
			     P.clt2mcode ")" rp, e)) )
# 6278 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_unary_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_cast_expr_eexpr_nest_expressions_ = 
# 1877 "parser_cocci_menhir.mly"
                                          ( _1 )
# 6302 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = rp;
            MenhirLib.EngineTypes.startp = _startpos_rp_;
            MenhirLib.EngineTypes.endp = _endpos_rp_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = lp;
                MenhirLib.EngineTypes.startp = _startpos_lp_;
                MenhirLib.EngineTypes.endp = _endpos_lp_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let e : 'tv_cast_expr_eexpr_nest_expressions_ = Obj.magic e in
        let rp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 6339 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let t : 'tv_ctype = Obj.magic t in
        let lp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 6345 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let _startpos = _startpos_lp_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_cast_expr_eexpr_nest_expressions_ = 
# 1879 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Cast (P.clt2mcode "(" lp, t,
			     P.clt2mcode ")" rp, e)) )
# 6353 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_unary_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_cast_expr_expr_invalid_ = 
# 1877 "parser_cocci_menhir.mly"
                                          ( _1 )
# 6377 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = rp;
            MenhirLib.EngineTypes.startp = _startpos_rp_;
            MenhirLib.EngineTypes.endp = _endpos_rp_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = lp;
                MenhirLib.EngineTypes.startp = _startpos_lp_;
                MenhirLib.EngineTypes.endp = _endpos_lp_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let e : 'tv_cast_expr_expr_invalid_ = Obj.magic e in
        let rp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 6414 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let t : 'tv_ctype = Obj.magic t in
        let lp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 6420 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let _startpos = _startpos_lp_ in
        let _endpos = _endpos_e_ in
        let _v : 'tv_cast_expr_expr_invalid_ = 
# 1879 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Cast (P.clt2mcode "(" lp, t,
			     P.clt2mcode ")" rp, e)) )
# 6428 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_separated_nonempty_list_TComma_TString_ = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_choose_iso = 
# 414 "parser_cocci_menhir.mly"
                                                 ( List.map P.id2name _2 )
# 6456 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_any_strict_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_any_strict_ = 
# 2699 "parser_cocci_menhir.mly"
                                       ( _1 )
# 6480 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_ctype_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_ctype_ = 
# 2699 "parser_cocci_menhir.mly"
                                       ( _1 )
# 6504 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_d_ident_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_d_ident_ = 
# 2699 "parser_cocci_menhir.mly"
                                       ( _1 )
# 6528 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_ident_or_const_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_ident_or_const_ = 
# 2699 "parser_cocci_menhir.mly"
                                       ( _1 )
# 6552 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_meta_ident_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_meta_ident_ = 
# 2699 "parser_cocci_menhir.mly"
                                       ( _1 )
# 6576 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_pure_ident_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_pure_ident_ = 
# 2699 "parser_cocci_menhir.mly"
                                       ( _1 )
# 6600 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_pure_ident_or_meta_ident_ = 
# 2699 "parser_cocci_menhir.mly"
                                       ( _1 )
# 6624 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_econstraint_not_ceq_or_sub__ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_pure_ident_or_meta_ident_with_econstraint_not_ceq_or_sub__ = 
# 2699 "parser_cocci_menhir.mly"
                                       ( _1 )
# 6648 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe_or_sub__ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe_or_sub__ = 
# 2699 "parser_cocci_menhir.mly"
                                       ( _1 )
# 6672 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_idconstraint_re_only__ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_pure_ident_or_meta_ident_with_idconstraint_re_only__ = 
# 2699 "parser_cocci_menhir.mly"
                                       ( _1 )
# 6696 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_idconstraint_re_or_not_eqid__ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_pure_ident_or_meta_ident_with_idconstraint_re_or_not_eqid__ = 
# 2699 "parser_cocci_menhir.mly"
                                       ( _1 )
# 6720 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_idconstraint_virt_re_or_not_eqid__ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_pure_ident_or_meta_ident_with_idconstraint_virt_re_or_not_eqid__ = 
# 2699 "parser_cocci_menhir.mly"
                                       ( _1 )
# 6744 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_seed_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_pure_ident_or_meta_ident_with_seed_ = 
# 2699 "parser_cocci_menhir.mly"
                                       ( _1 )
# 6768 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_x_eq_not_pos__ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_pure_ident_or_meta_ident_with_x_eq_not_pos__ = 
# 2699 "parser_cocci_menhir.mly"
                                       ( _1 )
# 6792 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_separated_nonempty_list_TComma_typedef_ident_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_comma_list_typedef_ident_ = 
# 2699 "parser_cocci_menhir.mly"
                                       ( _1 )
# 6816 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_cond_expr_eexpr_dot_expressions_ = 
# 1806 "parser_cocci_menhir.mly"
                                             ( _1 )
# 6840 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = dd;
            MenhirLib.EngineTypes.startp = _startpos_dd_;
            MenhirLib.EngineTypes.endp = _endpos_dd_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = w;
                MenhirLib.EngineTypes.startp = _startpos_w_;
                MenhirLib.EngineTypes.endp = _endpos_w_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let r : 'tv_eargexpr = Obj.magic r in
        let dd : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 6882 "parser_cocci_menhir.ml"
        ) = Obj.magic dd in
        let t : 'tv_option_eexpr_ = Obj.magic t in
        let w : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 6888 "parser_cocci_menhir.ml"
        ) = Obj.magic w in
        let l : 'tv_arith_expr_eexpr_dot_expressions_ = Obj.magic l in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_cond_expr_eexpr_dot_expressions_ = 
# 1809 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.CondExpr (l, P.clt2mcode "?" w, t,
				 P.clt2mcode ":" dd, r)) )
# 6897 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_cond_expr_eexpr_nest_expressions_ = 
# 1806 "parser_cocci_menhir.mly"
                                             ( _1 )
# 6921 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = dd;
            MenhirLib.EngineTypes.startp = _startpos_dd_;
            MenhirLib.EngineTypes.endp = _endpos_dd_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = w;
                MenhirLib.EngineTypes.startp = _startpos_w_;
                MenhirLib.EngineTypes.endp = _endpos_w_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let r : 'tv_eargexpr = Obj.magic r in
        let dd : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 6963 "parser_cocci_menhir.ml"
        ) = Obj.magic dd in
        let t : 'tv_option_eexpr_ = Obj.magic t in
        let w : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 6969 "parser_cocci_menhir.ml"
        ) = Obj.magic w in
        let l : 'tv_arith_expr_eexpr_nest_expressions_ = Obj.magic l in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_cond_expr_eexpr_nest_expressions_ = 
# 1809 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.CondExpr (l, P.clt2mcode "?" w, t,
				 P.clt2mcode ":" dd, r)) )
# 6978 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_arith_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_cond_expr_expr_invalid_ = 
# 1806 "parser_cocci_menhir.mly"
                                             ( _1 )
# 7002 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = dd;
            MenhirLib.EngineTypes.startp = _startpos_dd_;
            MenhirLib.EngineTypes.endp = _endpos_dd_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = w;
                MenhirLib.EngineTypes.startp = _startpos_w_;
                MenhirLib.EngineTypes.endp = _endpos_w_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let r : 'tv_eargexpr = Obj.magic r in
        let dd : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 7044 "parser_cocci_menhir.ml"
        ) = Obj.magic dd in
        let t : 'tv_option_eexpr_ = Obj.magic t in
        let w : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 7050 "parser_cocci_menhir.ml"
        ) = Obj.magic w in
        let l : 'tv_arith_expr_expr_invalid_ = Obj.magic l in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_cond_expr_expr_invalid_ = 
# 1809 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.CondExpr (l, P.clt2mcode "?" w, t,
				 P.clt2mcode ":" dd, r)) )
# 7059 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 210 "parser_cocci_menhir.mly"
      (Data.clt)
# 7080 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_const_vol = 
# 1351 "parser_cocci_menhir.mly"
                   ( P.clt2mcode Ast.Const _1 )
# 7087 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 210 "parser_cocci_menhir.mly"
      (Data.clt)
# 7108 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_const_vol = 
# 1352 "parser_cocci_menhir.mly"
                   ( P.clt2mcode Ast.Volatile _1 )
# 7115 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = element;
          MenhirLib.EngineTypes.startp = _startpos_element_;
          MenhirLib.EngineTypes.endp = _endpos_element_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let element : 'tv_aexpr = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_element_ in
        let _v : 'tv_continue_list_aexpr_TEllipsis_ = 
# 2406 "parser_cocci_menhir.mly"
               ( fun build_dots build_comma -> [element] )
# 7139 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = comma;
          MenhirLib.EngineTypes.startp = _startpos_comma_;
          MenhirLib.EngineTypes.endp = _endpos_comma_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = element;
            MenhirLib.EngineTypes.startp = _startpos_element_;
            MenhirLib.EngineTypes.endp = _endpos_element_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 7165 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let element : 'tv_aexpr = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_comma_ in
        let _v : 'tv_continue_list_aexpr_TEllipsis_ = 
# 2408 "parser_cocci_menhir.mly"
    ( fun build_dots build_comma ->
      element::[Ast0.wrap(build_comma(P.clt2mcode "," comma))] )
# 7174 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = remainder;
          MenhirLib.EngineTypes.startp = _startpos_remainder_;
          MenhirLib.EngineTypes.endp = _endpos_remainder_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = comma;
            MenhirLib.EngineTypes.startp = _startpos_comma_;
            MenhirLib.EngineTypes.endp = _endpos_comma_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = element;
              MenhirLib.EngineTypes.startp = _startpos_element_;
              MenhirLib.EngineTypes.endp = _endpos_element_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let remainder : 'tv_nonempty_list_start_aexpr_TEllipsis_ = Obj.magic remainder in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 7206 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let element : 'tv_aexpr = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_remainder_ in
        let _v : 'tv_continue_list_aexpr_TEllipsis_ = 
# 2411 "parser_cocci_menhir.mly"
    ( fun build_dots build_comma ->
      element::(Ast0.wrap(build_comma(P.clt2mcode "," comma)))::
      (remainder build_dots build_comma) )
# 7216 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = list;
          MenhirLib.EngineTypes.startp = _startpos_list_;
          MenhirLib.EngineTypes.endp = _endpos_list_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let list : 'tv_nonempty_list_start_aexpr_TEllipsis_ = Obj.magic list in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_list_ in
        let _v : 'tv_continue_list_aexpr_TEllipsis_ = 
# 2414 "parser_cocci_menhir.mly"
                                                 ( list )
# 7244 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = element;
          MenhirLib.EngineTypes.startp = _startpos_element_;
          MenhirLib.EngineTypes.endp = _endpos_element_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let element : 'tv_dparam = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_element_ in
        let _v : 'tv_continue_list_dparam_TEllipsis_ = 
# 2406 "parser_cocci_menhir.mly"
               ( fun build_dots build_comma -> [element] )
# 7268 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = comma;
          MenhirLib.EngineTypes.startp = _startpos_comma_;
          MenhirLib.EngineTypes.endp = _endpos_comma_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = element;
            MenhirLib.EngineTypes.startp = _startpos_element_;
            MenhirLib.EngineTypes.endp = _endpos_element_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 7294 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let element : 'tv_dparam = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_comma_ in
        let _v : 'tv_continue_list_dparam_TEllipsis_ = 
# 2408 "parser_cocci_menhir.mly"
    ( fun build_dots build_comma ->
      element::[Ast0.wrap(build_comma(P.clt2mcode "," comma))] )
# 7303 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = remainder;
          MenhirLib.EngineTypes.startp = _startpos_remainder_;
          MenhirLib.EngineTypes.endp = _endpos_remainder_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = comma;
            MenhirLib.EngineTypes.startp = _startpos_comma_;
            MenhirLib.EngineTypes.endp = _endpos_comma_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = element;
              MenhirLib.EngineTypes.startp = _startpos_element_;
              MenhirLib.EngineTypes.endp = _endpos_element_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let remainder : 'tv_nonempty_list_start_dparam_TEllipsis_ = Obj.magic remainder in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 7335 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let element : 'tv_dparam = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_remainder_ in
        let _v : 'tv_continue_list_dparam_TEllipsis_ = 
# 2411 "parser_cocci_menhir.mly"
    ( fun build_dots build_comma ->
      element::(Ast0.wrap(build_comma(P.clt2mcode "," comma)))::
      (remainder build_dots build_comma) )
# 7345 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = list;
          MenhirLib.EngineTypes.startp = _startpos_list_;
          MenhirLib.EngineTypes.endp = _endpos_list_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let list : 'tv_nonempty_list_start_dparam_TEllipsis_ = Obj.magic list in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_list_ in
        let _v : 'tv_continue_list_dparam_TEllipsis_ = 
# 2414 "parser_cocci_menhir.mly"
                                                 ( list )
# 7373 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = element;
          MenhirLib.EngineTypes.startp = _startpos_element_;
          MenhirLib.EngineTypes.endp = _endpos_element_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let element : 'tv_enum_decl_one = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_element_ in
        let _v : 'tv_continue_list_enum_decl_one_edots_when_TEllipsis_enum_decl_one__ = 
# 2406 "parser_cocci_menhir.mly"
               ( fun build_dots build_comma -> [element] )
# 7397 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = comma;
          MenhirLib.EngineTypes.startp = _startpos_comma_;
          MenhirLib.EngineTypes.endp = _endpos_comma_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = element;
            MenhirLib.EngineTypes.startp = _startpos_element_;
            MenhirLib.EngineTypes.endp = _endpos_element_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 7423 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let element : 'tv_enum_decl_one = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_comma_ in
        let _v : 'tv_continue_list_enum_decl_one_edots_when_TEllipsis_enum_decl_one__ = 
# 2408 "parser_cocci_menhir.mly"
    ( fun build_dots build_comma ->
      element::[Ast0.wrap(build_comma(P.clt2mcode "," comma))] )
# 7432 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = remainder;
          MenhirLib.EngineTypes.startp = _startpos_remainder_;
          MenhirLib.EngineTypes.endp = _endpos_remainder_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = comma;
            MenhirLib.EngineTypes.startp = _startpos_comma_;
            MenhirLib.EngineTypes.endp = _endpos_comma_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = element;
              MenhirLib.EngineTypes.startp = _startpos_element_;
              MenhirLib.EngineTypes.endp = _endpos_element_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let remainder : 'tv_nonempty_list_start_enum_decl_one_edots_when_TEllipsis_enum_decl_one__ = Obj.magic remainder in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 7464 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let element : 'tv_enum_decl_one = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_remainder_ in
        let _v : 'tv_continue_list_enum_decl_one_edots_when_TEllipsis_enum_decl_one__ = 
# 2411 "parser_cocci_menhir.mly"
    ( fun build_dots build_comma ->
      element::(Ast0.wrap(build_comma(P.clt2mcode "," comma)))::
      (remainder build_dots build_comma) )
# 7474 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = list;
          MenhirLib.EngineTypes.startp = _startpos_list_;
          MenhirLib.EngineTypes.endp = _endpos_list_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let list : 'tv_nonempty_list_start_enum_decl_one_edots_when_TEllipsis_enum_decl_one__ = Obj.magic list in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_list_ in
        let _v : 'tv_continue_list_enum_decl_one_edots_when_TEllipsis_enum_decl_one__ = 
# 2414 "parser_cocci_menhir.mly"
                                                 ( list )
# 7502 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = element;
          MenhirLib.EngineTypes.startp = _startpos_element_;
          MenhirLib.EngineTypes.endp = _endpos_element_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let element : 'tv_initialize2 = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_element_ in
        let _v : 'tv_continue_list_initialize2_edots_when_TEllipsis_initialize__ = 
# 2406 "parser_cocci_menhir.mly"
               ( fun build_dots build_comma -> [element] )
# 7526 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = comma;
          MenhirLib.EngineTypes.startp = _startpos_comma_;
          MenhirLib.EngineTypes.endp = _endpos_comma_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = element;
            MenhirLib.EngineTypes.startp = _startpos_element_;
            MenhirLib.EngineTypes.endp = _endpos_element_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 7552 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let element : 'tv_initialize2 = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_comma_ in
        let _v : 'tv_continue_list_initialize2_edots_when_TEllipsis_initialize__ = 
# 2408 "parser_cocci_menhir.mly"
    ( fun build_dots build_comma ->
      element::[Ast0.wrap(build_comma(P.clt2mcode "," comma))] )
# 7561 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = remainder;
          MenhirLib.EngineTypes.startp = _startpos_remainder_;
          MenhirLib.EngineTypes.endp = _endpos_remainder_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = comma;
            MenhirLib.EngineTypes.startp = _startpos_comma_;
            MenhirLib.EngineTypes.endp = _endpos_comma_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = element;
              MenhirLib.EngineTypes.startp = _startpos_element_;
              MenhirLib.EngineTypes.endp = _endpos_element_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let remainder : 'tv_nonempty_list_start_initialize2_edots_when_TEllipsis_initialize__ = Obj.magic remainder in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 7593 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let element : 'tv_initialize2 = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_remainder_ in
        let _v : 'tv_continue_list_initialize2_edots_when_TEllipsis_initialize__ = 
# 2411 "parser_cocci_menhir.mly"
    ( fun build_dots build_comma ->
      element::(Ast0.wrap(build_comma(P.clt2mcode "," comma)))::
      (remainder build_dots build_comma) )
# 7603 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = list;
          MenhirLib.EngineTypes.startp = _startpos_list_;
          MenhirLib.EngineTypes.endp = _endpos_list_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let list : 'tv_nonempty_list_start_initialize2_edots_when_TEllipsis_initialize__ = Obj.magic list in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_list_ in
        let _v : 'tv_continue_list_initialize2_edots_when_TEllipsis_initialize__ = 
# 2414 "parser_cocci_menhir.mly"
                                                 ( list )
# 7631 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = element;
          MenhirLib.EngineTypes.startp = _startpos_element_;
          MenhirLib.EngineTypes.endp = _endpos_element_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let element : 'tv_one_dec_name_opt_decl_ = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_element_ in
        let _v : 'tv_continue_list_one_dec_name_opt_decl__TEllipsis_ = 
# 2406 "parser_cocci_menhir.mly"
               ( fun build_dots build_comma -> [element] )
# 7655 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = comma;
          MenhirLib.EngineTypes.startp = _startpos_comma_;
          MenhirLib.EngineTypes.endp = _endpos_comma_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = element;
            MenhirLib.EngineTypes.startp = _startpos_element_;
            MenhirLib.EngineTypes.endp = _endpos_element_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 7681 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let element : 'tv_one_dec_name_opt_decl_ = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_comma_ in
        let _v : 'tv_continue_list_one_dec_name_opt_decl__TEllipsis_ = 
# 2408 "parser_cocci_menhir.mly"
    ( fun build_dots build_comma ->
      element::[Ast0.wrap(build_comma(P.clt2mcode "," comma))] )
# 7690 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = remainder;
          MenhirLib.EngineTypes.startp = _startpos_remainder_;
          MenhirLib.EngineTypes.endp = _endpos_remainder_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = comma;
            MenhirLib.EngineTypes.startp = _startpos_comma_;
            MenhirLib.EngineTypes.endp = _endpos_comma_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = element;
              MenhirLib.EngineTypes.startp = _startpos_element_;
              MenhirLib.EngineTypes.endp = _endpos_element_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let remainder : 'tv_nonempty_list_start_one_dec_name_opt_decl__TEllipsis_ = Obj.magic remainder in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 7722 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let element : 'tv_one_dec_name_opt_decl_ = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_remainder_ in
        let _v : 'tv_continue_list_one_dec_name_opt_decl__TEllipsis_ = 
# 2411 "parser_cocci_menhir.mly"
    ( fun build_dots build_comma ->
      element::(Ast0.wrap(build_comma(P.clt2mcode "," comma)))::
      (remainder build_dots build_comma) )
# 7732 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = list;
          MenhirLib.EngineTypes.startp = _startpos_list_;
          MenhirLib.EngineTypes.endp = _endpos_list_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let list : 'tv_nonempty_list_start_one_dec_name_opt_decl__TEllipsis_ = Obj.magic list in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_list_ in
        let _v : 'tv_continue_list_one_dec_name_opt_decl__TEllipsis_ = 
# 2414 "parser_cocci_menhir.mly"
                                                 ( list )
# 7760 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_continue_struct_decl_list = 
# 970 "parser_cocci_menhir.mly"
                                     ( [] )
# 7777 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_struct_decl_list_start = Obj.magic _2 in
        let _1 : 'tv_struct_decl = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_continue_struct_decl_list = 
# 971 "parser_cocci_menhir.mly"
                                     ( _1@_2 )
# 7807 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_struct_decl = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_continue_struct_decl_list = 
# 972 "parser_cocci_menhir.mly"
                                     ( _1 )
# 7831 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_list_mul_ = Obj.magic m in
        let ty : 'tv_all_basic_types = Obj.magic ty in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let cv =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 7862 "parser_cocci_menhir.ml"
          
        in
        
# 895 "parser_cocci_menhir.mly"
    ( List.fold_left
	(function prev ->
	  function (star,cv) ->
	    P.make_cv cv (P.pointerify prev [star]))
	(P.make_cv cv ty) m )
# 7872 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x0;
              MenhirLib.EngineTypes.startp = _startpos_x0_;
              MenhirLib.EngineTypes.endp = _endpos_x0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_mul_ = Obj.magic m in
        let ty : 'tv_all_basic_types = Obj.magic ty in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_ctype = let cv =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 7910 "parser_cocci_menhir.ml"
          
        in
        
# 895 "parser_cocci_menhir.mly"
    ( List.fold_left
	(function prev ->
	  function (star,cv) ->
	    P.make_cv cv (P.pointerify prev [star]))
	(P.make_cv cv ty) m )
# 7920 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let r : (
# 207 "parser_cocci_menhir.mly"
      (Data.clt)
# 7941 "parser_cocci_menhir.ml"
        ) = Obj.magic r in
        let _startpos = _startpos_r_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_ctype = 
# 901 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Signed r,None)) )
# 7948 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let r : (
# 207 "parser_cocci_menhir.mly"
      (Data.clt)
# 7969 "parser_cocci_menhir.ml"
        ) = Obj.magic r in
        let _startpos = _startpos_r_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_ctype = 
# 903 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Signed(P.clt2mcode Ast.Unsigned r,None)) )
# 7976 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = rp;
          MenhirLib.EngineTypes.startp = _startpos_rp_;
          MenhirLib.EngineTypes.endp = _endpos_rp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = lp;
              MenhirLib.EngineTypes.startp = _startpos_lp_;
              MenhirLib.EngineTypes.endp = _endpos_lp_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let rp : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 8007 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let t : 'tv_midzero_list_ctype_ctype_ = Obj.magic t in
        let lp : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 8013 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let _startpos = _startpos_lp_ in
        let _endpos = _endpos_rp_ in
        let _v : 'tv_ctype = 
# 905 "parser_cocci_menhir.mly"
    ( let (mids,code) = t in
      Ast0.wrap
	(Ast0.DisjType(P.id2mcode lp,code,mids, P.id2mcode rp)) )
# 8022 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_list_array_dec_ = Obj.magic _2 in
        let _1 : 'tv_disj_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_d_ident = 
# 1600 "parser_cocci_menhir.mly"
      ( (_1, function t -> P.arrayify t _2) )
# 8052 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_basic_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_dargexpr = 
# 1738 "parser_cocci_menhir.mly"
                                             ( _1 )
# 8076 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = a;
          MenhirLib.EngineTypes.startp = _startpos_a_;
          MenhirLib.EngineTypes.endp = _endpos_a_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let a : 'tv_list_array_dec_ = Obj.magic a in
        let i : 'tv_disj_ident = Obj.magic i in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_a_ in
        let _v : 'tv_decl = 
# 1324 "parser_cocci_menhir.mly"
 ( let t = P.arrayify t a in Ast0.wrap(Ast0.Param(t, Some i)) )
# 8112 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t_ in
        let _v : 'tv_decl = 
# 1325 "parser_cocci_menhir.mly"
              ( (*verify in FunDecl*) Ast0.wrap(Ast0.Param(t, None)) )
# 8136 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = rp1;
          MenhirLib.EngineTypes.startp = _startpos_rp1_;
          MenhirLib.EngineTypes.endp = _endpos_rp1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = lp1;
              MenhirLib.EngineTypes.startp = _startpos_lp1_;
              MenhirLib.EngineTypes.endp = _endpos_lp1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = rp;
                MenhirLib.EngineTypes.startp = _startpos_rp_;
                MenhirLib.EngineTypes.endp = _endpos_rp_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = i;
                  MenhirLib.EngineTypes.startp = _startpos_i_;
                  MenhirLib.EngineTypes.endp = _endpos_i_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = s;
                    MenhirLib.EngineTypes.startp = _startpos_s_;
                    MenhirLib.EngineTypes.endp = _endpos_s_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = lp;
                      MenhirLib.EngineTypes.startp = _startpos_lp_;
                      MenhirLib.EngineTypes.endp = _endpos_lp_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = t;
                        MenhirLib.EngineTypes.startp = _startpos_t_;
                        MenhirLib.EngineTypes.endp = _endpos_t_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let rp1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 8192 "parser_cocci_menhir.ml"
        ) = Obj.magic rp1 in
        let d : 'tv_decl_list_name_opt_decl_ = Obj.magic d in
        let lp1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 8198 "parser_cocci_menhir.ml"
        ) = Obj.magic lp1 in
        let rp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 8203 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let i : 'tv_disj_ident = Obj.magic i in
        let s : (
# 263 "parser_cocci_menhir.mly"
       (Data.clt)
# 8209 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let lp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 8214 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_rp1_ in
        let _v : 'tv_decl = 
# 1328 "parser_cocci_menhir.mly"
        ( let fnptr =
	  Ast0.wrap
	    (Ast0.FunctionPointer
	       (t,P.clt2mcode "(" lp,P.clt2mcode "*" s,P.clt2mcode ")" rp,
		P.clt2mcode "(" lp1,d,P.clt2mcode ")" rp1)) in
	Ast0.wrap(Ast0.Param(fnptr, Some i)) )
# 8227 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 223 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 8248 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_decl = 
# 1335 "parser_cocci_menhir.mly"
 ( let (nm,pure,clt) = _1 in
	Ast0.wrap(Ast0.MetaParam(P.clt2mcode nm clt,pure)) )
# 8256 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 224 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 8277 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_decl = 
# 1337 "parser_cocci_menhir.mly"
            ( tmeta_to_param _1 )
# 8284 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 216 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 8305 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_decl_ident = 
# 2330 "parser_cocci_menhir.mly"
         ( Ast0.wrap(Ast0.Id(P.id2mcode _1)) )
# 8312 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 221 "parser_cocci_menhir.mly"
       (Parse_aux.idinfo)
# 8333 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_decl_ident = 
# 2332 "parser_cocci_menhir.mly"
         ( let (nm,constraints,pure,clt) = _1 in
         Ast0.wrap(Ast0.MetaId(P.clt2mcode nm clt,constraints,Ast.NoVal,pure)) )
# 8341 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_empty_list_start_one_dec_name_opt_decl__TEllipsis_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_decl_list_name_opt_decl_ = 
# 2354 "parser_cocci_menhir.mly"
     ( Ast0.wrap
	 (Ast0.DOTS
	    (_1
	       (fun _ d -> Ast0.wrap(Ast0.Pdots(P.clt2mcode "..." d)))
	       (fun c -> Ast0.PComma c))) )
# 8369 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 223 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 8390 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_decl_statement = 
# 1664 "parser_cocci_menhir.mly"
      ( let (nm,pure,clt) = _1 in
      [Ast0.wrap(Ast0.MetaStmt(P.clt2mcode nm clt,pure))] )
# 8398 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_decl_var = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_decl_statement = 
# 1667 "parser_cocci_menhir.mly"
      ( List.map
	  (function x ->
	    Ast0.wrap
	      (Ast0.Decl((Ast0.default_info(),Ast0.context_befaft()),x)))
	  _1 )
# 8426 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_statement = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_decl_statement = 
# 1672 "parser_cocci_menhir.mly"
              ( [_1] )
# 8450 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 8481 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let t : 'tv_midzero_list_fun_start_fun_start_ = Obj.magic t in
        let _1 : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 8487 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_decl_statement = 
# 1681 "parser_cocci_menhir.mly"
      ( let (mids,code) = t in
	if List.for_all
	    (function x ->
	      match Ast0.unwrap x with Ast0.DOTS([]) -> true | _ -> false)
	    code
      then []
      else
	  [Ast0.wrap(Ast0.Disj(P.id2mcode _1, code, mids,
			       P.id2mcode _3))] )
# 8502 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 223 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 8523 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_decl_statement_expr = 
# 1694 "parser_cocci_menhir.mly"
      ( let (nm,pure,clt) = _1 in
      [Ast0.wrap(Ast0.MetaStmt(P.clt2mcode nm clt,pure))] )
# 8531 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_decl_var = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_decl_statement_expr = 
# 1697 "parser_cocci_menhir.mly"
      ( List.map
	  (function x ->
	    Ast0.wrap
	      (Ast0.Decl((Ast0.default_info(),Ast0.context_befaft()),x)))
	  _1 )
# 8559 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_statement = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_decl_statement_expr = 
# 1702 "parser_cocci_menhir.mly"
              ( [_1] )
# 8583 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 8614 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let t : 'tv_midzero_list_fun_after_stm_fun_after_dots_or_ = Obj.magic t in
        let _1 : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 8620 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_decl_statement_expr = 
# 1711 "parser_cocci_menhir.mly"
      ( let (mids,code) = t in
	if List.for_all (function [] -> true | _ -> false) code
      then []
      else
	  let dot_code =
	    List.map (function x -> Ast0.wrap(Ast0.DOTS x)) code in
	  [Ast0.wrap(Ast0.Disj(P.id2mcode _1, dot_code, mids,
			       P.id2mcode _3))] )
# 8634 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 8660 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = 
# 1474 "parser_cocci_menhir.mly"
      ( [Ast0.wrap(Ast0.TyDecl(t,P.clt2mcode ";" pv))] )
# 8668 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 224 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 8689 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_decl_var = 
# 1475 "parser_cocci_menhir.mly"
              ( [P.meta_decl _1] )
# 8696 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 8727 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_comma_list_d_ident_ = Obj.magic d in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let s =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 8737 "parser_cocci_menhir.ml"
          
        in
        
# 1477 "parser_cocci_menhir.mly"
      ( List.map
	  (function (id,fn) ->
	    Ast0.wrap(Ast0.UnInit(s,fn t,id,P.clt2mcode ";" pv)))
	  d )
# 8746 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 8782 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_comma_list_d_ident_ = Obj.magic d in
        let t : 'tv_ctype = Obj.magic t in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let s =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 8794 "parser_cocci_menhir.ml"
          
        in
        
# 1477 "parser_cocci_menhir.mly"
      ( List.map
	  (function (id,fn) ->
	    Ast0.wrap(Ast0.UnInit(s,fn t,id,P.clt2mcode ";" pv)))
	  d )
# 8803 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = f;
          MenhirLib.EngineTypes.startp = _startpos_f_;
          MenhirLib.EngineTypes.endp = _endpos_f_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let f : 'tv_funproto = Obj.magic f in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_f_ in
        let _v : 'tv_decl_var = 
# 1481 "parser_cocci_menhir.mly"
               ( [f] )
# 8827 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = d;
                MenhirLib.EngineTypes.startp = _startpos_d_;
                MenhirLib.EngineTypes.endp = _endpos_d_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = t;
                  MenhirLib.EngineTypes.startp = _startpos_t_;
                  MenhirLib.EngineTypes.endp = _endpos_t_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 8868 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 8874 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let d : 'tv_d_ident = Obj.magic d in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let s =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 8884 "parser_cocci_menhir.ml"
          
        in
        
# 1483 "parser_cocci_menhir.mly"
      (let (id,fn) = d in
      [Ast0.wrap(Ast0.Init(s,fn t,id,P.clt2mcode "=" q,e,P.clt2mcode ";" pv))])
# 8891 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = d;
                MenhirLib.EngineTypes.startp = _startpos_d_;
                MenhirLib.EngineTypes.endp = _endpos_d_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = t;
                  MenhirLib.EngineTypes.startp = _startpos_t_;
                  MenhirLib.EngineTypes.endp = _endpos_t_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x0;
                    MenhirLib.EngineTypes.startp = _startpos_x0_;
                    MenhirLib.EngineTypes.endp = _endpos_x0_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 8937 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 8943 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let d : 'tv_d_ident = Obj.magic d in
        let t : 'tv_ctype = Obj.magic t in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let s =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 8955 "parser_cocci_menhir.ml"
          
        in
        
# 1483 "parser_cocci_menhir.mly"
      (let (id,fn) = d in
      [Ast0.wrap(Ast0.Init(s,fn t,id,P.clt2mcode "=" q,e,P.clt2mcode ";" pv))])
# 8962 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 8993 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_comma_list_d_ident_ = Obj.magic d in
        let i : 'tv_pure_ident_or_symbol = Obj.magic i in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let cv =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 9003 "parser_cocci_menhir.ml"
          
        in
        let s =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 9010 "parser_cocci_menhir.ml"
          
        in
        
# 1488 "parser_cocci_menhir.mly"
      ( List.map
	  (function (id,fn) ->
	    let idtype =
	      P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
	    Ast0.wrap(Ast0.UnInit(s,fn idtype,id,P.clt2mcode ";" pv)))
	  d )
# 9021 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 9057 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_comma_list_d_ident_ = Obj.magic d in
        let i : 'tv_pure_ident_or_symbol = Obj.magic i in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let cv =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 9069 "parser_cocci_menhir.ml"
          
        in
        let s =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 9076 "parser_cocci_menhir.ml"
          
        in
        
# 1488 "parser_cocci_menhir.mly"
      ( List.map
	  (function (id,fn) ->
	    let idtype =
	      P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
	    Ast0.wrap(Ast0.UnInit(s,fn idtype,id,P.clt2mcode ";" pv)))
	  d )
# 9087 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 9123 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_comma_list_d_ident_ = Obj.magic d in
        let i : 'tv_pure_ident_or_symbol = Obj.magic i in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let cv =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 9134 "parser_cocci_menhir.ml"
          
        in
        let s =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 9142 "parser_cocci_menhir.ml"
          
        in
        
# 1488 "parser_cocci_menhir.mly"
      ( List.map
	  (function (id,fn) ->
	    let idtype =
	      P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
	    Ast0.wrap(Ast0.UnInit(s,fn idtype,id,P.clt2mcode ";" pv)))
	  d )
# 9153 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = x1;
                MenhirLib.EngineTypes.startp = _startpos_x1_;
                MenhirLib.EngineTypes.endp = _endpos_x1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x0;
                  MenhirLib.EngineTypes.startp = _startpos_x0_;
                  MenhirLib.EngineTypes.endp = _endpos_x0_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 9194 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_comma_list_d_ident_ = Obj.magic d in
        let i : 'tv_pure_ident_or_symbol = Obj.magic i in
        let x1 : 'tv_const_vol = Obj.magic x1 in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let cv =
          let x = x1 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 9207 "parser_cocci_menhir.ml"
          
        in
        let s =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 9215 "parser_cocci_menhir.ml"
          
        in
        
# 1488 "parser_cocci_menhir.mly"
      ( List.map
	  (function (id,fn) ->
	    let idtype =
	      P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
	    Ast0.wrap(Ast0.UnInit(s,fn idtype,id,P.clt2mcode ";" pv)))
	  d )
# 9226 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = d;
                MenhirLib.EngineTypes.startp = _startpos_d_;
                MenhirLib.EngineTypes.endp = _endpos_d_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = i;
                  MenhirLib.EngineTypes.startp = _startpos_i_;
                  MenhirLib.EngineTypes.endp = _endpos_i_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 9267 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 9273 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident_or_symbol = Obj.magic i in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let cv =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 9283 "parser_cocci_menhir.ml"
          
        in
        let s =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 9290 "parser_cocci_menhir.ml"
          
        in
        
# 1496 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
      !Data.add_type_name (P.id2name i);
      let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
      [Ast0.wrap(Ast0.Init(s,fn idtype,id,P.clt2mcode "=" q,e,
			   P.clt2mcode ";" pv))] )
# 9300 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = d;
                MenhirLib.EngineTypes.startp = _startpos_d_;
                MenhirLib.EngineTypes.endp = _endpos_d_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = i;
                  MenhirLib.EngineTypes.startp = _startpos_i_;
                  MenhirLib.EngineTypes.endp = _endpos_i_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x0;
                    MenhirLib.EngineTypes.startp = _startpos_x0_;
                    MenhirLib.EngineTypes.endp = _endpos_x0_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 9346 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 9352 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident_or_symbol = Obj.magic i in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let cv =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 9364 "parser_cocci_menhir.ml"
          
        in
        let s =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 9371 "parser_cocci_menhir.ml"
          
        in
        
# 1496 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
      !Data.add_type_name (P.id2name i);
      let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
      [Ast0.wrap(Ast0.Init(s,fn idtype,id,P.clt2mcode "=" q,e,
			   P.clt2mcode ";" pv))] )
# 9381 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = d;
                MenhirLib.EngineTypes.startp = _startpos_d_;
                MenhirLib.EngineTypes.endp = _endpos_d_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = i;
                  MenhirLib.EngineTypes.startp = _startpos_i_;
                  MenhirLib.EngineTypes.endp = _endpos_i_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x0;
                    MenhirLib.EngineTypes.startp = _startpos_x0_;
                    MenhirLib.EngineTypes.endp = _endpos_x0_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 9427 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 9433 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident_or_symbol = Obj.magic i in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let cv =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 9444 "parser_cocci_menhir.ml"
          
        in
        let s =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 9452 "parser_cocci_menhir.ml"
          
        in
        
# 1496 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
      !Data.add_type_name (P.id2name i);
      let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
      [Ast0.wrap(Ast0.Init(s,fn idtype,id,P.clt2mcode "=" q,e,
			   P.clt2mcode ";" pv))] )
# 9462 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = d;
                MenhirLib.EngineTypes.startp = _startpos_d_;
                MenhirLib.EngineTypes.endp = _endpos_d_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = i;
                  MenhirLib.EngineTypes.startp = _startpos_i_;
                  MenhirLib.EngineTypes.endp = _endpos_i_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = x1;
                    MenhirLib.EngineTypes.startp = _startpos_x1_;
                    MenhirLib.EngineTypes.endp = _endpos_x1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = x0;
                      MenhirLib.EngineTypes.startp = _startpos_x0_;
                      MenhirLib.EngineTypes.endp = _endpos_x0_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 9513 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 9519 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident_or_symbol = Obj.magic i in
        let x1 : 'tv_const_vol = Obj.magic x1 in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let cv =
          let x = x1 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 9532 "parser_cocci_menhir.ml"
          
        in
        let s =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 9540 "parser_cocci_menhir.ml"
          
        in
        
# 1496 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
      !Data.add_type_name (P.id2name i);
      let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
      [Ast0.wrap(Ast0.Init(s,fn idtype,id,P.clt2mcode "=" q,e,
			   P.clt2mcode ";" pv))] )
# 9550 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = rp2;
            MenhirLib.EngineTypes.startp = _startpos_rp2_;
            MenhirLib.EngineTypes.endp = _endpos_rp2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = p;
              MenhirLib.EngineTypes.startp = _startpos_p_;
              MenhirLib.EngineTypes.endp = _endpos_p_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = lp2;
                MenhirLib.EngineTypes.startp = _startpos_lp2_;
                MenhirLib.EngineTypes.endp = _endpos_lp2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = rp1;
                  MenhirLib.EngineTypes.startp = _startpos_rp1_;
                  MenhirLib.EngineTypes.endp = _endpos_rp1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = d;
                    MenhirLib.EngineTypes.startp = _startpos_d_;
                    MenhirLib.EngineTypes.endp = _endpos_d_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = st;
                      MenhirLib.EngineTypes.startp = _startpos_st_;
                      MenhirLib.EngineTypes.endp = _endpos_st_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = lp1;
                        MenhirLib.EngineTypes.startp = _startpos_lp1_;
                        MenhirLib.EngineTypes.endp = _endpos_lp1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = t;
                          MenhirLib.EngineTypes.startp = _startpos_t_;
                          MenhirLib.EngineTypes.endp = _endpos_t_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 9611 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let rp2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 9616 "parser_cocci_menhir.ml"
        ) = Obj.magic rp2 in
        let p : 'tv_decl_list_name_opt_decl_ = Obj.magic p in
        let lp2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 9622 "parser_cocci_menhir.ml"
        ) = Obj.magic lp2 in
        let rp1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 9627 "parser_cocci_menhir.ml"
        ) = Obj.magic rp1 in
        let d : 'tv_d_ident = Obj.magic d in
        let st : (
# 263 "parser_cocci_menhir.mly"
       (Data.clt)
# 9633 "parser_cocci_menhir.ml"
        ) = Obj.magic st in
        let lp1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 9638 "parser_cocci_menhir.ml"
        ) = Obj.magic lp1 in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let s =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 9647 "parser_cocci_menhir.ml"
          
        in
        
# 1506 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        let t =
	  Ast0.wrap
	    (Ast0.FunctionPointer
	       (t,P.clt2mcode "(" lp1,P.clt2mcode "*" st,P.clt2mcode ")" rp1,
		P.clt2mcode "(" lp2,p,P.clt2mcode ")" rp2)) in
        [Ast0.wrap(Ast0.UnInit(s,fn t,id,P.clt2mcode ";" pv))] )
# 9659 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = rp2;
            MenhirLib.EngineTypes.startp = _startpos_rp2_;
            MenhirLib.EngineTypes.endp = _endpos_rp2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = p;
              MenhirLib.EngineTypes.startp = _startpos_p_;
              MenhirLib.EngineTypes.endp = _endpos_p_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = lp2;
                MenhirLib.EngineTypes.startp = _startpos_lp2_;
                MenhirLib.EngineTypes.endp = _endpos_lp2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = rp1;
                  MenhirLib.EngineTypes.startp = _startpos_rp1_;
                  MenhirLib.EngineTypes.endp = _endpos_rp1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = d;
                    MenhirLib.EngineTypes.startp = _startpos_d_;
                    MenhirLib.EngineTypes.endp = _endpos_d_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = st;
                      MenhirLib.EngineTypes.startp = _startpos_st_;
                      MenhirLib.EngineTypes.endp = _endpos_st_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = lp1;
                        MenhirLib.EngineTypes.startp = _startpos_lp1_;
                        MenhirLib.EngineTypes.endp = _endpos_lp1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = t;
                          MenhirLib.EngineTypes.startp = _startpos_t_;
                          MenhirLib.EngineTypes.endp = _endpos_t_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = x0;
                            MenhirLib.EngineTypes.startp = _startpos_x0_;
                            MenhirLib.EngineTypes.endp = _endpos_x0_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 9725 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let rp2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 9730 "parser_cocci_menhir.ml"
        ) = Obj.magic rp2 in
        let p : 'tv_decl_list_name_opt_decl_ = Obj.magic p in
        let lp2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 9736 "parser_cocci_menhir.ml"
        ) = Obj.magic lp2 in
        let rp1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 9741 "parser_cocci_menhir.ml"
        ) = Obj.magic rp1 in
        let d : 'tv_d_ident = Obj.magic d in
        let st : (
# 263 "parser_cocci_menhir.mly"
       (Data.clt)
# 9747 "parser_cocci_menhir.ml"
        ) = Obj.magic st in
        let lp1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 9752 "parser_cocci_menhir.ml"
        ) = Obj.magic lp1 in
        let t : 'tv_ctype = Obj.magic t in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let s =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 9763 "parser_cocci_menhir.ml"
          
        in
        
# 1506 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        let t =
	  Ast0.wrap
	    (Ast0.FunctionPointer
	       (t,P.clt2mcode "(" lp1,P.clt2mcode "*" st,P.clt2mcode ")" rp1,
		P.clt2mcode "(" lp2,p,P.clt2mcode ")" rp2)) in
        [Ast0.wrap(Ast0.UnInit(s,fn t,id,P.clt2mcode ";" pv))] )
# 9775 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let _5 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 9816 "parser_cocci_menhir.ml"
        ) = Obj.magic _5 in
        let _4 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 9821 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr_list_option = Obj.magic _3 in
        let _2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 9827 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_decl_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_decl_var = 
# 1514 "parser_cocci_menhir.mly"
      ( [Ast0.wrap(Ast0.MacroDecl(_1,P.clt2mcode "(" _2,_3,
				  P.clt2mcode ")" _4,P.clt2mcode ";" _5))] )
# 9836 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let _7 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 9887 "parser_cocci_menhir.ml"
        ) = Obj.magic _7 in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 9893 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let _4 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 9898 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr_list_option = Obj.magic _3 in
        let _2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 9904 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_decl_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_decl_var = 
# 1517 "parser_cocci_menhir.mly"
      ( [Ast0.wrap
	    (Ast0.MacroDeclInit
	       (_1,P.clt2mcode "(" _2,_3,
		P.clt2mcode ")" _4,P.clt2mcode "=" q,e,
		P.clt2mcode ";" _7))] )
# 9916 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = rp2;
                MenhirLib.EngineTypes.startp = _startpos_rp2_;
                MenhirLib.EngineTypes.endp = _endpos_rp2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = p;
                  MenhirLib.EngineTypes.startp = _startpos_p_;
                  MenhirLib.EngineTypes.endp = _endpos_p_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = lp2;
                    MenhirLib.EngineTypes.startp = _startpos_lp2_;
                    MenhirLib.EngineTypes.endp = _endpos_lp2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = rp1;
                      MenhirLib.EngineTypes.startp = _startpos_rp1_;
                      MenhirLib.EngineTypes.endp = _endpos_rp1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = d;
                        MenhirLib.EngineTypes.startp = _startpos_d_;
                        MenhirLib.EngineTypes.endp = _endpos_d_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = st;
                          MenhirLib.EngineTypes.startp = _startpos_st_;
                          MenhirLib.EngineTypes.endp = _endpos_st_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.semv = lp1;
                            MenhirLib.EngineTypes.startp = _startpos_lp1_;
                            MenhirLib.EngineTypes.endp = _endpos_lp1_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = t;
                              MenhirLib.EngineTypes.startp = _startpos_t_;
                              MenhirLib.EngineTypes.endp = _endpos_t_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 9987 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 9993 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let rp2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 9998 "parser_cocci_menhir.ml"
        ) = Obj.magic rp2 in
        let p : 'tv_decl_list_name_opt_decl_ = Obj.magic p in
        let lp2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 10004 "parser_cocci_menhir.ml"
        ) = Obj.magic lp2 in
        let rp1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 10009 "parser_cocci_menhir.ml"
        ) = Obj.magic rp1 in
        let d : 'tv_d_ident = Obj.magic d in
        let st : (
# 263 "parser_cocci_menhir.mly"
       (Data.clt)
# 10015 "parser_cocci_menhir.ml"
        ) = Obj.magic st in
        let lp1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 10020 "parser_cocci_menhir.ml"
        ) = Obj.magic lp1 in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let s =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 10029 "parser_cocci_menhir.ml"
          
        in
        
# 1526 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        let t =
	  Ast0.wrap
	    (Ast0.FunctionPointer
	       (t,P.clt2mcode "(" lp1,P.clt2mcode "*" st,P.clt2mcode ")" rp1,
		P.clt2mcode "(" lp2,p,P.clt2mcode ")" rp2)) in
      [Ast0.wrap(Ast0.Init(s,fn t,id,P.clt2mcode "=" q,e,P.clt2mcode ";" pv))])
# 10041 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = rp2;
                MenhirLib.EngineTypes.startp = _startpos_rp2_;
                MenhirLib.EngineTypes.endp = _endpos_rp2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = p;
                  MenhirLib.EngineTypes.startp = _startpos_p_;
                  MenhirLib.EngineTypes.endp = _endpos_p_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = lp2;
                    MenhirLib.EngineTypes.startp = _startpos_lp2_;
                    MenhirLib.EngineTypes.endp = _endpos_lp2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = rp1;
                      MenhirLib.EngineTypes.startp = _startpos_rp1_;
                      MenhirLib.EngineTypes.endp = _endpos_rp1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = d;
                        MenhirLib.EngineTypes.startp = _startpos_d_;
                        MenhirLib.EngineTypes.endp = _endpos_d_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = st;
                          MenhirLib.EngineTypes.startp = _startpos_st_;
                          MenhirLib.EngineTypes.endp = _endpos_st_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.semv = lp1;
                            MenhirLib.EngineTypes.startp = _startpos_lp1_;
                            MenhirLib.EngineTypes.endp = _endpos_lp1_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.semv = t;
                              MenhirLib.EngineTypes.startp = _startpos_t_;
                              MenhirLib.EngineTypes.endp = _endpos_t_;
                              MenhirLib.EngineTypes.next = {
                                MenhirLib.EngineTypes.state = _menhir_s;
                                MenhirLib.EngineTypes.semv = x0;
                                MenhirLib.EngineTypes.startp = _startpos_x0_;
                                MenhirLib.EngineTypes.endp = _endpos_x0_;
                                MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 10117 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 10123 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let rp2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 10128 "parser_cocci_menhir.ml"
        ) = Obj.magic rp2 in
        let p : 'tv_decl_list_name_opt_decl_ = Obj.magic p in
        let lp2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 10134 "parser_cocci_menhir.ml"
        ) = Obj.magic lp2 in
        let rp1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 10139 "parser_cocci_menhir.ml"
        ) = Obj.magic rp1 in
        let d : 'tv_d_ident = Obj.magic d in
        let st : (
# 263 "parser_cocci_menhir.mly"
       (Data.clt)
# 10145 "parser_cocci_menhir.ml"
        ) = Obj.magic st in
        let lp1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 10150 "parser_cocci_menhir.ml"
        ) = Obj.magic lp1 in
        let t : 'tv_ctype = Obj.magic t in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = let s =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 10161 "parser_cocci_menhir.ml"
          
        in
        
# 1526 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        let t =
	  Ast0.wrap
	    (Ast0.FunctionPointer
	       (t,P.clt2mcode "(" lp1,P.clt2mcode "*" st,P.clt2mcode ")" rp1,
		P.clt2mcode "(" lp2,p,P.clt2mcode ")" rp2)) in
      [Ast0.wrap(Ast0.Init(s,fn t,id,P.clt2mcode "=" q,e,P.clt2mcode ";" pv))])
# 10173 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = id;
            MenhirLib.EngineTypes.startp = _startpos_id_;
            MenhirLib.EngineTypes.endp = _endpos_id_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = s;
                MenhirLib.EngineTypes.startp = _startpos_s_;
                MenhirLib.EngineTypes.endp = _endpos_s_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 10209 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let id : 'tv_comma_list_typedef_ident_ = Obj.magic id in
        let t : 'tv_typedef_ctype = Obj.magic t in
        let s : (
# 209 "parser_cocci_menhir.mly"
      (Data.clt)
# 10216 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_decl_var = 
# 1534 "parser_cocci_menhir.mly"
      ( let s = P.clt2mcode "typedef" s in
        List.map
	  (function id ->
	    Ast0.wrap(Ast0.Typedef(s,t,id,P.clt2mcode ";" pv)))
	  id )
# 10227 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_empty_list_start_dparam_TEllipsis_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_define_param_list_option = 
# 1189 "parser_cocci_menhir.mly"
      ( Ast0.wrap
	  (Ast0.DOTS
	     (_1
		(fun _ d -> Ast0.wrap(Ast0.DPdots(P.clt2mcode "," d)))
		(fun c -> Ast0.DPComma c))) )
# 10255 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 243 "parser_cocci_menhir.mly"
       (Data.clt * token)
# 10276 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_defineop = 
# 1133 "parser_cocci_menhir.mly"
    ( let (clt,ident) = _1 in
      let aft = P.get_aft clt in (* move stuff after the define to the ident *)
      function body ->
	Ast0.wrap
	  (Ast0.Define
	     (P.clt2mcode "#define" (P.drop_aft clt),
	      (match ident with
		TMetaId((nm,constraints,seed,pure,clt)) ->
		  let clt = P.set_aft aft clt in
		  Ast0.wrap
		    (Ast0.MetaId(P.clt2mcode nm clt,constraints,seed,pure))
	      | TIdent((nm,clt)) ->
		  let clt = P.set_aft aft clt in
		  Ast0.wrap(Ast0.Id(P.clt2mcode nm clt))
	      | TSymId(nm,clt) ->
		  let clt = P.set_aft aft clt in
		  Ast0.wrap(Ast0.Id(P.clt2mcode nm clt))
	      | _ ->
		  raise
		    (Semantic_cocci.Semantic
		       "unexpected name for a #define")),
	      Ast0.wrap Ast0.NoParams,
	      body)) )
# 10305 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 10336 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_define_param_list_option = Obj.magic _2 in
        let _1 : (
# 245 "parser_cocci_menhir.mly"
       (Data.clt * token * int * int)
# 10342 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_defineop = 
# 1157 "parser_cocci_menhir.mly"
    ( let (clt,ident,parenoff,parencol) = _1 in
      let aft = P.get_aft clt in (* move stuff after the define to the ( *)
      (* clt is the start of the #define itself *)
      let (arity,line,lline,llineend,offset,col,strbef,straft,pos,ws) = clt in
      let lp =
	P.clt2mcode "("
	  (arity,line,lline,llineend,parenoff,parencol,[],[],[],"") in
      function body ->
	Ast0.wrap
	  (Ast0.Define
	     (P.clt2mcode "#define" (P.drop_aft clt),
	      (match ident with
		TMetaId((nm,constraints,seed,pure,clt)) ->
		  Ast0.wrap
		    (Ast0.MetaId(P.clt2mcode nm clt,constraints,seed,pure))
	      | TIdent((nm,clt)) ->
		  Ast0.wrap(Ast0.Id(P.clt2mcode nm clt))
	      | TSymId(nm,clt) ->
		  Ast0.wrap(Ast0.Id(P.clt2mcode nm clt))
	      | _ ->
		  raise
		    (Semantic_cocci.Semantic
		       "unexpected name for a #define")),
	      (let clt = P.set_aft aft _3 in
	      Ast0.wrap (Ast0.DParams (lp,_2,P.clt2mcode ")" clt))),body)) )
# 10373 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 202 "parser_cocci_menhir.mly"
      (string)
# 10394 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_dep = 
# 403 "parser_cocci_menhir.mly"
                   ( Ast0.Dep _1 )
# 10401 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 202 "parser_cocci_menhir.mly"
      (string)
# 10426 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_dep = 
# 404 "parser_cocci_menhir.mly"
                   ( Ast0.AntiDep (Ast0.Dep _2) )
# 10433 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_dep = Obj.magic _3 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_dep = 
# 406 "parser_cocci_menhir.mly"
                   ( Ast0.AntiDep _3 )
# 10469 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 202 "parser_cocci_menhir.mly"
      (string)
# 10494 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_dep = 
# 407 "parser_cocci_menhir.mly"
                   ( Ast0.EverDep _2 )
# 10501 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 202 "parser_cocci_menhir.mly"
      (string)
# 10526 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_dep = 
# 408 "parser_cocci_menhir.mly"
                   ( Ast0.NeverDep _2 )
# 10533 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_dep = Obj.magic _3 in
        let _1 : 'tv_dep = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_dep = 
# 409 "parser_cocci_menhir.mly"
                   ( Ast0.AndDep(_1, _3) )
# 10567 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_dep = Obj.magic _3 in
        let _1 : 'tv_dep = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_dep = 
# 410 "parser_cocci_menhir.mly"
                   ( Ast0.OrDep (_1, _3) )
# 10601 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _2 : 'tv_dep = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_dep = 
# 411 "parser_cocci_menhir.mly"
                   ( _2 )
# 10633 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_depends = 
# 399 "parser_cocci_menhir.mly"
                           ( Ast0.NoDep )
# 10650 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = parents;
          MenhirLib.EngineTypes.startp = _startpos_parents_;
          MenhirLib.EngineTypes.endp = _endpos_parents_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let parents : 'tv_dep = Obj.magic parents in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_parents_ in
        let _v : 'tv_depends = 
# 400 "parser_cocci_menhir.mly"
                           ( parents )
# 10682 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_disj_ident = Obj.magic _2 in
        let _1 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 10709 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_designator = 
# 1650 "parser_cocci_menhir.mly"
     ( Ast0.DesignatorField (P.clt2mcode "." _1,_2) )
# 10716 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 266 "parser_cocci_menhir.mly"
       (Data.clt)
# 10747 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_eexpr = Obj.magic _2 in
        let _1 : (
# 266 "parser_cocci_menhir.mly"
       (Data.clt)
# 10753 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_designator = 
# 1652 "parser_cocci_menhir.mly"
     ( Ast0.DesignatorIndex (P.clt2mcode "[" _1,_2,P.clt2mcode "]" _3) )
# 10760 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let _5 : (
# 266 "parser_cocci_menhir.mly"
       (Data.clt)
# 10801 "parser_cocci_menhir.ml"
        ) = Obj.magic _5 in
        let _4 : 'tv_eexpr = Obj.magic _4 in
        let _3 : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 10807 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_eexpr = Obj.magic _2 in
        let _1 : (
# 266 "parser_cocci_menhir.mly"
       (Data.clt)
# 10813 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_designator = 
# 1654 "parser_cocci_menhir.mly"
     ( Ast0.DesignatorRange (P.clt2mcode "[" _1,_2,P.clt2mcode "..." _3,
			     _4,P.clt2mcode "]" _5) )
# 10821 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_pre_basic_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_dexpr = 
# 1737 "parser_cocci_menhir.mly"
                                              ( _1 )
# 10845 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_separated_nonempty_list_TComma_pure_ident_ = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_disable = 
# 417 "parser_cocci_menhir.mly"
                                                      ( List.map P.id2name _2 )
# 10873 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_mident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_disj_ident = 
# 2318 "parser_cocci_menhir.mly"
              ( _1 )
# 10897 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = rp;
          MenhirLib.EngineTypes.startp = _startpos_rp_;
          MenhirLib.EngineTypes.endp = _endpos_rp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = lp;
              MenhirLib.EngineTypes.startp = _startpos_lp_;
              MenhirLib.EngineTypes.endp = _endpos_lp_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let rp : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 10928 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let t : 'tv_midzero_list_disj_ident_disj_ident_ = Obj.magic t in
        let lp : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 10934 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let _startpos = _startpos_lp_ in
        let _endpos = _endpos_rp_ in
        let _v : 'tv_disj_ident = 
# 2320 "parser_cocci_menhir.mly"
  ( let (mids,code) = t in
	 Ast0.wrap
	   (Ast0.DisjId(P.id2mcode lp,code,mids, P.id2mcode rp)) )
# 10943 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 10964 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_dot_expressions = 
# 1747 "parser_cocci_menhir.mly"
            ( Ast0.wrap(Ast0.Edots(P.clt2mcode "..." _1,None)) )
# 10971 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_nest_expressions = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_dot_expressions = 
# 1748 "parser_cocci_menhir.mly"
                   ( _1 )
# 10995 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_mident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_dparam = 
# 1185 "parser_cocci_menhir.mly"
               ( Ast0.wrap(Ast0.DParam _1) )
# 11019 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_basic_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_eargexpr = 
# 1735 "parser_cocci_menhir.mly"
                                            ( _1 )
# 11043 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let d : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 11064 "parser_cocci_menhir.ml"
        ) = Obj.magic d in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v : 'tv_edots_when_TEllipsis_eexpr_ = 
# 2709 "parser_cocci_menhir.mly"
                                                  ( (d,None) )
# 11071 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = w;
            MenhirLib.EngineTypes.startp = _startpos_w_;
            MenhirLib.EngineTypes.endp = _endpos_w_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = t;
                MenhirLib.EngineTypes.startp = _startpos_t_;
                MenhirLib.EngineTypes.endp = _endpos_t_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = d;
                  MenhirLib.EngineTypes.startp = _startpos_d_;
                  MenhirLib.EngineTypes.endp = _endpos_d_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let w : 'tv_eexpr = Obj.magic w in
        let e : (
# 258 "parser_cocci_menhir.mly"
       (Data.clt)
# 11112 "parser_cocci_menhir.ml"
        ) = Obj.magic e in
        let t : (
# 236 "parser_cocci_menhir.mly"
       (Data.clt)
# 11117 "parser_cocci_menhir.ml"
        ) = Obj.magic t in
        let d : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 11122 "parser_cocci_menhir.ml"
        ) = Obj.magic d in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_edots_when_TEllipsis_eexpr_ = 
# 2711 "parser_cocci_menhir.mly"
    ( (d, Some (P.clt2mcode "when" t, P.clt2mcode "!=" e,w)) )
# 11129 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let d : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 11150 "parser_cocci_menhir.ml"
        ) = Obj.magic d in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v : 'tv_edots_when_TEllipsis_enum_decl_one_ = 
# 2709 "parser_cocci_menhir.mly"
                                                  ( (d,None) )
# 11157 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = w;
            MenhirLib.EngineTypes.startp = _startpos_w_;
            MenhirLib.EngineTypes.endp = _endpos_w_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = t;
                MenhirLib.EngineTypes.startp = _startpos_t_;
                MenhirLib.EngineTypes.endp = _endpos_t_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = d;
                  MenhirLib.EngineTypes.startp = _startpos_d_;
                  MenhirLib.EngineTypes.endp = _endpos_d_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let w : 'tv_enum_decl_one = Obj.magic w in
        let e : (
# 258 "parser_cocci_menhir.mly"
       (Data.clt)
# 11198 "parser_cocci_menhir.ml"
        ) = Obj.magic e in
        let t : (
# 236 "parser_cocci_menhir.mly"
       (Data.clt)
# 11203 "parser_cocci_menhir.ml"
        ) = Obj.magic t in
        let d : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 11208 "parser_cocci_menhir.ml"
        ) = Obj.magic d in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_edots_when_TEllipsis_enum_decl_one_ = 
# 2711 "parser_cocci_menhir.mly"
    ( (d, Some (P.clt2mcode "when" t, P.clt2mcode "!=" e,w)) )
# 11215 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let d : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 11236 "parser_cocci_menhir.ml"
        ) = Obj.magic d in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v : 'tv_edots_when_TEllipsis_initialize_ = 
# 2709 "parser_cocci_menhir.mly"
                                                  ( (d,None) )
# 11243 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = w;
            MenhirLib.EngineTypes.startp = _startpos_w_;
            MenhirLib.EngineTypes.endp = _endpos_w_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = t;
                MenhirLib.EngineTypes.startp = _startpos_t_;
                MenhirLib.EngineTypes.endp = _endpos_t_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = d;
                  MenhirLib.EngineTypes.startp = _startpos_d_;
                  MenhirLib.EngineTypes.endp = _endpos_d_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let w : 'tv_initialize = Obj.magic w in
        let e : (
# 258 "parser_cocci_menhir.mly"
       (Data.clt)
# 11284 "parser_cocci_menhir.ml"
        ) = Obj.magic e in
        let t : (
# 236 "parser_cocci_menhir.mly"
       (Data.clt)
# 11289 "parser_cocci_menhir.ml"
        ) = Obj.magic t in
        let d : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 11294 "parser_cocci_menhir.ml"
        ) = Obj.magic d in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_edots_when_TEllipsis_initialize_ = 
# 2711 "parser_cocci_menhir.mly"
    ( (d, Some (P.clt2mcode "when" t, P.clt2mcode "!=" e,w)) )
# 11301 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let d : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 11322 "parser_cocci_menhir.ml"
        ) = Obj.magic d in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v : 'tv_edots_when_TEllipsis_struct_decl_one_ = 
# 2709 "parser_cocci_menhir.mly"
                                                  ( (d,None) )
# 11329 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = w;
            MenhirLib.EngineTypes.startp = _startpos_w_;
            MenhirLib.EngineTypes.endp = _endpos_w_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = t;
                MenhirLib.EngineTypes.startp = _startpos_t_;
                MenhirLib.EngineTypes.endp = _endpos_t_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = d;
                  MenhirLib.EngineTypes.startp = _startpos_d_;
                  MenhirLib.EngineTypes.endp = _endpos_d_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let w : 'tv_struct_decl_one = Obj.magic w in
        let e : (
# 258 "parser_cocci_menhir.mly"
       (Data.clt)
# 11370 "parser_cocci_menhir.ml"
        ) = Obj.magic e in
        let t : (
# 236 "parser_cocci_menhir.mly"
       (Data.clt)
# 11375 "parser_cocci_menhir.ml"
        ) = Obj.magic t in
        let d : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 11380 "parser_cocci_menhir.ml"
        ) = Obj.magic d in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_edots_when_TEllipsis_struct_decl_one_ = 
# 2711 "parser_cocci_menhir.mly"
    ( (d, Some (P.clt2mcode "when" t, P.clt2mcode "!=" e,w)) )
# 11387 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_pre_basic_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_eexpr = 
# 1734 "parser_cocci_menhir.mly"
                                             ( _1 )
# 11411 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_empty_list_start_aexpr_TEllipsis_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_eexpr_list_option = 
# 2620 "parser_cocci_menhir.mly"
      ( Ast0.wrap
	  (Ast0.DOTS
	     (_1
		(fun _ d -> Ast0.wrap(Ast0.Edots(P.clt2mcode "..." d,None)))
		(fun c -> Ast0.EComma c))) )
# 11439 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_empty_list_start_aexpr_TEllipsis_ = 
# 2382 "parser_cocci_menhir.mly"
              ( fun build_dots build_comma -> [] )
# 11456 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = list;
          MenhirLib.EngineTypes.startp = _startpos_list_;
          MenhirLib.EngineTypes.endp = _endpos_list_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let list : 'tv_nonempty_list_start_aexpr_TEllipsis_ = Obj.magic list in
        let _startpos = _startpos_list_ in
        let _endpos = _endpos_list_ in
        let _v : 'tv_empty_list_start_aexpr_TEllipsis_ = 
# 2383 "parser_cocci_menhir.mly"
                                        ( list )
# 11480 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_empty_list_start_dparam_TEllipsis_ = 
# 2382 "parser_cocci_menhir.mly"
              ( fun build_dots build_comma -> [] )
# 11497 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = list;
          MenhirLib.EngineTypes.startp = _startpos_list_;
          MenhirLib.EngineTypes.endp = _endpos_list_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let list : 'tv_nonempty_list_start_dparam_TEllipsis_ = Obj.magic list in
        let _startpos = _startpos_list_ in
        let _endpos = _endpos_list_ in
        let _v : 'tv_empty_list_start_dparam_TEllipsis_ = 
# 2383 "parser_cocci_menhir.mly"
                                        ( list )
# 11521 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_empty_list_start_initialize2_edots_when_TEllipsis_initialize__ = 
# 2382 "parser_cocci_menhir.mly"
              ( fun build_dots build_comma -> [] )
# 11538 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = list;
          MenhirLib.EngineTypes.startp = _startpos_list_;
          MenhirLib.EngineTypes.endp = _endpos_list_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let list : 'tv_nonempty_list_start_initialize2_edots_when_TEllipsis_initialize__ = Obj.magic list in
        let _startpos = _startpos_list_ in
        let _endpos = _endpos_list_ in
        let _v : 'tv_empty_list_start_initialize2_edots_when_TEllipsis_initialize__ = 
# 2383 "parser_cocci_menhir.mly"
                                        ( list )
# 11562 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_empty_list_start_one_dec_name_opt_decl__TEllipsis_ = 
# 2382 "parser_cocci_menhir.mly"
              ( fun build_dots build_comma -> [] )
# 11579 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = list;
          MenhirLib.EngineTypes.startp = _startpos_list_;
          MenhirLib.EngineTypes.endp = _endpos_list_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let list : 'tv_nonempty_list_start_one_dec_name_opt_decl__TEllipsis_ = Obj.magic list in
        let _startpos = _startpos_list_ in
        let _endpos = _endpos_list_ in
        let _v : 'tv_empty_list_start_one_dec_name_opt_decl__TEllipsis_ = 
# 2383 "parser_cocci_menhir.mly"
                                        ( list )
# 11603 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_nonempty_list_start_enum_decl_one_edots_when_TEllipsis_enum_decl_one__ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_enum_decl_list = 
# 1008 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.DOTS(_1 P.mkedots (fun c -> Ast0.EComma c))) )
# 11627 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_disj_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_enum_decl_one = 
# 979 "parser_cocci_menhir.mly"
                    ( Ast0.wrap(Ast0.Ident(_1)) )
# 11651 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_enum_val = Obj.magic _3 in
        let _2 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 11683 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_disj_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_enum_decl_one = 
# 981 "parser_cocci_menhir.mly"
 ( let id = Ast0.wrap(Ast0.Ident(_1)) in
	Ast0.wrap
	  (Ast0.Assignment
	     (id,P.clt2mcode Ast.SimpleAssign _2,Ast0.set_arg_exp _3,
	      false)) )
# 11695 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_enum_val = 
# 988 "parser_cocci_menhir.mly"
            ( Ast0.wrap(Ast0.Ident(_1)) )
# 11719 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 11740 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_enum_val = 
# 990 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Int x) clt)) )
# 11748 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 224 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 11769 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_enum_val = 
# 992 "parser_cocci_menhir.mly"
         ( tmeta_to_exp _1 )
# 11776 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 228 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 11797 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_enum_val = 
# 994 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.CONST,pure)) )
# 11806 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 227 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 11827 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_enum_val = 
# 998 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.ANY,pure)) )
# 11836 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 227 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 11857 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_enum_val = 
# 1002 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.ID,pure)) )
# 11866 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_exec_front_ident = 
# 2641 "parser_cocci_menhir.mly"
          ( Ast0.wrap(Ast0.Ident(_1)) )
# 11890 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 227 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 11911 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_exec_front_ident = 
# 2643 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.ID,pure)) )
# 11920 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 227 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 11941 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_exec_front_ident = 
# 2647 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.ANY,pure)) )
# 11950 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_exec_ident = 
# 2652 "parser_cocci_menhir.mly"
     ( function prev -> prev )
# 11967 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_exec_ident = Obj.magic _3 in
        let _2 : 'tv_disj_ident = Obj.magic _2 in
        let _1 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 12000 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_exec_ident = 
# 2654 "parser_cocci_menhir.mly"
     ( function prev ->
       _3 (Ast0.wrap(Ast0.RecordAccess(prev, P.clt2mcode "." _1, _2))) )
# 12008 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_exec_ident = Obj.magic _3 in
        let _2 : 'tv_disj_ident = Obj.magic _2 in
        let _1 : (
# 268 "parser_cocci_menhir.mly"
       (Data.clt)
# 12041 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_exec_ident = 
# 2657 "parser_cocci_menhir.mly"
     ( function prev ->
       _3 (Ast0.wrap(Ast0.RecordPtAccess(prev, P.clt2mcode "->" _1,
				     _2))) )
# 12050 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_exec_ident2 = 
# 2662 "parser_cocci_menhir.mly"
     ( [] )
# 12067 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_exec_ident2 = Obj.magic _3 in
        let _2 : (
# 216 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 12099 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 12104 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_exec_ident2 = 
# 2664 "parser_cocci_menhir.mly"
     ( (P.clt2mcode "." _1) :: (P.clt2mcode (fst _2) (snd _2)) :: _3 )
# 12111 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_exec_ident2 = Obj.magic _3 in
        let _2 : (
# 216 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 12143 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 268 "parser_cocci_menhir.mly"
       (Data.clt)
# 12148 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_exec_ident2 = 
# 2666 "parser_cocci_menhir.mly"
     ( (P.clt2mcode "." _1) :: (P.clt2mcode (fst _2) (snd _2)) :: _3 )
# 12155 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_exec_list = 
# 2630 "parser_cocci_menhir.mly"
                ( [] )
# 12172 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let _4 : 'tv_exec_list = Obj.magic _4 in
        let _3 : 'tv_exec_ident = Obj.magic _3 in
        let _2 : 'tv_exec_front_ident = Obj.magic _2 in
        let _1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 12211 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_exec_list = 
# 2632 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.ExecEval(P.clt2mcode ":" _1,_3 _2)) :: _4 )
# 12218 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_exec_list = Obj.magic _3 in
        let _2 : 'tv_exec_ident2 = Obj.magic _2 in
        let _1 : (
# 216 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 12251 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_exec_list = 
# 2634 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.ExecToken(P.clt2mcode (fst _1) (snd _1))) ::
	List.map (function x -> Ast0.wrap(Ast0.ExecToken x)) _2 @ _3 )
# 12259 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_exec_list = Obj.magic _2 in
        let _1 : 'tv_token = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_exec_list = 
# 2636 "parser_cocci_menhir.mly"
                    ( Ast0.wrap(Ast0.ExecToken _1) :: _2 )
# 12289 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_exec_list = Obj.magic _2 in
        let _1 : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 12316 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_exec_list = 
# 2638 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.ExecDots(P.clt2mcode "..." _1)) :: _2 )
# 12323 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_exists = 
# 420 "parser_cocci_menhir.mly"
          ( Ast.Exists )
# 12345 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_exists = 
# 421 "parser_cocci_menhir.mly"
          ( Ast.Forall )
# 12367 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_exists = 
# 422 "parser_cocci_menhir.mly"
          ( Ast.Undetermined )
# 12384 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_pre_basic_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_expr = 
# 1732 "parser_cocci_menhir.mly"
                                    ( _1 )
# 12408 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let r : 'tv_no_dot_start_end_dexpr_edots_when_TEllipsis_eexpr__ = Obj.magic r in
        let _startpos = _startpos_r_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_expr_dots_TEllipsis_ = 
# 2006 "parser_cocci_menhir.mly"
                                                       ( r )
# 12432 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let m : 'tv_nonempty_list_TMul_ = Obj.magic m in
        let _startpos = _startpos_m_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_expression_type = 
# 734 "parser_cocci_menhir.mly"
                        ( P.ty_pointerify Type_cocci.Unknown m )
# 12456 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_expression_type = 
# 736 "parser_cocci_menhir.mly"
    ( P.ty_pointerify (Type_cocci.EnumName Type_cocci.NoName) m )
# 12484 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_expression_type = 
# 738 "parser_cocci_menhir.mly"
    ( P.ty_pointerify
	(Type_cocci.StructUnionName (Type_cocci.Struct,Type_cocci.NoName)) m )
# 12513 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_expression_type = 
# 741 "parser_cocci_menhir.mly"
    ( P.ty_pointerify
	(Type_cocci.StructUnionName (Type_cocci.Union,Type_cocci.NoName)) m )
# 12542 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_extends = 
# 394 "parser_cocci_menhir.mly"
                                                  ( () )
# 12559 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = parent;
          MenhirLib.EngineTypes.startp = _startpos_parent_;
          MenhirLib.EngineTypes.endp = _endpos_parent_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let parent : (
# 202 "parser_cocci_menhir.mly"
      (string)
# 12584 "parser_cocci_menhir.ml"
        ) = Obj.magic parent in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_parent_ in
        let _v : 'tv_extends = 
# 396 "parser_cocci_menhir.mly"
    ( !Data.install_bindings (parent) )
# 12591 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 246 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 12617 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 246 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 12622 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_filespec = 
# 1059 "parser_cocci_menhir.mly"
    ( [Ast0.wrap
	  (Ast0.FILEINFO(P.id2mcode _1,
			 P.id2mcode _2))] )
# 12631 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_disj_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_fn_ident = 
# 2284 "parser_cocci_menhir.mly"
                     ( _1 )
# 12655 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 220 "parser_cocci_menhir.mly"
       (Parse_aux.idinfo)
# 12676 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_fn_ident = 
# 2286 "parser_cocci_menhir.mly"
         ( let (nm,constraints,pure,clt) = _1 in
	 Ast0.wrap(Ast0.MetaFunc(P.clt2mcode nm clt,constraints,pure)) )
# 12684 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 220 "parser_cocci_menhir.mly"
       (Parse_aux.idinfo)
# 12705 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_fn_ident = 
# 2289 "parser_cocci_menhir.mly"
  ( let (nm,constraints,pure,clt) = _1 in
	 Ast0.wrap
	   (Ast0.MetaLocalFunc(P.clt2mcode nm clt,constraints,pure)) )
# 12714 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_fninfo = 
# 1279 "parser_cocci_menhir.mly"
                ( [] )
# 12731 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fninfo = Obj.magic _2 in
        let _1 : 'tv_storage = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fninfo = 
# 1281 "parser_cocci_menhir.mly"
      ( try
	let _ =
	  List.find (function Ast0.FStorage(_) -> true | _ -> false) _2 in
	raise (Semantic_cocci.Semantic "duplicate storage")
      with Not_found -> (Ast0.FStorage(_1))::_2 )
# 12765 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let r : 'tv_fninfo_nt = Obj.magic r in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_fninfo = 
# 1286 "parser_cocci_menhir.mly"
                        ( (Ast0.FType(t))::r )
# 12795 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fninfo = Obj.magic _2 in
        let _1 : (
# 209 "parser_cocci_menhir.mly"
      (Data.clt)
# 12822 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fninfo = 
# 1288 "parser_cocci_menhir.mly"
      ( try
	let _ = List.find (function Ast0.FInline(_) -> true | _ -> false) _2 in
	raise (Semantic_cocci.Semantic "duplicate inline")
      with Not_found -> (Ast0.FInline(P.clt2mcode "inline" _1))::_2 )
# 12832 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fninfo = Obj.magic _2 in
        let _1 : (
# 211 "parser_cocci_menhir.mly"
      (string * Data.clt)
# 12859 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fninfo = 
# 1293 "parser_cocci_menhir.mly"
      ( try
	let _ = List.find (function Ast0.FAttr(_) -> true | _ -> false) _2 in
	raise (Semantic_cocci.Semantic "multiple attributes")
      with Not_found -> (Ast0.FAttr(P.id2mcode _1))::_2 )
# 12869 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_fninfo_nt = 
# 1299 "parser_cocci_menhir.mly"
                ( [] )
# 12886 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fninfo_nt = Obj.magic _2 in
        let _1 : 'tv_storage = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fninfo_nt = 
# 1301 "parser_cocci_menhir.mly"
      ( try
	let _ =
	  List.find (function Ast0.FStorage(_) -> true | _ -> false) _2 in
	raise (Semantic_cocci.Semantic "duplicate storage")
      with Not_found -> (Ast0.FStorage(_1))::_2 )
# 12920 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fninfo_nt = Obj.magic _2 in
        let _1 : (
# 209 "parser_cocci_menhir.mly"
      (Data.clt)
# 12947 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fninfo_nt = 
# 1307 "parser_cocci_menhir.mly"
      ( try
	let _ = List.find (function Ast0.FInline(_) -> true | _ -> false) _2 in
	raise (Semantic_cocci.Semantic "duplicate inline")
      with Not_found -> (Ast0.FInline(P.clt2mcode "inline" _1))::_2 )
# 12957 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fninfo_nt = Obj.magic _2 in
        let _1 : (
# 211 "parser_cocci_menhir.mly"
      (string * Data.clt)
# 12984 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fninfo_nt = 
# 1312 "parser_cocci_menhir.mly"
      ( try
	let _ = List.find (function Ast0.FAttr(_) -> true | _ -> false) _2 in
	raise (Semantic_cocci.Semantic "duplicate init")
      with Not_found -> (Ast0.FAttr(P.id2mcode _1))::_2 )
# 12994 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_fun_after_dots = 
# 2553 "parser_cocci_menhir.mly"
                               ([])
# 13011 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fun_after_exp = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fun_after_dots = 
# 2554 "parser_cocci_menhir.mly"
                               (_2)
# 13039 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fun_after_exp = Obj.magic _2 in
        let _1 : 'tv_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fun_after_dots = 
# 2555 "parser_cocci_menhir.mly"
                               (Ast0.wrap(Ast0.Exp(_1))::_2)
# 13069 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fun_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fun_after_dots = 
# 2556 "parser_cocci_menhir.mly"
                                    (_1@_2)
# 13099 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_fun_after_dots_or = 
# 2563 "parser_cocci_menhir.mly"
                               ([])
# 13116 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fun_after_exp_or = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fun_after_dots_or = 
# 2564 "parser_cocci_menhir.mly"
                               (_2)
# 13144 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fun_after_exp_or = Obj.magic _2 in
        let _1 : 'tv_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fun_after_dots_or = 
# 2565 "parser_cocci_menhir.mly"
                               (Ast0.wrap(Ast0.Exp(_1))::_2)
# 13174 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fun_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fun_after_dots_or = 
# 2566 "parser_cocci_menhir.mly"
                                    (_1@_2)
# 13204 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fun_after_dots = Obj.magic _2 in
        let _1 : 'tv_stm_dots = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fun_after_exp = 
# 2559 "parser_cocci_menhir.mly"
                               (_1::_2)
# 13234 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_fun_after_exp_or = 
# 2569 "parser_cocci_menhir.mly"
                               ([])
# 13251 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fun_after_dots = Obj.magic _2 in
        let _1 : 'tv_stm_dots = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fun_after_exp_or = 
# 2570 "parser_cocci_menhir.mly"
                               (_1::_2)
# 13281 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_fun_after_stm = 
# 2548 "parser_cocci_menhir.mly"
                               ([])
# 13298 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fun_after_dots = Obj.magic _2 in
        let _1 : 'tv_stm_dots = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fun_after_stm = 
# 2549 "parser_cocci_menhir.mly"
                               (_1::_2)
# 13328 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_fun_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_fun_after_stm = 
# 2550 "parser_cocci_menhir.mly"
                               (_1@_2)
# 13358 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_fun_after_stm = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_fun_start = 
# 2545 "parser_cocci_menhir.mly"
                 ( Ast0.wrap(Ast0.DOTS(_1)) )
# 13382 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_func_ident = 
# 2275 "parser_cocci_menhir.mly"
             ( _1 )
# 13406 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 220 "parser_cocci_menhir.mly"
       (Parse_aux.idinfo)
# 13427 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_func_ident = 
# 2277 "parser_cocci_menhir.mly"
         ( let (nm,constraints,pure,clt) = _1 in
	 Ast0.wrap(Ast0.MetaFunc(P.clt2mcode nm clt,constraints,pure)) )
# 13435 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 220 "parser_cocci_menhir.mly"
       (Parse_aux.idinfo)
# 13456 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_func_ident = 
# 2280 "parser_cocci_menhir.mly"
  ( let (nm,constraints,pure,clt) = _1 in
	 Ast0.wrap
	   (Ast0.MetaLocalFunc(P.clt2mcode nm clt,constraints,pure)) )
# 13465 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = rb;
          MenhirLib.EngineTypes.startp = _startpos_rb_;
          MenhirLib.EngineTypes.endp = _endpos_rb_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = b;
            MenhirLib.EngineTypes.startp = _startpos_b_;
            MenhirLib.EngineTypes.endp = _endpos_b_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = lb;
              MenhirLib.EngineTypes.startp = _startpos_lb_;
              MenhirLib.EngineTypes.endp = _endpos_lb_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = rp;
                MenhirLib.EngineTypes.startp = _startpos_rp_;
                MenhirLib.EngineTypes.endp = _endpos_rp_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = arglist;
                  MenhirLib.EngineTypes.startp = _startpos_arglist_;
                  MenhirLib.EngineTypes.endp = _endpos_arglist_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = lp;
                    MenhirLib.EngineTypes.startp = _startpos_lp_;
                    MenhirLib.EngineTypes.endp = _endpos_lp_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = i;
                      MenhirLib.EngineTypes.startp = _startpos_i_;
                      MenhirLib.EngineTypes.endp = _endpos_i_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = f;
                          MenhirLib.EngineTypes.startp = _startpos_f_;
                          MenhirLib.EngineTypes.endp = _endpos_f_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let rb : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 13525 "parser_cocci_menhir.ml"
        ) = Obj.magic rb in
        let b : 'tv_fun_start = Obj.magic b in
        let lb : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 13531 "parser_cocci_menhir.ml"
        ) = Obj.magic lb in
        let rp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 13536 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let arglist : 'tv_arg_list_decl_ = Obj.magic arglist in
        let lp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 13542 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let i : 'tv_fn_ident = Obj.magic i in
        let f : 'tv_fninfo = Obj.magic f in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_rb_ in
        let _v : 'tv_fundecl = 
# 1269 "parser_cocci_menhir.mly"
      ( let (args,vararg) = arglist in
        Ast0.wrap(Ast0.FunDecl((Ast0.default_info(),Ast0.context_befaft()),
			       f, i,
			       P.clt2mcode "(" (lp), args, vararg,
			       P.clt2mcode ")" rp,
			       P.clt2mcode "{" lb, b,
			       P.clt2mcode "}" rb,
			       (Ast0.default_info(),Ast0.context_befaft()))) )
# 13558 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pt;
          MenhirLib.EngineTypes.startp = _startpos_pt_;
          MenhirLib.EngineTypes.endp = _endpos_pt_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = rp;
            MenhirLib.EngineTypes.startp = _startpos_rp_;
            MenhirLib.EngineTypes.endp = _endpos_rp_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = arglist;
              MenhirLib.EngineTypes.startp = _startpos_arglist_;
              MenhirLib.EngineTypes.endp = _endpos_arglist_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = lp;
                MenhirLib.EngineTypes.startp = _startpos_lp_;
                MenhirLib.EngineTypes.endp = _endpos_lp_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = id;
                  MenhirLib.EngineTypes.startp = _startpos_id_;
                  MenhirLib.EngineTypes.endp = _endpos_id_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = t;
                    MenhirLib.EngineTypes.startp = _startpos_t_;
                    MenhirLib.EngineTypes.endp = _endpos_t_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pt : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 13604 "parser_cocci_menhir.ml"
        ) = Obj.magic pt in
        let rp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 13609 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let arglist : 'tv_arg_list_name_opt_decl_ = Obj.magic arglist in
        let lp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 13615 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let id : 'tv_fn_ident = Obj.magic id in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_pt_ in
        let _v : 'tv_funproto = let i =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 13625 "parser_cocci_menhir.ml"
          
        in
        let s =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 13632 "parser_cocci_menhir.ml"
          
        in
        
# 1241 "parser_cocci_menhir.mly"
      ( let s = match s with None -> [] | Some s -> [Ast0.FStorage s] in
        let i =
	  match i with
	    None -> []
	  | Some i -> [Ast0.FInline (P.clt2mcode "inline" i)] in
	let t = [Ast0.FType t] in
        let (args,vararg) = arglist in
	Ast0.wrap
	  (Ast0.FunProto
	     (s @ i @ t, id,
	      P.clt2mcode "(" lp, args, vararg, P.clt2mcode ")" rp,
	      P.clt2mcode ";" pt)) )
# 13649 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pt;
          MenhirLib.EngineTypes.startp = _startpos_pt_;
          MenhirLib.EngineTypes.endp = _endpos_pt_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = rp;
            MenhirLib.EngineTypes.startp = _startpos_rp_;
            MenhirLib.EngineTypes.endp = _endpos_rp_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = arglist;
              MenhirLib.EngineTypes.startp = _startpos_arglist_;
              MenhirLib.EngineTypes.endp = _endpos_arglist_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = lp;
                MenhirLib.EngineTypes.startp = _startpos_lp_;
                MenhirLib.EngineTypes.endp = _endpos_lp_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = id;
                  MenhirLib.EngineTypes.startp = _startpos_id_;
                  MenhirLib.EngineTypes.endp = _endpos_id_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = t;
                    MenhirLib.EngineTypes.startp = _startpos_t_;
                    MenhirLib.EngineTypes.endp = _endpos_t_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = x0;
                      MenhirLib.EngineTypes.startp = _startpos_x0_;
                      MenhirLib.EngineTypes.endp = _endpos_x0_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pt : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 13700 "parser_cocci_menhir.ml"
        ) = Obj.magic pt in
        let rp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 13705 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let arglist : 'tv_arg_list_name_opt_decl_ = Obj.magic arglist in
        let lp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 13711 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let id : 'tv_fn_ident = Obj.magic id in
        let t : 'tv_ctype = Obj.magic t in
        let x0 : (
# 209 "parser_cocci_menhir.mly"
      (Data.clt)
# 13718 "parser_cocci_menhir.ml"
        ) = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pt_ in
        let _v : 'tv_funproto = let i =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 13727 "parser_cocci_menhir.ml"
          
        in
        let s =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 13734 "parser_cocci_menhir.ml"
          
        in
        
# 1241 "parser_cocci_menhir.mly"
      ( let s = match s with None -> [] | Some s -> [Ast0.FStorage s] in
        let i =
	  match i with
	    None -> []
	  | Some i -> [Ast0.FInline (P.clt2mcode "inline" i)] in
	let t = [Ast0.FType t] in
        let (args,vararg) = arglist in
	Ast0.wrap
	  (Ast0.FunProto
	     (s @ i @ t, id,
	      P.clt2mcode "(" lp, args, vararg, P.clt2mcode ")" rp,
	      P.clt2mcode ";" pt)) )
# 13751 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pt;
          MenhirLib.EngineTypes.startp = _startpos_pt_;
          MenhirLib.EngineTypes.endp = _endpos_pt_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = rp;
            MenhirLib.EngineTypes.startp = _startpos_rp_;
            MenhirLib.EngineTypes.endp = _endpos_rp_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = arglist;
              MenhirLib.EngineTypes.startp = _startpos_arglist_;
              MenhirLib.EngineTypes.endp = _endpos_arglist_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = lp;
                MenhirLib.EngineTypes.startp = _startpos_lp_;
                MenhirLib.EngineTypes.endp = _endpos_lp_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = id;
                  MenhirLib.EngineTypes.startp = _startpos_id_;
                  MenhirLib.EngineTypes.endp = _endpos_id_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = t;
                    MenhirLib.EngineTypes.startp = _startpos_t_;
                    MenhirLib.EngineTypes.endp = _endpos_t_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = x0;
                      MenhirLib.EngineTypes.startp = _startpos_x0_;
                      MenhirLib.EngineTypes.endp = _endpos_x0_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pt : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 13802 "parser_cocci_menhir.ml"
        ) = Obj.magic pt in
        let rp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 13807 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let arglist : 'tv_arg_list_name_opt_decl_ = Obj.magic arglist in
        let lp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 13813 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let id : 'tv_fn_ident = Obj.magic id in
        let t : 'tv_ctype = Obj.magic t in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pt_ in
        let _v : 'tv_funproto = let i =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 13824 "parser_cocci_menhir.ml"
          
        in
        let s =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 13832 "parser_cocci_menhir.ml"
          
        in
        
# 1241 "parser_cocci_menhir.mly"
      ( let s = match s with None -> [] | Some s -> [Ast0.FStorage s] in
        let i =
	  match i with
	    None -> []
	  | Some i -> [Ast0.FInline (P.clt2mcode "inline" i)] in
	let t = [Ast0.FType t] in
        let (args,vararg) = arglist in
	Ast0.wrap
	  (Ast0.FunProto
	     (s @ i @ t, id,
	      P.clt2mcode "(" lp, args, vararg, P.clt2mcode ")" rp,
	      P.clt2mcode ";" pt)) )
# 13849 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pt;
          MenhirLib.EngineTypes.startp = _startpos_pt_;
          MenhirLib.EngineTypes.endp = _endpos_pt_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = rp;
            MenhirLib.EngineTypes.startp = _startpos_rp_;
            MenhirLib.EngineTypes.endp = _endpos_rp_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = arglist;
              MenhirLib.EngineTypes.startp = _startpos_arglist_;
              MenhirLib.EngineTypes.endp = _endpos_arglist_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = lp;
                MenhirLib.EngineTypes.startp = _startpos_lp_;
                MenhirLib.EngineTypes.endp = _endpos_lp_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = id;
                  MenhirLib.EngineTypes.startp = _startpos_id_;
                  MenhirLib.EngineTypes.endp = _endpos_id_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = t;
                    MenhirLib.EngineTypes.startp = _startpos_t_;
                    MenhirLib.EngineTypes.endp = _endpos_t_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = x1;
                      MenhirLib.EngineTypes.startp = _startpos_x1_;
                      MenhirLib.EngineTypes.endp = _endpos_x1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = x0;
                        MenhirLib.EngineTypes.startp = _startpos_x0_;
                        MenhirLib.EngineTypes.endp = _endpos_x0_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pt : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 13905 "parser_cocci_menhir.ml"
        ) = Obj.magic pt in
        let rp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 13910 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let arglist : 'tv_arg_list_name_opt_decl_ = Obj.magic arglist in
        let lp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 13916 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let id : 'tv_fn_ident = Obj.magic id in
        let t : 'tv_ctype = Obj.magic t in
        let x1 : (
# 209 "parser_cocci_menhir.mly"
      (Data.clt)
# 13923 "parser_cocci_menhir.ml"
        ) = Obj.magic x1 in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pt_ in
        let _v : 'tv_funproto = let i =
          let x = x1 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 13933 "parser_cocci_menhir.ml"
          
        in
        let s =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 13941 "parser_cocci_menhir.ml"
          
        in
        
# 1241 "parser_cocci_menhir.mly"
      ( let s = match s with None -> [] | Some s -> [Ast0.FStorage s] in
        let i =
	  match i with
	    None -> []
	  | Some i -> [Ast0.FInline (P.clt2mcode "inline" i)] in
	let t = [Ast0.FType t] in
        let (args,vararg) = arglist in
	Ast0.wrap
	  (Ast0.FunProto
	     (s @ i @ t, id,
	      P.clt2mcode "(" lp, args, vararg, P.clt2mcode ")" rp,
	      P.clt2mcode ";" pt)) )
# 13958 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pt;
          MenhirLib.EngineTypes.startp = _startpos_pt_;
          MenhirLib.EngineTypes.endp = _endpos_pt_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = rp;
            MenhirLib.EngineTypes.startp = _startpos_rp_;
            MenhirLib.EngineTypes.endp = _endpos_rp_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = arglist;
              MenhirLib.EngineTypes.startp = _startpos_arglist_;
              MenhirLib.EngineTypes.endp = _endpos_arglist_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = lp;
                MenhirLib.EngineTypes.startp = _startpos_lp_;
                MenhirLib.EngineTypes.endp = _endpos_lp_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = id;
                  MenhirLib.EngineTypes.startp = _startpos_id_;
                  MenhirLib.EngineTypes.endp = _endpos_id_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = t;
                    MenhirLib.EngineTypes.startp = _startpos_t_;
                    MenhirLib.EngineTypes.endp = _endpos_t_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = s;
                      MenhirLib.EngineTypes.startp = _startpos_s_;
                      MenhirLib.EngineTypes.endp = _endpos_s_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = i;
                        MenhirLib.EngineTypes.startp = _startpos_i_;
                        MenhirLib.EngineTypes.endp = _endpos_i_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pt : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 14014 "parser_cocci_menhir.ml"
        ) = Obj.magic pt in
        let rp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 14019 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let arglist : 'tv_arg_list_name_opt_decl_ = Obj.magic arglist in
        let lp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 14025 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let id : 'tv_fn_ident = Obj.magic id in
        let t : 'tv_ctype = Obj.magic t in
        let s : 'tv_storage = Obj.magic s in
        let i : (
# 209 "parser_cocci_menhir.mly"
      (Data.clt)
# 14033 "parser_cocci_menhir.ml"
        ) = Obj.magic i in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_pt_ in
        let _v : 'tv_funproto = 
# 1255 "parser_cocci_menhir.mly"
      ( let s = [Ast0.FStorage s] in
        let i = [Ast0.FInline (P.clt2mcode "inline" i)] in
	let t = [Ast0.FType t] in
        let (args,vararg) = arglist in
	Ast0.wrap
	  (Ast0.FunProto
	     (s @ i @ t, id,
	      P.clt2mcode "(" lp, args, vararg, P.clt2mcode ")" rp,
	      P.clt2mcode ";" pt)) )
# 14048 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_pure_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_ident = 
# 2294 "parser_cocci_menhir.mly"
         ( Ast0.wrap(Ast0.Id(P.id2mcode _1)) )
# 14072 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_wrapped_sym_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_ident = 
# 2295 "parser_cocci_menhir.mly"
                         ( _1 )
# 14096 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 219 "parser_cocci_menhir.mly"
       (Parse_aux.midinfo)
# 14117 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_ident = 
# 2297 "parser_cocci_menhir.mly"
         ( let (nm,constraints,seed,pure,clt) = _1 in
         Ast0.wrap(Ast0.MetaId(P.clt2mcode nm clt,constraints,seed,pure)) )
# 14125 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let i : 'tv_pure_ident = Obj.magic i in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_ident_or_const = 
# 2247 "parser_cocci_menhir.mly"
                    ( Ast0.wrap(Ast0.Ident(Ast0.wrap(Ast0.Id(P.id2mcode i)))) )
# 14149 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_wrapped_sym_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_ident_or_const = 
# 2248 "parser_cocci_menhir.mly"
                         ( Ast0.wrap(Ast0.Ident(_1)) )
# 14173 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 14194 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_ident_or_const = 
# 2250 "parser_cocci_menhir.mly"
  ( let (x,clt) = _1 in
	 Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Int x) clt)) )
# 14202 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_pure_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_ident_or_kwd = 
# 2301 "parser_cocci_menhir.mly"
         ( Ast0.wrap(Ast0.Id(P.id2mcode _1)) )
# 14226 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_wrapped_sym_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_ident_or_kwd = 
# 2302 "parser_cocci_menhir.mly"
                         ( _1 )
# 14250 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 224 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 14271 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_ident_or_kwd = 
# 2303 "parser_cocci_menhir.mly"
             ( tmeta_to_ident _1 )
# 14278 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 219 "parser_cocci_menhir.mly"
       (Parse_aux.midinfo)
# 14299 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_ident_or_kwd = 
# 2305 "parser_cocci_menhir.mly"
         ( let (nm,constraints,seed,pure,clt) = _1 in
         Ast0.wrap(Ast0.MetaId(P.clt2mcode nm clt,constraints,seed,pure)) )
# 14307 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 209 "parser_cocci_menhir.mly"
      (Data.clt)
# 14328 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_ident_or_kwd = 
# 2307 "parser_cocci_menhir.mly"
               ( Ast0.wrap(Ast0.Id(P.clt2mcode "inline" _1)) )
# 14335 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 242 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 14356 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_incl = 
# 434 "parser_cocci_menhir.mly"
                      ( let (x,_) = _1 in Data.Include(x) )
# 14363 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 14388 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_incl = 
# 435 "parser_cocci_menhir.mly"
                      ( Data.Iso(Common.Left(P.id2name _2)) )
# 14395 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 241 "parser_cocci_menhir.mly"
       (string)
# 14420 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_incl = 
# 436 "parser_cocci_menhir.mly"
                      ( Data.Iso(Common.Right _2) )
# 14427 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_comma_list_pure_ident_ = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_incl = 
# 438 "parser_cocci_menhir.mly"
    ( let names = List.map P.id2name _2 in
      Iteration.parsed_virtual_rules :=
	Common.union_set names !Iteration.parsed_virtual_rules;
      (* ensure that the names of virtual and real rules don't overlap *)
      List.iter
      (function name -> Hashtbl.add Data.all_metadecls name [])
      names;
      Data.Virt(names) )
# 14462 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _1 : 'tv_list_incl_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 320 "parser_cocci_menhir.mly"
      (Data.incl_iso list)
# 14490 "parser_cocci_menhir.ml"
        ) = 
# 430 "parser_cocci_menhir.mly"
                       ( _1 )
# 14494 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _1 : 'tv_list_incl_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 320 "parser_cocci_menhir.mly"
      (Data.incl_iso list)
# 14522 "parser_cocci_menhir.ml"
        ) = 
# 431 "parser_cocci_menhir.mly"
                       ( _1 )
# 14526 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 242 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 14547 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_includes = 
# 1065 "parser_cocci_menhir.mly"
    ( Ast0.wrap
	(Ast0.Include(P.clt2mcode "#include"
			(P.drop_pos (P.drop_aft (P.id2clt _1))),
		      let (arity,ln,lln,llne,offset,col,strbef,straft,pos,_) =
			P.id2clt _1 in
		      let clt = (* default to one space whitespace *)
			(arity,ln,lln,llne,offset,0,strbef,straft,pos," ") in
		      P.clt2mcode
			(Ast.Local (Parse_aux.str2inc (P.id2name _1)))
			(P.drop_bef clt))) )
# 14563 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 242 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 14584 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_includes = 
# 1076 "parser_cocci_menhir.mly"
    ( Ast0.wrap
	(Ast0.Include(P.clt2mcode "#include"
			(P.drop_pos (P.drop_aft (P.id2clt _1))),
		      let (arity,ln,lln,llne,offset,col,strbef,straft,pos,_) =
			P.id2clt _1 in
		      let clt = (* default to one space whitespace *)
			(arity,ln,lln,llne,offset,0,strbef,straft,pos," ") in
		      P.clt2mcode
			(Ast.NonLocal (Parse_aux.str2inc (P.id2name _1)))
			(P.drop_bef clt))) )
# 14600 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _1 : (
# 243 "parser_cocci_menhir.mly"
       (Data.clt * token)
# 14625 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_includes = 
# 1087 "parser_cocci_menhir.mly"
    ( let (clt,ident) = _1 in
      let aft = P.get_aft clt in (* move stuff after the define to the ident *)
      Ast0.wrap
      (Ast0.Undef
	 (P.clt2mcode "#undef" (P.drop_aft clt),
	  (match ident with
	    TMetaId((nm,constraints,seed,pure,clt)) ->
	      let clt = P.set_aft aft clt in
	      Ast0.wrap(Ast0.MetaId(P.clt2mcode nm clt,constraints,seed,pure))
	  | TIdent((nm,clt)) ->
	      let clt = P.set_aft aft clt in
	      Ast0.wrap(Ast0.Id(P.clt2mcode nm clt))
	  | TSymId(nm,clt) ->
	      let clt = P.set_aft aft clt in
	      Ast0.wrap(Ast0.Id(P.clt2mcode nm clt))
	  | _ ->
	      raise
		(Semantic_cocci.Semantic
		   "unexpected name for a #define")))) )
# 14650 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let d : 'tv_defineop = Obj.magic d in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_includes = 
# 1107 "parser_cocci_menhir.mly"
    ( d (Ast0.wrap(Ast0.DOTS([]))) )
# 14678 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = d;
              MenhirLib.EngineTypes.startp = _startpos_d_;
              MenhirLib.EngineTypes.endp = _endpos_d_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let t : 'tv_ctype = Obj.magic t in
        let d : 'tv_defineop = Obj.magic d in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_includes = 
# 1109 "parser_cocci_menhir.mly"
    ( let ty = Ast0.wrap(Ast0.TopExp(Ast0.wrap(Ast0.TypeExp(t)))) in
      d (Ast0.wrap(Ast0.DOTS([ty]))) )
# 14713 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = b;
            MenhirLib.EngineTypes.startp = _startpos_b_;
            MenhirLib.EngineTypes.endp = _endpos_b_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let b : 'tv_toplevel_seq_start_toplevel_after_dots_ = Obj.magic b in
        let _1 : 'tv_defineop = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_includes = 
# 1112 "parser_cocci_menhir.mly"
    ( let body =
	match b with
	  [e] ->
	    (match Ast0.unwrap e with
	      Ast0.Exp(e1) ->
		[Ast0.rewrap e (Ast0.TopExp(Ast0.set_arg_exp (e1)))]
	    | _ -> b)
	| _ -> b in
      _1 (Ast0.wrap(Ast0.DOTS(body))) )
# 14755 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_pragmabody = Obj.magic _3 in
        let _2 : 'tv_ident_or_kwd = Obj.magic _2 in
        let _1 : (
# 244 "parser_cocci_menhir.mly"
       (Data.clt)
# 14792 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_includes = 
# 1122 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Pragma(P.clt2mcode "#pragma" _1, _2, _3)) )
# 14799 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_eexpr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_initialize = 
# 1606 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.InitExpr(_1)) )
# 14823 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 14854 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_initialize_list = Obj.magic _2 in
        let _1 : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 14860 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_initialize = 
# 1608 "parser_cocci_menhir.mly"
    ( if P.struct_initializer _2
    then
      let il = P.drop_dot_commas _2 in
      Ast0.wrap(Ast0.InitList(P.clt2mcode "{" _1,il,P.clt2mcode "}" _3,false))
    else
      Ast0.wrap(Ast0.InitList(P.clt2mcode "{" _1,_2,P.clt2mcode "}" _3,true)) )
# 14872 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 224 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 14893 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_initialize = 
# 1615 "parser_cocci_menhir.mly"
      (let (nm,pure,clt) = _1 in
      Ast0.wrap(Ast0.MetaInit(P.clt2mcode nm clt,pure)) )
# 14901 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_arith_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_initialize2 = 
# 1621 "parser_cocci_menhir.mly"
                            ( Ast0.wrap(Ast0.InitExpr(_1)) )
# 14925 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_nest_expressions_only = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_initialize2 = 
# 1622 "parser_cocci_menhir.mly"
                            ( Ast0.wrap(Ast0.InitExpr(_1)) )
# 14949 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 14980 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_initialize_list = Obj.magic _2 in
        let _1 : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 14986 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_initialize2 = 
# 1624 "parser_cocci_menhir.mly"
    ( if P.struct_initializer _2
    then
      let il = P.drop_dot_commas _2 in
      Ast0.wrap(Ast0.InitList(P.clt2mcode "{" _1,il,P.clt2mcode "}" _3,false))
    else
      Ast0.wrap(Ast0.InitList(P.clt2mcode "{" _1,_2,P.clt2mcode "}" _3,true)) )
# 14998 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_initialize2 = Obj.magic _3 in
        let _2 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 15030 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_list_designator_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_initialize2 = 
# 1632 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.InitGccExt(_1,P.clt2mcode "=" _2,_3)) )
# 15038 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_initialize2 = Obj.magic _3 in
        let _2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 15070 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_mident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_initialize2 = 
# 1634 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.InitGccName(_1,P.clt2mcode ":" _2,_3)) )
# 15078 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 224 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 15099 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_initialize2 = 
# 1636 "parser_cocci_menhir.mly"
      (let (nm,pure,clt) = _1 in
      Ast0.wrap(Ast0.MetaInit(P.clt2mcode nm clt,pure)) )
# 15107 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 225 "parser_cocci_menhir.mly"
       (Parse_aux.list_info)
# 15128 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_initialize2 = 
# 1639 "parser_cocci_menhir.mly"
      (let (nm,lenname,pure,clt) = _1 in
      let nm = P.clt2mcode nm clt in
      let lenname =
	match lenname with
	  Ast.AnyLen -> Ast0.AnyListLen
	| Ast.MetaLen nm -> Ast0.MetaListLen(P.clt2mcode nm clt)
	| Ast.CstLen n -> Ast0.CstListLen n in
      Ast0.wrap(Ast0.MetaInitList(nm,lenname,pure)) )
# 15142 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_empty_list_start_initialize2_edots_when_TEllipsis_initialize__ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_initialize_list = 
# 1659 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.DOTS(_1 P.mkidots (fun c -> Ast0.IComma c))) )
# 15166 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_invalid = 
# 1744 "parser_cocci_menhir.mly"
           ( raise (Semantic_cocci.Semantic "not matchable") )
# 15188 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_is_expression = 
# 425 "parser_cocci_menhir.mly"
              ( Ast.AnyP )
# 15205 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_is_expression = 
# 426 "parser_cocci_menhir.mly"
              ( Ast.ExpP )
# 15227 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_is_expression = 
# 427 "parser_cocci_menhir.mly"
              ( Ast.TyP )
# 15249 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : 'tv_iso_ctype_ = 
# 2770 "parser_cocci_menhir.mly"
                ( Common.Left t )
# 15277 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : 'tv_iso_ctype_ = 
# 2771 "parser_cocci_menhir.mly"
                     ( Common.Right t )
# 15305 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let t : 'tv_decl_var = Obj.magic t in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : 'tv_iso_decl_var_ = 
# 2770 "parser_cocci_menhir.mly"
                ( Common.Left t )
# 15333 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let t : 'tv_decl_var = Obj.magic t in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : 'tv_iso_decl_var_ = 
# 2771 "parser_cocci_menhir.mly"
                     ( Common.Right t )
# 15361 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let t : 'tv_eexpr = Obj.magic t in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : 'tv_iso_eexpr_ = 
# 2770 "parser_cocci_menhir.mly"
                ( Common.Left t )
# 15389 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let t : 'tv_eexpr = Obj.magic t in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : 'tv_iso_eexpr_ = 
# 2771 "parser_cocci_menhir.mly"
                     ( Common.Right t )
# 15417 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let t : 'tv_iso_statement = Obj.magic t in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : 'tv_iso_iso_statement_ = 
# 2770 "parser_cocci_menhir.mly"
                ( Common.Left t )
# 15445 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let t : 'tv_iso_statement = Obj.magic t in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : 'tv_iso_iso_statement_ = 
# 2771 "parser_cocci_menhir.mly"
                     ( Common.Right t )
# 15473 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let t : 'tv_nest_start = Obj.magic t in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : 'tv_iso_nest_start_ = 
# 2770 "parser_cocci_menhir.mly"
                ( Common.Left t )
# 15501 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let t : 'tv_nest_start = Obj.magic t in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_t_ in
        let _v : 'tv_iso_nest_start_ = 
# 2771 "parser_cocci_menhir.mly"
                     ( Common.Right t )
# 15529 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = el;
            MenhirLib.EngineTypes.startp = _startpos_el_;
            MenhirLib.EngineTypes.endp = _endpos_el_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let el : 'tv_list_iso_eexpr__ = Obj.magic el in
        let e1 : 'tv_eexpr = Obj.magic e1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (
# 337 "parser_cocci_menhir.mly"
      (Ast0_cocci.anything list list)
# 15567 "parser_cocci_menhir.ml"
        ) = 
# 2738 "parser_cocci_menhir.mly"
    ( let fn x = Ast0.ExprTag x in P.iso_adjust fn fn e1 el )
# 15571 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = el;
            MenhirLib.EngineTypes.startp = _startpos_el_;
            MenhirLib.EngineTypes.endp = _endpos_el_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let el : 'tv_list_iso_eexpr__ = Obj.magic el in
        let e1 : 'tv_eexpr = Obj.magic e1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (
# 337 "parser_cocci_menhir.mly"
      (Ast0_cocci.anything list list)
# 15609 "parser_cocci_menhir.ml"
        ) = 
# 2740 "parser_cocci_menhir.mly"
    ( let fn x = Ast0.ArgExprTag x in P.iso_adjust fn fn e1 el )
# 15613 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = el;
            MenhirLib.EngineTypes.startp = _startpos_el_;
            MenhirLib.EngineTypes.endp = _endpos_el_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let el : 'tv_list_iso_eexpr__ = Obj.magic el in
        let e1 : 'tv_eexpr = Obj.magic e1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (
# 337 "parser_cocci_menhir.mly"
      (Ast0_cocci.anything list list)
# 15651 "parser_cocci_menhir.ml"
        ) = 
# 2742 "parser_cocci_menhir.mly"
    ( let fn x = Ast0.TestExprTag x in P.iso_adjust fn fn e1 el )
# 15655 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = el;
            MenhirLib.EngineTypes.startp = _startpos_el_;
            MenhirLib.EngineTypes.endp = _endpos_el_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let el : 'tv_list_iso_eexpr__ = Obj.magic el in
        let e1 : 'tv_eexpr = Obj.magic e1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (
# 337 "parser_cocci_menhir.mly"
      (Ast0_cocci.anything list list)
# 15693 "parser_cocci_menhir.ml"
        ) = 
# 2744 "parser_cocci_menhir.mly"
    ( let ffn x = Ast0.ExprTag x in
      let fn x =  Ast0.TestExprTag x in
      P.iso_adjust ffn fn e1 el )
# 15699 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = sl;
            MenhirLib.EngineTypes.startp = _startpos_sl_;
            MenhirLib.EngineTypes.endp = _endpos_sl_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = s1;
              MenhirLib.EngineTypes.startp = _startpos_s1_;
              MenhirLib.EngineTypes.endp = _endpos_s1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let sl : 'tv_list_iso_iso_statement__ = Obj.magic sl in
        let s1 : 'tv_iso_statement = Obj.magic s1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (
# 337 "parser_cocci_menhir.mly"
      (Ast0_cocci.anything list list)
# 15737 "parser_cocci_menhir.ml"
        ) = 
# 2748 "parser_cocci_menhir.mly"
    ( let fn x = Ast0.StmtTag x in P.iso_adjust fn fn s1 sl )
# 15741 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = tl;
            MenhirLib.EngineTypes.startp = _startpos_tl_;
            MenhirLib.EngineTypes.endp = _endpos_tl_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = t1;
              MenhirLib.EngineTypes.startp = _startpos_t1_;
              MenhirLib.EngineTypes.endp = _endpos_t1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let tl : 'tv_list_iso_ctype__ = Obj.magic tl in
        let t1 : 'tv_ctype = Obj.magic t1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (
# 337 "parser_cocci_menhir.mly"
      (Ast0_cocci.anything list list)
# 15779 "parser_cocci_menhir.ml"
        ) = 
# 2750 "parser_cocci_menhir.mly"
    ( let fn x = Ast0.TypeCTag x in P.iso_adjust fn fn t1 tl )
# 15783 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = el;
            MenhirLib.EngineTypes.startp = _startpos_el_;
            MenhirLib.EngineTypes.endp = _endpos_el_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let el : 'tv_list_iso_nest_start__ = Obj.magic el in
        let e1 : 'tv_nest_start = Obj.magic e1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (
# 337 "parser_cocci_menhir.mly"
      (Ast0_cocci.anything list list)
# 15821 "parser_cocci_menhir.ml"
        ) = 
# 2752 "parser_cocci_menhir.mly"
    ( let fn x = Ast0.DotsStmtTag x in P.iso_adjust fn fn e1 el )
# 15825 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = dl;
            MenhirLib.EngineTypes.startp = _startpos_dl_;
            MenhirLib.EngineTypes.endp = _endpos_dl_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = d1;
              MenhirLib.EngineTypes.startp = _startpos_d1_;
              MenhirLib.EngineTypes.endp = _endpos_d1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let dl : 'tv_list_iso_decl_var__ = Obj.magic dl in
        let d1 : 'tv_decl_var = Obj.magic d1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (
# 337 "parser_cocci_menhir.mly"
      (Ast0_cocci.anything list list)
# 15863 "parser_cocci_menhir.ml"
        ) = 
# 2754 "parser_cocci_menhir.mly"
    ( let check_one = function
	[x] -> x
      | _ ->
	  raise
	    (Semantic_cocci.Semantic
	       "only one variable per declaration in an isomorphism rule") in
    let d1 = check_one d1 in
    let dl =
      List.map
	(function
	    Common.Left x -> Common.Left(check_one x)
	  | Common.Right x -> Common.Right(check_one x))
	dl in
    let fn x = Ast0.DeclTag x in P.iso_adjust fn fn d1 dl )
# 15880 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let m : 'tv_metadec = Obj.magic m in
        let _startpos = _startpos_m_ in
        let _endpos = _endpos_m_ in
        let _v : (
# 340 "parser_cocci_menhir.mly"
      ((Ast_cocci.metavar,Ast_cocci.metavar) Common.either list)
# 15904 "parser_cocci_menhir.ml"
        ) = 
# 360 "parser_cocci_menhir.mly"
                         ( m "" )
# 15908 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = nm;
            MenhirLib.EngineTypes.startp = _startpos_nm_;
            MenhirLib.EngineTypes.endp = _endpos_nm_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let nm : 'tv_pure_ident = Obj.magic nm in
        let _startpos = _startpos_nm_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 323 "parser_cocci_menhir.mly"
      (Ast_cocci.rulename)
# 15936 "parser_cocci_menhir.ml"
        ) = 
# 375 "parser_cocci_menhir.mly"
                      ( P.make_iso_rule_name_result (P.id2name nm) )
# 15940 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_statement = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_iso_statement = 
# 1449 "parser_cocci_menhir.mly"
                                      ( _1 )
# 15964 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_decl_var = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_iso_statement = 
# 1451 "parser_cocci_menhir.mly"
      ( match _1 with
	[decl] ->
	  Ast0.wrap
	    (Ast0.Decl((Ast0.default_info(),Ast0.context_befaft()),decl))
      |	_ -> failwith "exactly one decl allowed in statement iso" )
# 15992 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 216 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 16013 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_iter_ident = 
# 2337 "parser_cocci_menhir.mly"
         ( Ast0.wrap(Ast0.Id(P.id2mcode _1)) )
# 16020 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 221 "parser_cocci_menhir.mly"
       (Parse_aux.idinfo)
# 16041 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_iter_ident = 
# 2339 "parser_cocci_menhir.mly"
         ( let (nm,constraints,pure,clt) = _1 in
         Ast0.wrap(Ast0.MetaId(P.clt2mcode nm clt,constraints,Ast.NoVal,pure)) )
# 16049 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_TMul_ = 
# 114 "/usr/share/menhir/standard.mly"
    ( [] )
# 16066 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_TMul_ = Obj.magic xs in
        let x : (
# 263 "parser_cocci_menhir.mly"
       (Data.clt)
# 16093 "parser_cocci_menhir.ml"
        ) = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_TMul_ = 
# 116 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 16100 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_array_dec_ = 
# 114 "/usr/share/menhir/standard.mly"
    ( [] )
# 16117 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_array_dec_ = Obj.magic xs in
        let x : 'tv_array_dec = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_array_dec_ = 
# 116 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 16147 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_case_line_ = 
# 114 "/usr/share/menhir/standard.mly"
    ( [] )
# 16164 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_case_line_ = Obj.magic xs in
        let x : 'tv_case_line = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_case_line_ = 
# 116 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 16194 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_decl_var_ = 
# 114 "/usr/share/menhir/standard.mly"
    ( [] )
# 16211 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_decl_var_ = Obj.magic xs in
        let x : 'tv_decl_var = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_decl_var_ = 
# 116 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 16241 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_designator_ = 
# 114 "/usr/share/menhir/standard.mly"
    ( [] )
# 16258 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_designator_ = Obj.magic xs in
        let x : 'tv_designator = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_designator_ = 
# 116 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 16288 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_incl_ = 
# 114 "/usr/share/menhir/standard.mly"
    ( [] )
# 16305 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_incl_ = Obj.magic xs in
        let x : 'tv_incl = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_incl_ = 
# 116 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 16335 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_iso_ctype__ = 
# 114 "/usr/share/menhir/standard.mly"
    ( [] )
# 16352 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_iso_ctype__ = Obj.magic xs in
        let x : 'tv_iso_ctype_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_iso_ctype__ = 
# 116 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 16382 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_iso_decl_var__ = 
# 114 "/usr/share/menhir/standard.mly"
    ( [] )
# 16399 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_iso_decl_var__ = Obj.magic xs in
        let x : 'tv_iso_decl_var_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_iso_decl_var__ = 
# 116 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 16429 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_iso_eexpr__ = 
# 114 "/usr/share/menhir/standard.mly"
    ( [] )
# 16446 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_iso_eexpr__ = Obj.magic xs in
        let x : 'tv_iso_eexpr_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_iso_eexpr__ = 
# 116 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 16476 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_iso_iso_statement__ = 
# 114 "/usr/share/menhir/standard.mly"
    ( [] )
# 16493 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_iso_iso_statement__ = Obj.magic xs in
        let x : 'tv_iso_iso_statement_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_iso_iso_statement__ = 
# 116 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 16523 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_iso_nest_start__ = 
# 114 "/usr/share/menhir/standard.mly"
    ( [] )
# 16540 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_iso_nest_start__ = Obj.magic xs in
        let x : 'tv_iso_nest_start_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_iso_nest_start__ = 
# 116 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 16570 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_mul_ = 
# 114 "/usr/share/menhir/standard.mly"
    ( [] )
# 16587 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_mul_ = Obj.magic xs in
        let x : 'tv_mul = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_mul_ = 
# 116 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 16617 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_mzl_ctype__ = 
# 114 "/usr/share/menhir/standard.mly"
    ( [] )
# 16634 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_mzl_ctype__ = Obj.magic xs in
        let x : 'tv_mzl_ctype_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_mzl_ctype__ = 
# 116 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 16664 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_mzl_disj_ident__ = 
# 114 "/usr/share/menhir/standard.mly"
    ( [] )
# 16681 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_mzl_disj_ident__ = Obj.magic xs in
        let x : 'tv_mzl_disj_ident_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_mzl_disj_ident__ = 
# 116 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 16711 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_mzl_eexpr__ = 
# 114 "/usr/share/menhir/standard.mly"
    ( [] )
# 16728 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_mzl_eexpr__ = Obj.magic xs in
        let x : 'tv_mzl_eexpr_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_mzl_eexpr__ = 
# 116 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 16758 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_mzl_fun_after_dots_or__ = 
# 114 "/usr/share/menhir/standard.mly"
    ( [] )
# 16775 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_mzl_fun_after_dots_or__ = Obj.magic xs in
        let x : 'tv_mzl_fun_after_dots_or_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_mzl_fun_after_dots_or__ = 
# 116 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 16805 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_mzl_fun_start__ = 
# 114 "/usr/share/menhir/standard.mly"
    ( [] )
# 16822 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_mzl_fun_start__ = Obj.magic xs in
        let x : 'tv_mzl_fun_start_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_mzl_fun_start__ = 
# 116 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 16852 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_mzl_mctype__ = 
# 114 "/usr/share/menhir/standard.mly"
    ( [] )
# 16869 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_mzl_mctype__ = Obj.magic xs in
        let x : 'tv_mzl_mctype_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_mzl_mctype__ = 
# 116 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 16899 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_mzl_rule_elem_statement__ = 
# 114 "/usr/share/menhir/standard.mly"
    ( [] )
# 16916 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_mzl_rule_elem_statement__ = Obj.magic xs in
        let x : 'tv_mzl_rule_elem_statement_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_mzl_rule_elem_statement__ = 
# 116 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 16946 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_mzl_statement__ = 
# 114 "/usr/share/menhir/standard.mly"
    ( [] )
# 16963 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_mzl_statement__ = Obj.magic xs in
        let x : 'tv_mzl_statement_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_mzl_statement__ = 
# 116 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 16993 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_mzl_struct_decl_one__ = 
# 114 "/usr/share/menhir/standard.mly"
    ( [] )
# 17010 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_mzl_struct_decl_one__ = Obj.magic xs in
        let x : 'tv_mzl_struct_decl_one_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_mzl_struct_decl_one__ = 
# 116 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 17040 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_pair_edots_when_TEllipsis_eexpr__dexpr__ = 
# 114 "/usr/share/menhir/standard.mly"
    ( [] )
# 17057 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = y0;
            MenhirLib.EngineTypes.startp = _startpos_y0_;
            MenhirLib.EngineTypes.endp = _endpos_y0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x0;
              MenhirLib.EngineTypes.startp = _startpos_x0_;
              MenhirLib.EngineTypes.endp = _endpos_x0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_list_pair_edots_when_TEllipsis_eexpr__dexpr__ = Obj.magic xs in
        let y0 : 'tv_dexpr = Obj.magic y0 in
        let x0 : 'tv_edots_when_TEllipsis_eexpr_ = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_pair_edots_when_TEllipsis_eexpr__dexpr__ = let x =
          let y = y0 in
          let x = x0 in
          
# 70 "/usr/share/menhir/standard.mly"
    ( (x, y) )
# 17096 "parser_cocci_menhir.ml"
          
        in
        
# 116 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 17102 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_list_whenppdecs_ = 
# 114 "/usr/share/menhir/standard.mly"
    ( [] )
# 17119 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_list_whenppdecs_ = Obj.magic xs in
        let x : 'tv_whenppdecs = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_list_whenppdecs_ = 
# 116 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 17149 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_pure_ident_or_meta_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_list_len = 
# 554 "parser_cocci_menhir.mly"
                           ( Common.Left _1 )
# 17173 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 17194 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_list_len = 
# 555 "parser_cocci_menhir.mly"
       ( let (x,clt) = _1 in Common.Right (int_of_string x) )
# 17201 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_pure_ident = Obj.magic _3 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_list_len = 
# 557 "parser_cocci_menhir.mly"
    ( let nm = ("virtual",P.id2name _3) in
    Iteration.parsed_virtual_identifiers :=
      Common.union_set [snd nm]
        !Iteration.parsed_virtual_identifiers;
    try
    Common.Right (int_of_string
		    (List.assoc (snd nm) !Flag.defined_virtual_env))
    with Not_found | Failure "int_of_string" ->
      begin
	Common.Left (Some "virtual",P.id2name _3)
      end
    )
# 17244 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_loption_choose_iso_ = 
# 57 "/usr/share/menhir/standard.mly"
    ( [] )
# 17261 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_choose_iso = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_loption_choose_iso_ = 
# 59 "/usr/share/menhir/standard.mly"
    ( x )
# 17285 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_loption_disable_ = 
# 57 "/usr/share/menhir/standard.mly"
    ( [] )
# 17302 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_disable = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_loption_disable_ = 
# 59 "/usr/share/menhir/standard.mly"
    ( x )
# 17326 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_loption_filespec_ = 
# 57 "/usr/share/menhir/standard.mly"
    ( [] )
# 17343 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_filespec = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_loption_filespec_ = 
# 59 "/usr/share/menhir/standard.mly"
    ( x )
# 17367 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_loption_minus_start_ = 
# 57 "/usr/share/menhir/standard.mly"
    ( [] )
# 17384 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_minus_start = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_loption_minus_start_ = 
# 59 "/usr/share/menhir/standard.mly"
    ( x )
# 17408 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_loption_not_pos_ = 
# 57 "/usr/share/menhir/standard.mly"
    ( [] )
# 17425 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_not_pos = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_loption_not_pos_ = 
# 59 "/usr/share/menhir/standard.mly"
    ( x )
# 17449 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_loption_plus_start_ = 
# 57 "/usr/share/menhir/standard.mly"
    ( [] )
# 17466 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_plus_start = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_loption_plus_start_ = 
# 59 "/usr/share/menhir/standard.mly"
    ( x )
# 17490 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 224 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 17511 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_mctype = 
# 912 "parser_cocci_menhir.mly"
        ( tmeta_to_type _1 )
# 17518 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_ctype = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_mctype = 
# 913 "parser_cocci_menhir.mly"
        (_1)
# 17542 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let t : 'tv_typedef_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_t_ in
        let _v : 'tv_meta_exp_type = 
# 778 "parser_cocci_menhir.mly"
    ( [Ast0_cocci.ast0_type_to_type t] )
# 17566 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let t : 'tv_typedef_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_meta_exp_type = 
# 780 "parser_cocci_menhir.mly"
    ( [Type_cocci.Array (Ast0_cocci.ast0_type_to_type t)] )
# 17598 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let t : 'tv_comma_list_ctype_ = Obj.magic t in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_meta_exp_type = 
# 782 "parser_cocci_menhir.mly"
    ( List.map
	(function x -> P.ty_pointerify (Ast0_cocci.ast0_type_to_type x) m)
	t )
# 17638 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_pure_ident = Obj.magic _3 in
        let _1 : (
# 202 "parser_cocci_menhir.mly"
      (string)
# 17669 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_meta_ident = 
# 2049 "parser_cocci_menhir.mly"
                                   ( (Some _1,P.id2name _3) )
# 17676 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_pure_ident_kwd = Obj.magic _3 in
        let _1 : (
# 202 "parser_cocci_menhir.mly"
      (string)
# 17707 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_meta_ident = 
# 2050 "parser_cocci_menhir.mly"
                                   ( (Some _1,_3) )
# 17714 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let m : 'tv_metadec = Obj.magic m in
        let _startpos = _startpos_m_ in
        let _endpos = _endpos_m_ in
        let _v : (
# 331 "parser_cocci_menhir.mly"
      ((Ast_cocci.metavar,Ast_cocci.metavar) Common.either list)
# 17738 "parser_cocci_menhir.ml"
        ) = 
# 359 "parser_cocci_menhir.mly"
                       ( m (!Ast0.rule_name) )
# 17742 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          
# 580 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta ->
      let tok = check_meta(Ast.MetaMetaDecl(arity,name)) in
      !Data.add_meta_meta name pure; tok) )
# 17789 "parser_cocci_menhir.ml"
          
        in
        
# 450 "parser_cocci_menhir.mly"
    ( P.create_metadec ar ispure kindfn ids )
# 17795 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          
# 584 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta ->
      let tok = check_meta(Ast.MetaParamDecl(arity,name)) in
      !Data.add_param_meta name pure; tok) )
# 17842 "parser_cocci_menhir.ml"
          
        in
        
# 450 "parser_cocci_menhir.mly"
    ( P.create_metadec ar ispure kindfn ids )
# 17848 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ispure;
                  MenhirLib.EngineTypes.startp = _startpos_ispure_;
                  MenhirLib.EngineTypes.endp = _endpos_ispure_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ar;
                    MenhirLib.EngineTypes.startp = _startpos_ar_;
                    MenhirLib.EngineTypes.endp = _endpos_ar_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_metadec = let kindfn =
          
# 588 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta ->
      let len = Ast.AnyLen in
      let tok = check_meta(Ast.MetaParamListDecl(arity,name,len)) in
      !Data.add_paramlist_meta name len pure; tok) )
# 17900 "parser_cocci_menhir.ml"
          
        in
        
# 450 "parser_cocci_menhir.mly"
    ( P.create_metadec ar ispure kindfn ids )
# 17906 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ispure;
                  MenhirLib.EngineTypes.startp = _startpos_ispure_;
                  MenhirLib.EngineTypes.endp = _endpos_ispure_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ar;
                    MenhirLib.EngineTypes.startp = _startpos_ar_;
                    MenhirLib.EngineTypes.endp = _endpos_ar_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_metadec = let kindfn =
          
# 593 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta ->
      let len = Ast.AnyLen in
      let tok = check_meta(Ast.MetaExpListDecl(arity,name,len)) in
      !Data.add_explist_meta name len pure; tok) )
# 17958 "parser_cocci_menhir.ml"
          
        in
        
# 450 "parser_cocci_menhir.mly"
    ( P.create_metadec ar ispure kindfn ids )
# 17964 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          
# 598 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta ->
      let tok = check_meta(Ast.MetaTypeDecl(arity,name)) in
      !Data.add_type_meta name pure; tok) )
# 18011 "parser_cocci_menhir.ml"
          
        in
        
# 450 "parser_cocci_menhir.mly"
    ( P.create_metadec ar ispure kindfn ids )
# 18017 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          
# 602 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta ->
      let tok = check_meta(Ast.MetaInitDecl(arity,name)) in
      !Data.add_init_meta name pure; tok) )
# 18064 "parser_cocci_menhir.ml"
          
        in
        
# 450 "parser_cocci_menhir.mly"
    ( P.create_metadec ar ispure kindfn ids )
# 18070 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ispure;
                  MenhirLib.EngineTypes.startp = _startpos_ispure_;
                  MenhirLib.EngineTypes.endp = _endpos_ispure_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ar;
                    MenhirLib.EngineTypes.startp = _startpos_ar_;
                    MenhirLib.EngineTypes.endp = _endpos_ar_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_metadec = let kindfn =
          
# 606 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta ->
      let len = Ast.AnyLen in
      let tok = check_meta(Ast.MetaInitListDecl(arity,name,len)) in
      !Data.add_initlist_meta name len pure; tok) )
# 18122 "parser_cocci_menhir.ml"
          
        in
        
# 450 "parser_cocci_menhir.mly"
    ( P.create_metadec ar ispure kindfn ids )
# 18128 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          
# 611 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta ->
      let tok = check_meta(Ast.MetaStmDecl(arity,name)) in
      !Data.add_stm_meta name pure; tok) )
# 18175 "parser_cocci_menhir.ml"
          
        in
        
# 450 "parser_cocci_menhir.mly"
    ( P.create_metadec ar ispure kindfn ids )
# 18181 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          
# 615 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta ->
      let tok = check_meta(Ast.MetaDeclDecl(arity,name)) in
      !Data.add_decl_meta name pure; tok) )
# 18228 "parser_cocci_menhir.ml"
          
        in
        
# 450 "parser_cocci_menhir.mly"
    ( P.create_metadec ar ispure kindfn ids )
# 18234 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          
# 619 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta ->
      let tok = check_meta(Ast.MetaFieldDecl(arity,name)) in
      !Data.add_field_meta name pure; tok) )
# 18281 "parser_cocci_menhir.ml"
          
        in
        
# 450 "parser_cocci_menhir.mly"
    ( P.create_metadec ar ispure kindfn ids )
# 18287 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ispure;
                  MenhirLib.EngineTypes.startp = _startpos_ispure_;
                  MenhirLib.EngineTypes.endp = _endpos_ispure_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ar;
                    MenhirLib.EngineTypes.startp = _startpos_ar_;
                    MenhirLib.EngineTypes.endp = _endpos_ar_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_metadec = let kindfn =
          
# 623 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta ->
      let len = Ast.AnyLen in
      let tok = check_meta(Ast.MetaFieldListDecl(arity,name,len)) in
      !Data.add_field_list_meta name len pure; tok) )
# 18339 "parser_cocci_menhir.ml"
          
        in
        
# 450 "parser_cocci_menhir.mly"
    ( P.create_metadec ar ispure kindfn ids )
# 18345 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ispure;
                  MenhirLib.EngineTypes.startp = _startpos_ispure_;
                  MenhirLib.EngineTypes.endp = _endpos_ispure_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ar;
                    MenhirLib.EngineTypes.startp = _startpos_ar_;
                    MenhirLib.EngineTypes.endp = _endpos_ar_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_metadec = let kindfn =
          
# 628 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta ->
      let tok = check_meta(Ast.MetaStmListDecl(arity,name)) in
      !Data.add_stmlist_meta name pure; tok) )
# 18396 "parser_cocci_menhir.ml"
          
        in
        
# 450 "parser_cocci_menhir.mly"
    ( P.create_metadec ar ispure kindfn ids )
# 18402 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          
# 632 "parser_cocci_menhir.mly"
    ( (fun arity (_,name) pure check_meta ->
      if arity = Ast.NONE && pure = Ast0.Impure
      then (!Data.add_type_name name; [])
      else raise (Semantic_cocci.Semantic "bad typedef")) )
# 18450 "parser_cocci_menhir.ml"
          
        in
        
# 450 "parser_cocci_menhir.mly"
    ( P.create_metadec ar ispure kindfn ids )
# 18456 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          
# 637 "parser_cocci_menhir.mly"
    ( (fun arity (_,name) pure check_meta ->
      if arity = Ast.NONE && pure = Ast0.Impure
      then (!Data.add_attribute name; [])
      else raise (Semantic_cocci.Semantic "bad attribute")) )
# 18504 "parser_cocci_menhir.ml"
          
        in
        
# 450 "parser_cocci_menhir.mly"
    ( P.create_metadec ar ispure kindfn ids )
# 18510 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ispure;
                  MenhirLib.EngineTypes.startp = _startpos_ispure_;
                  MenhirLib.EngineTypes.endp = _endpos_ispure_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ar;
                    MenhirLib.EngineTypes.startp = _startpos_ar_;
                    MenhirLib.EngineTypes.endp = _endpos_ar_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_metadec = let kindfn =
          
# 642 "parser_cocci_menhir.mly"
    ( (fun arity (_,name) pure check_meta ->
      if arity = Ast.NONE && pure = Ast0.Impure
      then (!Data.add_declarer_name name; [])
      else raise (Semantic_cocci.Semantic "bad declarer")) )
# 18562 "parser_cocci_menhir.ml"
          
        in
        
# 450 "parser_cocci_menhir.mly"
    ( P.create_metadec ar ispure kindfn ids )
# 18568 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ispure;
                  MenhirLib.EngineTypes.startp = _startpos_ispure_;
                  MenhirLib.EngineTypes.endp = _endpos_ispure_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ar;
                    MenhirLib.EngineTypes.startp = _startpos_ar_;
                    MenhirLib.EngineTypes.endp = _endpos_ar_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_metadec = let kindfn =
          
# 647 "parser_cocci_menhir.mly"
    ( (fun arity (_,name) pure check_meta ->
      if arity = Ast.NONE && pure = Ast0.Impure
      then (!Data.add_iterator_name name; [])
      else raise (Semantic_cocci.Semantic "bad iterator")) )
# 18620 "parser_cocci_menhir.ml"
          
        in
        
# 450 "parser_cocci_menhir.mly"
    ( P.create_metadec ar ispure kindfn ids )
# 18626 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_seed_ = Obj.magic ids in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_metadec = let kindfn =
          
# 573 "parser_cocci_menhir.mly"
    ( (fun name check_meta seed ->
      let tok = check_meta(Ast.MetaFreshIdDecl(name,seed)) in
      !Data.add_fresh_id_meta name seed; tok) )
# 18665 "parser_cocci_menhir.ml"
          
        in
        
# 453 "parser_cocci_menhir.mly"
    ( P.create_fresh_metadec kindfn ids )
# 18671 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_idconstraint_virt_re_or_not_eqid__ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          
# 654 "parser_cocci_menhir.mly"
    (
     let idfn arity name pure check_meta constraints =
       let tok = check_meta(Ast.MetaIdDecl(arity,name)) in
       !Data.add_id_meta name constraints pure; tok in
     let virtfn arity name pure check_meta virtual_env =
       try
	 let vl = List.assoc name virtual_env in
	 !Data.add_virt_id_meta_found name vl; []
       with Not_found ->
	 Iteration.parsed_virtual_identifiers :=
	   Common.union_set [name]
	     !Iteration.parsed_virtual_identifiers;
	 let name = ("virtual",name) in
	 let tok = check_meta(Ast.MetaIdDecl(arity,name)) in
	 !Data.add_virt_id_meta_not_found name pure; tok in
     (idfn,virtfn) )
# 18731 "parser_cocci_menhir.ml"
          
        in
        
# 459 "parser_cocci_menhir.mly"
    ( let (normal,virt) = Common.partition_either (fun x -> x) ids in
    let (idfn,virtfn) = kindfn in
    function cr ->
      (P.create_metadec_with_constraints ar ispure idfn normal cr) @
      (P.create_metadec_virt ar ispure virtfn virt cr) )
# 18741 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_idconstraint_re_or_not_eqid__ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          
# 673 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      let tok = check_meta(Ast.MetaFuncDecl(arity,name)) in
      !Data.add_func_meta name constraints pure; tok) )
# 18788 "parser_cocci_menhir.ml"
          
        in
        
# 468 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 18794 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ispure;
                  MenhirLib.EngineTypes.startp = _startpos_ispure_;
                  MenhirLib.EngineTypes.endp = _endpos_ispure_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ar;
                    MenhirLib.EngineTypes.startp = _startpos_ar_;
                    MenhirLib.EngineTypes.endp = _endpos_ar_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_idconstraint_re_or_not_eqid__ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_metadec = let kindfn =
          
# 677 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      let tok = check_meta(Ast.MetaLocalFuncDecl(arity,name)) in
      !Data.add_local_func_meta name constraints pure;
      tok) )
# 18846 "parser_cocci_menhir.ml"
          
        in
        
# 468 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 18852 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_idconstraint_re_or_not_eqid__ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          
# 682 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      let tok = check_meta(Ast.MetaDeclarerDecl(arity,name)) in
      !Data.add_declarer_meta name constraints pure; tok) )
# 18899 "parser_cocci_menhir.ml"
          
        in
        
# 468 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 18905 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_idconstraint_re_or_not_eqid__ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          
# 686 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      let tok = check_meta(Ast.MetaIteratorDecl(arity,name)) in
      !Data.add_iterator_meta name constraints pure; tok) )
# 18952 "parser_cocci_menhir.ml"
          
        in
        
# 468 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 18958 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe_or_sub__ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          
# 692 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      let tok = check_meta(Ast.MetaErrDecl(arity,name)) in
      !Data.add_err_meta name constraints pure; tok) )
# 19005 "parser_cocci_menhir.ml"
          
        in
        
# 473 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 19011 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = l0;
                MenhirLib.EngineTypes.startp = _startpos_l0_;
                MenhirLib.EngineTypes.endp = _endpos_l0_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ispure;
                  MenhirLib.EngineTypes.startp = _startpos_ispure_;
                  MenhirLib.EngineTypes.endp = _endpos_ispure_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ar;
                    MenhirLib.EngineTypes.startp = _startpos_ar_;
                    MenhirLib.EngineTypes.endp = _endpos_ar_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe_or_sub__ = Obj.magic ids in
        let l0 : 'tv_option_TLocal_ = Obj.magic l0 in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_metadec = let kindfn =
          let l = l0 in
          let ty =
            
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 19064 "parser_cocci_menhir.ml"
            
          in
          
# 696 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      match l with
	None ->
	  !Data.add_idexp_meta ty name constraints pure;
	  check_meta(Ast.MetaIdExpDecl(arity,name,ty))
      | Some _ ->
	  !Data.add_local_idexp_meta ty name constraints pure;
	  check_meta(Ast.MetaLocalIdExpDecl(arity,name,ty))) )
# 19077 "parser_cocci_menhir.ml"
          
        in
        
# 473 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 19083 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = x00;
              MenhirLib.EngineTypes.startp = _startpos_x00_;
              MenhirLib.EngineTypes.endp = _endpos_x00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = l0;
                  MenhirLib.EngineTypes.startp = _startpos_l0_;
                  MenhirLib.EngineTypes.endp = _endpos_l0_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = ispure;
                    MenhirLib.EngineTypes.startp = _startpos_ispure_;
                    MenhirLib.EngineTypes.endp = _endpos_ispure_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = ar;
                      MenhirLib.EngineTypes.startp = _startpos_ar_;
                      MenhirLib.EngineTypes.endp = _endpos_ar_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe_or_sub__ = Obj.magic ids in
        let x00 : 'tv_meta_exp_type = Obj.magic x00 in
        let l0 : 'tv_option_TLocal_ = Obj.magic l0 in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_metadec = let kindfn =
          let x0 = x00 in
          let l = l0 in
          let ty =
            let x = x0 in
            
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 19144 "parser_cocci_menhir.ml"
            
          in
          
# 696 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      match l with
	None ->
	  !Data.add_idexp_meta ty name constraints pure;
	  check_meta(Ast.MetaIdExpDecl(arity,name,ty))
      | Some _ ->
	  !Data.add_local_idexp_meta ty name constraints pure;
	  check_meta(Ast.MetaLocalIdExpDecl(arity,name,ty))) )
# 19157 "parser_cocci_menhir.ml"
          
        in
        
# 473 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 19163 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = m0;
              MenhirLib.EngineTypes.startp = _startpos_m0_;
              MenhirLib.EngineTypes.endp = _endpos_m0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = l0;
                  MenhirLib.EngineTypes.startp = _startpos_l0_;
                  MenhirLib.EngineTypes.endp = _endpos_l0_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = ispure;
                    MenhirLib.EngineTypes.startp = _startpos_ispure_;
                    MenhirLib.EngineTypes.endp = _endpos_ispure_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = ar;
                      MenhirLib.EngineTypes.startp = _startpos_ar_;
                      MenhirLib.EngineTypes.endp = _endpos_ar_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe_or_sub__ = Obj.magic ids in
        let m0 : 'tv_nonempty_list_TMul_ = Obj.magic m0 in
        let l0 : 'tv_option_TLocal_ = Obj.magic l0 in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_metadec = let kindfn =
          let m = m0 in
          let l = l0 in
          
# 705 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      let ty = Some [P.ty_pointerify Type_cocci.Unknown m] in
      match l with
	None ->
	  !Data.add_idexp_meta ty name constraints pure;
	  check_meta(Ast.MetaIdExpDecl(arity,name,ty))
      | Some _ ->
	  !Data.add_local_idexp_meta ty name constraints pure;
	  check_meta(Ast.MetaLocalIdExpDecl(arity,name,ty))) )
# 19230 "parser_cocci_menhir.ml"
          
        in
        
# 473 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 19236 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ispure;
                  MenhirLib.EngineTypes.startp = _startpos_ispure_;
                  MenhirLib.EngineTypes.endp = _endpos_ispure_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ar;
                    MenhirLib.EngineTypes.startp = _startpos_ar_;
                    MenhirLib.EngineTypes.endp = _endpos_ar_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe_or_sub__ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_metadec = let kindfn =
          let ty =
            
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 19286 "parser_cocci_menhir.ml"
            
          in
          
# 715 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      !Data.add_global_idexp_meta ty name constraints pure;
      check_meta(Ast.MetaGlobalIdExpDecl(arity,name,ty))) )
# 19294 "parser_cocci_menhir.ml"
          
        in
        
# 473 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 19300 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = x00;
              MenhirLib.EngineTypes.startp = _startpos_x00_;
              MenhirLib.EngineTypes.endp = _endpos_x00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = ispure;
                    MenhirLib.EngineTypes.startp = _startpos_ispure_;
                    MenhirLib.EngineTypes.endp = _endpos_ispure_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = ar;
                      MenhirLib.EngineTypes.startp = _startpos_ar_;
                      MenhirLib.EngineTypes.endp = _endpos_ar_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe_or_sub__ = Obj.magic ids in
        let x00 : 'tv_meta_exp_type = Obj.magic x00 in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_metadec = let kindfn =
          let x0 = x00 in
          let ty =
            let x = x0 in
            
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 19358 "parser_cocci_menhir.ml"
            
          in
          
# 715 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      !Data.add_global_idexp_meta ty name constraints pure;
      check_meta(Ast.MetaGlobalIdExpDecl(arity,name,ty))) )
# 19366 "parser_cocci_menhir.ml"
          
        in
        
# 473 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 19372 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = m0;
              MenhirLib.EngineTypes.startp = _startpos_m0_;
              MenhirLib.EngineTypes.endp = _endpos_m0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = ispure;
                    MenhirLib.EngineTypes.startp = _startpos_ispure_;
                    MenhirLib.EngineTypes.endp = _endpos_ispure_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = ar;
                      MenhirLib.EngineTypes.startp = _startpos_ar_;
                      MenhirLib.EngineTypes.endp = _endpos_ar_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe_or_sub__ = Obj.magic ids in
        let m0 : 'tv_nonempty_list_TMul_ = Obj.magic m0 in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_metadec = let kindfn =
          let m = m0 in
          
# 719 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      let ty = Some [P.ty_pointerify Type_cocci.Unknown m] in
      !Data.add_global_idexp_meta ty name constraints pure;
      check_meta(Ast.MetaGlobalIdExpDecl(arity,name,ty))) )
# 19431 "parser_cocci_menhir.ml"
          
        in
        
# 473 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 19437 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = ty0;
              MenhirLib.EngineTypes.startp = _startpos_ty0_;
              MenhirLib.EngineTypes.endp = _endpos_ty0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ispure;
                  MenhirLib.EngineTypes.startp = _startpos_ispure_;
                  MenhirLib.EngineTypes.endp = _endpos_ispure_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ar;
                    MenhirLib.EngineTypes.startp = _startpos_ar_;
                    MenhirLib.EngineTypes.endp = _endpos_ar_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe_or_sub__ = Obj.magic ids in
        let ty0 : 'tv_expression_type = Obj.magic ty0 in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_metadec = let kindfn =
          let ty = ty0 in
          
# 724 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      let ty = Some [ty] in
      let tok = check_meta(Ast.MetaExpDecl(arity,name,ty)) in
      !Data.add_exp_meta ty name constraints pure; tok) )
# 19492 "parser_cocci_menhir.ml"
          
        in
        
# 473 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 19498 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe_or_sub__ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          let ty =
            
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 19544 "parser_cocci_menhir.ml"
            
          in
          
# 729 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      let tok = check_meta(Ast.MetaConstDecl(arity,name,ty)) in
      !Data.add_const_meta ty name constraints pure; tok) )
# 19552 "parser_cocci_menhir.ml"
          
        in
        
# 473 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 19558 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = x00;
              MenhirLib.EngineTypes.startp = _startpos_x00_;
              MenhirLib.EngineTypes.endp = _endpos_x00_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = ispure;
                  MenhirLib.EngineTypes.startp = _startpos_ispure_;
                  MenhirLib.EngineTypes.endp = _endpos_ispure_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = ar;
                    MenhirLib.EngineTypes.startp = _startpos_ar_;
                    MenhirLib.EngineTypes.endp = _endpos_ar_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe_or_sub__ = Obj.magic ids in
        let x00 : 'tv_meta_exp_type = Obj.magic x00 in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_metadec = let kindfn =
          let x0 = x00 in
          let ty =
            let x = x0 in
            
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 19612 "parser_cocci_menhir.ml"
            
          in
          
# 729 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      let tok = check_meta(Ast.MetaConstDecl(arity,name,ty)) in
      !Data.add_const_meta ty name constraints pure; tok) )
# 19620 "parser_cocci_menhir.ml"
          
        in
        
# 473 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 19626 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_econstraint_not_ceq_or_sub__ = Obj.magic ids in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          
# 747 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      let tok = check_meta(Ast.MetaExpDecl(arity,name,None)) in
      !Data.add_exp_meta None name constraints pure; tok) )
# 19673 "parser_cocci_menhir.ml"
          
        in
        
# 478 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 19679 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = vl0;
              MenhirLib.EngineTypes.startp = _startpos_vl0_;
              MenhirLib.EngineTypes.endp = _endpos_vl0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ispure;
                MenhirLib.EngineTypes.startp = _startpos_ispure_;
                MenhirLib.EngineTypes.endp = _endpos_ispure_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_econstraint_not_ceq_or_sub__ = Obj.magic ids in
        let vl0 : 'tv_meta_exp_type = Obj.magic vl0 in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = let kindfn =
          let vl = vl0 in
          
# 751 "parser_cocci_menhir.mly"
    ( (fun arity name pure check_meta constraints ->
      let ty = Some vl in
      (match constraints with
	Ast0.NotExpCstrt constraints ->
	  List.iter
	    (function c ->
	      match Ast0.unwrap c with
		Ast0.Constant(_) ->
		  if not
		      (List.exists
			 (function
			     Type_cocci.BaseType(Type_cocci.IntType) -> true
			   | Type_cocci.BaseType(Type_cocci.ShortType) -> true
			   | Type_cocci.BaseType(Type_cocci.LongType) -> true
			   | _ -> false)
			 vl)
		  then
		    failwith "metavariable with int constraint must be an int"
	      | _ -> ())
	    constraints
      |	_ -> ());
      let tok = check_meta(Ast.MetaExpDecl(arity,name,ty)) in
      !Data.add_exp_meta ty name constraints pure; tok)
    )
# 19750 "parser_cocci_menhir.ml"
          
        in
        
# 478 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar ispure kindfn ids )
# 19756 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = a;
              MenhirLib.EngineTypes.startp = _startpos_a_;
              MenhirLib.EngineTypes.endp = _endpos_a_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_x_eq_not_pos__ = Obj.magic ids in
        let a : 'tv_option_TPosAny_ = Obj.magic a in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = 
# 484 "parser_cocci_menhir.mly"
    ( (if !Data.in_generating
      then failwith "position variables not allowed in a generated rule file");
      let kindfn arity name pure check_meta constraints =
      let tok = check_meta(Ast.MetaPosDecl(arity,name)) in
      let any = match a with None -> Ast.PER | Some _ -> Ast.ALL in
      !Data.add_pos_meta name constraints any; tok in
    P.create_metadec_with_constraints ar false kindfn ids )
# 19806 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = len;
                MenhirLib.EngineTypes.startp = _startpos_len_;
                MenhirLib.EngineTypes.endp = _endpos_len_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = ispure;
                        MenhirLib.EngineTypes.startp = _startpos_ispure_;
                        MenhirLib.EngineTypes.endp = _endpos_ispure_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = ar;
                          MenhirLib.EngineTypes.startp = _startpos_ar_;
                          MenhirLib.EngineTypes.endp = _endpos_ar_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let len : 'tv_list_len = Obj.magic len in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__9_ in
        let _v : 'tv_metadec = 
# 494 "parser_cocci_menhir.mly"
    ( P.create_len_metadec ar ispure
	(fun lenname arity name pure check_meta ->
	  let tok = check_meta(Ast.MetaParamListDecl(arity,name,lenname)) in
	  !Data.add_paramlist_meta name lenname pure; tok)
	len ids )
# 19872 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = len;
                MenhirLib.EngineTypes.startp = _startpos_len_;
                MenhirLib.EngineTypes.endp = _endpos_len_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = ispure;
                        MenhirLib.EngineTypes.startp = _startpos_ispure_;
                        MenhirLib.EngineTypes.endp = _endpos_ispure_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = ar;
                          MenhirLib.EngineTypes.startp = _startpos_ar_;
                          MenhirLib.EngineTypes.endp = _endpos_ar_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let len : 'tv_list_len = Obj.magic len in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__9_ in
        let _v : 'tv_metadec = 
# 502 "parser_cocci_menhir.mly"
    ( P.create_len_metadec ar ispure
	(fun lenname arity name pure check_meta ->
	  let tok = check_meta(Ast.MetaExpListDecl(arity,name,lenname)) in
	  !Data.add_explist_meta name lenname pure; tok)
	len ids )
# 19938 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = len;
                MenhirLib.EngineTypes.startp = _startpos_len_;
                MenhirLib.EngineTypes.endp = _endpos_len_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = ispure;
                        MenhirLib.EngineTypes.startp = _startpos_ispure_;
                        MenhirLib.EngineTypes.endp = _endpos_ispure_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = ar;
                          MenhirLib.EngineTypes.startp = _startpos_ar_;
                          MenhirLib.EngineTypes.endp = _endpos_ar_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let len : 'tv_list_len = Obj.magic len in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__9_ in
        let _v : 'tv_metadec = 
# 510 "parser_cocci_menhir.mly"
    ( P.create_len_metadec ar ispure
	(fun lenname arity name pure check_meta ->
	  let tok = check_meta(Ast.MetaFieldListDecl(arity,name,lenname)) in
	  !Data.add_field_list_meta name lenname pure; tok)
	len ids )
# 20004 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = len;
                MenhirLib.EngineTypes.startp = _startpos_len_;
                MenhirLib.EngineTypes.endp = _endpos_len_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = ispure;
                        MenhirLib.EngineTypes.startp = _startpos_ispure_;
                        MenhirLib.EngineTypes.endp = _endpos_ispure_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = ar;
                          MenhirLib.EngineTypes.startp = _startpos_ar_;
                          MenhirLib.EngineTypes.endp = _endpos_ar_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let len : 'tv_list_len = Obj.magic len in
        let ispure : 'tv_pure = Obj.magic ispure in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__9_ in
        let _v : 'tv_metadec = 
# 518 "parser_cocci_menhir.mly"
    ( P.create_len_metadec ar ispure
	(fun lenname arity name pure check_meta ->
	  let tok = check_meta(Ast.MetaInitListDecl(arity,name,lenname)) in
	  !Data.add_initlist_meta name lenname pure; tok)
	len ids )
# 20070 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_ = Obj.magic ids in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_metadec = 
# 524 "parser_cocci_menhir.mly"
    ( (fun _ ->
        let add_sym = fun (nm,_) -> !Data.add_symbol_meta nm in
          List.iter add_sym ids; [])
    )
# 20105 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = ar;
                MenhirLib.EngineTypes.startp = _startpos_ar_;
                MenhirLib.EngineTypes.endp = _endpos_ar_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_with_idconstraint_re_only__ = Obj.magic ids in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_metadec = 
# 531 "parser_cocci_menhir.mly"
    ( P.create_metadec_with_constraints ar Ast0.Impure
	(fun arity name pure check_meta constraints ->
	  let tok = check_meta(Ast.MetaFmtDecl(arity,name)) in
	  !Data.add_fmt_meta name constraints; tok)
    ids )
# 20147 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ar;
                  MenhirLib.EngineTypes.startp = _startpos_ar_;
                  MenhirLib.EngineTypes.endp = _endpos_ar_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_metadec = 
# 538 "parser_cocci_menhir.mly"
    ( P.create_metadec ar Ast0.Impure
	(fun arity name pure check_meta ->
	  let len = Ast.AnyLen in
	  let tok = check_meta(Ast.MetaFragListDecl(arity,name,len)) in
	  !Data.add_fmtlist_meta name len; tok)
	ids )
# 20194 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = len;
                MenhirLib.EngineTypes.startp = _startpos_len_;
                MenhirLib.EngineTypes.endp = _endpos_len_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = ar;
                        MenhirLib.EngineTypes.startp = _startpos_ar_;
                        MenhirLib.EngineTypes.endp = _endpos_ar_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ids : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic ids in
        let len : 'tv_list_len = Obj.magic len in
        let ar : 'tv_arity = Obj.magic ar in
        let _startpos = _startpos_ar_ in
        let _endpos = _endpos__8_ in
        let _v : 'tv_metadec = 
# 547 "parser_cocci_menhir.mly"
    ( P.create_len_metadec ar Ast0.Impure
	(fun lenname arity name pure check_meta ->
	  let tok = check_meta(Ast.MetaFragListDecl(arity,name,lenname)) in
	  !Data.add_fmtlist_meta name lenname; tok)
	len ids )
# 20254 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_pure_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_mident = 
# 2310 "parser_cocci_menhir.mly"
         ( Ast0.wrap(Ast0.Id(P.id2mcode _1)) )
# 20278 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_wrapped_sym_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_mident = 
# 2311 "parser_cocci_menhir.mly"
                         ( _1 )
# 20302 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 224 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 20323 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_mident = 
# 2312 "parser_cocci_menhir.mly"
             ( tmeta_to_ident _1 )
# 20330 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 219 "parser_cocci_menhir.mly"
       (Parse_aux.midinfo)
# 20351 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_mident = 
# 2314 "parser_cocci_menhir.mly"
         ( let (nm,constraints,seed,pure,clt) = _1 in
         Ast0.wrap(Ast0.MetaId(P.clt2mcode nm clt,constraints,seed,pure)) )
# 20359 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_list_mzl_ctype__ = Obj.magic b in
        let a : 'tv_ctype = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_midzero_list_ctype_ctype_ = 
# 2703 "parser_cocci_menhir.mly"
     ( let (mids,code) = List.split b in (mids,(a::code)) )
# 20389 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_list_mzl_disj_ident__ = Obj.magic b in
        let a : 'tv_disj_ident = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_midzero_list_disj_ident_disj_ident_ = 
# 2703 "parser_cocci_menhir.mly"
     ( let (mids,code) = List.split b in (mids,(a::code)) )
# 20419 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_list_mzl_eexpr__ = Obj.magic b in
        let a : 'tv_eexpr = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_midzero_list_eexpr_eexpr_ = 
# 2703 "parser_cocci_menhir.mly"
     ( let (mids,code) = List.split b in (mids,(a::code)) )
# 20449 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_list_mzl_eexpr__ = Obj.magic b in
        let a : 'tv_expr = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_midzero_list_expr_eexpr_ = 
# 2703 "parser_cocci_menhir.mly"
     ( let (mids,code) = List.split b in (mids,(a::code)) )
# 20479 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_list_mzl_fun_after_dots_or__ = Obj.magic b in
        let a : 'tv_fun_after_stm = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_midzero_list_fun_after_stm_fun_after_dots_or_ = 
# 2703 "parser_cocci_menhir.mly"
     ( let (mids,code) = List.split b in (mids,(a::code)) )
# 20509 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_list_mzl_fun_start__ = Obj.magic b in
        let a : 'tv_fun_start = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_midzero_list_fun_start_fun_start_ = 
# 2703 "parser_cocci_menhir.mly"
     ( let (mids,code) = List.split b in (mids,(a::code)) )
# 20539 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_list_mzl_mctype__ = Obj.magic b in
        let a : 'tv_mctype = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_midzero_list_mctype_mctype_ = 
# 2703 "parser_cocci_menhir.mly"
     ( let (mids,code) = List.split b in (mids,(a::code)) )
# 20569 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_list_mzl_rule_elem_statement__ = Obj.magic b in
        let a : 'tv_rule_elem_statement = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_midzero_list_rule_elem_statement_rule_elem_statement_ = 
# 2703 "parser_cocci_menhir.mly"
     ( let (mids,code) = List.split b in (mids,(a::code)) )
# 20599 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_list_mzl_statement__ = Obj.magic b in
        let a : 'tv_statement = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_midzero_list_statement_statement_ = 
# 2703 "parser_cocci_menhir.mly"
     ( let (mids,code) = List.split b in (mids,(a::code)) )
# 20629 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_list_mzl_struct_decl_one__ = Obj.magic b in
        let a : 'tv_struct_decl_one = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_midzero_list_struct_decl_one_struct_decl_one_ = 
# 2703 "parser_cocci_menhir.mly"
     ( let (mids,code) = List.split b in (mids,(a::code)) )
# 20659 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = f;
            MenhirLib.EngineTypes.startp = _startpos_f_;
            MenhirLib.EngineTypes.endp = _endpos_f_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_loption_minus_start_ = Obj.magic b in
        let f : 'tv_loption_filespec_ = Obj.magic f in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_minus_body = 
# 1019 "parser_cocci_menhir.mly"
    ( match f@b(*@ew*) with
      [] -> raise (Semantic_cocci.Semantic "minus slice can't be empty")
    | code -> code )
# 20691 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = f;
            MenhirLib.EngineTypes.startp = _startpos_f_;
            MenhirLib.EngineTypes.endp = _endpos_f_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_top_eexpr = Obj.magic b in
        let f : 'tv_loption_filespec_ = Obj.magic f in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_minus_exp_body = 
# 1033 "parser_cocci_menhir.mly"
    ( match f@[b](*@ew*) with
      [] -> raise (Semantic_cocci.Semantic "minus slice can't be empty")
    | code -> code )
# 20723 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _1 : 'tv_minus_exp_body = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 305 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 20751 "parser_cocci_menhir.ml"
        ) = 
# 351 "parser_cocci_menhir.mly"
                                   ( _1 )
# 20755 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = m;
            MenhirLib.EngineTypes.startp = _startpos_m_;
            MenhirLib.EngineTypes.endp = _endpos_m_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_minus_exp_body = Obj.magic m in
        let _startpos = _startpos_m_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 305 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 20783 "parser_cocci_menhir.ml"
        ) = 
# 351 "parser_cocci_menhir.mly"
                                                                       ( m )
# 20787 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = m;
            MenhirLib.EngineTypes.startp = _startpos_m_;
            MenhirLib.EngineTypes.endp = _endpos_m_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_minus_exp_body = Obj.magic m in
        let _startpos = _startpos_m_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 305 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 20815 "parser_cocci_menhir.ml"
        ) = 
# 352 "parser_cocci_menhir.mly"
                         ( m )
# 20819 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _1 : 'tv_minus_body = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 302 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 20847 "parser_cocci_menhir.ml"
        ) = 
# 347 "parser_cocci_menhir.mly"
                           ( _1 )
# 20851 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = m;
            MenhirLib.EngineTypes.startp = _startpos_m_;
            MenhirLib.EngineTypes.endp = _endpos_m_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_minus_body = Obj.magic m in
        let _startpos = _startpos_m_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 302 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 20879 "parser_cocci_menhir.ml"
        ) = 
# 347 "parser_cocci_menhir.mly"
                                                           ( m )
# 20883 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = m;
            MenhirLib.EngineTypes.startp = _startpos_m_;
            MenhirLib.EngineTypes.endp = _endpos_m_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_minus_body = Obj.magic m in
        let _startpos = _startpos_m_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 302 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 20911 "parser_cocci_menhir.ml"
        ) = 
# 348 "parser_cocci_menhir.mly"
                     ( m )
# 20915 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_fundecl = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_minus_start = 
# 2459 "parser_cocci_menhir.mly"
                         ( [Ast0.wrap(Ast0.OTHER(_1))] )
# 20939 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_ctype = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_minus_start = 
# 2460 "parser_cocci_menhir.mly"
                         ( [Ast0.wrap(Ast0.OTHER(Ast0.wrap(Ast0.Ty(_1))))] )
# 20963 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_top_init = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_minus_start = 
# 2461 "parser_cocci_menhir.mly"
                    ( [Ast0.wrap(Ast0.OTHER(Ast0.wrap(Ast0.TopInit(_1))))] )
# 20987 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_toplevel_seq_startne_toplevel_after_dots_init_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_minus_start = 
# 2463 "parser_cocci_menhir.mly"
    ( List.map (function x -> Ast0.wrap(Ast0.OTHER(x))) _1 )
# 21011 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = f;
            MenhirLib.EngineTypes.startp = _startpos_f_;
            MenhirLib.EngineTypes.endp = _endpos_f_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_top_ctype = Obj.magic b in
        let f : 'tv_loption_filespec_ = Obj.magic f in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_minus_ty_body = 
# 1047 "parser_cocci_menhir.mly"
    ( match f@[b](*@ew*) with
      [] -> raise (Semantic_cocci.Semantic "minus slice can't be empty")
    | code -> code )
# 21043 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _1 : 'tv_minus_exp_body = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 308 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 21071 "parser_cocci_menhir.ml"
        ) = 
# 353 "parser_cocci_menhir.mly"
                                  ( _1 )
# 21075 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = m;
            MenhirLib.EngineTypes.startp = _startpos_m_;
            MenhirLib.EngineTypes.endp = _endpos_m_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_minus_ty_body = Obj.magic m in
        let _startpos = _startpos_m_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 308 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 21103 "parser_cocci_menhir.ml"
        ) = 
# 353 "parser_cocci_menhir.mly"
                                                                     ( m )
# 21107 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = m;
            MenhirLib.EngineTypes.startp = _startpos_m_;
            MenhirLib.EngineTypes.endp = _endpos_m_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_minus_ty_body = Obj.magic m in
        let _startpos = _startpos_m_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 308 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 21135 "parser_cocci_menhir.ml"
        ) = 
# 354 "parser_cocci_menhir.mly"
                        ( m )
# 21139 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = a;
          MenhirLib.EngineTypes.startp = _startpos_a_;
          MenhirLib.EngineTypes.endp = _endpos_a_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let a : (
# 263 "parser_cocci_menhir.mly"
       (Data.clt)
# 21160 "parser_cocci_menhir.ml"
        ) = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_a_ in
        let _v : 'tv_mul = let b =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 21168 "parser_cocci_menhir.ml"
          
        in
        
# 909 "parser_cocci_menhir.mly"
                                 ( (a,b) )
# 21174 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x0;
          MenhirLib.EngineTypes.startp = _startpos_x0_;
          MenhirLib.EngineTypes.endp = _endpos_x0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let a : (
# 263 "parser_cocci_menhir.mly"
       (Data.clt)
# 21201 "parser_cocci_menhir.ml"
        ) = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_x0_ in
        let _v : 'tv_mul = let b =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 21210 "parser_cocci_menhir.ml"
          
        in
        
# 909 "parser_cocci_menhir.mly"
                                 ( (a,b) )
# 21216 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_ctype = Obj.magic b in
        let a : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 21243 "parser_cocci_menhir.ml"
        ) = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_mzl_ctype_ = 
# 2706 "parser_cocci_menhir.mly"
                 ( (P.id2mcode a, b) )
# 21250 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_disj_ident = Obj.magic b in
        let a : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 21277 "parser_cocci_menhir.ml"
        ) = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_mzl_disj_ident_ = 
# 2706 "parser_cocci_menhir.mly"
                 ( (P.id2mcode a, b) )
# 21284 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_eexpr = Obj.magic b in
        let a : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 21311 "parser_cocci_menhir.ml"
        ) = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_mzl_eexpr_ = 
# 2706 "parser_cocci_menhir.mly"
                 ( (P.id2mcode a, b) )
# 21318 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_fun_after_dots_or = Obj.magic b in
        let a : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 21345 "parser_cocci_menhir.ml"
        ) = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_mzl_fun_after_dots_or_ = 
# 2706 "parser_cocci_menhir.mly"
                 ( (P.id2mcode a, b) )
# 21352 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_fun_start = Obj.magic b in
        let a : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 21379 "parser_cocci_menhir.ml"
        ) = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_mzl_fun_start_ = 
# 2706 "parser_cocci_menhir.mly"
                 ( (P.id2mcode a, b) )
# 21386 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_mctype = Obj.magic b in
        let a : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 21413 "parser_cocci_menhir.ml"
        ) = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_mzl_mctype_ = 
# 2706 "parser_cocci_menhir.mly"
                 ( (P.id2mcode a, b) )
# 21420 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_rule_elem_statement = Obj.magic b in
        let a : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 21447 "parser_cocci_menhir.ml"
        ) = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_mzl_rule_elem_statement_ = 
# 2706 "parser_cocci_menhir.mly"
                 ( (P.id2mcode a, b) )
# 21454 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_statement = Obj.magic b in
        let a : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 21481 "parser_cocci_menhir.ml"
        ) = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_mzl_statement_ = 
# 2706 "parser_cocci_menhir.mly"
                 ( (P.id2mcode a, b) )
# 21488 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_struct_decl_one = Obj.magic b in
        let a : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 21515 "parser_cocci_menhir.ml"
        ) = Obj.magic a in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_mzl_struct_decl_one_ = 
# 2706 "parser_cocci_menhir.mly"
                 ( (P.id2mcode a, b) )
# 21522 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_decl = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_name_opt_decl = 
# 1340 "parser_cocci_menhir.mly"
            ( _1 )
# 21546 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = rp1;
          MenhirLib.EngineTypes.startp = _startpos_rp1_;
          MenhirLib.EngineTypes.endp = _endpos_rp1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = lp1;
              MenhirLib.EngineTypes.startp = _startpos_lp1_;
              MenhirLib.EngineTypes.endp = _endpos_lp1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = rp;
                MenhirLib.EngineTypes.startp = _startpos_rp_;
                MenhirLib.EngineTypes.endp = _endpos_rp_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = s;
                  MenhirLib.EngineTypes.startp = _startpos_s_;
                  MenhirLib.EngineTypes.endp = _endpos_s_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = lp;
                    MenhirLib.EngineTypes.startp = _startpos_lp_;
                    MenhirLib.EngineTypes.endp = _endpos_lp_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = t;
                      MenhirLib.EngineTypes.startp = _startpos_t_;
                      MenhirLib.EngineTypes.endp = _endpos_t_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let rp1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 21597 "parser_cocci_menhir.ml"
        ) = Obj.magic rp1 in
        let d : 'tv_decl_list_name_opt_decl_ = Obj.magic d in
        let lp1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 21603 "parser_cocci_menhir.ml"
        ) = Obj.magic lp1 in
        let rp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 21608 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let s : (
# 263 "parser_cocci_menhir.mly"
       (Data.clt)
# 21613 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let lp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 21618 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_rp1_ in
        let _v : 'tv_name_opt_decl = 
# 1343 "parser_cocci_menhir.mly"
        ( let fnptr =
	  Ast0.wrap
	    (Ast0.FunctionPointer
	       (t,P.clt2mcode "(" lp,P.clt2mcode "*" s,P.clt2mcode ")" rp,
		P.clt2mcode "(" lp1,d,P.clt2mcode ")" rp1)) in
	Ast0.wrap(Ast0.Param(fnptr, None)) )
# 21631 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_nest_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_nest_after_dots = 
# 2579 "parser_cocci_menhir.mly"
                                     (_1@_2)
# 21661 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_nest_after_exp = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_nest_after_dots = 
# 2580 "parser_cocci_menhir.mly"
                                (_2)
# 21689 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_nest_after_exp = Obj.magic _2 in
        let _1 : 'tv_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_nest_after_dots = 
# 2581 "parser_cocci_menhir.mly"
                                ((Ast0.wrap(Ast0.Exp(_1)))::_2)
# 21719 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_nest_after_exp = 
# 2589 "parser_cocci_menhir.mly"
                                ([])
# 21736 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_nest_after_dots = Obj.magic _2 in
        let _1 : 'tv_stm_dots = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_nest_after_exp = 
# 2590 "parser_cocci_menhir.mly"
                                (_1::_2)
# 21766 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_nest_after_stm = 
# 2584 "parser_cocci_menhir.mly"
                                ([])
# 21783 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_nest_after_dots = Obj.magic _2 in
        let _1 : 'tv_stm_dots = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_nest_after_stm = 
# 2585 "parser_cocci_menhir.mly"
                                (_1::_2)
# 21813 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_nest_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_nest_after_stm = 
# 2586 "parser_cocci_menhir.mly"
                                (_1@_2)
# 21843 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = c;
          MenhirLib.EngineTypes.startp = _startpos_c_;
          MenhirLib.EngineTypes.endp = _endpos_c_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let c : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 21874 "parser_cocci_menhir.ml"
        ) = Obj.magic c in
        let e : 'tv_expr_dots_TEllipsis_ = Obj.magic e in
        let _1 : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 21880 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_c_ in
        let _v : 'tv_nest_expressions = 
# 1753 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.NestExpr(P.clt2mcode "<..." _1,
			      Ast0.wrap(Ast0.DOTS(e (P.mkedots "..."))),
			      P.clt2mcode "...>" c, None, false)) )
# 21889 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = c;
          MenhirLib.EngineTypes.startp = _startpos_c_;
          MenhirLib.EngineTypes.endp = _endpos_c_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let c : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 21920 "parser_cocci_menhir.ml"
        ) = Obj.magic c in
        let e : 'tv_expr_dots_TEllipsis_ = Obj.magic e in
        let _1 : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 21926 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_c_ in
        let _v : 'tv_nest_expressions = 
# 1757 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.NestExpr(P.clt2mcode "<+..." _1,
			      Ast0.wrap(Ast0.DOTS(e (P.mkedots "..."))),
			      P.clt2mcode "...+>" c, None, true)) )
# 21935 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 224 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 21956 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_nest_expressions = 
# 1760 "parser_cocci_menhir.mly"
        ( tmeta_to_exp _1 )
# 21963 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = c;
          MenhirLib.EngineTypes.startp = _startpos_c_;
          MenhirLib.EngineTypes.endp = _endpos_c_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let c : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 21994 "parser_cocci_menhir.ml"
        ) = Obj.magic c in
        let e : 'tv_expr_dots_TEllipsis_ = Obj.magic e in
        let _1 : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 22000 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_c_ in
        let _v : 'tv_nest_expressions_only = 
# 1764 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.NestExpr(P.clt2mcode "<..." _1,
			      Ast0.wrap(Ast0.DOTS(e (P.mkedots "..."))),
			      P.clt2mcode "...>" c, None, false)) )
# 22009 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = c;
          MenhirLib.EngineTypes.startp = _startpos_c_;
          MenhirLib.EngineTypes.endp = _endpos_c_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let c : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 22040 "parser_cocci_menhir.ml"
        ) = Obj.magic c in
        let e : 'tv_expr_dots_TEllipsis_ = Obj.magic e in
        let _1 : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 22046 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_c_ in
        let _v : 'tv_nest_expressions_only = 
# 1768 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.NestExpr(P.clt2mcode "<+..." _1,
			      Ast0.wrap(Ast0.DOTS(e (P.mkedots "..."))),
			      P.clt2mcode "...+>" c, None, true)) )
# 22055 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_nest_after_dots = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_nest_start = 
# 2576 "parser_cocci_menhir.mly"
                   ( Ast0.wrap(Ast0.DOTS(_1)) )
# 22079 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (
# 343 "parser_cocci_menhir.mly"
      (unit)
# 22101 "parser_cocci_menhir.ml"
        ) = 
# 2778 "parser_cocci_menhir.mly"
                       ( () )
# 22105 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 343 "parser_cocci_menhir.mly"
      (unit)
# 22131 "parser_cocci_menhir.ml"
        ) = 
# 2779 "parser_cocci_menhir.mly"
                    ( () )
# 22135 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (
# 343 "parser_cocci_menhir.mly"
      (unit)
# 22157 "parser_cocci_menhir.ml"
        ) = 
# 2780 "parser_cocci_menhir.mly"
                    ( () )
# 22161 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (
# 343 "parser_cocci_menhir.mly"
      (unit)
# 22183 "parser_cocci_menhir.ml"
        ) = 
# 2781 "parser_cocci_menhir.mly"
                  ( () )
# 22187 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (
# 343 "parser_cocci_menhir.mly"
      (unit)
# 22209 "parser_cocci_menhir.ml"
        ) = 
# 2782 "parser_cocci_menhir.mly"
                ( () )
# 22213 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = dg;
          MenhirLib.EngineTypes.startp = _startpos_dg_;
          MenhirLib.EngineTypes.endp = _endpos_dg_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = g;
            MenhirLib.EngineTypes.startp = _startpos_g_;
            MenhirLib.EngineTypes.endp = _endpos_g_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let dg : 'tv_list_pair_edots_when_TEllipsis_eexpr__dexpr__ = Obj.magic dg in
        let g : 'tv_dexpr = Obj.magic g in
        let _startpos = _startpos_g_ in
        let _endpos = _endpos_dg_ in
        let _v : 'tv_no_dot_start_end_dexpr_edots_when_TEllipsis_eexpr__ = 
# 2011 "parser_cocci_menhir.mly"
  ( function dot_builder ->
      g :: (List.concat(List.map (function (d,g) -> [dot_builder d;g]) dg)) )
# 22244 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let ty : (
# 206 "parser_cocci_menhir.mly"
      (Data.clt)
# 22265 "parser_cocci_menhir.ml"
        ) = Obj.magic ty in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : 'tv_non_signable_types = 
# 834 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.VoidType,[P.clt2mcode "void" ty])) )
# 22272 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ty2;
          MenhirLib.EngineTypes.startp = _startpos_ty2_;
          MenhirLib.EngineTypes.endp = _endpos_ty2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty1;
            MenhirLib.EngineTypes.startp = _startpos_ty1_;
            MenhirLib.EngineTypes.endp = _endpos_ty1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let ty2 : (
# 204 "parser_cocci_menhir.mly"
      (Data.clt)
# 22298 "parser_cocci_menhir.ml"
        ) = Obj.magic ty2 in
        let ty1 : (
# 204 "parser_cocci_menhir.mly"
      (Data.clt)
# 22303 "parser_cocci_menhir.ml"
        ) = Obj.magic ty1 in
        let _startpos = _startpos_ty1_ in
        let _endpos = _endpos_ty2_ in
        let _v : 'tv_non_signable_types = 
# 836 "parser_cocci_menhir.mly"
    ( Ast0.wrap
	(Ast0.BaseType
	   (Ast.LongDoubleType,
	    [P.clt2mcode "long" ty1;P.clt2mcode "double" ty2])) )
# 22313 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let ty : (
# 204 "parser_cocci_menhir.mly"
      (Data.clt)
# 22334 "parser_cocci_menhir.ml"
        ) = Obj.magic ty in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : 'tv_non_signable_types = 
# 841 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.DoubleType,[P.clt2mcode "double" ty])) )
# 22341 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let ty : (
# 204 "parser_cocci_menhir.mly"
      (Data.clt)
# 22362 "parser_cocci_menhir.ml"
        ) = Obj.magic ty in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : 'tv_non_signable_types = 
# 843 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.FloatType,[P.clt2mcode "float" ty])) )
# 22369 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let ty : (
# 205 "parser_cocci_menhir.mly"
      (Data.clt)
# 22390 "parser_cocci_menhir.ml"
        ) = Obj.magic ty in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : 'tv_non_signable_types = 
# 845 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.SizeType,[P.clt2mcode "size_t" ty])) )
# 22397 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let ty : (
# 205 "parser_cocci_menhir.mly"
      (Data.clt)
# 22418 "parser_cocci_menhir.ml"
        ) = Obj.magic ty in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : 'tv_non_signable_types = 
# 847 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.SSizeType,[P.clt2mcode "ssize_t" ty])) )
# 22425 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let ty : (
# 205 "parser_cocci_menhir.mly"
      (Data.clt)
# 22446 "parser_cocci_menhir.ml"
        ) = Obj.magic ty in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : 'tv_non_signable_types = 
# 849 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.PtrDiffType,[P.clt2mcode "ptrdiff_t" ty])) )
# 22453 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let i : 'tv_ident = Obj.magic i in
        let s : (
# 206 "parser_cocci_menhir.mly"
      (Data.clt)
# 22480 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_non_signable_types = 
# 851 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.EnumName(P.clt2mcode "enum" s, Some i)) )
# 22487 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = l;
              MenhirLib.EngineTypes.startp = _startpos_l_;
              MenhirLib.EngineTypes.endp = _endpos_l_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = s;
                MenhirLib.EngineTypes.startp = _startpos_s_;
                MenhirLib.EngineTypes.endp = _endpos_s_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let r : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 22523 "parser_cocci_menhir.ml"
        ) = Obj.magic r in
        let ids : 'tv_enum_decl_list = Obj.magic ids in
        let l : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 22529 "parser_cocci_menhir.ml"
        ) = Obj.magic l in
        let s : (
# 206 "parser_cocci_menhir.mly"
      (Data.clt)
# 22534 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_non_signable_types = let i =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 22542 "parser_cocci_menhir.ml"
          
        in
        
# 853 "parser_cocci_menhir.mly"
    ( (if i = None && !Data.in_iso
    then failwith "enums must be named in the iso file");
      Ast0.wrap(Ast0.EnumDef(Ast0.wrap(Ast0.EnumName(P.clt2mcode "enum" s, i)),
			     P.clt2mcode "{" l, ids, P.clt2mcode "}" r)) )
# 22551 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ids;
            MenhirLib.EngineTypes.startp = _startpos_ids_;
            MenhirLib.EngineTypes.endp = _endpos_ids_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = l;
              MenhirLib.EngineTypes.startp = _startpos_l_;
              MenhirLib.EngineTypes.endp = _endpos_l_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = s;
                  MenhirLib.EngineTypes.startp = _startpos_s_;
                  MenhirLib.EngineTypes.endp = _endpos_s_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let r : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 22592 "parser_cocci_menhir.ml"
        ) = Obj.magic r in
        let ids : 'tv_enum_decl_list = Obj.magic ids in
        let l : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 22598 "parser_cocci_menhir.ml"
        ) = Obj.magic l in
        let x0 : 'tv_ident = Obj.magic x0 in
        let s : (
# 206 "parser_cocci_menhir.mly"
      (Data.clt)
# 22604 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_non_signable_types = let i =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 22613 "parser_cocci_menhir.ml"
          
        in
        
# 853 "parser_cocci_menhir.mly"
    ( (if i = None && !Data.in_iso
    then failwith "enums must be named in the iso file");
      Ast0.wrap(Ast0.EnumDef(Ast0.wrap(Ast0.EnumName(P.clt2mcode "enum" s, i)),
			     P.clt2mcode "{" l, ids, P.clt2mcode "}" r)) )
# 22622 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let i : 'tv_type_ident = Obj.magic i in
        let s : 'tv_struct_or_union = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_non_signable_types = 
# 858 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.StructUnionName(s, Some i)) )
# 22652 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = l;
              MenhirLib.EngineTypes.startp = _startpos_l_;
              MenhirLib.EngineTypes.endp = _endpos_l_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = s;
                MenhirLib.EngineTypes.startp = _startpos_s_;
                MenhirLib.EngineTypes.endp = _endpos_s_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let r : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 22688 "parser_cocci_menhir.ml"
        ) = Obj.magic r in
        let d : 'tv_struct_decl_list = Obj.magic d in
        let l : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 22694 "parser_cocci_menhir.ml"
        ) = Obj.magic l in
        let s : 'tv_struct_or_union = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_non_signable_types = let i =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 22703 "parser_cocci_menhir.ml"
          
        in
        
# 861 "parser_cocci_menhir.mly"
    ( (if i = None && !Data.in_iso
    then failwith "structures must be named in the iso file");
      Ast0.wrap(Ast0.StructUnionDef(Ast0.wrap(Ast0.StructUnionName(s, i)),
				    P.clt2mcode "{" l,
				    d, P.clt2mcode "}" r)) )
# 22713 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = l;
              MenhirLib.EngineTypes.startp = _startpos_l_;
              MenhirLib.EngineTypes.endp = _endpos_l_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = s;
                  MenhirLib.EngineTypes.startp = _startpos_s_;
                  MenhirLib.EngineTypes.endp = _endpos_s_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let r : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 22754 "parser_cocci_menhir.ml"
        ) = Obj.magic r in
        let d : 'tv_struct_decl_list = Obj.magic d in
        let l : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 22760 "parser_cocci_menhir.ml"
        ) = Obj.magic l in
        let x0 : 'tv_type_ident = Obj.magic x0 in
        let s : 'tv_struct_or_union = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_non_signable_types = let i =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 22771 "parser_cocci_menhir.ml"
          
        in
        
# 861 "parser_cocci_menhir.mly"
    ( (if i = None && !Data.in_iso
    then failwith "structures must be named in the iso file");
      Ast0.wrap(Ast0.StructUnionDef(Ast0.wrap(Ast0.StructUnionName(s, i)),
				    P.clt2mcode "{" l,
				    d, P.clt2mcode "}" r)) )
# 22781 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = l;
              MenhirLib.EngineTypes.startp = _startpos_l_;
              MenhirLib.EngineTypes.endp = _endpos_l_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = s;
                MenhirLib.EngineTypes.startp = _startpos_s_;
                MenhirLib.EngineTypes.endp = _endpos_s_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let r : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 22817 "parser_cocci_menhir.ml"
        ) = Obj.magic r in
        let d : 'tv_struct_decl_list = Obj.magic d in
        let l : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 22823 "parser_cocci_menhir.ml"
        ) = Obj.magic l in
        let s : (
# 223 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 22828 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_non_signable_types = 
# 867 "parser_cocci_menhir.mly"
    ( let (nm,pure,clt) = s in
    let ty = Ast0.wrap(Ast0.MetaType(P.clt2mcode nm clt,pure)) in
    Ast0.wrap(Ast0.StructUnionDef(ty,P.clt2mcode "{" l,d,P.clt2mcode "}" r)) )
# 22837 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let p : (
# 216 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 22858 "parser_cocci_menhir.ml"
        ) = Obj.magic p in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos_p_ in
        let _v : 'tv_non_signable_types = 
# 871 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.TypeName(P.id2mcode p)) )
# 22865 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let _6 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 22911 "parser_cocci_menhir.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_enum_val = Obj.magic _5 in
        let _4 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 22917 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_enum_val = Obj.magic _3 in
        let _2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 22923 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 215 "parser_cocci_menhir.mly"
       (Data.clt)
# 22928 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_non_signable_types = 
# 873 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Decimal(P.clt2mcode "decimal" _1,
			     P.clt2mcode "(" _2,_3,
			     Some (P.clt2mcode "," _4), Some _5,
			     P.clt2mcode ")" _6)) )
# 22938 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let _4 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 22974 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_enum_val = Obj.magic _3 in
        let _2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 22980 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 215 "parser_cocci_menhir.mly"
       (Data.clt)
# 22985 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_non_signable_types = 
# 878 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Decimal(P.clt2mcode "decimal" _1,
			     P.clt2mcode "(" _2,_3,None,None,
			     P.clt2mcode ")" _4)) )
# 22994 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : (
# 263 "parser_cocci_menhir.mly"
       (Data.clt)
# 23015 "parser_cocci_menhir.ml"
        ) = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_nonempty_list_TMul_ = 
# 124 "/usr/share/menhir/standard.mly"
    ( [ x ] )
# 23022 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_nonempty_list_TMul_ = Obj.magic xs in
        let x : (
# 263 "parser_cocci_menhir.mly"
       (Data.clt)
# 23049 "parser_cocci_menhir.ml"
        ) = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_nonempty_list_TMul_ = 
# 126 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 23056 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_ident = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_nonempty_list_ident_ = 
# 124 "/usr/share/menhir/standard.mly"
    ( [ x ] )
# 23080 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let xs : 'tv_nonempty_list_ident_ = Obj.magic xs in
        let x : 'tv_ident = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_nonempty_list_ident_ = 
# 126 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 23110 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = element;
          MenhirLib.EngineTypes.startp = _startpos_element_;
          MenhirLib.EngineTypes.endp = _endpos_element_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let element : 'tv_aexpr = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_element_ in
        let _v : 'tv_nonempty_list_start_aexpr_TEllipsis_ = 
# 2386 "parser_cocci_menhir.mly"
               ( fun build_dots build_comma -> [element] )
# 23134 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = comma;
          MenhirLib.EngineTypes.startp = _startpos_comma_;
          MenhirLib.EngineTypes.endp = _endpos_comma_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = element;
            MenhirLib.EngineTypes.startp = _startpos_element_;
            MenhirLib.EngineTypes.endp = _endpos_element_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 23160 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let element : 'tv_aexpr = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_comma_ in
        let _v : 'tv_nonempty_list_start_aexpr_TEllipsis_ = 
# 2388 "parser_cocci_menhir.mly"
    ( fun build_dots build_comma ->
      element::[Ast0.wrap(build_comma(P.clt2mcode "," comma))] )
# 23169 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = remainder;
          MenhirLib.EngineTypes.startp = _startpos_remainder_;
          MenhirLib.EngineTypes.endp = _endpos_remainder_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = comma;
            MenhirLib.EngineTypes.startp = _startpos_comma_;
            MenhirLib.EngineTypes.endp = _endpos_comma_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = element;
              MenhirLib.EngineTypes.startp = _startpos_element_;
              MenhirLib.EngineTypes.endp = _endpos_element_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let remainder : 'tv_nonempty_list_start_aexpr_TEllipsis_ = Obj.magic remainder in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 23201 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let element : 'tv_aexpr = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_remainder_ in
        let _v : 'tv_nonempty_list_start_aexpr_TEllipsis_ = 
# 2391 "parser_cocci_menhir.mly"
    ( fun build_dots build_comma ->
      element::(Ast0.wrap(build_comma(P.clt2mcode "," comma)))::
      (remainder build_dots build_comma) )
# 23211 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = list;
          MenhirLib.EngineTypes.startp = _startpos_list_;
          MenhirLib.EngineTypes.endp = _endpos_list_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let list : 'tv_nonempty_list_start_aexpr_TEllipsis_ = Obj.magic list in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_list_ in
        let _v : 'tv_nonempty_list_start_aexpr_TEllipsis_ = 
# 2394 "parser_cocci_menhir.mly"
                                                 ( list )
# 23239 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = dotter;
          MenhirLib.EngineTypes.startp = _startpos_dotter_;
          MenhirLib.EngineTypes.endp = _endpos_dotter_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let dotter : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 23260 "parser_cocci_menhir.ml"
        ) = Obj.magic dotter in
        let _startpos = _startpos_dotter_ in
        let _endpos = _endpos_dotter_ in
        let _v : 'tv_nonempty_list_start_aexpr_TEllipsis_ = 
# 2395 "parser_cocci_menhir.mly"
                ( fun build_dots build_comma -> [(build_dots "..." dotter)] )
# 23267 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = comma;
          MenhirLib.EngineTypes.startp = _startpos_comma_;
          MenhirLib.EngineTypes.endp = _endpos_comma_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = dotter;
            MenhirLib.EngineTypes.startp = _startpos_dotter_;
            MenhirLib.EngineTypes.endp = _endpos_dotter_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 23293 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let dotter : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 23298 "parser_cocci_menhir.ml"
        ) = Obj.magic dotter in
        let _startpos = _startpos_dotter_ in
        let _endpos = _endpos_comma_ in
        let _v : 'tv_nonempty_list_start_aexpr_TEllipsis_ = 
# 2397 "parser_cocci_menhir.mly"
      ( fun build_dots build_comma ->
	[(build_dots "..." dotter);Ast0.wrap(build_comma(P.clt2mcode "," comma))] )
# 23306 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = remainder;
          MenhirLib.EngineTypes.startp = _startpos_remainder_;
          MenhirLib.EngineTypes.endp = _endpos_remainder_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = comma;
            MenhirLib.EngineTypes.startp = _startpos_comma_;
            MenhirLib.EngineTypes.endp = _endpos_comma_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = dotter;
              MenhirLib.EngineTypes.startp = _startpos_dotter_;
              MenhirLib.EngineTypes.endp = _endpos_dotter_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let remainder : 'tv_continue_list_aexpr_TEllipsis_ = Obj.magic remainder in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 23338 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let dotter : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 23343 "parser_cocci_menhir.ml"
        ) = Obj.magic dotter in
        let _startpos = _startpos_dotter_ in
        let _endpos = _endpos_remainder_ in
        let _v : 'tv_nonempty_list_start_aexpr_TEllipsis_ = 
# 2400 "parser_cocci_menhir.mly"
    ( fun build_dots build_comma ->
      (build_dots "..." dotter)::
      (Ast0.wrap(build_comma(P.clt2mcode "," comma)))::
      (remainder build_dots build_comma) )
# 23353 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = element;
          MenhirLib.EngineTypes.startp = _startpos_element_;
          MenhirLib.EngineTypes.endp = _endpos_element_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let element : 'tv_dparam = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_element_ in
        let _v : 'tv_nonempty_list_start_dparam_TEllipsis_ = 
# 2386 "parser_cocci_menhir.mly"
               ( fun build_dots build_comma -> [element] )
# 23377 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = comma;
          MenhirLib.EngineTypes.startp = _startpos_comma_;
          MenhirLib.EngineTypes.endp = _endpos_comma_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = element;
            MenhirLib.EngineTypes.startp = _startpos_element_;
            MenhirLib.EngineTypes.endp = _endpos_element_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 23403 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let element : 'tv_dparam = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_comma_ in
        let _v : 'tv_nonempty_list_start_dparam_TEllipsis_ = 
# 2388 "parser_cocci_menhir.mly"
    ( fun build_dots build_comma ->
      element::[Ast0.wrap(build_comma(P.clt2mcode "," comma))] )
# 23412 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = remainder;
          MenhirLib.EngineTypes.startp = _startpos_remainder_;
          MenhirLib.EngineTypes.endp = _endpos_remainder_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = comma;
            MenhirLib.EngineTypes.startp = _startpos_comma_;
            MenhirLib.EngineTypes.endp = _endpos_comma_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = element;
              MenhirLib.EngineTypes.startp = _startpos_element_;
              MenhirLib.EngineTypes.endp = _endpos_element_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let remainder : 'tv_nonempty_list_start_dparam_TEllipsis_ = Obj.magic remainder in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 23444 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let element : 'tv_dparam = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_remainder_ in
        let _v : 'tv_nonempty_list_start_dparam_TEllipsis_ = 
# 2391 "parser_cocci_menhir.mly"
    ( fun build_dots build_comma ->
      element::(Ast0.wrap(build_comma(P.clt2mcode "," comma)))::
      (remainder build_dots build_comma) )
# 23454 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = list;
          MenhirLib.EngineTypes.startp = _startpos_list_;
          MenhirLib.EngineTypes.endp = _endpos_list_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let list : 'tv_nonempty_list_start_dparam_TEllipsis_ = Obj.magic list in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_list_ in
        let _v : 'tv_nonempty_list_start_dparam_TEllipsis_ = 
# 2394 "parser_cocci_menhir.mly"
                                                 ( list )
# 23482 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = dotter;
          MenhirLib.EngineTypes.startp = _startpos_dotter_;
          MenhirLib.EngineTypes.endp = _endpos_dotter_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let dotter : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 23503 "parser_cocci_menhir.ml"
        ) = Obj.magic dotter in
        let _startpos = _startpos_dotter_ in
        let _endpos = _endpos_dotter_ in
        let _v : 'tv_nonempty_list_start_dparam_TEllipsis_ = 
# 2395 "parser_cocci_menhir.mly"
                ( fun build_dots build_comma -> [(build_dots "..." dotter)] )
# 23510 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = comma;
          MenhirLib.EngineTypes.startp = _startpos_comma_;
          MenhirLib.EngineTypes.endp = _endpos_comma_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = dotter;
            MenhirLib.EngineTypes.startp = _startpos_dotter_;
            MenhirLib.EngineTypes.endp = _endpos_dotter_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 23536 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let dotter : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 23541 "parser_cocci_menhir.ml"
        ) = Obj.magic dotter in
        let _startpos = _startpos_dotter_ in
        let _endpos = _endpos_comma_ in
        let _v : 'tv_nonempty_list_start_dparam_TEllipsis_ = 
# 2397 "parser_cocci_menhir.mly"
      ( fun build_dots build_comma ->
	[(build_dots "..." dotter);Ast0.wrap(build_comma(P.clt2mcode "," comma))] )
# 23549 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = remainder;
          MenhirLib.EngineTypes.startp = _startpos_remainder_;
          MenhirLib.EngineTypes.endp = _endpos_remainder_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = comma;
            MenhirLib.EngineTypes.startp = _startpos_comma_;
            MenhirLib.EngineTypes.endp = _endpos_comma_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = dotter;
              MenhirLib.EngineTypes.startp = _startpos_dotter_;
              MenhirLib.EngineTypes.endp = _endpos_dotter_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let remainder : 'tv_continue_list_dparam_TEllipsis_ = Obj.magic remainder in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 23581 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let dotter : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 23586 "parser_cocci_menhir.ml"
        ) = Obj.magic dotter in
        let _startpos = _startpos_dotter_ in
        let _endpos = _endpos_remainder_ in
        let _v : 'tv_nonempty_list_start_dparam_TEllipsis_ = 
# 2400 "parser_cocci_menhir.mly"
    ( fun build_dots build_comma ->
      (build_dots "..." dotter)::
      (Ast0.wrap(build_comma(P.clt2mcode "," comma)))::
      (remainder build_dots build_comma) )
# 23596 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = element;
          MenhirLib.EngineTypes.startp = _startpos_element_;
          MenhirLib.EngineTypes.endp = _endpos_element_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let element : 'tv_enum_decl_one = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_element_ in
        let _v : 'tv_nonempty_list_start_enum_decl_one_edots_when_TEllipsis_enum_decl_one__ = 
# 2386 "parser_cocci_menhir.mly"
               ( fun build_dots build_comma -> [element] )
# 23620 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = comma;
          MenhirLib.EngineTypes.startp = _startpos_comma_;
          MenhirLib.EngineTypes.endp = _endpos_comma_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = element;
            MenhirLib.EngineTypes.startp = _startpos_element_;
            MenhirLib.EngineTypes.endp = _endpos_element_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 23646 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let element : 'tv_enum_decl_one = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_comma_ in
        let _v : 'tv_nonempty_list_start_enum_decl_one_edots_when_TEllipsis_enum_decl_one__ = 
# 2388 "parser_cocci_menhir.mly"
    ( fun build_dots build_comma ->
      element::[Ast0.wrap(build_comma(P.clt2mcode "," comma))] )
# 23655 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = remainder;
          MenhirLib.EngineTypes.startp = _startpos_remainder_;
          MenhirLib.EngineTypes.endp = _endpos_remainder_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = comma;
            MenhirLib.EngineTypes.startp = _startpos_comma_;
            MenhirLib.EngineTypes.endp = _endpos_comma_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = element;
              MenhirLib.EngineTypes.startp = _startpos_element_;
              MenhirLib.EngineTypes.endp = _endpos_element_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let remainder : 'tv_nonempty_list_start_enum_decl_one_edots_when_TEllipsis_enum_decl_one__ = Obj.magic remainder in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 23687 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let element : 'tv_enum_decl_one = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_remainder_ in
        let _v : 'tv_nonempty_list_start_enum_decl_one_edots_when_TEllipsis_enum_decl_one__ = 
# 2391 "parser_cocci_menhir.mly"
    ( fun build_dots build_comma ->
      element::(Ast0.wrap(build_comma(P.clt2mcode "," comma)))::
      (remainder build_dots build_comma) )
# 23697 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = list;
          MenhirLib.EngineTypes.startp = _startpos_list_;
          MenhirLib.EngineTypes.endp = _endpos_list_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let list : 'tv_nonempty_list_start_enum_decl_one_edots_when_TEllipsis_enum_decl_one__ = Obj.magic list in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_list_ in
        let _v : 'tv_nonempty_list_start_enum_decl_one_edots_when_TEllipsis_enum_decl_one__ = 
# 2394 "parser_cocci_menhir.mly"
                                                 ( list )
# 23725 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = dotter;
          MenhirLib.EngineTypes.startp = _startpos_dotter_;
          MenhirLib.EngineTypes.endp = _endpos_dotter_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let dotter : 'tv_edots_when_TEllipsis_enum_decl_one_ = Obj.magic dotter in
        let _startpos = _startpos_dotter_ in
        let _endpos = _endpos_dotter_ in
        let _v : 'tv_nonempty_list_start_enum_decl_one_edots_when_TEllipsis_enum_decl_one__ = 
# 2395 "parser_cocci_menhir.mly"
                ( fun build_dots build_comma -> [(build_dots "..." dotter)] )
# 23749 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = comma;
          MenhirLib.EngineTypes.startp = _startpos_comma_;
          MenhirLib.EngineTypes.endp = _endpos_comma_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = dotter;
            MenhirLib.EngineTypes.startp = _startpos_dotter_;
            MenhirLib.EngineTypes.endp = _endpos_dotter_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 23775 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let dotter : 'tv_edots_when_TEllipsis_enum_decl_one_ = Obj.magic dotter in
        let _startpos = _startpos_dotter_ in
        let _endpos = _endpos_comma_ in
        let _v : 'tv_nonempty_list_start_enum_decl_one_edots_when_TEllipsis_enum_decl_one__ = 
# 2397 "parser_cocci_menhir.mly"
      ( fun build_dots build_comma ->
	[(build_dots "..." dotter);Ast0.wrap(build_comma(P.clt2mcode "," comma))] )
# 23784 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = remainder;
          MenhirLib.EngineTypes.startp = _startpos_remainder_;
          MenhirLib.EngineTypes.endp = _endpos_remainder_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = comma;
            MenhirLib.EngineTypes.startp = _startpos_comma_;
            MenhirLib.EngineTypes.endp = _endpos_comma_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = dotter;
              MenhirLib.EngineTypes.startp = _startpos_dotter_;
              MenhirLib.EngineTypes.endp = _endpos_dotter_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let remainder : 'tv_continue_list_enum_decl_one_edots_when_TEllipsis_enum_decl_one__ = Obj.magic remainder in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 23816 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let dotter : 'tv_edots_when_TEllipsis_enum_decl_one_ = Obj.magic dotter in
        let _startpos = _startpos_dotter_ in
        let _endpos = _endpos_remainder_ in
        let _v : 'tv_nonempty_list_start_enum_decl_one_edots_when_TEllipsis_enum_decl_one__ = 
# 2400 "parser_cocci_menhir.mly"
    ( fun build_dots build_comma ->
      (build_dots "..." dotter)::
      (Ast0.wrap(build_comma(P.clt2mcode "," comma)))::
      (remainder build_dots build_comma) )
# 23827 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = element;
          MenhirLib.EngineTypes.startp = _startpos_element_;
          MenhirLib.EngineTypes.endp = _endpos_element_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let element : 'tv_initialize2 = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_element_ in
        let _v : 'tv_nonempty_list_start_initialize2_edots_when_TEllipsis_initialize__ = 
# 2386 "parser_cocci_menhir.mly"
               ( fun build_dots build_comma -> [element] )
# 23851 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = comma;
          MenhirLib.EngineTypes.startp = _startpos_comma_;
          MenhirLib.EngineTypes.endp = _endpos_comma_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = element;
            MenhirLib.EngineTypes.startp = _startpos_element_;
            MenhirLib.EngineTypes.endp = _endpos_element_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 23877 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let element : 'tv_initialize2 = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_comma_ in
        let _v : 'tv_nonempty_list_start_initialize2_edots_when_TEllipsis_initialize__ = 
# 2388 "parser_cocci_menhir.mly"
    ( fun build_dots build_comma ->
      element::[Ast0.wrap(build_comma(P.clt2mcode "," comma))] )
# 23886 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = remainder;
          MenhirLib.EngineTypes.startp = _startpos_remainder_;
          MenhirLib.EngineTypes.endp = _endpos_remainder_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = comma;
            MenhirLib.EngineTypes.startp = _startpos_comma_;
            MenhirLib.EngineTypes.endp = _endpos_comma_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = element;
              MenhirLib.EngineTypes.startp = _startpos_element_;
              MenhirLib.EngineTypes.endp = _endpos_element_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let remainder : 'tv_nonempty_list_start_initialize2_edots_when_TEllipsis_initialize__ = Obj.magic remainder in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 23918 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let element : 'tv_initialize2 = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_remainder_ in
        let _v : 'tv_nonempty_list_start_initialize2_edots_when_TEllipsis_initialize__ = 
# 2391 "parser_cocci_menhir.mly"
    ( fun build_dots build_comma ->
      element::(Ast0.wrap(build_comma(P.clt2mcode "," comma)))::
      (remainder build_dots build_comma) )
# 23928 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = list;
          MenhirLib.EngineTypes.startp = _startpos_list_;
          MenhirLib.EngineTypes.endp = _endpos_list_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let list : 'tv_nonempty_list_start_initialize2_edots_when_TEllipsis_initialize__ = Obj.magic list in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_list_ in
        let _v : 'tv_nonempty_list_start_initialize2_edots_when_TEllipsis_initialize__ = 
# 2394 "parser_cocci_menhir.mly"
                                                 ( list )
# 23956 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = dotter;
          MenhirLib.EngineTypes.startp = _startpos_dotter_;
          MenhirLib.EngineTypes.endp = _endpos_dotter_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let dotter : 'tv_edots_when_TEllipsis_initialize_ = Obj.magic dotter in
        let _startpos = _startpos_dotter_ in
        let _endpos = _endpos_dotter_ in
        let _v : 'tv_nonempty_list_start_initialize2_edots_when_TEllipsis_initialize__ = 
# 2395 "parser_cocci_menhir.mly"
                ( fun build_dots build_comma -> [(build_dots "..." dotter)] )
# 23980 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = comma;
          MenhirLib.EngineTypes.startp = _startpos_comma_;
          MenhirLib.EngineTypes.endp = _endpos_comma_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = dotter;
            MenhirLib.EngineTypes.startp = _startpos_dotter_;
            MenhirLib.EngineTypes.endp = _endpos_dotter_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 24006 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let dotter : 'tv_edots_when_TEllipsis_initialize_ = Obj.magic dotter in
        let _startpos = _startpos_dotter_ in
        let _endpos = _endpos_comma_ in
        let _v : 'tv_nonempty_list_start_initialize2_edots_when_TEllipsis_initialize__ = 
# 2397 "parser_cocci_menhir.mly"
      ( fun build_dots build_comma ->
	[(build_dots "..." dotter);Ast0.wrap(build_comma(P.clt2mcode "," comma))] )
# 24015 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = remainder;
          MenhirLib.EngineTypes.startp = _startpos_remainder_;
          MenhirLib.EngineTypes.endp = _endpos_remainder_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = comma;
            MenhirLib.EngineTypes.startp = _startpos_comma_;
            MenhirLib.EngineTypes.endp = _endpos_comma_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = dotter;
              MenhirLib.EngineTypes.startp = _startpos_dotter_;
              MenhirLib.EngineTypes.endp = _endpos_dotter_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let remainder : 'tv_continue_list_initialize2_edots_when_TEllipsis_initialize__ = Obj.magic remainder in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 24047 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let dotter : 'tv_edots_when_TEllipsis_initialize_ = Obj.magic dotter in
        let _startpos = _startpos_dotter_ in
        let _endpos = _endpos_remainder_ in
        let _v : 'tv_nonempty_list_start_initialize2_edots_when_TEllipsis_initialize__ = 
# 2400 "parser_cocci_menhir.mly"
    ( fun build_dots build_comma ->
      (build_dots "..." dotter)::
      (Ast0.wrap(build_comma(P.clt2mcode "," comma)))::
      (remainder build_dots build_comma) )
# 24058 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = element;
          MenhirLib.EngineTypes.startp = _startpos_element_;
          MenhirLib.EngineTypes.endp = _endpos_element_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let element : 'tv_one_dec_name_opt_decl_ = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_element_ in
        let _v : 'tv_nonempty_list_start_one_dec_name_opt_decl__TEllipsis_ = 
# 2386 "parser_cocci_menhir.mly"
               ( fun build_dots build_comma -> [element] )
# 24082 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = comma;
          MenhirLib.EngineTypes.startp = _startpos_comma_;
          MenhirLib.EngineTypes.endp = _endpos_comma_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = element;
            MenhirLib.EngineTypes.startp = _startpos_element_;
            MenhirLib.EngineTypes.endp = _endpos_element_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 24108 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let element : 'tv_one_dec_name_opt_decl_ = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_comma_ in
        let _v : 'tv_nonempty_list_start_one_dec_name_opt_decl__TEllipsis_ = 
# 2388 "parser_cocci_menhir.mly"
    ( fun build_dots build_comma ->
      element::[Ast0.wrap(build_comma(P.clt2mcode "," comma))] )
# 24117 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = remainder;
          MenhirLib.EngineTypes.startp = _startpos_remainder_;
          MenhirLib.EngineTypes.endp = _endpos_remainder_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = comma;
            MenhirLib.EngineTypes.startp = _startpos_comma_;
            MenhirLib.EngineTypes.endp = _endpos_comma_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = element;
              MenhirLib.EngineTypes.startp = _startpos_element_;
              MenhirLib.EngineTypes.endp = _endpos_element_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let remainder : 'tv_nonempty_list_start_one_dec_name_opt_decl__TEllipsis_ = Obj.magic remainder in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 24149 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let element : 'tv_one_dec_name_opt_decl_ = Obj.magic element in
        let _startpos = _startpos_element_ in
        let _endpos = _endpos_remainder_ in
        let _v : 'tv_nonempty_list_start_one_dec_name_opt_decl__TEllipsis_ = 
# 2391 "parser_cocci_menhir.mly"
    ( fun build_dots build_comma ->
      element::(Ast0.wrap(build_comma(P.clt2mcode "," comma)))::
      (remainder build_dots build_comma) )
# 24159 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = list;
          MenhirLib.EngineTypes.startp = _startpos_list_;
          MenhirLib.EngineTypes.endp = _endpos_list_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let list : 'tv_nonempty_list_start_one_dec_name_opt_decl__TEllipsis_ = Obj.magic list in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_list_ in
        let _v : 'tv_nonempty_list_start_one_dec_name_opt_decl__TEllipsis_ = 
# 2394 "parser_cocci_menhir.mly"
                                                 ( list )
# 24187 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = dotter;
          MenhirLib.EngineTypes.startp = _startpos_dotter_;
          MenhirLib.EngineTypes.endp = _endpos_dotter_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let dotter : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 24208 "parser_cocci_menhir.ml"
        ) = Obj.magic dotter in
        let _startpos = _startpos_dotter_ in
        let _endpos = _endpos_dotter_ in
        let _v : 'tv_nonempty_list_start_one_dec_name_opt_decl__TEllipsis_ = 
# 2395 "parser_cocci_menhir.mly"
                ( fun build_dots build_comma -> [(build_dots "..." dotter)] )
# 24215 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = comma;
          MenhirLib.EngineTypes.startp = _startpos_comma_;
          MenhirLib.EngineTypes.endp = _endpos_comma_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = dotter;
            MenhirLib.EngineTypes.startp = _startpos_dotter_;
            MenhirLib.EngineTypes.endp = _endpos_dotter_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 24241 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let dotter : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 24246 "parser_cocci_menhir.ml"
        ) = Obj.magic dotter in
        let _startpos = _startpos_dotter_ in
        let _endpos = _endpos_comma_ in
        let _v : 'tv_nonempty_list_start_one_dec_name_opt_decl__TEllipsis_ = 
# 2397 "parser_cocci_menhir.mly"
      ( fun build_dots build_comma ->
	[(build_dots "..." dotter);Ast0.wrap(build_comma(P.clt2mcode "," comma))] )
# 24254 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = remainder;
          MenhirLib.EngineTypes.startp = _startpos_remainder_;
          MenhirLib.EngineTypes.endp = _endpos_remainder_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = comma;
            MenhirLib.EngineTypes.startp = _startpos_comma_;
            MenhirLib.EngineTypes.endp = _endpos_comma_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = dotter;
              MenhirLib.EngineTypes.startp = _startpos_dotter_;
              MenhirLib.EngineTypes.endp = _endpos_dotter_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let remainder : 'tv_continue_list_one_dec_name_opt_decl__TEllipsis_ = Obj.magic remainder in
        let comma : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 24286 "parser_cocci_menhir.ml"
        ) = Obj.magic comma in
        let dotter : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 24291 "parser_cocci_menhir.ml"
        ) = Obj.magic dotter in
        let _startpos = _startpos_dotter_ in
        let _endpos = _endpos_remainder_ in
        let _v : 'tv_nonempty_list_start_one_dec_name_opt_decl__TEllipsis_ = 
# 2400 "parser_cocci_menhir.mly"
    ( fun build_dots build_comma ->
      (build_dots "..." dotter)::
      (Ast0.wrap(build_comma(P.clt2mcode "," comma)))::
      (remainder build_dots build_comma) )
# 24301 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let i : 'tv_ident_or_const = Obj.magic i in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_not_ceq = 
# 2210 "parser_cocci_menhir.mly"
         ( (if !Data.in_iso
	   then failwith "constraints not allowed in iso file");
	   (if !Data.in_generating
	   then failwith "constraints not allowed in a generated rule file");
	   [i] )
# 24333 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let l : 'tv_comma_list_ident_or_const_ = Obj.magic l in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_not_ceq = 
# 2216 "parser_cocci_menhir.mly"
  ( (if !Data.in_iso
	   then failwith "constraints not allowed in iso file");
	   (if !Data.in_generating
	   then failwith "constraints not allowed in a generated rule file");
	   l )
# 24373 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ceq;
          MenhirLib.EngineTypes.startp = _startpos_ceq_;
          MenhirLib.EngineTypes.endp = _endpos_ceq_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let ceq : 'tv_not_ceq = Obj.magic ceq in
        let _startpos = _startpos_ceq_ in
        let _endpos = _endpos_ceq_ in
        let _v : 'tv_not_ceq_or_sub = 
# 2186 "parser_cocci_menhir.mly"
                  (Ast0.NotExpCstrt ceq)
# 24397 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let s : 'tv_sub = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_not_ceq_or_sub = 
# 2187 "parser_cocci_menhir.mly"
                  (Ast0.SubExpCstrt s)
# 24421 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let i : 'tv_pure_ident = Obj.magic i in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_not_eqe = 
# 2191 "parser_cocci_menhir.mly"
         ( (if !Data.in_iso
	   then failwith "constraints not allowed in iso file");
	   (if !Data.in_generating
	   then failwith "constraints not allowed in a generated rule file");
	   [Ast0.wrap(Ast0.Ident(Ast0.wrap(Ast0.Id(P.id2mcode i))))]
	 )
# 24454 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let l : 'tv_comma_list_pure_ident_ = Obj.magic l in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_not_eqe = 
# 2198 "parser_cocci_menhir.mly"
  ( (if !Data.in_iso
	   then failwith "constraints not allowed in iso file");
	   (if !Data.in_generating
	   then failwith "constraints not allowed in a generated rule file");
	   List.map
	     (function i ->
		Ast0.wrap(Ast0.Ident(Ast0.wrap(Ast0.Id(P.id2mcode i)))))
	     l
	 )
# 24498 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let i : 'tv_pure_ident_or_meta_ident = Obj.magic i in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_not_eqid = 
# 2148 "parser_cocci_menhir.mly"
         ( (if !Data.in_iso
	   then failwith "constraints not allowed in iso file");
	   (if !Data.in_generating
           (* pb: constraints not stored with metavars; too lazy to search for
	      them in the pattern *)
	   then failwith "constraints not allowed in a generated rule file");
	   (match i with
	     (Some rn,id) ->
	       let i =
		 P.check_inherited_constraint i
		   (function mv -> Ast.MetaIdDecl(Ast.NONE,mv)) in
	       Ast.IdNegIdSet([],[i])
	   | (None,i) -> Ast.IdNegIdSet([i],[])) )
# 24538 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let l : 'tv_comma_list_pure_ident_or_meta_ident_ = Obj.magic l in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_not_eqid = 
# 2162 "parser_cocci_menhir.mly"
  ( (if !Data.in_iso
	   then failwith "constraints not allowed in iso file");
	   (if !Data.in_generating
	   then failwith "constraints not allowed in a generated rule file");
	   let (str,meta) =
	     List.fold_left
	       (function (str,meta) ->
		 function
		   (Some rn,id) as i ->
		     let i =
		       P.check_inherited_constraint i
			 (function mv -> Ast.MetaIdDecl(Ast.NONE,mv)) in
		     (str,i::meta)
		 | (None,i) -> (i::str,meta))
	       ([],[]) l in
	   Ast.IdNegIdSet(str,meta)
	 )
# 24590 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let i : 'tv_meta_ident = Obj.magic i in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_not_pos = 
# 2255 "parser_cocci_menhir.mly"
         ( (if !Data.in_iso
	   then failwith "constraints not allowed in iso file");
	   (if !Data.in_generating
	   then failwith "constraints not allowed in a generated rule file");
	   let i =
	     P.check_inherited_constraint i
	       (function mv -> Ast.MetaPosDecl(Ast.NONE,mv)) in
	   [i] )
# 24625 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let l : 'tv_comma_list_meta_ident_ = Obj.magic l in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_not_pos = 
# 2264 "parser_cocci_menhir.mly"
  ( (if !Data.in_iso
	   then failwith "constraints not allowed in iso file");
	   (if !Data.in_generating
	   then failwith "constraints not allowed in a generated rule file");
	   List.map
	     (function i ->
	       P.check_inherited_constraint i
		 (function mv -> Ast.MetaPosDecl(Ast.NONE,mv)))
	     l )
# 24669 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = arg;
          MenhirLib.EngineTypes.startp = _startpos_arg_;
          MenhirLib.EngineTypes.endp = _endpos_arg_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let arg : 'tv_decl = Obj.magic arg in
        let _startpos = _startpos_arg_ in
        let _endpos = _endpos_arg_ in
        let _v : 'tv_one_arg_decl_ = 
# 1210 "parser_cocci_menhir.mly"
           ( arg )
# 24693 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = metaparamlist;
          MenhirLib.EngineTypes.startp = _startpos_metaparamlist_;
          MenhirLib.EngineTypes.endp = _endpos_metaparamlist_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let metaparamlist : (
# 225 "parser_cocci_menhir.mly"
       (Parse_aux.list_info)
# 24714 "parser_cocci_menhir.ml"
        ) = Obj.magic metaparamlist in
        let _startpos = _startpos_metaparamlist_ in
        let _endpos = _endpos_metaparamlist_ in
        let _v : 'tv_one_arg_decl_ = 
# 1212 "parser_cocci_menhir.mly"
    ( let (nm,lenname,pure,clt) = metaparamlist in
      let nm = P.clt2mcode nm clt in
      let lenname =
	match lenname with
	  Ast.AnyLen -> Ast0.AnyListLen
	| Ast.MetaLen nm -> Ast0.MetaListLen(P.clt2mcode nm clt)
	| Ast.CstLen n -> Ast0.CstListLen n in
      Ast0.wrap(Ast0.MetaParamList(nm,lenname,pure)) )
# 24728 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = arg;
          MenhirLib.EngineTypes.startp = _startpos_arg_;
          MenhirLib.EngineTypes.endp = _endpos_arg_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let arg : 'tv_name_opt_decl = Obj.magic arg in
        let _startpos = _startpos_arg_ in
        let _endpos = _endpos_arg_ in
        let _v : 'tv_one_arg_name_opt_decl_ = 
# 1210 "parser_cocci_menhir.mly"
           ( arg )
# 24752 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = metaparamlist;
          MenhirLib.EngineTypes.startp = _startpos_metaparamlist_;
          MenhirLib.EngineTypes.endp = _endpos_metaparamlist_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let metaparamlist : (
# 225 "parser_cocci_menhir.mly"
       (Parse_aux.list_info)
# 24773 "parser_cocci_menhir.ml"
        ) = Obj.magic metaparamlist in
        let _startpos = _startpos_metaparamlist_ in
        let _endpos = _endpos_metaparamlist_ in
        let _v : 'tv_one_arg_name_opt_decl_ = 
# 1212 "parser_cocci_menhir.mly"
    ( let (nm,lenname,pure,clt) = metaparamlist in
      let nm = P.clt2mcode nm clt in
      let lenname =
	match lenname with
	  Ast.AnyLen -> Ast0.AnyListLen
	| Ast.MetaLen nm -> Ast0.MetaListLen(P.clt2mcode nm clt)
	| Ast.CstLen n -> Ast0.CstListLen n in
      Ast0.wrap(Ast0.MetaParamList(nm,lenname,pure)) )
# 24787 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_name_opt_decl = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_one_dec_name_opt_decl_ = 
# 2361 "parser_cocci_menhir.mly"
        ( _1 )
# 24811 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 225 "parser_cocci_menhir.mly"
       (Parse_aux.list_info)
# 24832 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_one_dec_name_opt_decl_ = 
# 2363 "parser_cocci_menhir.mly"
    ( let (nm,lenname,pure,clt) = _1 in
    let nm = P.clt2mcode nm clt in
      let lenname =
	match lenname with
	  Ast.AnyLen -> Ast0.AnyListLen
	| Ast.MetaLen nm -> Ast0.MetaListLen(P.clt2mcode nm clt)
	| Ast.CstLen n -> Ast0.CstListLen n in
    Ast0.wrap(Ast0.MetaParamList(nm,lenname,pure)) )
# 24846 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 24872 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = 
# 1542 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.TyDecl(t,P.clt2mcode ";" pv)) )
# 24880 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 224 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 24901 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_one_decl_var = 
# 1543 "parser_cocci_menhir.mly"
              ( P.meta_decl _1 )
# 24908 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 24939 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_d_ident = Obj.magic d in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let s =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 24949 "parser_cocci_menhir.ml"
          
        in
        
# 1545 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        Ast0.wrap(Ast0.UnInit(s,fn t,id,P.clt2mcode ";" pv)) )
# 24956 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 24992 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_d_ident = Obj.magic d in
        let t : 'tv_ctype = Obj.magic t in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let s =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 25004 "parser_cocci_menhir.ml"
          
        in
        
# 1545 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        Ast0.wrap(Ast0.UnInit(s,fn t,id,P.clt2mcode ";" pv)) )
# 25011 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = f;
          MenhirLib.EngineTypes.startp = _startpos_f_;
          MenhirLib.EngineTypes.endp = _endpos_f_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let f : 'tv_funproto = Obj.magic f in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_f_ in
        let _v : 'tv_one_decl_var = 
# 1547 "parser_cocci_menhir.mly"
               ( f )
# 25035 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = d;
                MenhirLib.EngineTypes.startp = _startpos_d_;
                MenhirLib.EngineTypes.endp = _endpos_d_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = t;
                  MenhirLib.EngineTypes.startp = _startpos_t_;
                  MenhirLib.EngineTypes.endp = _endpos_t_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 25076 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 25082 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let d : 'tv_d_ident = Obj.magic d in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let s =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 25092 "parser_cocci_menhir.ml"
          
        in
        
# 1549 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
      Ast0.wrap(Ast0.Init(s,fn t,id,P.clt2mcode "=" q,e,P.clt2mcode ";" pv)) )
# 25099 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = d;
                MenhirLib.EngineTypes.startp = _startpos_d_;
                MenhirLib.EngineTypes.endp = _endpos_d_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = t;
                  MenhirLib.EngineTypes.startp = _startpos_t_;
                  MenhirLib.EngineTypes.endp = _endpos_t_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x0;
                    MenhirLib.EngineTypes.startp = _startpos_x0_;
                    MenhirLib.EngineTypes.endp = _endpos_x0_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 25145 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 25151 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let d : 'tv_d_ident = Obj.magic d in
        let t : 'tv_ctype = Obj.magic t in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let s =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 25163 "parser_cocci_menhir.ml"
          
        in
        
# 1549 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
      Ast0.wrap(Ast0.Init(s,fn t,id,P.clt2mcode "=" q,e,P.clt2mcode ";" pv)) )
# 25170 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 25201 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident_or_symbol = Obj.magic i in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let cv =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 25211 "parser_cocci_menhir.ml"
          
        in
        let s =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 25218 "parser_cocci_menhir.ml"
          
        in
        
# 1554 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
	Ast0.wrap(Ast0.UnInit(s,fn idtype,id,P.clt2mcode ";" pv)) )
# 25226 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 25262 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident_or_symbol = Obj.magic i in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let cv =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 25274 "parser_cocci_menhir.ml"
          
        in
        let s =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 25281 "parser_cocci_menhir.ml"
          
        in
        
# 1554 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
	Ast0.wrap(Ast0.UnInit(s,fn idtype,id,P.clt2mcode ";" pv)) )
# 25289 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 25325 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident_or_symbol = Obj.magic i in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let cv =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 25336 "parser_cocci_menhir.ml"
          
        in
        let s =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 25344 "parser_cocci_menhir.ml"
          
        in
        
# 1554 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
	Ast0.wrap(Ast0.UnInit(s,fn idtype,id,P.clt2mcode ";" pv)) )
# 25352 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = x1;
                MenhirLib.EngineTypes.startp = _startpos_x1_;
                MenhirLib.EngineTypes.endp = _endpos_x1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x0;
                  MenhirLib.EngineTypes.startp = _startpos_x0_;
                  MenhirLib.EngineTypes.endp = _endpos_x0_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 25393 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident_or_symbol = Obj.magic i in
        let x1 : 'tv_const_vol = Obj.magic x1 in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let cv =
          let x = x1 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 25406 "parser_cocci_menhir.ml"
          
        in
        let s =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 25414 "parser_cocci_menhir.ml"
          
        in
        
# 1554 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
	Ast0.wrap(Ast0.UnInit(s,fn idtype,id,P.clt2mcode ";" pv)) )
# 25422 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = d;
                MenhirLib.EngineTypes.startp = _startpos_d_;
                MenhirLib.EngineTypes.endp = _endpos_d_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = i;
                  MenhirLib.EngineTypes.startp = _startpos_i_;
                  MenhirLib.EngineTypes.endp = _endpos_i_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 25463 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 25469 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident_or_symbol = Obj.magic i in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let cv =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 25479 "parser_cocci_menhir.ml"
          
        in
        let s =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 25486 "parser_cocci_menhir.ml"
          
        in
        
# 1559 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
      !Data.add_type_name (P.id2name i);
      let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
      Ast0.wrap(Ast0.Init(s,fn idtype,id,P.clt2mcode "=" q,e,
			   P.clt2mcode ";" pv)) )
# 25496 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = d;
                MenhirLib.EngineTypes.startp = _startpos_d_;
                MenhirLib.EngineTypes.endp = _endpos_d_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = i;
                  MenhirLib.EngineTypes.startp = _startpos_i_;
                  MenhirLib.EngineTypes.endp = _endpos_i_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x0;
                    MenhirLib.EngineTypes.startp = _startpos_x0_;
                    MenhirLib.EngineTypes.endp = _endpos_x0_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 25542 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 25548 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident_or_symbol = Obj.magic i in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let cv =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 25560 "parser_cocci_menhir.ml"
          
        in
        let s =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 25567 "parser_cocci_menhir.ml"
          
        in
        
# 1559 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
      !Data.add_type_name (P.id2name i);
      let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
      Ast0.wrap(Ast0.Init(s,fn idtype,id,P.clt2mcode "=" q,e,
			   P.clt2mcode ";" pv)) )
# 25577 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = d;
                MenhirLib.EngineTypes.startp = _startpos_d_;
                MenhirLib.EngineTypes.endp = _endpos_d_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = i;
                  MenhirLib.EngineTypes.startp = _startpos_i_;
                  MenhirLib.EngineTypes.endp = _endpos_i_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x0;
                    MenhirLib.EngineTypes.startp = _startpos_x0_;
                    MenhirLib.EngineTypes.endp = _endpos_x0_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 25623 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 25629 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident_or_symbol = Obj.magic i in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let cv =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 25640 "parser_cocci_menhir.ml"
          
        in
        let s =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 25648 "parser_cocci_menhir.ml"
          
        in
        
# 1559 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
      !Data.add_type_name (P.id2name i);
      let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
      Ast0.wrap(Ast0.Init(s,fn idtype,id,P.clt2mcode "=" q,e,
			   P.clt2mcode ";" pv)) )
# 25658 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = d;
                MenhirLib.EngineTypes.startp = _startpos_d_;
                MenhirLib.EngineTypes.endp = _endpos_d_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = i;
                  MenhirLib.EngineTypes.startp = _startpos_i_;
                  MenhirLib.EngineTypes.endp = _endpos_i_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = x1;
                    MenhirLib.EngineTypes.startp = _startpos_x1_;
                    MenhirLib.EngineTypes.endp = _endpos_x1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = x0;
                      MenhirLib.EngineTypes.startp = _startpos_x0_;
                      MenhirLib.EngineTypes.endp = _endpos_x0_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 25709 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 25715 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident_or_symbol = Obj.magic i in
        let x1 : 'tv_const_vol = Obj.magic x1 in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let cv =
          let x = x1 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 25728 "parser_cocci_menhir.ml"
          
        in
        let s =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 25736 "parser_cocci_menhir.ml"
          
        in
        
# 1559 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
      !Data.add_type_name (P.id2name i);
      let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
      Ast0.wrap(Ast0.Init(s,fn idtype,id,P.clt2mcode "=" q,e,
			   P.clt2mcode ";" pv)) )
# 25746 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = rp2;
            MenhirLib.EngineTypes.startp = _startpos_rp2_;
            MenhirLib.EngineTypes.endp = _endpos_rp2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = p;
              MenhirLib.EngineTypes.startp = _startpos_p_;
              MenhirLib.EngineTypes.endp = _endpos_p_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = lp2;
                MenhirLib.EngineTypes.startp = _startpos_lp2_;
                MenhirLib.EngineTypes.endp = _endpos_lp2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = rp1;
                  MenhirLib.EngineTypes.startp = _startpos_rp1_;
                  MenhirLib.EngineTypes.endp = _endpos_rp1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = d;
                    MenhirLib.EngineTypes.startp = _startpos_d_;
                    MenhirLib.EngineTypes.endp = _endpos_d_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = st;
                      MenhirLib.EngineTypes.startp = _startpos_st_;
                      MenhirLib.EngineTypes.endp = _endpos_st_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = lp1;
                        MenhirLib.EngineTypes.startp = _startpos_lp1_;
                        MenhirLib.EngineTypes.endp = _endpos_lp1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = t;
                          MenhirLib.EngineTypes.startp = _startpos_t_;
                          MenhirLib.EngineTypes.endp = _endpos_t_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 25807 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let rp2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 25812 "parser_cocci_menhir.ml"
        ) = Obj.magic rp2 in
        let p : 'tv_decl_list_name_opt_decl_ = Obj.magic p in
        let lp2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 25818 "parser_cocci_menhir.ml"
        ) = Obj.magic lp2 in
        let rp1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 25823 "parser_cocci_menhir.ml"
        ) = Obj.magic rp1 in
        let d : 'tv_d_ident = Obj.magic d in
        let st : (
# 263 "parser_cocci_menhir.mly"
       (Data.clt)
# 25829 "parser_cocci_menhir.ml"
        ) = Obj.magic st in
        let lp1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 25834 "parser_cocci_menhir.ml"
        ) = Obj.magic lp1 in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let s =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 25843 "parser_cocci_menhir.ml"
          
        in
        
# 1569 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        let t =
	  Ast0.wrap
	    (Ast0.FunctionPointer
	       (t,P.clt2mcode "(" lp1,P.clt2mcode "*" st,P.clt2mcode ")" rp1,
		P.clt2mcode "(" lp2,p,P.clt2mcode ")" rp2)) in
        Ast0.wrap(Ast0.UnInit(s,fn t,id,P.clt2mcode ";" pv)) )
# 25855 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = rp2;
            MenhirLib.EngineTypes.startp = _startpos_rp2_;
            MenhirLib.EngineTypes.endp = _endpos_rp2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = p;
              MenhirLib.EngineTypes.startp = _startpos_p_;
              MenhirLib.EngineTypes.endp = _endpos_p_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = lp2;
                MenhirLib.EngineTypes.startp = _startpos_lp2_;
                MenhirLib.EngineTypes.endp = _endpos_lp2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = rp1;
                  MenhirLib.EngineTypes.startp = _startpos_rp1_;
                  MenhirLib.EngineTypes.endp = _endpos_rp1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = d;
                    MenhirLib.EngineTypes.startp = _startpos_d_;
                    MenhirLib.EngineTypes.endp = _endpos_d_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = st;
                      MenhirLib.EngineTypes.startp = _startpos_st_;
                      MenhirLib.EngineTypes.endp = _endpos_st_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = lp1;
                        MenhirLib.EngineTypes.startp = _startpos_lp1_;
                        MenhirLib.EngineTypes.endp = _endpos_lp1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = t;
                          MenhirLib.EngineTypes.startp = _startpos_t_;
                          MenhirLib.EngineTypes.endp = _endpos_t_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = x0;
                            MenhirLib.EngineTypes.startp = _startpos_x0_;
                            MenhirLib.EngineTypes.endp = _endpos_x0_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 25921 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let rp2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 25926 "parser_cocci_menhir.ml"
        ) = Obj.magic rp2 in
        let p : 'tv_decl_list_name_opt_decl_ = Obj.magic p in
        let lp2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 25932 "parser_cocci_menhir.ml"
        ) = Obj.magic lp2 in
        let rp1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 25937 "parser_cocci_menhir.ml"
        ) = Obj.magic rp1 in
        let d : 'tv_d_ident = Obj.magic d in
        let st : (
# 263 "parser_cocci_menhir.mly"
       (Data.clt)
# 25943 "parser_cocci_menhir.ml"
        ) = Obj.magic st in
        let lp1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 25948 "parser_cocci_menhir.ml"
        ) = Obj.magic lp1 in
        let t : 'tv_ctype = Obj.magic t in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let s =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 25959 "parser_cocci_menhir.ml"
          
        in
        
# 1569 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        let t =
	  Ast0.wrap
	    (Ast0.FunctionPointer
	       (t,P.clt2mcode "(" lp1,P.clt2mcode "*" st,P.clt2mcode ")" rp1,
		P.clt2mcode "(" lp2,p,P.clt2mcode ")" rp2)) in
        Ast0.wrap(Ast0.UnInit(s,fn t,id,P.clt2mcode ";" pv)) )
# 25971 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let _5 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 26012 "parser_cocci_menhir.ml"
        ) = Obj.magic _5 in
        let _4 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 26017 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr_list_option = Obj.magic _3 in
        let _2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 26023 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_decl_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_one_decl_var = 
# 1577 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.MacroDecl(_1,P.clt2mcode "(" _2,_3,
				  P.clt2mcode ")" _4,P.clt2mcode ";" _5)) )
# 26032 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let _7 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 26083 "parser_cocci_menhir.ml"
        ) = Obj.magic _7 in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 26089 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let _4 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 26094 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr_list_option = Obj.magic _3 in
        let _2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 26100 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_decl_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_one_decl_var = 
# 1580 "parser_cocci_menhir.mly"
      ( Ast0.wrap
            (Ast0.MacroDeclInit
               (_1,P.clt2mcode "(" _2,_3,
                P.clt2mcode ")" _4,P.clt2mcode "=" q,e,
                P.clt2mcode ";" _7)) )
# 26112 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = rp2;
                MenhirLib.EngineTypes.startp = _startpos_rp2_;
                MenhirLib.EngineTypes.endp = _endpos_rp2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = p;
                  MenhirLib.EngineTypes.startp = _startpos_p_;
                  MenhirLib.EngineTypes.endp = _endpos_p_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = lp2;
                    MenhirLib.EngineTypes.startp = _startpos_lp2_;
                    MenhirLib.EngineTypes.endp = _endpos_lp2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = rp1;
                      MenhirLib.EngineTypes.startp = _startpos_rp1_;
                      MenhirLib.EngineTypes.endp = _endpos_rp1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = d;
                        MenhirLib.EngineTypes.startp = _startpos_d_;
                        MenhirLib.EngineTypes.endp = _endpos_d_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = st;
                          MenhirLib.EngineTypes.startp = _startpos_st_;
                          MenhirLib.EngineTypes.endp = _endpos_st_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.semv = lp1;
                            MenhirLib.EngineTypes.startp = _startpos_lp1_;
                            MenhirLib.EngineTypes.endp = _endpos_lp1_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = t;
                              MenhirLib.EngineTypes.startp = _startpos_t_;
                              MenhirLib.EngineTypes.endp = _endpos_t_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 26183 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 26189 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let rp2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 26194 "parser_cocci_menhir.ml"
        ) = Obj.magic rp2 in
        let p : 'tv_decl_list_name_opt_decl_ = Obj.magic p in
        let lp2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 26200 "parser_cocci_menhir.ml"
        ) = Obj.magic lp2 in
        let rp1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 26205 "parser_cocci_menhir.ml"
        ) = Obj.magic rp1 in
        let d : 'tv_d_ident = Obj.magic d in
        let st : (
# 263 "parser_cocci_menhir.mly"
       (Data.clt)
# 26211 "parser_cocci_menhir.ml"
        ) = Obj.magic st in
        let lp1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 26216 "parser_cocci_menhir.ml"
        ) = Obj.magic lp1 in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let s =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 26225 "parser_cocci_menhir.ml"
          
        in
        
# 1589 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        let t =
	  Ast0.wrap
	    (Ast0.FunctionPointer
	       (t,P.clt2mcode "(" lp1,P.clt2mcode "*" st,P.clt2mcode ")" rp1,
		P.clt2mcode "(" lp2,p,P.clt2mcode ")" rp2)) in
      Ast0.wrap(Ast0.Init(s,fn t,id,P.clt2mcode "=" q,e,P.clt2mcode ";" pv)))
# 26237 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = q;
              MenhirLib.EngineTypes.startp = _startpos_q_;
              MenhirLib.EngineTypes.endp = _endpos_q_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = rp2;
                MenhirLib.EngineTypes.startp = _startpos_rp2_;
                MenhirLib.EngineTypes.endp = _endpos_rp2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = p;
                  MenhirLib.EngineTypes.startp = _startpos_p_;
                  MenhirLib.EngineTypes.endp = _endpos_p_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = lp2;
                    MenhirLib.EngineTypes.startp = _startpos_lp2_;
                    MenhirLib.EngineTypes.endp = _endpos_lp2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = rp1;
                      MenhirLib.EngineTypes.startp = _startpos_rp1_;
                      MenhirLib.EngineTypes.endp = _endpos_rp1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = d;
                        MenhirLib.EngineTypes.startp = _startpos_d_;
                        MenhirLib.EngineTypes.endp = _endpos_d_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.semv = st;
                          MenhirLib.EngineTypes.startp = _startpos_st_;
                          MenhirLib.EngineTypes.endp = _endpos_st_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.semv = lp1;
                            MenhirLib.EngineTypes.startp = _startpos_lp1_;
                            MenhirLib.EngineTypes.endp = _endpos_lp1_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.semv = t;
                              MenhirLib.EngineTypes.startp = _startpos_t_;
                              MenhirLib.EngineTypes.endp = _endpos_t_;
                              MenhirLib.EngineTypes.next = {
                                MenhirLib.EngineTypes.state = _menhir_s;
                                MenhirLib.EngineTypes.semv = x0;
                                MenhirLib.EngineTypes.startp = _startpos_x0_;
                                MenhirLib.EngineTypes.endp = _endpos_x0_;
                                MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 26313 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let e : 'tv_initialize = Obj.magic e in
        let q : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 26319 "parser_cocci_menhir.ml"
        ) = Obj.magic q in
        let rp2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 26324 "parser_cocci_menhir.ml"
        ) = Obj.magic rp2 in
        let p : 'tv_decl_list_name_opt_decl_ = Obj.magic p in
        let lp2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 26330 "parser_cocci_menhir.ml"
        ) = Obj.magic lp2 in
        let rp1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 26335 "parser_cocci_menhir.ml"
        ) = Obj.magic rp1 in
        let d : 'tv_d_ident = Obj.magic d in
        let st : (
# 263 "parser_cocci_menhir.mly"
       (Data.clt)
# 26341 "parser_cocci_menhir.ml"
        ) = Obj.magic st in
        let lp1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 26346 "parser_cocci_menhir.ml"
        ) = Obj.magic lp1 in
        let t : 'tv_ctype = Obj.magic t in
        let x0 : 'tv_storage = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_one_decl_var = let s =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 26357 "parser_cocci_menhir.ml"
          
        in
        
# 1589 "parser_cocci_menhir.mly"
      ( let (id,fn) = d in
        let t =
	  Ast0.wrap
	    (Ast0.FunctionPointer
	       (t,P.clt2mcode "(" lp1,P.clt2mcode "*" st,P.clt2mcode ")" rp1,
		P.clt2mcode "(" lp2,p,P.clt2mcode ")" rp2)) in
      Ast0.wrap(Ast0.Init(s,fn t,id,P.clt2mcode "=" q,e,P.clt2mcode ";" pv)))
# 26369 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_option_TLocal_ = 
# 29 "/usr/share/menhir/standard.mly"
    ( None )
# 26386 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : unit = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_TLocal_ = 
# 31 "/usr/share/menhir/standard.mly"
    ( Some x )
# 26410 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_option_TPosAny_ = 
# 29 "/usr/share/menhir/standard.mly"
    ( None )
# 26427 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : unit = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_TPosAny_ = 
# 31 "/usr/share/menhir/standard.mly"
    ( Some x )
# 26451 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_option_eexpr_ = 
# 29 "/usr/share/menhir/standard.mly"
    ( None )
# 26468 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_eexpr = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_eexpr_ = 
# 31 "/usr/share/menhir/standard.mly"
    ( Some x )
# 26492 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_option_expr_ = 
# 29 "/usr/share/menhir/standard.mly"
    ( None )
# 26509 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_expr = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_expr_ = 
# 31 "/usr/share/menhir/standard.mly"
    ( Some x )
# 26533 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_option_not_ceq_or_sub_ = 
# 29 "/usr/share/menhir/standard.mly"
    ( None )
# 26550 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_not_ceq_or_sub = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_not_ceq_or_sub_ = 
# 31 "/usr/share/menhir/standard.mly"
    ( Some x )
# 26574 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_option_re_only_ = 
# 29 "/usr/share/menhir/standard.mly"
    ( None )
# 26591 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_re_only = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_re_only_ = 
# 31 "/usr/share/menhir/standard.mly"
    ( Some x )
# 26615 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_option_re_or_not_eqe_or_sub_ = 
# 29 "/usr/share/menhir/standard.mly"
    ( None )
# 26632 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_re_or_not_eqe_or_sub = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_re_or_not_eqe_or_sub_ = 
# 31 "/usr/share/menhir/standard.mly"
    ( Some x )
# 26656 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_option_re_or_not_eqid_ = 
# 29 "/usr/share/menhir/standard.mly"
    ( None )
# 26673 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_re_or_not_eqid = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_option_re_or_not_eqid_ = 
# 31 "/usr/share/menhir/standard.mly"
    ( Some x )
# 26697 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_plus_after_dots = 
# 2526 "parser_cocci_menhir.mly"
                                                                         ([])
# 26714 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_plus_after_exp = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_plus_after_dots = 
# 2527 "parser_cocci_menhir.mly"
                                                                         (_2)
# 26742 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_plus_after_exp = Obj.magic _2 in
        let _1 : 'tv_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_plus_after_dots = 
# 2529 "parser_cocci_menhir.mly"
                     ( (Ast0.wrap(Ast0.OTHER(Ast0.wrap(Ast0.Exp(_1)))))::_2 )
# 26772 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_plus_after_stm = Obj.magic _2 in
        let _1 : 'tv_fundecl = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_plus_after_dots = 
# 2530 "parser_cocci_menhir.mly"
                                             ( Ast0.wrap(Ast0.OTHER(_1))::_2 )
# 26802 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_plus_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_plus_after_dots = 
# 2532 "parser_cocci_menhir.mly"
                ( (List.map (function x -> Ast0.wrap(Ast0.OTHER(x))) _1)@_2 )
# 26832 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_plus_after_exp = 
# 2522 "parser_cocci_menhir.mly"
                                                                         ([])
# 26849 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_plus_after_dots = Obj.magic _2 in
        let _1 : 'tv_stm_dots = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_plus_after_exp = 
# 2523 "parser_cocci_menhir.mly"
                                          ( (Ast0.wrap(Ast0.OTHER(_1)))::_2 )
# 26879 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_plus_after_stm = 
# 2535 "parser_cocci_menhir.mly"
                                                                         ([])
# 26896 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_plus_after_dots = Obj.magic _2 in
        let _1 : 'tv_stm_dots = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_plus_after_stm = 
# 2536 "parser_cocci_menhir.mly"
                                          ( (Ast0.wrap(Ast0.OTHER(_1)))::_2 )
# 26926 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_plus_after_stm = Obj.magic _2 in
        let _1 : 'tv_fundecl = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_plus_after_stm = 
# 2537 "parser_cocci_menhir.mly"
                                             ( Ast0.wrap(Ast0.OTHER(_1))::_2 )
# 26956 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_plus_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_plus_after_stm = 
# 2539 "parser_cocci_menhir.mly"
                ( (List.map (function x -> Ast0.wrap(Ast0.OTHER(x))) _1)@_2 )
# 26986 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = f;
            MenhirLib.EngineTypes.startp = _startpos_f_;
            MenhirLib.EngineTypes.endp = _endpos_f_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_loption_plus_start_ = Obj.magic b in
        let f : 'tv_loption_filespec_ = Obj.magic f in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_plus_body = 
# 1027 "parser_cocci_menhir.mly"
    ( f@b(*@ew*) )
# 27016 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = f;
            MenhirLib.EngineTypes.startp = _startpos_f_;
            MenhirLib.EngineTypes.endp = _endpos_f_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_top_eexpr = Obj.magic b in
        let f : 'tv_loption_filespec_ = Obj.magic f in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_plus_exp_body = 
# 1041 "parser_cocci_menhir.mly"
    ( f@[b](*@ew*) )
# 27046 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _1 : 'tv_plus_exp_body = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 314 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 27074 "parser_cocci_menhir.ml"
        ) = 
# 355 "parser_cocci_menhir.mly"
                                 ( _1 )
# 27078 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = p;
            MenhirLib.EngineTypes.startp = _startpos_p_;
            MenhirLib.EngineTypes.endp = _endpos_p_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let p : 'tv_plus_exp_body = Obj.magic p in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 314 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 27106 "parser_cocci_menhir.ml"
        ) = 
# 355 "parser_cocci_menhir.mly"
                                                                    ( p )
# 27110 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = p;
            MenhirLib.EngineTypes.startp = _startpos_p_;
            MenhirLib.EngineTypes.endp = _endpos_p_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let p : 'tv_plus_exp_body = Obj.magic p in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 314 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 27138 "parser_cocci_menhir.ml"
        ) = 
# 356 "parser_cocci_menhir.mly"
                        ( p )
# 27142 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _1 : 'tv_plus_body = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 311 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 27170 "parser_cocci_menhir.ml"
        ) = 
# 349 "parser_cocci_menhir.mly"
                         ( _1 )
# 27174 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = p;
            MenhirLib.EngineTypes.startp = _startpos_p_;
            MenhirLib.EngineTypes.endp = _endpos_p_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let p : 'tv_plus_body = Obj.magic p in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 311 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 27202 "parser_cocci_menhir.ml"
        ) = 
# 349 "parser_cocci_menhir.mly"
                                                        ( p )
# 27206 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = p;
            MenhirLib.EngineTypes.startp = _startpos_p_;
            MenhirLib.EngineTypes.endp = _endpos_p_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let p : 'tv_plus_body = Obj.magic p in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 311 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 27234 "parser_cocci_menhir.ml"
        ) = 
# 350 "parser_cocci_menhir.mly"
                    ( p )
# 27238 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_ctype = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_plus_start = 
# 2511 "parser_cocci_menhir.mly"
                          ( [Ast0.wrap(Ast0.OTHER(Ast0.wrap(Ast0.Ty(_1))))] )
# 27262 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_top_init = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_plus_start = 
# 2512 "parser_cocci_menhir.mly"
                     ( [Ast0.wrap(Ast0.OTHER(Ast0.wrap(Ast0.TopInit(_1))))] )
# 27286 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_plus_after_dots = Obj.magic _2 in
        let _1 : 'tv_stm_dots = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_plus_start = 
# 2514 "parser_cocci_menhir.mly"
                                          ( (Ast0.wrap(Ast0.OTHER(_1)))::_2 )
# 27316 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_plus_after_exp = Obj.magic _2 in
        let _1 : 'tv_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_plus_start = 
# 2516 "parser_cocci_menhir.mly"
                     ( (Ast0.wrap(Ast0.OTHER(Ast0.wrap(Ast0.Exp(_1)))))::_2 )
# 27346 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_plus_after_stm = Obj.magic _2 in
        let _1 : 'tv_fundecl = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_plus_start = 
# 2517 "parser_cocci_menhir.mly"
                                             ( Ast0.wrap(Ast0.OTHER(_1))::_2 )
# 27376 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_plus_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_plus_start = 
# 2519 "parser_cocci_menhir.mly"
                ( (List.map (function x -> Ast0.wrap(Ast0.OTHER(x))) _1)@_2 )
# 27406 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = f;
            MenhirLib.EngineTypes.startp = _startpos_f_;
            MenhirLib.EngineTypes.endp = _endpos_f_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let b : 'tv_top_ctype = Obj.magic b in
        let f : 'tv_loption_filespec_ = Obj.magic f in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_plus_ty_body = 
# 1055 "parser_cocci_menhir.mly"
    ( f@[b](*@ew*) )
# 27436 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _1 : 'tv_plus_exp_body = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 317 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 27464 "parser_cocci_menhir.ml"
        ) = 
# 357 "parser_cocci_menhir.mly"
                                ( _1 )
# 27468 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = p;
            MenhirLib.EngineTypes.startp = _startpos_p_;
            MenhirLib.EngineTypes.endp = _endpos_p_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let p : 'tv_plus_ty_body = Obj.magic p in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 317 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 27496 "parser_cocci_menhir.ml"
        ) = 
# 357 "parser_cocci_menhir.mly"
                                                                  ( p )
# 27500 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = p;
            MenhirLib.EngineTypes.startp = _startpos_p_;
            MenhirLib.EngineTypes.endp = _endpos_p_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let p : 'tv_plus_ty_body = Obj.magic p in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 317 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 27528 "parser_cocci_menhir.ml"
        ) = 
# 358 "parser_cocci_menhir.mly"
                       ( p )
# 27532 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_primary_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_postfix_expr_eexpr_dot_expressions_ = 
# 1921 "parser_cocci_menhir.mly"
                                                 ( _1 )
# 27556 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let _4 : (
# 266 "parser_cocci_menhir.mly"
       (Data.clt)
# 27592 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr = Obj.magic _3 in
        let _2 : (
# 266 "parser_cocci_menhir.mly"
       (Data.clt)
# 27598 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_postfix_expr_eexpr_dot_expressions_ = 
# 1923 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.ArrayAccess (_1,P.clt2mcode "[" _2,_3,
				       P.clt2mcode "]" _4)) )
# 27607 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_disj_ident = Obj.magic _3 in
        let _2 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 27639 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_postfix_expr_eexpr_dot_expressions_ = 
# 1926 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.RecordAccess(_1, P.clt2mcode "." _2, _3)) )
# 27647 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_disj_ident = Obj.magic _3 in
        let _2 : (
# 268 "parser_cocci_menhir.mly"
       (Data.clt)
# 27679 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_postfix_expr_eexpr_dot_expressions_ = 
# 1928 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.RecordPtAccess(_1, P.clt2mcode "->" _2,
				     _3)) )
# 27688 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 248 "parser_cocci_menhir.mly"
       (Data.clt)
# 27714 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_postfix_expr_eexpr_dot_expressions_ = 
# 1931 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Postfix (_1, P.clt2mcode Ast.Inc _2)) )
# 27722 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 248 "parser_cocci_menhir.mly"
       (Data.clt)
# 27748 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_postfix_expr_eexpr_dot_expressions_ = 
# 1933 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Postfix (_1, P.clt2mcode Ast.Dec _2)) )
# 27756 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let _4 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 27792 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr_list_option = Obj.magic _3 in
        let _2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 27798 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_postfix_expr_eexpr_dot_expressions_ = 
# 1935 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.FunCall(_1,P.clt2mcode "(" _2,
			      _3,
			      P.clt2mcode ")" _4)) )
# 27808 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let _6 : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 27854 "parser_cocci_menhir.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_initialize_list = Obj.magic _5 in
        let _4 : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 27860 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 27865 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_ctype = Obj.magic _2 in
        let _1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 27871 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_postfix_expr_eexpr_dot_expressions_ = 
# 1941 "parser_cocci_menhir.mly"
     ( let init =
       if P.struct_initializer _5
       then
	 let il = P.drop_dot_commas _5 in
	 Ast0.wrap
	   (Ast0.InitList(P.clt2mcode "{" _4,il,P.clt2mcode "}" _6,false))
       else
	 Ast0.wrap
	   (Ast0.InitList(P.clt2mcode "{" _4,_5,P.clt2mcode "}" _6,true)) in
     Ast0.wrap
       (Ast0.Constructor(P.clt2mcode "(" _1, _2, P.clt2mcode ")" _3, init)) )
# 27888 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_primary_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_postfix_expr_eexpr_invalid_ = 
# 1921 "parser_cocci_menhir.mly"
                                                 ( _1 )
# 27912 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let _4 : (
# 266 "parser_cocci_menhir.mly"
       (Data.clt)
# 27948 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr = Obj.magic _3 in
        let _2 : (
# 266 "parser_cocci_menhir.mly"
       (Data.clt)
# 27954 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_postfix_expr_eexpr_invalid_ = 
# 1923 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.ArrayAccess (_1,P.clt2mcode "[" _2,_3,
				       P.clt2mcode "]" _4)) )
# 27963 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_disj_ident = Obj.magic _3 in
        let _2 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 27995 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_postfix_expr_eexpr_invalid_ = 
# 1926 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.RecordAccess(_1, P.clt2mcode "." _2, _3)) )
# 28003 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_disj_ident = Obj.magic _3 in
        let _2 : (
# 268 "parser_cocci_menhir.mly"
       (Data.clt)
# 28035 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_postfix_expr_eexpr_invalid_ = 
# 1928 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.RecordPtAccess(_1, P.clt2mcode "->" _2,
				     _3)) )
# 28044 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 248 "parser_cocci_menhir.mly"
       (Data.clt)
# 28070 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_postfix_expr_eexpr_invalid_ = 
# 1931 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Postfix (_1, P.clt2mcode Ast.Inc _2)) )
# 28078 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 248 "parser_cocci_menhir.mly"
       (Data.clt)
# 28104 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_postfix_expr_eexpr_invalid_ = 
# 1933 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Postfix (_1, P.clt2mcode Ast.Dec _2)) )
# 28112 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let _4 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 28148 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr_list_option = Obj.magic _3 in
        let _2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 28154 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_postfix_expr_eexpr_invalid_ = 
# 1935 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.FunCall(_1,P.clt2mcode "(" _2,
			      _3,
			      P.clt2mcode ")" _4)) )
# 28164 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let _6 : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 28210 "parser_cocci_menhir.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_initialize_list = Obj.magic _5 in
        let _4 : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 28216 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 28221 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_ctype = Obj.magic _2 in
        let _1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 28227 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_postfix_expr_eexpr_invalid_ = 
# 1941 "parser_cocci_menhir.mly"
     ( let init =
       if P.struct_initializer _5
       then
	 let il = P.drop_dot_commas _5 in
	 Ast0.wrap
	   (Ast0.InitList(P.clt2mcode "{" _4,il,P.clt2mcode "}" _6,false))
       else
	 Ast0.wrap
	   (Ast0.InitList(P.clt2mcode "{" _4,_5,P.clt2mcode "}" _6,true)) in
     Ast0.wrap
       (Ast0.Constructor(P.clt2mcode "(" _1, _2, P.clt2mcode ")" _3, init)) )
# 28244 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_primary_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_postfix_expr_eexpr_nest_expressions_ = 
# 1921 "parser_cocci_menhir.mly"
                                                 ( _1 )
# 28268 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let _4 : (
# 266 "parser_cocci_menhir.mly"
       (Data.clt)
# 28304 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr = Obj.magic _3 in
        let _2 : (
# 266 "parser_cocci_menhir.mly"
       (Data.clt)
# 28310 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_postfix_expr_eexpr_nest_expressions_ = 
# 1923 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.ArrayAccess (_1,P.clt2mcode "[" _2,_3,
				       P.clt2mcode "]" _4)) )
# 28319 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_disj_ident = Obj.magic _3 in
        let _2 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 28351 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_postfix_expr_eexpr_nest_expressions_ = 
# 1926 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.RecordAccess(_1, P.clt2mcode "." _2, _3)) )
# 28359 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_disj_ident = Obj.magic _3 in
        let _2 : (
# 268 "parser_cocci_menhir.mly"
       (Data.clt)
# 28391 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_postfix_expr_eexpr_nest_expressions_ = 
# 1928 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.RecordPtAccess(_1, P.clt2mcode "->" _2,
				     _3)) )
# 28400 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 248 "parser_cocci_menhir.mly"
       (Data.clt)
# 28426 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_postfix_expr_eexpr_nest_expressions_ = 
# 1931 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Postfix (_1, P.clt2mcode Ast.Inc _2)) )
# 28434 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 248 "parser_cocci_menhir.mly"
       (Data.clt)
# 28460 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_postfix_expr_eexpr_nest_expressions_ = 
# 1933 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Postfix (_1, P.clt2mcode Ast.Dec _2)) )
# 28468 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let _4 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 28504 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr_list_option = Obj.magic _3 in
        let _2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 28510 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_postfix_expr_eexpr_nest_expressions_ = 
# 1935 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.FunCall(_1,P.clt2mcode "(" _2,
			      _3,
			      P.clt2mcode ")" _4)) )
# 28520 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let _6 : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 28566 "parser_cocci_menhir.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_initialize_list = Obj.magic _5 in
        let _4 : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 28572 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 28577 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_ctype = Obj.magic _2 in
        let _1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 28583 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_postfix_expr_eexpr_nest_expressions_ = 
# 1941 "parser_cocci_menhir.mly"
     ( let init =
       if P.struct_initializer _5
       then
	 let il = P.drop_dot_commas _5 in
	 Ast0.wrap
	   (Ast0.InitList(P.clt2mcode "{" _4,il,P.clt2mcode "}" _6,false))
       else
	 Ast0.wrap
	   (Ast0.InitList(P.clt2mcode "{" _4,_5,P.clt2mcode "}" _6,true)) in
     Ast0.wrap
       (Ast0.Constructor(P.clt2mcode "(" _1, _2, P.clt2mcode ")" _3, init)) )
# 28600 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_primary_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_postfix_expr_expr_invalid_ = 
# 1921 "parser_cocci_menhir.mly"
                                                 ( _1 )
# 28624 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let _4 : (
# 266 "parser_cocci_menhir.mly"
       (Data.clt)
# 28660 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr = Obj.magic _3 in
        let _2 : (
# 266 "parser_cocci_menhir.mly"
       (Data.clt)
# 28666 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_postfix_expr_expr_invalid_ = 
# 1923 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.ArrayAccess (_1,P.clt2mcode "[" _2,_3,
				       P.clt2mcode "]" _4)) )
# 28675 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_disj_ident = Obj.magic _3 in
        let _2 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 28707 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_postfix_expr_expr_invalid_ = 
# 1926 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.RecordAccess(_1, P.clt2mcode "." _2, _3)) )
# 28715 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_disj_ident = Obj.magic _3 in
        let _2 : (
# 268 "parser_cocci_menhir.mly"
       (Data.clt)
# 28747 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_postfix_expr_expr_invalid_ = 
# 1928 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.RecordPtAccess(_1, P.clt2mcode "->" _2,
				     _3)) )
# 28756 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 248 "parser_cocci_menhir.mly"
       (Data.clt)
# 28782 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_postfix_expr_expr_invalid_ = 
# 1931 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Postfix (_1, P.clt2mcode Ast.Inc _2)) )
# 28790 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 248 "parser_cocci_menhir.mly"
       (Data.clt)
# 28816 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_postfix_expr_expr_invalid_ = 
# 1933 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Postfix (_1, P.clt2mcode Ast.Dec _2)) )
# 28824 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let _4 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 28860 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr_list_option = Obj.magic _3 in
        let _2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 28866 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_postfix_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_postfix_expr_expr_invalid_ = 
# 1935 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.FunCall(_1,P.clt2mcode "(" _2,
			      _3,
			      P.clt2mcode ")" _4)) )
# 28876 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let _6 : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 28922 "parser_cocci_menhir.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_initialize_list = Obj.magic _5 in
        let _4 : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 28928 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 28933 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_ctype = Obj.magic _2 in
        let _1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 28939 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : 'tv_postfix_expr_expr_invalid_ = 
# 1941 "parser_cocci_menhir.mly"
     ( let init =
       if P.struct_initializer _5
       then
	 let il = P.drop_dot_commas _5 in
	 Ast0.wrap
	   (Ast0.InitList(P.clt2mcode "{" _4,il,P.clt2mcode "}" _6,false))
       else
	 Ast0.wrap
	   (Ast0.InitList(P.clt2mcode "{" _4,_5,P.clt2mcode "}" _6,true)) in
     Ast0.wrap
       (Ast0.Constructor(P.clt2mcode "(" _1, _2, P.clt2mcode ")" _3, init)) )
# 28956 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 28987 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_eexpr_list_option = Obj.magic _2 in
        let _1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 28993 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_pragmabody = 
# 1126 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.PragmaTuple(P.clt2mcode "(" _1,_2,P.clt2mcode ")" _3)) )
# 29000 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let l : 'tv_nonempty_list_ident_ = Obj.magic l in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_l_ in
        let _v : 'tv_pragmabody = 
# 1128 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.PragmaIdList(Ast0.wrap (Ast0.DOTS l))) )
# 29024 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 29045 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pragmabody = 
# 1129 "parser_cocci_menhir.mly"
            ( Ast0.wrap(Ast0.PragmaDots(P.clt2mcode "..." _1)) )
# 29052 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_basic_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pre_basic_expr_eexpr_dot_expressions_ = 
# 1775 "parser_cocci_menhir.mly"
                                                          ( _1 )
# 29076 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_basic_expr_eexpr_dot_expressions_ = Obj.magic _3 in
        let _2 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 29108 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_pre_basic_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_pre_basic_expr_eexpr_dot_expressions_ = 
# 1778 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Sequence(_1,P.clt2mcode "," _2,_3)) )
# 29116 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_basic_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pre_basic_expr_eexpr_nest_expressions_ = 
# 1775 "parser_cocci_menhir.mly"
                                                          ( _1 )
# 29140 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_basic_expr_eexpr_nest_expressions_ = Obj.magic _3 in
        let _2 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 29172 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_pre_basic_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_pre_basic_expr_eexpr_nest_expressions_ = 
# 1778 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Sequence(_1,P.clt2mcode "," _2,_3)) )
# 29180 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_basic_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pre_basic_expr_expr_invalid_ = 
# 1775 "parser_cocci_menhir.mly"
                                                          ( _1 )
# 29204 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_basic_expr_expr_invalid_ = Obj.magic _3 in
        let _2 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 29236 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_pre_basic_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_pre_basic_expr_expr_invalid_ = 
# 1778 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Sequence(_1,P.clt2mcode "," _2,_3)) )
# 29244 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_func_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1954 "parser_cocci_menhir.mly"
                ( Ast0.wrap(Ast0.Ident(_1)) )
# 29268 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_ident = Obj.magic _2 in
        let _1 : (
# 254 "parser_cocci_menhir.mly"
       (Data.clt)
# 29295 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1956 "parser_cocci_menhir.mly"
     ( let op = P.clt2mcode Ast.GetRefLabel _1 in
     Ast0.wrap(Ast0.Unary(Ast0.wrap(Ast0.Ident(_2)), op)) )
# 29303 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 29324 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1959 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Int x) clt)) )
# 29332 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 29353 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1962 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Float x) clt)) )
# 29361 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 29382 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1965 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in P.parse_string x clt )
# 29389 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 29410 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1967 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Char x) clt)) )
# 29418 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 251 "parser_cocci_menhir.mly"
       (string * string (*n*) * string (*p*) * Data.clt)
# 29439 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1970 "parser_cocci_menhir.mly"
     ( let (x,l,p,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.DecimalConst(x,l,p)) clt)) )
# 29447 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 228 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 29468 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1973 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.CONST,pure)) )
# 29477 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 222 "parser_cocci_menhir.mly"
       (Parse_aux.expinfo)
# 29498 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1977 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,clt) = _1 in
     Ast0.wrap(Ast0.MetaErr(P.clt2mcode nm clt,constraints,pure)) )
# 29506 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 227 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 29527 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1980 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.ANY,pure)) )
# 29536 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 227 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 29557 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1984 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.ID,pure)) )
# 29566 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 227 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 29587 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1988 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.LocalID,pure)) )
# 29596 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 228 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 29617 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1992 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.GlobalID,pure)) )
# 29626 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 29657 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_eexpr = Obj.magic _2 in
        let _1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 29663 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1996 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Paren(P.clt2mcode "(" _1,_2,
			    P.clt2mcode ")" _3)) )
# 29671 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 29702 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_midzero_list_eexpr_eexpr_ = Obj.magic _2 in
        let _1 : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 29708 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 1999 "parser_cocci_menhir.mly"
     ( let (mids,code) = _2 in
       Ast0.wrap(Ast0.DisjExpr(P.id2mcode _1,
			       code, mids,
			       P.id2mcode _3)) )
# 29718 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_dot_expressions = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_dot_expressions_ = 
# 2003 "parser_cocci_menhir.mly"
                 ( _1 )
# 29742 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_func_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1954 "parser_cocci_menhir.mly"
                ( Ast0.wrap(Ast0.Ident(_1)) )
# 29766 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_ident = Obj.magic _2 in
        let _1 : (
# 254 "parser_cocci_menhir.mly"
       (Data.clt)
# 29793 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1956 "parser_cocci_menhir.mly"
     ( let op = P.clt2mcode Ast.GetRefLabel _1 in
     Ast0.wrap(Ast0.Unary(Ast0.wrap(Ast0.Ident(_2)), op)) )
# 29801 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 29822 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1959 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Int x) clt)) )
# 29830 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 29851 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1962 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Float x) clt)) )
# 29859 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 29880 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1965 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in P.parse_string x clt )
# 29887 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 29908 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1967 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Char x) clt)) )
# 29916 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 251 "parser_cocci_menhir.mly"
       (string * string (*n*) * string (*p*) * Data.clt)
# 29937 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1970 "parser_cocci_menhir.mly"
     ( let (x,l,p,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.DecimalConst(x,l,p)) clt)) )
# 29945 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 228 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 29966 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1973 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.CONST,pure)) )
# 29975 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 222 "parser_cocci_menhir.mly"
       (Parse_aux.expinfo)
# 29996 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1977 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,clt) = _1 in
     Ast0.wrap(Ast0.MetaErr(P.clt2mcode nm clt,constraints,pure)) )
# 30004 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 227 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 30025 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1980 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.ANY,pure)) )
# 30034 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 227 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 30055 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1984 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.ID,pure)) )
# 30064 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 227 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 30085 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1988 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.LocalID,pure)) )
# 30094 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 228 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 30115 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1992 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.GlobalID,pure)) )
# 30124 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 30155 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_eexpr = Obj.magic _2 in
        let _1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 30161 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1996 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Paren(P.clt2mcode "(" _1,_2,
			    P.clt2mcode ")" _3)) )
# 30169 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 30200 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_midzero_list_eexpr_eexpr_ = Obj.magic _2 in
        let _1 : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 30206 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 1999 "parser_cocci_menhir.mly"
     ( let (mids,code) = _2 in
       Ast0.wrap(Ast0.DisjExpr(P.id2mcode _1,
			       code, mids,
			       P.id2mcode _3)) )
# 30216 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_invalid = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_invalid_ = 
# 2003 "parser_cocci_menhir.mly"
                 ( _1 )
# 30240 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_func_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1954 "parser_cocci_menhir.mly"
                ( Ast0.wrap(Ast0.Ident(_1)) )
# 30264 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_ident = Obj.magic _2 in
        let _1 : (
# 254 "parser_cocci_menhir.mly"
       (Data.clt)
# 30291 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1956 "parser_cocci_menhir.mly"
     ( let op = P.clt2mcode Ast.GetRefLabel _1 in
     Ast0.wrap(Ast0.Unary(Ast0.wrap(Ast0.Ident(_2)), op)) )
# 30299 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 30320 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1959 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Int x) clt)) )
# 30328 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 30349 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1962 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Float x) clt)) )
# 30357 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 30378 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1965 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in P.parse_string x clt )
# 30385 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 30406 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1967 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Char x) clt)) )
# 30414 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 251 "parser_cocci_menhir.mly"
       (string * string (*n*) * string (*p*) * Data.clt)
# 30435 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1970 "parser_cocci_menhir.mly"
     ( let (x,l,p,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.DecimalConst(x,l,p)) clt)) )
# 30443 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 228 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 30464 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1973 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.CONST,pure)) )
# 30473 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 222 "parser_cocci_menhir.mly"
       (Parse_aux.expinfo)
# 30494 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1977 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,clt) = _1 in
     Ast0.wrap(Ast0.MetaErr(P.clt2mcode nm clt,constraints,pure)) )
# 30502 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 227 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 30523 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1980 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.ANY,pure)) )
# 30532 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 227 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 30553 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1984 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.ID,pure)) )
# 30562 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 227 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 30583 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1988 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.LocalID,pure)) )
# 30592 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 228 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 30613 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1992 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.GlobalID,pure)) )
# 30622 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 30653 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_eexpr = Obj.magic _2 in
        let _1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 30659 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1996 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Paren(P.clt2mcode "(" _1,_2,
			    P.clt2mcode ")" _3)) )
# 30667 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 30698 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_midzero_list_eexpr_eexpr_ = Obj.magic _2 in
        let _1 : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 30704 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 1999 "parser_cocci_menhir.mly"
     ( let (mids,code) = _2 in
       Ast0.wrap(Ast0.DisjExpr(P.id2mcode _1,
			       code, mids,
			       P.id2mcode _3)) )
# 30714 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_nest_expressions = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_eexpr_nest_expressions_ = 
# 2003 "parser_cocci_menhir.mly"
                 ( _1 )
# 30738 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_func_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1954 "parser_cocci_menhir.mly"
                ( Ast0.wrap(Ast0.Ident(_1)) )
# 30762 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_ident = Obj.magic _2 in
        let _1 : (
# 254 "parser_cocci_menhir.mly"
       (Data.clt)
# 30789 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1956 "parser_cocci_menhir.mly"
     ( let op = P.clt2mcode Ast.GetRefLabel _1 in
     Ast0.wrap(Ast0.Unary(Ast0.wrap(Ast0.Ident(_2)), op)) )
# 30797 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 30818 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1959 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Int x) clt)) )
# 30826 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 30847 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1962 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Float x) clt)) )
# 30855 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 30876 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1965 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in P.parse_string x clt )
# 30883 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 30904 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1967 "parser_cocci_menhir.mly"
     ( let (x,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.Char x) clt)) )
# 30912 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 251 "parser_cocci_menhir.mly"
       (string * string (*n*) * string (*p*) * Data.clt)
# 30933 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1970 "parser_cocci_menhir.mly"
     ( let (x,l,p,clt) = _1 in
     Ast0.wrap(Ast0.Constant (P.clt2mcode (Ast.DecimalConst(x,l,p)) clt)) )
# 30941 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 228 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 30962 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1973 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.CONST,pure)) )
# 30971 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 222 "parser_cocci_menhir.mly"
       (Parse_aux.expinfo)
# 30992 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1977 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,clt) = _1 in
     Ast0.wrap(Ast0.MetaErr(P.clt2mcode nm clt,constraints,pure)) )
# 31000 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 227 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 31021 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1980 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.ANY,pure)) )
# 31030 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 227 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 31051 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1984 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.ID,pure)) )
# 31060 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 227 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 31081 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1988 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.LocalID,pure)) )
# 31090 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 228 "parser_cocci_menhir.mly"
       (Parse_aux.typed_expinfo)
# 31111 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1992 "parser_cocci_menhir.mly"
     ( let (nm,constraints,pure,ty,clt) = _1 in
     Ast0.wrap
       (Ast0.MetaExpr(P.clt2mcode nm clt,constraints,ty,Ast.GlobalID,pure)) )
# 31120 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 31151 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_eexpr = Obj.magic _2 in
        let _1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 31157 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1996 "parser_cocci_menhir.mly"
     ( Ast0.wrap(Ast0.Paren(P.clt2mcode "(" _1,_2,
			    P.clt2mcode ")" _3)) )
# 31165 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 31196 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_midzero_list_expr_eexpr_ = Obj.magic _2 in
        let _1 : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 31202 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 1999 "parser_cocci_menhir.mly"
     ( let (mids,code) = _2 in
       Ast0.wrap(Ast0.DisjExpr(P.id2mcode _1,
			       code, mids,
			       P.id2mcode _3)) )
# 31212 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_invalid = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_primary_expr_expr_invalid_ = 
# 2003 "parser_cocci_menhir.mly"
                 ( _1 )
# 31236 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure = 
# 368 "parser_cocci_menhir.mly"
                 ( Ast0.Pure )
# 31258 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure = 
# 369 "parser_cocci_menhir.mly"
                 ( Ast0.Context )
# 31280 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_pure = 
# 370 "parser_cocci_menhir.mly"
                 ( Ast0.PureContext )
# 31306 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_pure = 
# 371 "parser_cocci_menhir.mly"
                 ( Ast0.PureContext )
# 31332 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_pure = 
# 372 "parser_cocci_menhir.mly"
                 ( Ast0.Impure )
# 31349 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 216 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 31370 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident = 
# 2017 "parser_cocci_menhir.mly"
           ( _1 )
# 31377 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 2024 "parser_cocci_menhir.mly"
                 ( "identifier" )
# 31399 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 2025 "parser_cocci_menhir.mly"
                 ( "expression" )
# 31421 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 2026 "parser_cocci_menhir.mly"
                ( "statement" )
# 31443 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 2027 "parser_cocci_menhir.mly"
               ( "function" )
# 31465 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 2028 "parser_cocci_menhir.mly"
            ( "local" )
# 31487 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 2029 "parser_cocci_menhir.mly"
           ( "type" )
# 31509 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 2030 "parser_cocci_menhir.mly"
                ( "parameter" )
# 31531 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 2031 "parser_cocci_menhir.mly"
                   ( "idexpression" )
# 31553 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 2032 "parser_cocci_menhir.mly"
                  ( "initialiser" )
# 31575 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 2033 "parser_cocci_menhir.mly"
           ( "list" )
# 31597 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 2034 "parser_cocci_menhir.mly"
            ( "fresh" )
# 31619 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 2035 "parser_cocci_menhir.mly"
               ( "constant" )
# 31641 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 2036 "parser_cocci_menhir.mly"
            ( "error" )
# 31663 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 2037 "parser_cocci_menhir.mly"
            ( "words" )
# 31685 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 2038 "parser_cocci_menhir.mly"
           ( "pure" )
# 31707 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 2039 "parser_cocci_menhir.mly"
              ( "context" )
# 31729 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 2040 "parser_cocci_menhir.mly"
                ( "generated" )
# 31751 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 2041 "parser_cocci_menhir.mly"
              ( "typedef" )
# 31773 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 2042 "parser_cocci_menhir.mly"
               ( "declarer" )
# 31795 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 2043 "parser_cocci_menhir.mly"
               ( "iterator" )
# 31817 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 2044 "parser_cocci_menhir.mly"
           ( "name" )
# 31839 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 2045 "parser_cocci_menhir.mly"
               ( "position" )
# 31861 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_kwd = 
# 2046 "parser_cocci_menhir.mly"
             ( "symbol" )
# 31883 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_pure_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_or_meta_ident = 
# 2053 "parser_cocci_menhir.mly"
                                 ( (None,P.id2name _1) )
# 31907 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_pure_ident_kwd = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_or_meta_ident = 
# 2054 "parser_cocci_menhir.mly"
                                 ( (None,_1) )
# 31931 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_meta_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_or_meta_ident = 
# 2055 "parser_cocci_menhir.mly"
                                 ( _1 )
# 31955 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = optc;
          MenhirLib.EngineTypes.startp = _startpos_optc_;
          MenhirLib.EngineTypes.endp = _endpos_optc_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let optc : 'tv_option_not_ceq_or_sub_ = Obj.magic optc in
        let i : 'tv_pure_ident_or_meta_ident = Obj.magic i in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_optc_ in
        let _v : 'tv_pure_ident_or_meta_ident_with_econstraint_not_ceq_or_sub_ = 
# 2092 "parser_cocci_menhir.mly"
    (
      match optc with
	  None   -> (i, Ast0.NoConstraint)
	| Some c -> (i, c)
    )
# 31989 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = optc;
          MenhirLib.EngineTypes.startp = _startpos_optc_;
          MenhirLib.EngineTypes.endp = _endpos_optc_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let optc : 'tv_option_re_or_not_eqe_or_sub_ = Obj.magic optc in
        let i : 'tv_pure_ident_or_meta_ident = Obj.magic i in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_optc_ in
        let _v : 'tv_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe_or_sub_ = 
# 2092 "parser_cocci_menhir.mly"
    (
      match optc with
	  None   -> (i, Ast0.NoConstraint)
	| Some c -> (i, c)
    )
# 32023 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = c;
          MenhirLib.EngineTypes.startp = _startpos_c_;
          MenhirLib.EngineTypes.endp = _endpos_c_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let c : 'tv_option_re_only_ = Obj.magic c in
        let i : 'tv_pure_ident_or_meta_ident = Obj.magic i in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_c_ in
        let _v : 'tv_pure_ident_or_meta_ident_with_idconstraint_re_only_ = 
# 2117 "parser_cocci_menhir.mly"
    (
      match c with
	  None -> (i, Ast.IdNoConstraint)
	| Some constraint_ -> (i,constraint_)
    )
# 32057 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = c;
          MenhirLib.EngineTypes.startp = _startpos_c_;
          MenhirLib.EngineTypes.endp = _endpos_c_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let c : 'tv_option_re_or_not_eqid_ = Obj.magic c in
        let i : 'tv_pure_ident_or_meta_ident = Obj.magic i in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_c_ in
        let _v : 'tv_pure_ident_or_meta_ident_with_idconstraint_re_or_not_eqid_ = 
# 2117 "parser_cocci_menhir.mly"
    (
      match c with
	  None -> (i, Ast.IdNoConstraint)
	| Some constraint_ -> (i,constraint_)
    )
# 32091 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = c;
          MenhirLib.EngineTypes.startp = _startpos_c_;
          MenhirLib.EngineTypes.endp = _endpos_c_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let c : 'tv_option_re_or_not_eqid_ = Obj.magic c in
        let i : 'tv_pure_ident_or_meta_ident = Obj.magic i in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_c_ in
        let _v : 'tv_pure_ident_or_meta_ident_with_idconstraint_virt_re_or_not_eqid_ = 
# 2100 "parser_cocci_menhir.mly"
    (
      Common.Left
        (match c with
	  None -> (i, Ast.IdNoConstraint)
	| Some constraint_ -> (i,constraint_))
    )
# 32126 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_pure_ident = Obj.magic _3 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_pure_ident_or_meta_ident_with_idconstraint_virt_re_or_not_eqid_ = 
# 2107 "parser_cocci_menhir.mly"
    (
     let nm = P.id2name _3 in
     Iteration.parsed_virtual_identifiers :=
       Common.union_set [nm]
	 !Iteration.parsed_virtual_identifiers;
     Common.Right nm
    )
# 32164 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_pure_ident_or_meta_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_or_meta_ident_with_seed = 
# 2061 "parser_cocci_menhir.mly"
                                ( (_1,Ast.NoVal) )
# 32188 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_separated_nonempty_list_TCppConcatOp_seed_elem_ = Obj.magic _3 in
        let _1 : 'tv_pure_ident_or_meta_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_pure_ident_or_meta_ident_with_seed = 
# 2064 "parser_cocci_menhir.mly"
  ( match _3 with
	   [Ast.SeedString s] -> (_1,Ast.StringSeed s)
	 | _ -> (_1,Ast.ListSeed _3) )
# 32224 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = l;
          MenhirLib.EngineTypes.startp = _startpos_l_;
          MenhirLib.EngineTypes.endp = _endpos_l_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let l : 'tv_loption_not_pos_ = Obj.magic l in
        let i : 'tv_pure_ident_or_meta_ident = Obj.magic i in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_l_ in
        let _v : 'tv_pure_ident_or_meta_ident_with_x_eq_not_pos_ = 
# 2086 "parser_cocci_menhir.mly"
    (
      (i, l)
    )
# 32256 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_pure_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_or_symbol = 
# 2020 "parser_cocci_menhir.mly"
               ( _1 )
# 32280 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 216 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 32301 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_pure_ident_or_symbol = 
# 2021 "parser_cocci_menhir.mly"
           ( _1 )
# 32308 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = re;
          MenhirLib.EngineTypes.startp = _startpos_re_;
          MenhirLib.EngineTypes.endp = _endpos_re_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let re : 'tv_regexp_eqid = Obj.magic re in
        let _startpos = _startpos_re_ in
        let _endpos = _endpos_re_ in
        let _v : 'tv_re_only = 
# 2128 "parser_cocci_menhir.mly"
                  (Ast.IdRegExpConstraint re)
# 32332 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = re;
          MenhirLib.EngineTypes.startp = _startpos_re_;
          MenhirLib.EngineTypes.endp = _endpos_re_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let re : 'tv_regexp_eqid = Obj.magic re in
        let _startpos = _startpos_re_ in
        let _endpos = _endpos_re_ in
        let _v : 'tv_re_or_not_eqe_or_sub = 
# 2181 "parser_cocci_menhir.mly"
                  (Ast0.NotIdCstrt  re)
# 32356 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ne;
          MenhirLib.EngineTypes.startp = _startpos_ne_;
          MenhirLib.EngineTypes.endp = _endpos_ne_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let ne : 'tv_not_eqe = Obj.magic ne in
        let _startpos = _startpos_ne_ in
        let _endpos = _endpos_ne_ in
        let _v : 'tv_re_or_not_eqe_or_sub = 
# 2182 "parser_cocci_menhir.mly"
                  (Ast0.NotExpCstrt ne)
# 32380 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let s : 'tv_sub = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_re_or_not_eqe_or_sub = 
# 2183 "parser_cocci_menhir.mly"
                  (Ast0.SubExpCstrt s)
# 32404 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = re;
          MenhirLib.EngineTypes.startp = _startpos_re_;
          MenhirLib.EngineTypes.endp = _endpos_re_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let re : 'tv_regexp_eqid = Obj.magic re in
        let _startpos = _startpos_re_ in
        let _endpos = _endpos_re_ in
        let _v : 'tv_re_or_not_eqid = 
# 2124 "parser_cocci_menhir.mly"
                  (Ast.IdRegExpConstraint re)
# 32428 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ne;
          MenhirLib.EngineTypes.startp = _startpos_ne_;
          MenhirLib.EngineTypes.endp = _endpos_ne_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let ne : 'tv_not_eqid = Obj.magic ne in
        let _startpos = _startpos_ne_ in
        let _endpos = _endpos_ne_ in
        let _v : 'tv_re_or_not_eqid = 
# 2125 "parser_cocci_menhir.mly"
                  (ne)
# 32452 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = re;
          MenhirLib.EngineTypes.startp = _startpos_re_;
          MenhirLib.EngineTypes.endp = _endpos_re_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let re : (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 32477 "parser_cocci_menhir.ml"
        ) = Obj.magic re in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_re_ in
        let _v : 'tv_regexp_eqid = 
# 2132 "parser_cocci_menhir.mly"
         ( (if !Data.in_iso
	    then failwith "constraints not allowed in iso file");
	   (if !Data.in_generating
	    then failwith "constraints not allowed in a generated rule file");
	   let (s,_) = re in Ast.IdRegExp (s,Regexp.regexp s)
	 )
# 32489 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = re;
          MenhirLib.EngineTypes.startp = _startpos_re_;
          MenhirLib.EngineTypes.endp = _endpos_re_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let re : (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 32514 "parser_cocci_menhir.ml"
        ) = Obj.magic re in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_re_ in
        let _v : 'tv_regexp_eqid = 
# 2139 "parser_cocci_menhir.mly"
         ( (if !Data.in_iso
	    then failwith "constraints not allowed in iso file");
	   (if !Data.in_generating
	    then failwith "constraints not allowed in a generated rule file");
	   let (s,_) = re in Ast.IdNotRegExp (s,Regexp.regexp s)
	 )
# 32526 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_argorellipsis_one_arg_decl__ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_reverse_separated_nonempty_llist_TComma_argorellipsis_one_arg_decl___ = 
# 1232 "parser_cocci_menhir.mly"
    ( [ x ] )
# 32550 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let x : 'tv_argorellipsis_one_arg_decl__ = Obj.magic x in
        let s : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 32582 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let xs : 'tv_reverse_separated_nonempty_llist_TComma_argorellipsis_one_arg_decl___ = Obj.magic xs in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_reverse_separated_nonempty_llist_TComma_argorellipsis_one_arg_decl___ = 
# 1234 "parser_cocci_menhir.mly"
    ( x :: (Separator s) :: xs )
# 32590 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = s;
              MenhirLib.EngineTypes.startp = _startpos_s_;
              MenhirLib.EngineTypes.endp = _endpos_s_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = xs;
                MenhirLib.EngineTypes.startp = _startpos_xs_;
                MenhirLib.EngineTypes.endp = _endpos_xs_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let x : 'tv_argorellipsis_one_arg_decl__ = Obj.magic x in
        let s : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 32626 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let xs : 'tv_reverse_separated_nonempty_llist_TComma_argorellipsis_one_arg_decl___ = Obj.magic xs in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_reverse_separated_nonempty_llist_TComma_argorellipsis_one_arg_decl___ = 
# 1236 "parser_cocci_menhir.mly"
    ( x :: Nothing :: (Separator s) :: xs )
# 32634 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_argorellipsis_one_arg_name_opt_decl__ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_reverse_separated_nonempty_llist_TComma_argorellipsis_one_arg_name_opt_decl___ = 
# 1232 "parser_cocci_menhir.mly"
    ( [ x ] )
# 32658 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let x : 'tv_argorellipsis_one_arg_name_opt_decl__ = Obj.magic x in
        let s : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 32690 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let xs : 'tv_reverse_separated_nonempty_llist_TComma_argorellipsis_one_arg_name_opt_decl___ = Obj.magic xs in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_reverse_separated_nonempty_llist_TComma_argorellipsis_one_arg_name_opt_decl___ = 
# 1234 "parser_cocci_menhir.mly"
    ( x :: (Separator s) :: xs )
# 32698 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = s;
              MenhirLib.EngineTypes.startp = _startpos_s_;
              MenhirLib.EngineTypes.endp = _endpos_s_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = xs;
                MenhirLib.EngineTypes.startp = _startpos_xs_;
                MenhirLib.EngineTypes.endp = _endpos_xs_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let x : 'tv_argorellipsis_one_arg_name_opt_decl__ = Obj.magic x in
        let s : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 32734 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let xs : 'tv_reverse_separated_nonempty_llist_TComma_argorellipsis_one_arg_name_opt_decl___ = Obj.magic xs in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_reverse_separated_nonempty_llist_TComma_argorellipsis_one_arg_name_opt_decl___ = 
# 1236 "parser_cocci_menhir.mly"
    ( x :: Nothing :: (Separator s) :: xs )
# 32742 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_one_decl_var = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_rule_elem_statement = 
# 1423 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Decl((Ast0.default_info(),Ast0.context_befaft()),_1)) )
# 32766 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 32792 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_option_expr_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_rule_elem_statement = 
# 1424 "parser_cocci_menhir.mly"
                       ( P.exp_stm _1 _2 )
# 32800 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 32831 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_eexpr = Obj.magic _2 in
        let _1 : (
# 214 "parser_cocci_menhir.mly"
       (Data.clt)
# 32837 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_rule_elem_statement = 
# 1425 "parser_cocci_menhir.mly"
                        ( P.ret_exp _1 _2 _3 )
# 32844 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 32870 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 214 "parser_cocci_menhir.mly"
       (Data.clt)
# 32875 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_rule_elem_statement = 
# 1426 "parser_cocci_menhir.mly"
                  ( P.ret _1 _2 )
# 32882 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 32908 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 215 "parser_cocci_menhir.mly"
       (Data.clt)
# 32913 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_rule_elem_statement = 
# 1427 "parser_cocci_menhir.mly"
                 ( P.break _1 _2 )
# 32920 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 32946 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 215 "parser_cocci_menhir.mly"
       (Data.clt)
# 32951 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_rule_elem_statement = 
# 1428 "parser_cocci_menhir.mly"
                    ( P.cont _1 _2 )
# 32958 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 32989 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_midzero_list_rule_elem_statement_rule_elem_statement_ = Obj.magic _2 in
        let _1 : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 32995 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_rule_elem_statement = 
# 1430 "parser_cocci_menhir.mly"
    ( let (mids,code) = _2 in
    Ast0.wrap
      (Ast0.Disj(P.id2mcode _1,
		 List.map (function x -> Ast0.wrap(Ast0.DOTS([x]))) code,
		 mids, P.id2mcode _3)) )
# 33006 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ee;
            MenhirLib.EngineTypes.startp = _startpos_ee_;
            MenhirLib.EngineTypes.endp = _endpos_ee_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = a;
                MenhirLib.EngineTypes.startp = _startpos_a_;
                MenhirLib.EngineTypes.endp = _endpos_a_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = i;
                  MenhirLib.EngineTypes.startp = _startpos_i_;
                  MenhirLib.EngineTypes.endp = _endpos_i_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = d;
                    MenhirLib.EngineTypes.startp = _startpos_d_;
                    MenhirLib.EngineTypes.endp = _endpos_d_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ee : 'tv_is_expression = Obj.magic ee in
        let e : 'tv_exists = Obj.magic e in
        let a : 'tv_loption_disable_ = Obj.magic a in
        let i : 'tv_loption_choose_iso_ = Obj.magic i in
        let d : 'tv_depends = Obj.magic d in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (
# 327 "parser_cocci_menhir.mly"
      (Ast_cocci.rulename)
# 33062 "parser_cocci_menhir.ml"
        ) = let nm =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 33067 "parser_cocci_menhir.ml"
          
        in
        
# 380 "parser_cocci_menhir.mly"
      ( P.make_cocci_rule_name_result nm d i a e ee )
# 33073 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ee;
            MenhirLib.EngineTypes.startp = _startpos_ee_;
            MenhirLib.EngineTypes.endp = _endpos_ee_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = a;
                MenhirLib.EngineTypes.startp = _startpos_a_;
                MenhirLib.EngineTypes.endp = _endpos_a_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = i;
                  MenhirLib.EngineTypes.startp = _startpos_i_;
                  MenhirLib.EngineTypes.endp = _endpos_i_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = d;
                    MenhirLib.EngineTypes.startp = _startpos_d_;
                    MenhirLib.EngineTypes.endp = _endpos_d_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = x0;
                        MenhirLib.EngineTypes.startp = _startpos_x0_;
                        MenhirLib.EngineTypes.endp = _endpos_x0_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ee : 'tv_is_expression = Obj.magic ee in
        let e : 'tv_exists = Obj.magic e in
        let a : 'tv_loption_disable_ = Obj.magic a in
        let i : 'tv_loption_choose_iso_ = Obj.magic i in
        let d : 'tv_depends = Obj.magic d in
        let x0 : 'tv_pure_ident = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos__8_ in
        let _v : (
# 327 "parser_cocci_menhir.mly"
      (Ast_cocci.rulename)
# 33135 "parser_cocci_menhir.ml"
        ) = let nm =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 33141 "parser_cocci_menhir.ml"
          
        in
        
# 380 "parser_cocci_menhir.mly"
      ( P.make_cocci_rule_name_result nm d i a e ee )
# 33147 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ee;
            MenhirLib.EngineTypes.startp = _startpos_ee_;
            MenhirLib.EngineTypes.endp = _endpos_ee_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = a;
                MenhirLib.EngineTypes.startp = _startpos_a_;
                MenhirLib.EngineTypes.endp = _endpos_a_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = i;
                  MenhirLib.EngineTypes.startp = _startpos_i_;
                  MenhirLib.EngineTypes.endp = _endpos_i_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = d;
                    MenhirLib.EngineTypes.startp = _startpos_d_;
                    MenhirLib.EngineTypes.endp = _endpos_d_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let ee : 'tv_is_expression = Obj.magic ee in
        let e : 'tv_exists = Obj.magic e in
        let a : 'tv_loption_disable_ = Obj.magic a in
        let i : 'tv_loption_choose_iso_ = Obj.magic i in
        let d : 'tv_depends = Obj.magic d in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : (
# 327 "parser_cocci_menhir.mly"
      (Ast_cocci.rulename)
# 33207 "parser_cocci_menhir.ml"
        ) = 
# 385 "parser_cocci_menhir.mly"
      ( P.make_generated_rule_name_result None d i a e ee )
# 33211 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = lang;
              MenhirLib.EngineTypes.startp = _startpos_lang_;
              MenhirLib.EngineTypes.endp = _endpos_lang_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let d : 'tv_depends = Obj.magic d in
        let lang : 'tv_pure_ident = Obj.magic lang in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (
# 327 "parser_cocci_menhir.mly"
      (Ast_cocci.rulename)
# 33253 "parser_cocci_menhir.ml"
        ) = let nm =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 33258 "parser_cocci_menhir.ml"
          
        in
        
# 387 "parser_cocci_menhir.mly"
      ( P.make_script_rule_name_result lang nm d )
# 33264 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = x0;
              MenhirLib.EngineTypes.startp = _startpos_x0_;
              MenhirLib.EngineTypes.endp = _endpos_x0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = lang;
                MenhirLib.EngineTypes.startp = _startpos_lang_;
                MenhirLib.EngineTypes.endp = _endpos_lang_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let d : 'tv_depends = Obj.magic d in
        let x0 : 'tv_pure_ident = Obj.magic x0 in
        let lang : 'tv_pure_ident = Obj.magic lang in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : (
# 327 "parser_cocci_menhir.mly"
      (Ast_cocci.rulename)
# 33312 "parser_cocci_menhir.ml"
        ) = let nm =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 33318 "parser_cocci_menhir.ml"
          
        in
        
# 387 "parser_cocci_menhir.mly"
      ( P.make_script_rule_name_result lang nm d )
# 33324 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = lang;
              MenhirLib.EngineTypes.startp = _startpos_lang_;
              MenhirLib.EngineTypes.endp = _endpos_lang_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let d : 'tv_depends = Obj.magic d in
        let lang : 'tv_pure_ident = Obj.magic lang in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (
# 327 "parser_cocci_menhir.mly"
      (Ast_cocci.rulename)
# 33366 "parser_cocci_menhir.ml"
        ) = 
# 389 "parser_cocci_menhir.mly"
      ( P.make_initial_script_rule_name_result lang d )
# 33370 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = lang;
              MenhirLib.EngineTypes.startp = _startpos_lang_;
              MenhirLib.EngineTypes.endp = _endpos_lang_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let d : 'tv_depends = Obj.magic d in
        let lang : 'tv_pure_ident = Obj.magic lang in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (
# 327 "parser_cocci_menhir.mly"
      (Ast_cocci.rulename)
# 33412 "parser_cocci_menhir.ml"
        ) = 
# 391 "parser_cocci_menhir.mly"
      ( P.make_final_script_rule_name_result lang d )
# 33416 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = py;
            MenhirLib.EngineTypes.startp = _startpos_py_;
            MenhirLib.EngineTypes.endp = _endpos_py_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let py : 'tv_pure_ident = Obj.magic py in
        let _startpos = _startpos_py_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 333 "parser_cocci_menhir.mly"
       ((string option (*string*) * string option (*ast*)) * (Ast_cocci.meta_name * Ast_cocci.metavar) option)
# 33444 "parser_cocci_menhir.ml"
        ) = 
# 2786 "parser_cocci_menhir.mly"
  ( ((Some (P.id2name py), None), None) )
# 33448 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = py;
              MenhirLib.EngineTypes.startp = _startpos_py_;
              MenhirLib.EngineTypes.endp = _endpos_py_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _2 : 'tv_script_name_decl = Obj.magic _2 in
        let py : 'tv_pure_ident = Obj.magic py in
        let _startpos = _startpos_py_ in
        let _endpos = _endpos__3_ in
        let _v : (
# 333 "parser_cocci_menhir.mly"
       ((string option (*string*) * string option (*ast*)) * (Ast_cocci.meta_name * Ast_cocci.metavar) option)
# 33482 "parser_cocci_menhir.ml"
        ) = 
# 2788 "parser_cocci_menhir.mly"
  ( ((Some (P.id2name py), None), Some _2) )
# 33486 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ast;
                MenhirLib.EngineTypes.startp = _startpos_ast_;
                MenhirLib.EngineTypes.endp = _endpos_ast_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let _6 : 'tv_script_name_decl = Obj.magic _6 in
        let ast : 'tv_pure_ident = Obj.magic ast in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (
# 333 "parser_cocci_menhir.mly"
       ((string option (*string*) * string option (*ast*)) * (Ast_cocci.meta_name * Ast_cocci.metavar) option)
# 33536 "parser_cocci_menhir.ml"
        ) = 
# 2790 "parser_cocci_menhir.mly"
  ( ((None, Some (P.id2name ast)), Some _6) )
# 33540 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = str;
                    MenhirLib.EngineTypes.startp = _startpos_str_;
                    MenhirLib.EngineTypes.endp = _endpos_str_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let _6 : 'tv_script_name_decl = Obj.magic _6 in
        let str : 'tv_pure_ident = Obj.magic str in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (
# 333 "parser_cocci_menhir.mly"
       ((string option (*string*) * string option (*ast*)) * (Ast_cocci.meta_name * Ast_cocci.metavar) option)
# 33590 "parser_cocci_menhir.ml"
        ) = 
# 2792 "parser_cocci_menhir.mly"
  ( ((Some (P.id2name str), None), Some _6) )
# 33594 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = ast;
                MenhirLib.EngineTypes.startp = _startpos_ast_;
                MenhirLib.EngineTypes.endp = _endpos_ast_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = str;
                    MenhirLib.EngineTypes.startp = _startpos_str_;
                    MenhirLib.EngineTypes.endp = _endpos_str_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let _6 : 'tv_script_name_decl = Obj.magic _6 in
        let ast : 'tv_pure_ident = Obj.magic ast in
        let str : 'tv_pure_ident = Obj.magic str in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : (
# 333 "parser_cocci_menhir.mly"
       ((string option (*string*) * string option (*ast*)) * (Ast_cocci.meta_name * Ast_cocci.metavar) option)
# 33646 "parser_cocci_menhir.ml"
        ) = 
# 2794 "parser_cocci_menhir.mly"
  ( ((Some (P.id2name str), Some (P.id2name ast)), Some _6) )
# 33650 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = py;
              MenhirLib.EngineTypes.startp = _startpos_py_;
              MenhirLib.EngineTypes.endp = _endpos_py_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _2 : 'tv_script_virt_name_decl = Obj.magic _2 in
        let py : 'tv_pure_ident = Obj.magic py in
        let _startpos = _startpos_py_ in
        let _endpos = _endpos__3_ in
        let _v : (
# 334 "parser_cocci_menhir.mly"
       ((string option (*string*) * string option (*ast*)) * (Ast_cocci.meta_name * Ast_cocci.metavar) option)
# 33684 "parser_cocci_menhir.ml"
        ) = 
# 2812 "parser_cocci_menhir.mly"
  ( ((Some (P.id2name py), None), Some _2) )
# 33688 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = cocci;
          MenhirLib.EngineTypes.startp = _startpos_cocci_;
          MenhirLib.EngineTypes.endp = _endpos_cocci_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let cocci : 'tv_pure_ident = Obj.magic cocci in
        let _2 : (
# 202 "parser_cocci_menhir.mly"
      (string)
# 33723 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_cocci_ in
        let _v : 'tv_script_name_decl = 
# 2798 "parser_cocci_menhir.mly"
      ( let nm = P.id2name cocci in
        let mv = Parse_aux.lookup _2 nm in
        ((_2, nm), mv) )
# 33732 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = cocci;
          MenhirLib.EngineTypes.startp = _startpos_cocci_;
          MenhirLib.EngineTypes.endp = _endpos_cocci_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let cocci : 'tv_pure_ident = Obj.magic cocci in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_cocci_ in
        let _v : 'tv_script_name_decl = 
# 2802 "parser_cocci_menhir.mly"
      ( let nm = P.id2name cocci in
	 Iteration.parsed_virtual_identifiers :=
	   Common.union_set [nm]
	     !Iteration.parsed_virtual_identifiers;
        let name = ("virtual", nm) in
        let mv = Ast.MetaIdDecl(Ast.NONE,name) in
        (name,mv) )
# 33774 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = cocci;
          MenhirLib.EngineTypes.startp = _startpos_cocci_;
          MenhirLib.EngineTypes.endp = _endpos_cocci_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let cocci : 'tv_pure_ident = Obj.magic cocci in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_cocci_ in
        let _v : 'tv_script_virt_name_decl = 
# 2816 "parser_cocci_menhir.mly"
      ( let nm = P.id2name cocci in
	 Iteration.parsed_virtual_identifiers :=
	   Common.union_set [nm]
	     !Iteration.parsed_virtual_identifiers;
        let name = ("virtual", nm) in
        let mv = Ast.MetaIdDecl(Ast.NONE,name) in
        (name,mv) )
# 33816 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 33837 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_seed_elem = 
# 2069 "parser_cocci_menhir.mly"
          ( let (x,_) = _1 in Ast.SeedString x )
# 33844 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 219 "parser_cocci_menhir.mly"
       (Parse_aux.midinfo)
# 33865 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_seed_elem = 
# 2070 "parser_cocci_menhir.mly"
          ( let (x,_,_,_,_) = _1 in Ast.SeedId x )
# 33872 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_seed_elem = 
# 2071 "parser_cocci_menhir.mly"
        (failwith "tmeta")
# 33894 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_pure_ident = Obj.magic _3 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_seed_elem = 
# 2073 "parser_cocci_menhir.mly"
    ( let nm = ("virtual",P.id2name _3) in
     Iteration.parsed_virtual_identifiers :=
       Common.union_set [snd nm]
	 !Iteration.parsed_virtual_identifiers;
    try Ast.SeedString (List.assoc (snd nm) !Flag.defined_virtual_env)
    with Not_found -> Ast.SeedId nm )
# 33931 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : 'tv_pure_ident = Obj.magic _3 in
        let _1 : (
# 202 "parser_cocci_menhir.mly"
      (string)
# 33962 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_seed_elem = 
# 2080 "parser_cocci_menhir.mly"
    ( let nm = (_1,P.id2name _3) in
      P.check_meta(Ast.MetaIdDecl(Ast.NONE,nm));
      Ast.SeedId nm )
# 33971 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 33992 "parser_cocci_menhir.ml"
        ) = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_TString_ = 
# 144 "/usr/share/menhir/standard.mly"
    ( [ x ] )
# 33999 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_TString_ = Obj.magic xs in
        let x : (
# 250 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 34030 "parser_cocci_menhir.ml"
        ) = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_TString_ = 
# 146 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 34037 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_any_strict = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_any_strict_ = 
# 144 "/usr/share/menhir/standard.mly"
    ( [ x ] )
# 34061 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_any_strict_ = Obj.magic xs in
        let x : 'tv_any_strict = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_any_strict_ = 
# 146 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 34095 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_ctype = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_ctype_ = 
# 144 "/usr/share/menhir/standard.mly"
    ( [ x ] )
# 34119 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_ctype_ = Obj.magic xs in
        let x : 'tv_ctype = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_ctype_ = 
# 146 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 34153 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_d_ident = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_d_ident_ = 
# 144 "/usr/share/menhir/standard.mly"
    ( [ x ] )
# 34177 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_d_ident_ = Obj.magic xs in
        let x : 'tv_d_ident = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_d_ident_ = 
# 146 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 34211 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_ident_or_const = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_ident_or_const_ = 
# 144 "/usr/share/menhir/standard.mly"
    ( [ x ] )
# 34235 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_ident_or_const_ = Obj.magic xs in
        let x : 'tv_ident_or_const = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_ident_or_const_ = 
# 146 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 34269 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_meta_ident = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_meta_ident_ = 
# 144 "/usr/share/menhir/standard.mly"
    ( [ x ] )
# 34293 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_meta_ident_ = Obj.magic xs in
        let x : 'tv_meta_ident = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_meta_ident_ = 
# 146 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 34327 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_pure_ident = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_ = 
# 144 "/usr/share/menhir/standard.mly"
    ( [ x ] )
# 34351 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_pure_ident_ = Obj.magic xs in
        let x : 'tv_pure_ident = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_ = 
# 146 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 34385 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_pure_ident_or_meta_ident = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_ = 
# 144 "/usr/share/menhir/standard.mly"
    ( [ x ] )
# 34409 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_ = Obj.magic xs in
        let x : 'tv_pure_ident_or_meta_ident = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_ = 
# 146 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 34443 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_pure_ident_or_meta_ident_with_econstraint_not_ceq_or_sub_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_econstraint_not_ceq_or_sub__ = 
# 144 "/usr/share/menhir/standard.mly"
    ( [ x ] )
# 34467 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_econstraint_not_ceq_or_sub__ = Obj.magic xs in
        let x : 'tv_pure_ident_or_meta_ident_with_econstraint_not_ceq_or_sub_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_econstraint_not_ceq_or_sub__ = 
# 146 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 34501 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe_or_sub_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe_or_sub__ = 
# 144 "/usr/share/menhir/standard.mly"
    ( [ x ] )
# 34525 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe_or_sub__ = Obj.magic xs in
        let x : 'tv_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe_or_sub_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_econstraint_re_or_not_eqe_or_sub__ = 
# 146 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 34559 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_pure_ident_or_meta_ident_with_idconstraint_re_only_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_idconstraint_re_only__ = 
# 144 "/usr/share/menhir/standard.mly"
    ( [ x ] )
# 34583 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_idconstraint_re_only__ = Obj.magic xs in
        let x : 'tv_pure_ident_or_meta_ident_with_idconstraint_re_only_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_idconstraint_re_only__ = 
# 146 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 34617 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_pure_ident_or_meta_ident_with_idconstraint_re_or_not_eqid_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_idconstraint_re_or_not_eqid__ = 
# 144 "/usr/share/menhir/standard.mly"
    ( [ x ] )
# 34641 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_idconstraint_re_or_not_eqid__ = Obj.magic xs in
        let x : 'tv_pure_ident_or_meta_ident_with_idconstraint_re_or_not_eqid_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_idconstraint_re_or_not_eqid__ = 
# 146 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 34675 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_pure_ident_or_meta_ident_with_idconstraint_virt_re_or_not_eqid_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_idconstraint_virt_re_or_not_eqid__ = 
# 144 "/usr/share/menhir/standard.mly"
    ( [ x ] )
# 34699 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_idconstraint_virt_re_or_not_eqid__ = Obj.magic xs in
        let x : 'tv_pure_ident_or_meta_ident_with_idconstraint_virt_re_or_not_eqid_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_idconstraint_virt_re_or_not_eqid__ = 
# 146 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 34733 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_pure_ident_or_meta_ident_with_seed = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_seed_ = 
# 144 "/usr/share/menhir/standard.mly"
    ( [ x ] )
# 34757 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_seed_ = Obj.magic xs in
        let x : 'tv_pure_ident_or_meta_ident_with_seed = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_seed_ = 
# 146 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 34791 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_pure_ident_or_meta_ident_with_x_eq_not_pos_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_x_eq_not_pos__ = 
# 144 "/usr/share/menhir/standard.mly"
    ( [ x ] )
# 34815 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_x_eq_not_pos__ = Obj.magic xs in
        let x : 'tv_pure_ident_or_meta_ident_with_x_eq_not_pos_ = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_pure_ident_or_meta_ident_with_x_eq_not_pos__ = 
# 146 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 34849 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_typedef_ident = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TComma_typedef_ident_ = 
# 144 "/usr/share/menhir/standard.mly"
    ( [ x ] )
# 34873 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TComma_typedef_ident_ = Obj.magic xs in
        let x : 'tv_typedef_ident = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TComma_typedef_ident_ = 
# 146 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 34907 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let x : 'tv_seed_elem = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : 'tv_separated_nonempty_list_TCppConcatOp_seed_elem_ = 
# 144 "/usr/share/menhir/standard.mly"
    ( [ x ] )
# 34931 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let xs : 'tv_separated_nonempty_list_TCppConcatOp_seed_elem_ = Obj.magic xs in
        let x : 'tv_seed_elem = Obj.magic x in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : 'tv_separated_nonempty_list_TCppConcatOp_seed_elem_ = 
# 146 "/usr/share/menhir/standard.mly"
    ( x :: xs )
# 34965 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let ty : (
# 204 "parser_cocci_menhir.mly"
      (Data.clt)
# 34986 "parser_cocci_menhir.ml"
        ) = Obj.magic ty in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : 'tv_signable_types = 
# 795 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.CharType,[P.clt2mcode "char" ty])) )
# 34993 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let ty : (
# 204 "parser_cocci_menhir.mly"
      (Data.clt)
# 35014 "parser_cocci_menhir.ml"
        ) = Obj.magic ty in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : 'tv_signable_types = 
# 797 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.ShortType,[P.clt2mcode "short" ty])) )
# 35021 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ty2;
          MenhirLib.EngineTypes.startp = _startpos_ty2_;
          MenhirLib.EngineTypes.endp = _endpos_ty2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty1;
            MenhirLib.EngineTypes.startp = _startpos_ty1_;
            MenhirLib.EngineTypes.endp = _endpos_ty1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let ty2 : (
# 204 "parser_cocci_menhir.mly"
      (Data.clt)
# 35047 "parser_cocci_menhir.ml"
        ) = Obj.magic ty2 in
        let ty1 : (
# 204 "parser_cocci_menhir.mly"
      (Data.clt)
# 35052 "parser_cocci_menhir.ml"
        ) = Obj.magic ty1 in
        let _startpos = _startpos_ty1_ in
        let _endpos = _endpos_ty2_ in
        let _v : 'tv_signable_types = 
# 799 "parser_cocci_menhir.mly"
    ( Ast0.wrap
	(Ast0.BaseType
	   (Ast.ShortIntType,[P.clt2mcode "short" ty1;P.clt2mcode "int" ty2])) )
# 35061 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let ty : (
# 204 "parser_cocci_menhir.mly"
      (Data.clt)
# 35082 "parser_cocci_menhir.ml"
        ) = Obj.magic ty in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : 'tv_signable_types = 
# 803 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.IntType,[P.clt2mcode "int" ty])) )
# 35089 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let p : (
# 223 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 35110 "parser_cocci_menhir.ml"
        ) = Obj.magic p in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos_p_ in
        let _v : 'tv_signable_types = 
# 805 "parser_cocci_menhir.mly"
    ( let (nm,pure,clt) = p in
      Ast0.wrap(Ast0.MetaType(P.clt2mcode nm clt,pure)) )
# 35118 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = r;
              MenhirLib.EngineTypes.startp = _startpos_r_;
              MenhirLib.EngineTypes.endp = _endpos_r_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let p : (
# 216 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 35148 "parser_cocci_menhir.ml"
        ) = Obj.magic p in
        let r : (
# 202 "parser_cocci_menhir.mly"
      (string)
# 35153 "parser_cocci_menhir.ml"
        ) = Obj.magic r in
        let _startpos = _startpos_r_ in
        let _endpos = _endpos_p_ in
        let _v : 'tv_signable_types = 
# 808 "parser_cocci_menhir.mly"
    ( let nm = (r,P.id2name p) in
    (* this is only possible when we are in a metavar decl.  Otherwise,
       it will be represented already as a MetaType *)
    let _ = P.check_meta(Ast.MetaTypeDecl(Ast.NONE,nm)) in
    Ast0.wrap(Ast0.MetaType(P.clt2mcode nm (P.id2clt p),
			    Ast0.Impure (*will be ignored*))) )
# 35165 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty1;
          MenhirLib.EngineTypes.startp = _startpos_ty1_;
          MenhirLib.EngineTypes.endp = _endpos_ty1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let ty1 : (
# 204 "parser_cocci_menhir.mly"
      (Data.clt)
# 35186 "parser_cocci_menhir.ml"
        ) = Obj.magic ty1 in
        let _startpos = _startpos_ty1_ in
        let _endpos = _endpos_ty1_ in
        let _v : 'tv_signable_types = 
# 815 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.BaseType(Ast.LongType,[P.clt2mcode "long" ty1])) )
# 35193 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ty2;
          MenhirLib.EngineTypes.startp = _startpos_ty2_;
          MenhirLib.EngineTypes.endp = _endpos_ty2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty1;
            MenhirLib.EngineTypes.startp = _startpos_ty1_;
            MenhirLib.EngineTypes.endp = _endpos_ty1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let ty2 : (
# 204 "parser_cocci_menhir.mly"
      (Data.clt)
# 35219 "parser_cocci_menhir.ml"
        ) = Obj.magic ty2 in
        let ty1 : (
# 204 "parser_cocci_menhir.mly"
      (Data.clt)
# 35224 "parser_cocci_menhir.ml"
        ) = Obj.magic ty1 in
        let _startpos = _startpos_ty1_ in
        let _endpos = _endpos_ty2_ in
        let _v : 'tv_signable_types = 
# 817 "parser_cocci_menhir.mly"
    ( Ast0.wrap
	(Ast0.BaseType
	   (Ast.LongIntType,[P.clt2mcode "long" ty1;P.clt2mcode "int" ty2])) )
# 35233 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ty2;
          MenhirLib.EngineTypes.startp = _startpos_ty2_;
          MenhirLib.EngineTypes.endp = _endpos_ty2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty1;
            MenhirLib.EngineTypes.startp = _startpos_ty1_;
            MenhirLib.EngineTypes.endp = _endpos_ty1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let ty2 : (
# 204 "parser_cocci_menhir.mly"
      (Data.clt)
# 35259 "parser_cocci_menhir.ml"
        ) = Obj.magic ty2 in
        let ty1 : (
# 204 "parser_cocci_menhir.mly"
      (Data.clt)
# 35264 "parser_cocci_menhir.ml"
        ) = Obj.magic ty1 in
        let _startpos = _startpos_ty1_ in
        let _endpos = _endpos_ty2_ in
        let _v : 'tv_signable_types = 
# 821 "parser_cocci_menhir.mly"
    ( Ast0.wrap
	(Ast0.BaseType
	   (Ast.LongLongType,
	    [P.clt2mcode "long" ty1;P.clt2mcode "long" ty2])) )
# 35274 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = ty3;
          MenhirLib.EngineTypes.startp = _startpos_ty3_;
          MenhirLib.EngineTypes.endp = _endpos_ty3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty2;
            MenhirLib.EngineTypes.startp = _startpos_ty2_;
            MenhirLib.EngineTypes.endp = _endpos_ty2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ty1;
              MenhirLib.EngineTypes.startp = _startpos_ty1_;
              MenhirLib.EngineTypes.endp = _endpos_ty1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let ty3 : (
# 204 "parser_cocci_menhir.mly"
      (Data.clt)
# 35305 "parser_cocci_menhir.ml"
        ) = Obj.magic ty3 in
        let ty2 : (
# 204 "parser_cocci_menhir.mly"
      (Data.clt)
# 35310 "parser_cocci_menhir.ml"
        ) = Obj.magic ty2 in
        let ty1 : (
# 204 "parser_cocci_menhir.mly"
      (Data.clt)
# 35315 "parser_cocci_menhir.ml"
        ) = Obj.magic ty1 in
        let _startpos = _startpos_ty1_ in
        let _endpos = _endpos_ty3_ in
        let _v : 'tv_signable_types = 
# 826 "parser_cocci_menhir.mly"
    ( Ast0.wrap
	(Ast0.BaseType
	   (Ast.LongLongIntType,
	    [P.clt2mcode "long" ty1;P.clt2mcode "long" ty2;
	      P.clt2mcode "int" ty3])) )
# 35326 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_statement = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_single_statement = 
# 1438 "parser_cocci_menhir.mly"
                                      ( _1 )
# 35350 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 35381 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_midzero_list_statement_statement_ = Obj.magic _2 in
        let _1 : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 35387 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_single_statement = 
# 1442 "parser_cocci_menhir.mly"
      ( let (mids,code) = _2 in
        Ast0.wrap
	  (Ast0.Disj(P.id2mcode _1,
		     List.map (function x -> Ast0.wrap(Ast0.DOTS([x]))) code,
		     mids, P.id2mcode _3)) )
# 35398 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_includes = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_statement = 
# 1357 "parser_cocci_menhir.mly"
           ( _1 )
# 35422 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 224 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 35443 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_statement = 
# 1358 "parser_cocci_menhir.mly"
        ( tmeta_to_statement _1)
# 35450 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 223 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 35471 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_statement = 
# 1360 "parser_cocci_menhir.mly"
    ( P.meta_stm _1 )
# 35478 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 35504 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_option_expr_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_statement = 
# 1362 "parser_cocci_menhir.mly"
    ( P.exp_stm _1 _2 )
# 35512 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let _5 : 'tv_single_statement = Obj.magic _5 in
        let _4 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 35554 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr = Obj.magic _3 in
        let _2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 35560 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 214 "parser_cocci_menhir.mly"
       (Data.clt)
# 35565 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_statement = 
# 1364 "parser_cocci_menhir.mly"
    ( P.ifthen _1 _2 _3 _4 _5 )
# 35572 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let _7 : 'tv_single_statement = Obj.magic _7 in
        let _6 : (
# 214 "parser_cocci_menhir.mly"
       (Data.clt)
# 35624 "parser_cocci_menhir.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_single_statement = Obj.magic _5 in
        let _4 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 35630 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr = Obj.magic _3 in
        let _2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 35636 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 214 "parser_cocci_menhir.mly"
       (Data.clt)
# 35641 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_statement = 
# 1366 "parser_cocci_menhir.mly"
    ( P.ifthenelse _1 _2 _3 _4 _5 _6 _7 )
# 35648 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let _9 : 'tv_single_statement = Obj.magic _9 in
        let _8 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 35710 "parser_cocci_menhir.ml"
        ) = Obj.magic _8 in
        let _7 : 'tv_option_eexpr_ = Obj.magic _7 in
        let _6 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 35716 "parser_cocci_menhir.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_option_eexpr_ = Obj.magic _5 in
        let _4 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 35722 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_option_eexpr_ = Obj.magic _3 in
        let _2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 35728 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 214 "parser_cocci_menhir.mly"
       (Data.clt)
# 35733 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v : 'tv_statement = 
# 1369 "parser_cocci_menhir.mly"
    ( P.forloop _1 _2 _3 _4 _5 _6 _7 _8 _9 )
# 35740 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let _8 : 'tv_single_statement = Obj.magic _8 in
        let _7 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 35797 "parser_cocci_menhir.ml"
        ) = Obj.magic _7 in
        let _6 : 'tv_option_eexpr_ = Obj.magic _6 in
        let _5 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 35803 "parser_cocci_menhir.ml"
        ) = Obj.magic _5 in
        let _4 : 'tv_option_eexpr_ = Obj.magic _4 in
        let _3 : 'tv_one_decl_var = Obj.magic _3 in
        let _2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 35810 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 214 "parser_cocci_menhir.mly"
       (Data.clt)
# 35815 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : 'tv_statement = 
# 1372 "parser_cocci_menhir.mly"
    ( P.forloop2 _1 _2 _3 _4 _5 _6 _7 _8 )
# 35822 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let _5 : 'tv_single_statement = Obj.magic _5 in
        let _4 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 35864 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr = Obj.magic _3 in
        let _2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 35870 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 214 "parser_cocci_menhir.mly"
       (Data.clt)
# 35875 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_statement = 
# 1374 "parser_cocci_menhir.mly"
    ( P.whileloop _1 _2 _3 _4 _5 )
# 35882 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let _7 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 35933 "parser_cocci_menhir.ml"
        ) = Obj.magic _7 in
        let _6 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 35938 "parser_cocci_menhir.ml"
        ) = Obj.magic _6 in
        let _5 : 'tv_eexpr = Obj.magic _5 in
        let _4 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 35944 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : (
# 214 "parser_cocci_menhir.mly"
       (Data.clt)
# 35949 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_single_statement = Obj.magic _2 in
        let _1 : (
# 214 "parser_cocci_menhir.mly"
       (Data.clt)
# 35955 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : 'tv_statement = 
# 1376 "parser_cocci_menhir.mly"
    ( P.doloop _1 _2 _3 _4 _5 _6 _7 )
# 35962 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let _5 : 'tv_single_statement = Obj.magic _5 in
        let _4 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 36004 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr_list_option = Obj.magic _3 in
        let _2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 36010 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_iter_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : 'tv_statement = 
# 1378 "parser_cocci_menhir.mly"
    ( P.iterator _1 _2 _3 _4 _5 )
# 36018 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let _8 : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 36074 "parser_cocci_menhir.ml"
        ) = Obj.magic _8 in
        let _7 : 'tv_list_case_line_ = Obj.magic _7 in
        let _6 : 'tv_list_decl_var_ = Obj.magic _6 in
        let _5 : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 36081 "parser_cocci_menhir.ml"
        ) = Obj.magic _5 in
        let _4 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 36086 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_eexpr = Obj.magic _3 in
        let _2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 36092 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 214 "parser_cocci_menhir.mly"
       (Data.clt)
# 36097 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : 'tv_statement = 
# 1380 "parser_cocci_menhir.mly"
    ( P.switch _1 _2 _3 _4 _5 (List.concat _6) _7 _8 )
# 36104 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 36135 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_eexpr = Obj.magic _2 in
        let _1 : (
# 214 "parser_cocci_menhir.mly"
       (Data.clt)
# 36141 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_statement = 
# 1381 "parser_cocci_menhir.mly"
                        ( P.ret_exp _1 _2 _3 )
# 36148 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 36174 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 214 "parser_cocci_menhir.mly"
       (Data.clt)
# 36179 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_statement = 
# 1382 "parser_cocci_menhir.mly"
                  ( P.ret _1 _2 )
# 36186 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 36212 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 215 "parser_cocci_menhir.mly"
       (Data.clt)
# 36217 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_statement = 
# 1383 "parser_cocci_menhir.mly"
                 ( P.break _1 _2 )
# 36224 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 36250 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 215 "parser_cocci_menhir.mly"
       (Data.clt)
# 36255 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_statement = 
# 1384 "parser_cocci_menhir.mly"
                    ( P.cont _1 _2 )
# 36262 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 36288 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : 'tv_mident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_statement = 
# 1385 "parser_cocci_menhir.mly"
                 ( P.label _1 _2 )
# 36296 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 36327 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_disj_ident = Obj.magic _2 in
        let _1 : (
# 215 "parser_cocci_menhir.mly"
       (Data.clt)
# 36333 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_statement = 
# 1386 "parser_cocci_menhir.mly"
                           ( P.goto _1 _2 _3 )
# 36340 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 36371 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_fun_start = Obj.magic _2 in
        let _1 : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 36377 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_statement = 
# 1388 "parser_cocci_menhir.mly"
    ( P.seq _1 _2 _3 )
# 36384 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let _4 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 36420 "parser_cocci_menhir.ml"
        ) = Obj.magic _4 in
        let _3 : 'tv_exec_list = Obj.magic _3 in
        let _2 : (
# 216 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 36426 "parser_cocci_menhir.ml"
        ) = Obj.magic _2 in
        let _1 : (
# 215 "parser_cocci_menhir.mly"
       (Data.clt)
# 36431 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_statement = 
# 1390 "parser_cocci_menhir.mly"
    ( Ast0.wrap(
      Ast0.Exec(P.clt2mcode "EXEC" _1,P.clt2mcode (fst _2) (snd _2),
		Ast0.wrap(Ast0.DOTS _3),P.clt2mcode ";" _4)) )
# 36440 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = w;
          MenhirLib.EngineTypes.startp = _startpos_w_;
          MenhirLib.EngineTypes.endp = _endpos_w_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let w : 'tv_list_whenppdecs_ = Obj.magic w in
        let _1 : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 36467 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_w_ in
        let _v : 'tv_stm_dots = 
# 1396 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Dots(P.clt2mcode "..." _1, List.concat w)) )
# 36474 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = c;
          MenhirLib.EngineTypes.startp = _startpos_c_;
          MenhirLib.EngineTypes.endp = _endpos_c_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = b;
            MenhirLib.EngineTypes.startp = _startpos_b_;
            MenhirLib.EngineTypes.endp = _endpos_b_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = w;
              MenhirLib.EngineTypes.startp = _startpos_w_;
              MenhirLib.EngineTypes.endp = _endpos_w_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let c : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 36510 "parser_cocci_menhir.ml"
        ) = Obj.magic c in
        let b : 'tv_nest_start = Obj.magic b in
        let w : 'tv_list_whenppdecs_ = Obj.magic w in
        let _1 : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 36517 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_c_ in
        let _v : 'tv_stm_dots = 
# 1398 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Nest(P.clt2mcode "<..." _1, b,
			  P.clt2mcode "...>" c, List.concat w, false)) )
# 36525 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = c;
          MenhirLib.EngineTypes.startp = _startpos_c_;
          MenhirLib.EngineTypes.endp = _endpos_c_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = b;
            MenhirLib.EngineTypes.startp = _startpos_b_;
            MenhirLib.EngineTypes.endp = _endpos_b_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = w;
              MenhirLib.EngineTypes.startp = _startpos_w_;
              MenhirLib.EngineTypes.endp = _endpos_w_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let c : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 36561 "parser_cocci_menhir.ml"
        ) = Obj.magic c in
        let b : 'tv_nest_start = Obj.magic b in
        let w : 'tv_list_whenppdecs_ = Obj.magic w in
        let _1 : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 36568 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_c_ in
        let _v : 'tv_stm_dots = 
# 1401 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Nest(P.clt2mcode "<+..." _1, b,
			  P.clt2mcode "...+>" c, List.concat w, true)) )
# 36576 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let s : (
# 209 "parser_cocci_menhir.mly"
      (Data.clt)
# 36597 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_storage = 
# 1318 "parser_cocci_menhir.mly"
                        ( P.clt2mcode Ast.Static s )
# 36604 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let s : (
# 209 "parser_cocci_menhir.mly"
      (Data.clt)
# 36625 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_storage = 
# 1319 "parser_cocci_menhir.mly"
                        ( P.clt2mcode Ast.Auto s )
# 36632 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let s : (
# 209 "parser_cocci_menhir.mly"
      (Data.clt)
# 36653 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_storage = 
# 1320 "parser_cocci_menhir.mly"
                        ( P.clt2mcode Ast.Register s )
# 36660 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let s : (
# 209 "parser_cocci_menhir.mly"
      (Data.clt)
# 36681 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_storage = 
# 1321 "parser_cocci_menhir.mly"
                        ( P.clt2mcode Ast.Extern s )
# 36688 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_struct_decl = 
# 932 "parser_cocci_menhir.mly"
                      ( [] )
# 36710 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_struct_decl_one = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_struct_decl = 
# 933 "parser_cocci_menhir.mly"
                      ( [_1] )
# 36734 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_struct_decl_list_start = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_struct_decl_list = 
# 961 "parser_cocci_menhir.mly"
                          ( Ast0.wrap(Ast0.DOTS(_1)) )
# 36758 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_struct_decl = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_struct_decl_list_start = 
# 964 "parser_cocci_menhir.mly"
                                     ( _1 )
# 36782 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_struct_decl_list_start = Obj.magic _2 in
        let _1 : 'tv_struct_decl = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_struct_decl_list_start = 
# 965 "parser_cocci_menhir.mly"
                                     ( _1@_2 )
# 36812 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let r : 'tv_continue_struct_decl_list = Obj.magic r in
        let d : 'tv_edots_when_TEllipsis_struct_decl_one_ = Obj.magic d in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_r_ in
        let _v : 'tv_struct_decl_list_start = 
# 967 "parser_cocci_menhir.mly"
    ( (P.mkddots_one "..." d)::r )
# 36842 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 224 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 36863 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_struct_decl_one = 
# 936 "parser_cocci_menhir.mly"
                 ( P.meta_field _1 )
# 36870 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 226 "parser_cocci_menhir.mly"
       (Parse_aux.list_info)
# 36891 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_struct_decl_one = 
# 937 "parser_cocci_menhir.mly"
                     ( P.meta_field_list _1 )
# 36898 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 224 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 36919 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_struct_decl_one = 
# 938 "parser_cocci_menhir.mly"
            ( tmeta_to_field _1 )
# 36926 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = rp;
          MenhirLib.EngineTypes.startp = _startpos_rp_;
          MenhirLib.EngineTypes.endp = _endpos_rp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = lp;
              MenhirLib.EngineTypes.startp = _startpos_lp_;
              MenhirLib.EngineTypes.endp = _endpos_lp_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let rp : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 36957 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let t : 'tv_midzero_list_struct_decl_one_struct_decl_one_ = Obj.magic t in
        let lp : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 36963 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let _startpos = _startpos_lp_ in
        let _endpos = _endpos_rp_ in
        let _v : 'tv_struct_decl_one = 
# 940 "parser_cocci_menhir.mly"
 ( let (mids,code) = t in
	Ast0.wrap
	  (Ast0.DisjDecl(P.id2mcode lp,code,mids, P.id2mcode rp)) )
# 36972 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 37003 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_d_ident = Obj.magic d in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_struct_decl_one = 
# 944 "parser_cocci_menhir.mly"
  ( let (id,fn) = d in
	 Ast0.wrap(Ast0.UnInit(None,fn t,id,P.clt2mcode ";" pv)) )
# 37013 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = rp2;
            MenhirLib.EngineTypes.startp = _startpos_rp2_;
            MenhirLib.EngineTypes.endp = _endpos_rp2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = p;
              MenhirLib.EngineTypes.startp = _startpos_p_;
              MenhirLib.EngineTypes.endp = _endpos_p_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = lp2;
                MenhirLib.EngineTypes.startp = _startpos_lp2_;
                MenhirLib.EngineTypes.endp = _endpos_lp2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.semv = rp1;
                  MenhirLib.EngineTypes.startp = _startpos_rp1_;
                  MenhirLib.EngineTypes.endp = _endpos_rp1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.semv = d;
                    MenhirLib.EngineTypes.startp = _startpos_d_;
                    MenhirLib.EngineTypes.endp = _endpos_d_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.semv = st;
                      MenhirLib.EngineTypes.startp = _startpos_st_;
                      MenhirLib.EngineTypes.endp = _endpos_st_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.semv = lp1;
                        MenhirLib.EngineTypes.startp = _startpos_lp1_;
                        MenhirLib.EngineTypes.endp = _endpos_lp1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = t;
                          MenhirLib.EngineTypes.startp = _startpos_t_;
                          MenhirLib.EngineTypes.endp = _endpos_t_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 37074 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let rp2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 37079 "parser_cocci_menhir.ml"
        ) = Obj.magic rp2 in
        let p : 'tv_decl_list_name_opt_decl_ = Obj.magic p in
        let lp2 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 37085 "parser_cocci_menhir.ml"
        ) = Obj.magic lp2 in
        let rp1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 37090 "parser_cocci_menhir.ml"
        ) = Obj.magic rp1 in
        let d : 'tv_d_ident = Obj.magic d in
        let st : (
# 263 "parser_cocci_menhir.mly"
       (Data.clt)
# 37096 "parser_cocci_menhir.ml"
        ) = Obj.magic st in
        let lp1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 37101 "parser_cocci_menhir.ml"
        ) = Obj.magic lp1 in
        let t : 'tv_ctype = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_struct_decl_one = 
# 948 "parser_cocci_menhir.mly"
        ( let (id,fn) = d in
        let t =
	  Ast0.wrap
	    (Ast0.FunctionPointer
	       (t,P.clt2mcode "(" lp1,P.clt2mcode "*" st,P.clt2mcode ")" rp1,
		P.clt2mcode "(" lp2,p,P.clt2mcode ")" rp2)) in
        Ast0.wrap(Ast0.UnInit(None,fn t,id,P.clt2mcode ";" pv)) )
# 37115 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 37146 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident_or_symbol = Obj.magic i in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_struct_decl_one = let cv =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 37156 "parser_cocci_menhir.ml"
          
        in
        
# 956 "parser_cocci_menhir.mly"
  ( let (id,fn) = d in
	 let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
	 Ast0.wrap(Ast0.UnInit(None,fn idtype,id,P.clt2mcode ";" pv)) )
# 37164 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = pv;
          MenhirLib.EngineTypes.startp = _startpos_pv_;
          MenhirLib.EngineTypes.endp = _endpos_pv_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = d;
            MenhirLib.EngineTypes.startp = _startpos_d_;
            MenhirLib.EngineTypes.endp = _endpos_d_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x0;
                MenhirLib.EngineTypes.startp = _startpos_x0_;
                MenhirLib.EngineTypes.endp = _endpos_x0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let pv : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 37200 "parser_cocci_menhir.ml"
        ) = Obj.magic pv in
        let d : 'tv_d_ident = Obj.magic d in
        let i : 'tv_pure_ident_or_symbol = Obj.magic i in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_pv_ in
        let _v : 'tv_struct_decl_one = let cv =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 37212 "parser_cocci_menhir.ml"
          
        in
        
# 956 "parser_cocci_menhir.mly"
  ( let (id,fn) = d in
	 let idtype = P.make_cv cv (Ast0.wrap (Ast0.TypeName(P.id2mcode i))) in
	 Ast0.wrap(Ast0.UnInit(None,fn idtype,id,P.clt2mcode ";" pv)) )
# 37220 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let s : (
# 206 "parser_cocci_menhir.mly"
      (Data.clt)
# 37241 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : 'tv_struct_or_union = 
# 928 "parser_cocci_menhir.mly"
                 ( P.clt2mcode Ast.Struct s )
# 37248 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = u;
          MenhirLib.EngineTypes.startp = _startpos_u_;
          MenhirLib.EngineTypes.endp = _endpos_u_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let u : (
# 206 "parser_cocci_menhir.mly"
      (Data.clt)
# 37269 "parser_cocci_menhir.ml"
        ) = Obj.magic u in
        let _startpos = _startpos_u_ in
        let _endpos = _endpos_u_ in
        let _v : 'tv_struct_or_union = 
# 929 "parser_cocci_menhir.mly"
                 ( P.clt2mcode Ast.Union u )
# 37276 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let i : 'tv_meta_ident = Obj.magic i in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_i_ in
        let _v : 'tv_sub = 
# 2227 "parser_cocci_menhir.mly"
         ( (if !Data.in_iso
	   then failwith "constraints not allowed in iso file");
	   (if !Data.in_generating
	   then failwith "constraints not allowed in a generated rule file");
	   let i =
	     P.check_inherited_constraint i
	       (function mv -> Ast.MetaExpDecl(Ast.NONE,mv,None)) in
	   [i] )
# 37311 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let l : 'tv_comma_list_meta_ident_ = Obj.magic l in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_sub = 
# 2236 "parser_cocci_menhir.mly"
  ( (if !Data.in_iso
	   then failwith "constraints not allowed in iso file");
	   (if !Data.in_generating
	   then failwith "constraints not allowed in a generated rule file");
           List.map
	     (function i ->
	       P.check_inherited_constraint i
		 (function mv -> Ast.MetaExpDecl(Ast.NONE,mv,None)))
	     l)
# 37355 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 262 "parser_cocci_menhir.mly"
       (Data.clt)
# 37376 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_token = 
# 2669 "parser_cocci_menhir.mly"
          ( P.clt2mcode "+" _1 )
# 37383 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 262 "parser_cocci_menhir.mly"
       (Data.clt)
# 37404 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_token = 
# 2670 "parser_cocci_menhir.mly"
           ( P.clt2mcode "-" _1 )
# 37411 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 263 "parser_cocci_menhir.mly"
       (Data.clt)
# 37432 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_token = 
# 2671 "parser_cocci_menhir.mly"
         ( P.clt2mcode "*" _1 )
# 37439 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 258 "parser_cocci_menhir.mly"
       (Data.clt)
# 37460 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_token = 
# 2672 "parser_cocci_menhir.mly"
          ( P.clt2mcode "==" _1 )
# 37467 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 258 "parser_cocci_menhir.mly"
       (Data.clt)
# 37488 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_token = 
# 2673 "parser_cocci_menhir.mly"
           ( P.clt2mcode "!=" _1 )
# 37495 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 261 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 37516 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_token = 
# 2674 "parser_cocci_menhir.mly"
          ( P.clt2mcode (arithOp(fst _1)) (snd _1) )
# 37523 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 260 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 37544 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_token = 
# 2675 "parser_cocci_menhir.mly"
           ( P.clt2mcode (arithOp(fst _1)) (snd _1) )
# 37551 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 260 "parser_cocci_menhir.mly"
       (Ast_cocci.arithOp * Data.clt)
# 37572 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_token = 
# 2676 "parser_cocci_menhir.mly"
           ( P.clt2mcode (arithOp(fst _1)) (snd _1) )
# 37579 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 259 "parser_cocci_menhir.mly"
       (Ast_cocci.logicalOp * Data.clt)
# 37600 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_token = 
# 2677 "parser_cocci_menhir.mly"
           ( P.clt2mcode (logicalOp(fst _1)) (snd _1) )
# 37607 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 255 "parser_cocci_menhir.mly"
       (Data.clt)
# 37628 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_token = 
# 2678 "parser_cocci_menhir.mly"
        ( P.clt2mcode "|" _1 )
# 37635 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 256 "parser_cocci_menhir.mly"
       (Data.clt)
# 37656 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_token = 
# 2679 "parser_cocci_menhir.mly"
         ( P.clt2mcode "+" _1 )
# 37663 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 257 "parser_cocci_menhir.mly"
       (Data.clt)
# 37684 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_token = 
# 2680 "parser_cocci_menhir.mly"
         ( P.clt2mcode "&" _1 )
# 37691 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 253 "parser_cocci_menhir.mly"
       (Data.clt)
# 37712 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_token = 
# 2681 "parser_cocci_menhir.mly"
           ( P.clt2mcode "||" _1 )
# 37719 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 254 "parser_cocci_menhir.mly"
       (Data.clt)
# 37740 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_token = 
# 2682 "parser_cocci_menhir.mly"
            ( P.clt2mcode "&&" _1 )
# 37747 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 37768 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_token = 
# 2683 "parser_cocci_menhir.mly"
            ( P.clt2mcode "{" _1 )
# 37775 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 37796 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_token = 
# 2684 "parser_cocci_menhir.mly"
            ( P.clt2mcode "}" _1 )
# 37803 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 266 "parser_cocci_menhir.mly"
       (Data.clt)
# 37824 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_token = 
# 2685 "parser_cocci_menhir.mly"
          ( P.clt2mcode "[" _1 )
# 37831 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 266 "parser_cocci_menhir.mly"
       (Data.clt)
# 37852 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_token = 
# 2686 "parser_cocci_menhir.mly"
          ( P.clt2mcode "]" _1 )
# 37859 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 37880 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_token = 
# 2687 "parser_cocci_menhir.mly"
        ( P.clt2mcode "=" _1 )
# 37887 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 37908 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_token = 
# 2688 "parser_cocci_menhir.mly"
         ( P.clt2mcode "?" _1 )
# 37915 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 37936 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_token = 
# 2689 "parser_cocci_menhir.mly"
          ( P.clt2mcode "!" _1 )
# 37943 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 37964 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_token = 
# 2690 "parser_cocci_menhir.mly"
          ( P.clt2mcode "(" _1 )
# 37971 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 37992 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_token = 
# 2691 "parser_cocci_menhir.mly"
          ( P.clt2mcode ")" _1 )
# 37999 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 214 "parser_cocci_menhir.mly"
       (Data.clt)
# 38020 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_token = 
# 2692 "parser_cocci_menhir.mly"
        ( P.clt2mcode "if" _1 )
# 38027 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 214 "parser_cocci_menhir.mly"
       (Data.clt)
# 38048 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_token = 
# 2693 "parser_cocci_menhir.mly"
          ( P.clt2mcode "else" _1 )
# 38055 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_ctype = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_top_ctype = 
# 891 "parser_cocci_menhir.mly"
        ( Ast0.wrap(Ast0.OTHER(Ast0.wrap(Ast0.Ty(_1)))) )
# 38079 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_eexpr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_top_eexpr = 
# 1741 "parser_cocci_menhir.mly"
        ( Ast0.wrap(Ast0.OTHER(Ast0.wrap(Ast0.Exp(_1)))) )
# 38103 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let _3 : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 38134 "parser_cocci_menhir.ml"
        ) = Obj.magic _3 in
        let _2 : 'tv_initialize_list = Obj.magic _2 in
        let _1 : (
# 265 "parser_cocci_menhir.mly"
       (Data.clt)
# 38140 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_top_init = 
# 2499 "parser_cocci_menhir.mly"
    ( if P.struct_initializer _2
    then
      let il = P.drop_dot_commas _2 in
      Ast0.wrap(Ast0.InitList(P.clt2mcode "{" _1,il,P.clt2mcode "}" _3,false))
    else
      Ast0.wrap(Ast0.InitList(P.clt2mcode "{" _1,_2,P.clt2mcode "}" _3,true)) )
# 38152 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_toplevel_after_dots = 
# 2487 "parser_cocci_menhir.mly"
                                     ([])
# 38169 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_exp = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_after_dots = 
# 2488 "parser_cocci_menhir.mly"
                                     (_2)
# 38197 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_exp = Obj.magic _2 in
        let _1 : 'tv_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_after_dots = 
# 2489 "parser_cocci_menhir.mly"
                                     ((Ast0.wrap(Ast0.Exp(_1)))::_2)
# 38227 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_after_dots = 
# 2490 "parser_cocci_menhir.mly"
                                          (_1@_2)
# 38257 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_exp = Obj.magic _2 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_after_dots_init = 
# 2478 "parser_cocci_menhir.mly"
                                     (_2)
# 38285 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_exp = Obj.magic _2 in
        let _1 : 'tv_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_after_dots_init = 
# 2479 "parser_cocci_menhir.mly"
                                     ((Ast0.wrap(Ast0.Exp(_1)))::_2)
# 38315 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_after_dots_init = 
# 2480 "parser_cocci_menhir.mly"
                                          (_1@_2)
# 38345 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_toplevel_after_exp = 
# 2483 "parser_cocci_menhir.mly"
                                     ([])
# 38362 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_dots = Obj.magic _2 in
        let _1 : 'tv_stm_dots = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_after_exp = 
# 2484 "parser_cocci_menhir.mly"
                                     (_1::_2)
# 38392 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _startpos = _menhir_env.MenhirLib.EngineTypes.lexbuf.Lexing.lex_start_p in
        let _endpos = _startpos in
        let _v : 'tv_toplevel_after_stm = 
# 2493 "parser_cocci_menhir.mly"
                                     ([])
# 38409 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_dots = Obj.magic _2 in
        let _1 : 'tv_stm_dots = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_after_stm = 
# 2494 "parser_cocci_menhir.mly"
                                     (_1::_2)
# 38439 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_after_stm = 
# 2495 "parser_cocci_menhir.mly"
                                     (_1@_2)
# 38469 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_dots = Obj.magic _2 in
        let _1 : 'tv_stm_dots = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_seq_start_toplevel_after_dots_ = 
# 2473 "parser_cocci_menhir.mly"
                                     ( _1::_2 )
# 38499 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_exp = Obj.magic _2 in
        let _1 : 'tv_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_seq_start_toplevel_after_dots_ = 
# 2474 "parser_cocci_menhir.mly"
                                     ( (Ast0.wrap(Ast0.Exp(_1)))::_2 )
# 38529 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_seq_start_toplevel_after_dots_ = 
# 2475 "parser_cocci_menhir.mly"
                                          ( _1@_2 )
# 38559 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = w0;
            MenhirLib.EngineTypes.startp = _startpos_w0_;
            MenhirLib.EngineTypes.endp = _endpos_w0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = a0;
              MenhirLib.EngineTypes.startp = _startpos_a0_;
              MenhirLib.EngineTypes.endp = _endpos_a0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let b : 'tv_toplevel_after_dots_init = Obj.magic b in
        let w0 : 'tv_list_whenppdecs_ = Obj.magic w0 in
        let a0 : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 38592 "parser_cocci_menhir.ml"
        ) = Obj.magic a0 in
        let _startpos = _startpos_a0_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_toplevel_seq_startne_toplevel_after_dots_init_ = let a =
          let w = w0 in
          let a = a0 in
          
# 1406 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Dots(P.clt2mcode "..." a, List.concat w)) )
# 38602 "parser_cocci_menhir.ml"
          
        in
        
# 2466 "parser_cocci_menhir.mly"
                                             ( a::b )
# 38608 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = c0;
            MenhirLib.EngineTypes.startp = _startpos_c0_;
            MenhirLib.EngineTypes.endp = _endpos_c0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = b0;
              MenhirLib.EngineTypes.startp = _startpos_b0_;
              MenhirLib.EngineTypes.endp = _endpos_b0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = w0;
                MenhirLib.EngineTypes.startp = _startpos_w0_;
                MenhirLib.EngineTypes.endp = _endpos_w0_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = a0;
                  MenhirLib.EngineTypes.startp = _startpos_a0_;
                  MenhirLib.EngineTypes.endp = _endpos_a0_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let b : 'tv_toplevel_after_dots_init = Obj.magic b in
        let c0 : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 38650 "parser_cocci_menhir.ml"
        ) = Obj.magic c0 in
        let b0 : 'tv_nest_start = Obj.magic b0 in
        let w0 : 'tv_list_whenppdecs_ = Obj.magic w0 in
        let a0 : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 38657 "parser_cocci_menhir.ml"
        ) = Obj.magic a0 in
        let _startpos = _startpos_a0_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_toplevel_seq_startne_toplevel_after_dots_init_ = let a =
          let c = c0 in
          let b = b0 in
          let w = w0 in
          let a = a0 in
          
# 1410 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Nest(P.clt2mcode "<..." a, b,
			  P.clt2mcode "...>" c, List.concat w, false)) )
# 38670 "parser_cocci_menhir.ml"
          
        in
        
# 2467 "parser_cocci_menhir.mly"
                                              ( a::b )
# 38676 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = c0;
            MenhirLib.EngineTypes.startp = _startpos_c0_;
            MenhirLib.EngineTypes.endp = _endpos_c0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = b0;
              MenhirLib.EngineTypes.startp = _startpos_b0_;
              MenhirLib.EngineTypes.endp = _endpos_b0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.semv = w0;
                MenhirLib.EngineTypes.startp = _startpos_w0_;
                MenhirLib.EngineTypes.endp = _endpos_w0_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = a0;
                  MenhirLib.EngineTypes.startp = _startpos_a0_;
                  MenhirLib.EngineTypes.endp = _endpos_a0_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          } = _menhir_stack in
        let b : 'tv_toplevel_after_dots_init = Obj.magic b in
        let c0 : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 38718 "parser_cocci_menhir.ml"
        ) = Obj.magic c0 in
        let b0 : 'tv_nest_start = Obj.magic b0 in
        let w0 : 'tv_list_whenppdecs_ = Obj.magic w0 in
        let a0 : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 38725 "parser_cocci_menhir.ml"
        ) = Obj.magic a0 in
        let _startpos = _startpos_a0_ in
        let _endpos = _endpos_b_ in
        let _v : 'tv_toplevel_seq_startne_toplevel_after_dots_init_ = let a =
          let c = c0 in
          let b = b0 in
          let w = w0 in
          let a = a0 in
          
# 1413 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Nest(P.clt2mcode "<+..." a, b,
			  P.clt2mcode "...+>" c, List.concat w, true)) )
# 38738 "parser_cocci_menhir.ml"
          
        in
        
# 2467 "parser_cocci_menhir.mly"
                                              ( a::b )
# 38744 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = c0;
          MenhirLib.EngineTypes.startp = _startpos_c0_;
          MenhirLib.EngineTypes.endp = _endpos_c0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = b0;
            MenhirLib.EngineTypes.startp = _startpos_b0_;
            MenhirLib.EngineTypes.endp = _endpos_b0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = w0;
              MenhirLib.EngineTypes.startp = _startpos_w0_;
              MenhirLib.EngineTypes.endp = _endpos_w0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = a0;
                MenhirLib.EngineTypes.startp = _startpos_a0_;
                MenhirLib.EngineTypes.endp = _endpos_a0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let c0 : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 38780 "parser_cocci_menhir.ml"
        ) = Obj.magic c0 in
        let b0 : 'tv_nest_start = Obj.magic b0 in
        let w0 : 'tv_list_whenppdecs_ = Obj.magic w0 in
        let a0 : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 38787 "parser_cocci_menhir.ml"
        ) = Obj.magic a0 in
        let _startpos = _startpos_a0_ in
        let _endpos = _endpos_c0_ in
        let _v : 'tv_toplevel_seq_startne_toplevel_after_dots_init_ = let a =
          let c = c0 in
          let b = b0 in
          let w = w0 in
          let a = a0 in
          
# 1410 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Nest(P.clt2mcode "<..." a, b,
			  P.clt2mcode "...>" c, List.concat w, false)) )
# 38800 "parser_cocci_menhir.ml"
          
        in
        
# 2468 "parser_cocci_menhir.mly"
                                       ( [a] )
# 38806 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = c0;
          MenhirLib.EngineTypes.startp = _startpos_c0_;
          MenhirLib.EngineTypes.endp = _endpos_c0_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = b0;
            MenhirLib.EngineTypes.startp = _startpos_b0_;
            MenhirLib.EngineTypes.endp = _endpos_b0_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = w0;
              MenhirLib.EngineTypes.startp = _startpos_w0_;
              MenhirLib.EngineTypes.endp = _endpos_w0_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = a0;
                MenhirLib.EngineTypes.startp = _startpos_a0_;
                MenhirLib.EngineTypes.endp = _endpos_a0_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let c0 : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 38842 "parser_cocci_menhir.ml"
        ) = Obj.magic c0 in
        let b0 : 'tv_nest_start = Obj.magic b0 in
        let w0 : 'tv_list_whenppdecs_ = Obj.magic w0 in
        let a0 : (
# 235 "parser_cocci_menhir.mly"
       (Data.clt)
# 38849 "parser_cocci_menhir.ml"
        ) = Obj.magic a0 in
        let _startpos = _startpos_a0_ in
        let _endpos = _endpos_c0_ in
        let _v : 'tv_toplevel_seq_startne_toplevel_after_dots_init_ = let a =
          let c = c0 in
          let b = b0 in
          let w = w0 in
          let a = a0 in
          
# 1413 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.Nest(P.clt2mcode "<+..." a, b,
			  P.clt2mcode "...+>" c, List.concat w, true)) )
# 38862 "parser_cocci_menhir.ml"
          
        in
        
# 2468 "parser_cocci_menhir.mly"
                                       ( [a] )
# 38868 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_exp = Obj.magic _2 in
        let _1 : 'tv_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_seq_startne_toplevel_after_dots_init_ = 
# 2469 "parser_cocci_menhir.mly"
                                     ( (Ast0.wrap(Ast0.Exp(_1)))::_2 )
# 38898 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_toplevel_seq_startne_toplevel_after_dots_init_ = 
# 2470 "parser_cocci_menhir.mly"
                                          ( _1@_2 )
# 38928 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_disj_ident = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_ident = 
# 2324 "parser_cocci_menhir.mly"
                       ( _1 )
# 38952 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 216 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 38973 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_type_ident = 
# 2326 "parser_cocci_menhir.mly"
         ( Ast0.wrap(Ast0.Id(P.id2mcode _1)) )
# 38980 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty : 'tv_all_basic_types = Obj.magic ty in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let cv =
          
# 39 "/usr/share/menhir/standard.mly"
    ( None )
# 39011 "parser_cocci_menhir.ml"
          
        in
        
# 918 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 39017 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = m;
          MenhirLib.EngineTypes.startp = _startpos_m_;
          MenhirLib.EngineTypes.endp = _endpos_m_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x0;
              MenhirLib.EngineTypes.startp = _startpos_x0_;
              MenhirLib.EngineTypes.endp = _endpos_x0_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let m : 'tv_list_TMul_ = Obj.magic m in
        let ty : 'tv_all_basic_types = Obj.magic ty in
        let x0 : 'tv_const_vol = Obj.magic x0 in
        let _startpos = _startpos_x0_ in
        let _endpos = _endpos_m_ in
        let _v : 'tv_typedef_ctype = let cv =
          let x = x0 in
          
# 41 "/usr/share/menhir/standard.mly"
    ( Some x )
# 39055 "parser_cocci_menhir.ml"
          
        in
        
# 918 "parser_cocci_menhir.mly"
    ( P.pointerify (P.make_cv cv ty) m )
# 39061 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = rp;
          MenhirLib.EngineTypes.startp = _startpos_rp_;
          MenhirLib.EngineTypes.endp = _endpos_rp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = lp;
              MenhirLib.EngineTypes.startp = _startpos_lp_;
              MenhirLib.EngineTypes.endp = _endpos_lp_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let rp : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 39092 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let t : 'tv_midzero_list_mctype_mctype_ = Obj.magic t in
        let lp : (
# 239 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 39098 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let _startpos = _startpos_lp_ in
        let _endpos = _endpos_rp_ in
        let _v : 'tv_typedef_ctype = 
# 920 "parser_cocci_menhir.mly"
    ( let (mids,code) = t in
      Ast0.wrap
	(Ast0.DisjType(P.id2mcode lp,code,mids, P.id2mcode rp)) )
# 39107 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 224 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 39128 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_typedef_ctype = 
# 923 "parser_cocci_menhir.mly"
        ( tmeta_to_type _1 )
# 39135 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_pure_ident_or_symbol = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_typedef_ident = 
# 2344 "parser_cocci_menhir.mly"
         ( Ast0.wrap(Ast0.TypeName(P.id2mcode _1)) )
# 39159 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 224 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 39180 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_typedef_ident = 
# 2345 "parser_cocci_menhir.mly"
             ( tmeta_to_type _1 )
# 39187 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 223 "parser_cocci_menhir.mly"
       (Parse_aux.info)
# 39208 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_typedef_ident = 
# 2347 "parser_cocci_menhir.mly"
         ( let (nm,pure,clt) = _1 in
	 Ast0.wrap(Ast0.MetaType(P.clt2mcode nm clt,pure)) )
# 39216 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_postfix_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_expr_eexpr_dot_expressions_ = 
# 1883 "parser_cocci_menhir.mly"
                                         ( _1 )
# 39240 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_bis = Obj.magic _2 in
        let _1 : (
# 248 "parser_cocci_menhir.mly"
       (Data.clt)
# 39267 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_dot_expressions_ = 
# 1885 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Infix (_2, P.clt2mcode Ast.Inc _1)) )
# 39274 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_bis = Obj.magic _2 in
        let _1 : (
# 248 "parser_cocci_menhir.mly"
       (Data.clt)
# 39301 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_dot_expressions_ = 
# 1887 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Infix (_2, P.clt2mcode Ast.Dec _1)) )
# 39308 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_cast_expr_eexpr_dot_expressions_ = Obj.magic _2 in
        let _1 : 'tv_unary_op = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_dot_expressions_ = 
# 1889 "parser_cocci_menhir.mly"
      ( let mcode = _1 in Ast0.wrap(Ast0.Unary(_2, mcode)) )
# 39338 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_bis = Obj.magic _2 in
        let _1 : (
# 215 "parser_cocci_menhir.mly"
       (Data.clt)
# 39365 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_dot_expressions_ = 
# 1891 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.SizeOfExpr (P.clt2mcode "sizeof" _1, _2)) )
# 39372 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = rp;
          MenhirLib.EngineTypes.startp = _startpos_rp_;
          MenhirLib.EngineTypes.endp = _endpos_rp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = lp;
              MenhirLib.EngineTypes.startp = _startpos_lp_;
              MenhirLib.EngineTypes.endp = _endpos_lp_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = s;
                MenhirLib.EngineTypes.startp = _startpos_s_;
                MenhirLib.EngineTypes.endp = _endpos_s_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let rp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 39408 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let t : 'tv_ctype = Obj.magic t in
        let lp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 39414 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let s : (
# 215 "parser_cocci_menhir.mly"
       (Data.clt)
# 39419 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_rp_ in
        let _v : 'tv_unary_expr_eexpr_dot_expressions_ = 
# 1893 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.SizeOfType (P.clt2mcode "sizeof" s,
                                   P.clt2mcode "(" lp,t,
                                   P.clt2mcode ")" rp)) )
# 39428 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_postfix_expr_eexpr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_expr_eexpr_invalid_ = 
# 1883 "parser_cocci_menhir.mly"
                                         ( _1 )
# 39452 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_bis = Obj.magic _2 in
        let _1 : (
# 248 "parser_cocci_menhir.mly"
       (Data.clt)
# 39479 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_invalid_ = 
# 1885 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Infix (_2, P.clt2mcode Ast.Inc _1)) )
# 39486 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_bis = Obj.magic _2 in
        let _1 : (
# 248 "parser_cocci_menhir.mly"
       (Data.clt)
# 39513 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_invalid_ = 
# 1887 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Infix (_2, P.clt2mcode Ast.Dec _1)) )
# 39520 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_cast_expr_eexpr_invalid_ = Obj.magic _2 in
        let _1 : 'tv_unary_op = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_invalid_ = 
# 1889 "parser_cocci_menhir.mly"
      ( let mcode = _1 in Ast0.wrap(Ast0.Unary(_2, mcode)) )
# 39550 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_bis = Obj.magic _2 in
        let _1 : (
# 215 "parser_cocci_menhir.mly"
       (Data.clt)
# 39577 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_invalid_ = 
# 1891 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.SizeOfExpr (P.clt2mcode "sizeof" _1, _2)) )
# 39584 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = rp;
          MenhirLib.EngineTypes.startp = _startpos_rp_;
          MenhirLib.EngineTypes.endp = _endpos_rp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = lp;
              MenhirLib.EngineTypes.startp = _startpos_lp_;
              MenhirLib.EngineTypes.endp = _endpos_lp_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = s;
                MenhirLib.EngineTypes.startp = _startpos_s_;
                MenhirLib.EngineTypes.endp = _endpos_s_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let rp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 39620 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let t : 'tv_ctype = Obj.magic t in
        let lp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 39626 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let s : (
# 215 "parser_cocci_menhir.mly"
       (Data.clt)
# 39631 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_rp_ in
        let _v : 'tv_unary_expr_eexpr_invalid_ = 
# 1893 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.SizeOfType (P.clt2mcode "sizeof" s,
                                   P.clt2mcode "(" lp,t,
                                   P.clt2mcode ")" rp)) )
# 39640 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_postfix_expr_eexpr_nest_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_expr_eexpr_nest_expressions_ = 
# 1883 "parser_cocci_menhir.mly"
                                         ( _1 )
# 39664 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_bis = Obj.magic _2 in
        let _1 : (
# 248 "parser_cocci_menhir.mly"
       (Data.clt)
# 39691 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_nest_expressions_ = 
# 1885 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Infix (_2, P.clt2mcode Ast.Inc _1)) )
# 39698 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_bis = Obj.magic _2 in
        let _1 : (
# 248 "parser_cocci_menhir.mly"
       (Data.clt)
# 39725 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_nest_expressions_ = 
# 1887 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Infix (_2, P.clt2mcode Ast.Dec _1)) )
# 39732 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_cast_expr_eexpr_nest_expressions_ = Obj.magic _2 in
        let _1 : 'tv_unary_op = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_nest_expressions_ = 
# 1889 "parser_cocci_menhir.mly"
      ( let mcode = _1 in Ast0.wrap(Ast0.Unary(_2, mcode)) )
# 39762 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_bis = Obj.magic _2 in
        let _1 : (
# 215 "parser_cocci_menhir.mly"
       (Data.clt)
# 39789 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_eexpr_nest_expressions_ = 
# 1891 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.SizeOfExpr (P.clt2mcode "sizeof" _1, _2)) )
# 39796 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = rp;
          MenhirLib.EngineTypes.startp = _startpos_rp_;
          MenhirLib.EngineTypes.endp = _endpos_rp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = lp;
              MenhirLib.EngineTypes.startp = _startpos_lp_;
              MenhirLib.EngineTypes.endp = _endpos_lp_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = s;
                MenhirLib.EngineTypes.startp = _startpos_s_;
                MenhirLib.EngineTypes.endp = _endpos_s_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let rp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 39832 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let t : 'tv_ctype = Obj.magic t in
        let lp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 39838 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let s : (
# 215 "parser_cocci_menhir.mly"
       (Data.clt)
# 39843 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_rp_ in
        let _v : 'tv_unary_expr_eexpr_nest_expressions_ = 
# 1893 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.SizeOfType (P.clt2mcode "sizeof" s,
                                   P.clt2mcode "(" lp,t,
                                   P.clt2mcode ")" rp)) )
# 39852 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_postfix_expr_expr_invalid_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_expr_expr_invalid_ = 
# 1883 "parser_cocci_menhir.mly"
                                         ( _1 )
# 39876 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_bis = Obj.magic _2 in
        let _1 : (
# 248 "parser_cocci_menhir.mly"
       (Data.clt)
# 39903 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_expr_invalid_ = 
# 1885 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Infix (_2, P.clt2mcode Ast.Inc _1)) )
# 39910 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_bis = Obj.magic _2 in
        let _1 : (
# 248 "parser_cocci_menhir.mly"
       (Data.clt)
# 39937 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_expr_invalid_ = 
# 1887 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Infix (_2, P.clt2mcode Ast.Dec _1)) )
# 39944 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_cast_expr_expr_invalid_ = Obj.magic _2 in
        let _1 : 'tv_unary_op = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_expr_invalid_ = 
# 1889 "parser_cocci_menhir.mly"
      ( let mcode = _1 in Ast0.wrap(Ast0.Unary(_2, mcode)) )
# 39974 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_bis = Obj.magic _2 in
        let _1 : (
# 215 "parser_cocci_menhir.mly"
       (Data.clt)
# 40001 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_expr_invalid_ = 
# 1891 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.SizeOfExpr (P.clt2mcode "sizeof" _1, _2)) )
# 40008 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = rp;
          MenhirLib.EngineTypes.startp = _startpos_rp_;
          MenhirLib.EngineTypes.endp = _endpos_rp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = lp;
              MenhirLib.EngineTypes.startp = _startpos_lp_;
              MenhirLib.EngineTypes.endp = _endpos_lp_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = s;
                MenhirLib.EngineTypes.startp = _startpos_s_;
                MenhirLib.EngineTypes.endp = _endpos_s_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let rp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 40044 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let t : 'tv_ctype = Obj.magic t in
        let lp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 40050 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let s : (
# 215 "parser_cocci_menhir.mly"
       (Data.clt)
# 40055 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_rp_ in
        let _v : 'tv_unary_expr_expr_invalid_ = 
# 1893 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.SizeOfType (P.clt2mcode "sizeof" s,
                                   P.clt2mcode "(" lp,t,
                                   P.clt2mcode ")" rp)) )
# 40064 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : 'tv_postfix_expr_eexpr_dot_expressions_ = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_expr_bis = 
# 1899 "parser_cocci_menhir.mly"
                                                          ( _1 )
# 40088 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_bis = Obj.magic _2 in
        let _1 : (
# 248 "parser_cocci_menhir.mly"
       (Data.clt)
# 40115 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_bis = 
# 1901 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Infix (_2, P.clt2mcode Ast.Inc _1)) )
# 40122 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_bis = Obj.magic _2 in
        let _1 : (
# 248 "parser_cocci_menhir.mly"
       (Data.clt)
# 40149 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_bis = 
# 1903 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.Infix (_2, P.clt2mcode Ast.Dec _1)) )
# 40156 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_cast_expr_eexpr_dot_expressions_ = Obj.magic _2 in
        let _1 : 'tv_unary_op = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_bis = 
# 1905 "parser_cocci_menhir.mly"
      ( let mcode = _1 in Ast0.wrap(Ast0.Unary(_2, mcode)) )
# 40186 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_unary_expr_bis = Obj.magic _2 in
        let _1 : (
# 215 "parser_cocci_menhir.mly"
       (Data.clt)
# 40213 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_unary_expr_bis = 
# 1907 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.SizeOfExpr (P.clt2mcode "sizeof" _1, _2)) )
# 40220 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = rp;
          MenhirLib.EngineTypes.startp = _startpos_rp_;
          MenhirLib.EngineTypes.endp = _endpos_rp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = lp;
              MenhirLib.EngineTypes.startp = _startpos_lp_;
              MenhirLib.EngineTypes.endp = _endpos_lp_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = s;
                MenhirLib.EngineTypes.startp = _startpos_s_;
                MenhirLib.EngineTypes.endp = _endpos_s_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let rp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 40256 "parser_cocci_menhir.ml"
        ) = Obj.magic rp in
        let t : 'tv_ctype = Obj.magic t in
        let lp : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 40262 "parser_cocci_menhir.ml"
        ) = Obj.magic lp in
        let s : (
# 215 "parser_cocci_menhir.mly"
       (Data.clt)
# 40267 "parser_cocci_menhir.ml"
        ) = Obj.magic s in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_rp_ in
        let _v : 'tv_unary_expr_bis = 
# 1909 "parser_cocci_menhir.mly"
      ( Ast0.wrap(Ast0.SizeOfType (P.clt2mcode "sizeof" s,
                                   P.clt2mcode "(" lp,t,
                                   P.clt2mcode ")" rp)) )
# 40276 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 257 "parser_cocci_menhir.mly"
       (Data.clt)
# 40297 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_op = 
# 1913 "parser_cocci_menhir.mly"
                  ( P.clt2mcode Ast.GetRef _1 )
# 40304 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 263 "parser_cocci_menhir.mly"
       (Data.clt)
# 40325 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_op = 
# 1914 "parser_cocci_menhir.mly"
           ( P.clt2mcode Ast.DeRef _1 )
# 40332 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 262 "parser_cocci_menhir.mly"
       (Data.clt)
# 40353 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_op = 
# 1915 "parser_cocci_menhir.mly"
           ( P.clt2mcode Ast.UnPlus _1 )
# 40360 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 262 "parser_cocci_menhir.mly"
       (Data.clt)
# 40381 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_op = 
# 1916 "parser_cocci_menhir.mly"
           ( P.clt2mcode Ast.UnMinus _1 )
# 40388 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 263 "parser_cocci_menhir.mly"
       (Data.clt)
# 40409 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_op = 
# 1917 "parser_cocci_menhir.mly"
           ( P.clt2mcode Ast.Tilde _1 )
# 40416 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 238 "parser_cocci_menhir.mly"
       (Data.clt)
# 40437 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_unary_op = 
# 1918 "parser_cocci_menhir.mly"
           ( P.clt2mcode Ast.Not _1 )
# 40444 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_exp = Obj.magic _2 in
        let _1 : 'tv_expr = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_when_start = 
# 2597 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.DOTS((Ast0.wrap(Ast0.Exp(_1)))::_2)) )
# 40474 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
            };
          } = _menhir_stack in
        let _2 : 'tv_toplevel_after_stm = Obj.magic _2 in
        let _1 : 'tv_decl_statement = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : 'tv_when_start = 
# 2599 "parser_cocci_menhir.mly"
    ( Ast0.wrap(Ast0.DOTS(_1@_2)) )
# 40504 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = w;
          MenhirLib.EngineTypes.startp = _startpos_w_;
          MenhirLib.EngineTypes.endp = _endpos_w_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let w : 'tv_whens_when_start_rule_elem_statement_any_strict_ = Obj.magic w in
        let _startpos = _startpos_w_ in
        let _endpos = _endpos_w_ in
        let _v : 'tv_whenppdecs = 
# 1417 "parser_cocci_menhir.mly"
    ( w )
# 40528 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = w;
            MenhirLib.EngineTypes.startp = _startpos_w_;
            MenhirLib.EngineTypes.endp = _endpos_w_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = t;
                MenhirLib.EngineTypes.startp = _startpos_t_;
                MenhirLib.EngineTypes.endp = _endpos_t_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let w : 'tv_when_start = Obj.magic w in
        let e : (
# 258 "parser_cocci_menhir.mly"
       (Data.clt)
# 40564 "parser_cocci_menhir.ml"
        ) = Obj.magic e in
        let t : (
# 236 "parser_cocci_menhir.mly"
       (Data.clt)
# 40569 "parser_cocci_menhir.ml"
        ) = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_whens_when_start_rule_elem_statement_any_strict_ = 
# 2715 "parser_cocci_menhir.mly"
      ( [Ast0.WhenNot (P.clt2mcode "when" t, P.clt2mcode "!=" e, w)] )
# 40576 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = w;
            MenhirLib.EngineTypes.startp = _startpos_w_;
            MenhirLib.EngineTypes.endp = _endpos_w_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = t;
                MenhirLib.EngineTypes.startp = _startpos_t_;
                MenhirLib.EngineTypes.endp = _endpos_t_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let w : 'tv_rule_elem_statement = Obj.magic w in
        let e : (
# 271 "parser_cocci_menhir.mly"
       (Data.clt)
# 40612 "parser_cocci_menhir.ml"
        ) = Obj.magic e in
        let t : (
# 236 "parser_cocci_menhir.mly"
       (Data.clt)
# 40617 "parser_cocci_menhir.ml"
        ) = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_whens_when_start_rule_elem_statement_any_strict_ = 
# 2717 "parser_cocci_menhir.mly"
      ( [Ast0.WhenAlways (P.clt2mcode "when" t, P.clt2mcode "=" e, w)] )
# 40624 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          } = _menhir_stack in
        let l : 'tv_comma_list_any_strict_ = Obj.magic l in
        let t : (
# 236 "parser_cocci_menhir.mly"
       (Data.clt)
# 40655 "parser_cocci_menhir.ml"
        ) = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos__3_ in
        let _v : 'tv_whens_when_start_rule_elem_statement_any_strict_ = 
# 2719 "parser_cocci_menhir.mly"
      ( List.map (function x -> Ast0.WhenModifier(P.clt2mcode "when" t,x)) l )
# 40662 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = ee;
              MenhirLib.EngineTypes.startp = _startpos_ee_;
              MenhirLib.EngineTypes.endp = _endpos_ee_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = t;
                MenhirLib.EngineTypes.startp = _startpos_t_;
                MenhirLib.EngineTypes.endp = _endpos_t_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let e : 'tv_eexpr = Obj.magic e in
        let ee : (
# 258 "parser_cocci_menhir.mly"
       (Data.clt)
# 40698 "parser_cocci_menhir.ml"
        ) = Obj.magic ee in
        let t : (
# 236 "parser_cocci_menhir.mly"
       (Data.clt)
# 40703 "parser_cocci_menhir.ml"
        ) = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_whens_when_start_rule_elem_statement_any_strict_ = 
# 2721 "parser_cocci_menhir.mly"
      ( [Ast0.WhenNotTrue (P.clt2mcode "when" t, P.clt2mcode "!=" ee, e)] )
# 40710 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.semv = ee;
              MenhirLib.EngineTypes.startp = _startpos_ee_;
              MenhirLib.EngineTypes.endp = _endpos_ee_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = t;
                MenhirLib.EngineTypes.startp = _startpos_t_;
                MenhirLib.EngineTypes.endp = _endpos_t_;
                MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          } = _menhir_stack in
        let e : 'tv_eexpr = Obj.magic e in
        let ee : (
# 258 "parser_cocci_menhir.mly"
       (Data.clt)
# 40746 "parser_cocci_menhir.ml"
        ) = Obj.magic ee in
        let t : (
# 236 "parser_cocci_menhir.mly"
       (Data.clt)
# 40751 "parser_cocci_menhir.ml"
        ) = Obj.magic t in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos__4_ in
        let _v : 'tv_whens_when_start_rule_elem_statement_any_strict_ = 
# 2723 "parser_cocci_menhir.mly"
      ( [Ast0.WhenNotFalse (P.clt2mcode "when" t, P.clt2mcode "!=" ee, e)] )
# 40758 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
          } = _menhir_stack in
        let _1 : (
# 216 "parser_cocci_menhir.mly"
       (string * Data.clt)
# 40779 "parser_cocci_menhir.ml"
        ) = Obj.magic _1 in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : 'tv_wrapped_sym_ident = 
# 2058 "parser_cocci_menhir.mly"
         ( Ast0.wrap(Ast0.Id(P.sym2mcode _1)) )
# 40786 "parser_cocci_menhir.ml"
         in
        _menhir_env.MenhirLib.EngineTypes.stack <- {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
          });
      |]
  
  let recovery =
    false
  
  let trace =
    None
  
  end)

let rec script_meta_virt_nofresh_main =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 2026 lexer lexbuf) : (
# 334 "parser_cocci_menhir.mly"
       ((string option (*string*) * string option (*ast*)) * (Ast_cocci.meta_name * Ast_cocci.metavar) option)
# 40810 "parser_cocci_menhir.ml"
    ))

and script_meta_main =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1996 lexer lexbuf) : (
# 333 "parser_cocci_menhir.mly"
       ((string option (*string*) * string option (*ast*)) * (Ast_cocci.meta_name * Ast_cocci.metavar) option)
# 40818 "parser_cocci_menhir.ml"
    ))

and rule_name =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1918 lexer lexbuf) : (
# 327 "parser_cocci_menhir.mly"
      (Ast_cocci.rulename)
# 40826 "parser_cocci_menhir.ml"
    ))

and plus_ty_main =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1909 lexer lexbuf) : (
# 317 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 40834 "parser_cocci_menhir.ml"
    ))

and plus_main =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1873 lexer lexbuf) : (
# 311 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 40842 "parser_cocci_menhir.ml"
    ))

and plus_exp_main =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1865 lexer lexbuf) : (
# 314 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 40850 "parser_cocci_menhir.ml"
    ))

and never_used =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1857 lexer lexbuf) : (
# 343 "parser_cocci_menhir.mly"
      (unit)
# 40858 "parser_cocci_menhir.ml"
    ))

and minus_ty_main =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1847 lexer lexbuf) : (
# 308 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 40866 "parser_cocci_menhir.ml"
    ))

and minus_main =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1763 lexer lexbuf) : (
# 302 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 40874 "parser_cocci_menhir.ml"
    ))

and minus_exp_main =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1751 lexer lexbuf) : (
# 305 "parser_cocci_menhir.mly"
      (Ast0_cocci.rule)
# 40882 "parser_cocci_menhir.ml"
    ))

and meta_main =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1748 lexer lexbuf) : (
# 331 "parser_cocci_menhir.mly"
      ((Ast_cocci.metavar,Ast_cocci.metavar) Common.either list)
# 40890 "parser_cocci_menhir.ml"
    ))

and iso_rule_name =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1744 lexer lexbuf) : (
# 323 "parser_cocci_menhir.mly"
      (Ast_cocci.rulename)
# 40898 "parser_cocci_menhir.ml"
    ))

and iso_meta_main =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 1414 lexer lexbuf) : (
# 340 "parser_cocci_menhir.mly"
      ((Ast_cocci.metavar,Ast_cocci.metavar) Common.either list)
# 40906 "parser_cocci_menhir.ml"
    ))

and iso_main =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 18 lexer lexbuf) : (
# 337 "parser_cocci_menhir.mly"
      (Ast0_cocci.anything list list)
# 40914 "parser_cocci_menhir.ml"
    ))

and include_main =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 0 lexer lexbuf) : (
# 320 "parser_cocci_menhir.mly"
      (Data.incl_iso list)
# 40922 "parser_cocci_menhir.ml"
    ))




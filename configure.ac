dnl  standard initialization (we only use autoconf not automake)
AC_INIT([coccinelle], [`cat ./version`], [cocci@diku.dk], [], [http://coccinelle.lip6.fr/])
AC_SUBST([COCCI_VERSION], [$(cat ./version)])
AC_SUBST([COCCI_SRCDIR], [$(pwd)])
AC_MSG_NOTICE([configuring coccinelle $COCCI_VERSION in $COCCI_SRCDIR])

AC_CONFIG_SRCDIR([cocci.ml])    dnl  this file must be present in our src directory
AC_COCCI_CONFVERSION

dnl  reminder that this configure depends on macros generated by aclocal
AC_MSG_NOTICE([this configure program uses pkg-config m4 macros])
AC_MSG_NOTICE([this configure program uses ocaml m4 macros (see setup/ocaml.m4)])
AC_MSG_NOTICE([this configure program uses custom m4 macros (see setup/cocci.m4)])
AC_MSG_NOTICE([some fake substitutions for required but unavailable programs may be used (see setup/fake*)])


dnl
dnl  Note: the conditionals in this configure script are tricky.
dnl  The approach taken here is that many tools can be enabled/disabled
dnl  and paths can be given explicitly via commandline parameters or
dnl  environment variables.
dnl


dnl
dnl  Basic tools
dnl

AC_MSG_NOTICE([verifying basic tools])

AC_PROG_INSTALL
AC_PROG_MKDIR_P
AC_PROG_CPP

dnl  pkg config is required
AC_ARG_VAR(PKG_CONFIG, [path to pkg-config])
AC_ARG_WITH([pkg_config], [AS_HELP_STRING([--with-pkgconfig], [whether to use pkgconfig (default: auto)])])
AS_IF([test "x$with_pkg_config" == xno],
[dnl  explicitly set to 'no'
  AC_MSG_NOTICE([pkg-config is disabled explicitly and a substitute will be used])
],[test -z "$with_pkg_config" -o "x$with_pkg_config" == xyes],
[dnl  find menhir if not overriden in the environment
  PKG_PROG_PKG_CONFIG
],
[dnl  path to pkg-config was given as an option
  AC_SUBST([PKG_CONFIG], ["$with_pkg_config"])
])

AS_IF([test -z "$PKG_CONFIG"],
[dnl
  AC_MSG_NOTICE([pkg-config not found. Using a scripted substitute.])
  AC_SUBST([PKG_CONFIG], ["$COCCI_SRCDIR/setup/fake-subst.sh pkg-config"])
])


dnl  ocaml tools
AC_PROG_OCAML
AC_PROG_OCAMLLEX

dnl  enforce ocaml tool requirements
AS_IF([test "x$OCAMLC" == xno],
[dnl
  AC_MSG_ERROR([You must install the OCaml compiler])
])

AC_CHECK_OCAMLVERSION([3.11])

AS_IF([test "x$OCAMLLEX" == xno],
[dnl
  AC_MSG_ERROR([You must install OCaml Lexer (the ocamllex command). It should be part of your OCaml distribution.])
])

AC_ARG_VAR([OCAMLFIND], [path to OCaml findlib (ocamlfind)])
AC_ARG_WITH([ocamlfind], [AS_HELP_STRING([--with-findlib], [whether to use OCaml findlib (default: auto)])])
AS_IF([test "x$with_ocamlfind" == xno],
[dnl
  AC_MSG_NOTICE([ocaml findlib is disabled explicitly and a substitute will be used])
], [test -z "$with_ocamlfind" -o "x$with_ocamlfind" == xyes],
[dnl  find ocamlfind if not overriden in the environment
  AC_PROG_FINDLIB
],
[dnl  path to findlib was given as an option
  AC_SUBST([OCAMLFIND], [$with_ocamlfind])
])

AS_IF([test "x$OCAMLFIND" == xno],
[dnl
  AC_SUBST([OCAMLFIND], ["$COCCI_SRCDIR/setup/fake-subst.sh ocamlfind"])
  AC_SUBST([OCAMLFINDSUBSTITUTED], [yes])
  AC_MSG_NOTICE([OCaml findlib (the ocamlfind command) not found. Using a scripted substitute.])
])


AC_CACHE_SAVE


dnl
dnl  Basic ocaml modules
dnl

AC_MSG_NOTICE([verifying basic ocaml modules])

dnl  default dir with external ocaml packages
AC_COCCI_SET_EXTERNAL_DIR([$COCCI_SRCDIR])

dnl  set some defaults
dnl  add a line for each package that is
dnl  configured via AC_CHECK_COCCI_EXTPKG
dnl  or AC_REQ_COCCI_EXTPKG
AC_COCCI_INIT_PKG_DEFAULT([sexplib])
AC_COCCI_INIT_PKG_DEFAULT([menhirLib])
AC_COCCI_INIT_PKG_DEFAULT([pycaml])
AC_COCCI_INIT_PKG_DEFAULT([pcre])

dnl  required ocaml packages
AC_MSG_NOTICE([the following OCaml packages should be provided by your ocaml installation])
AC_REQ_COCCI_STDPKG([unix])
AC_REQ_COCCI_STDPKG([bigarray])
AC_REQ_COCCI_STDPKG([num])
AC_REQ_COCCI_STDPKG([str])

dnl  optional ocaml packages
AC_MSG_NOTICE([the following packages are usually optional])
AC_CHECK_OCAML_PKG([dynlink])    dnl  should be part of the ocaml installation
AC_CHECK_OCAML_PKG([type-conv])  dnl  TODO: is this one used?
AC_CHECK_OCAML_PKG([extlib])     dnl  TODO: is this one used?
AC_CHECK_OCAML_PKG([threads])

dnl  required modules (available locally too)
AC_REQ_COCCI_EXTPKG([sexplib])
AC_REQ_COCCI_EXTPKG([menhirLib])


AC_CACHE_SAVE


dnl
dnl  Handling of optional features
dnl

AC_MSG_NOTICE([verifying optional features])


dnl  menhir handling
dnl  variables:
dnl    with_menhir: whether or not menhir must be used
AC_ARG_VAR(MENHIR, [path to menhir])
AC_ARG_WITH([menhir], AS_HELP_STRING([--with-menhir], [whether to use menhir (default: auto)]))
AS_IF([test "x$with_menhir" == "xno"],
[dnl
  AC_MSG_NOTICE([the parser generator Menhir is disabled explicitly and a substitute will be used])
], [test -z "$with_menhir" -o "x$with_menhir" == xyes],
[dnl  find menhir if not overriden in the environment
  AC_CHECK_TOOL([MENHIR],[menhir],[no])
],
[dnl  path to menhir was given as an option
  AC_SUBST([MENHIR], ["$with_menhir"])
])

AS_IF([test "x$MENHIR" == xno],
[dnl
  AS_IF([test "x$with_menhir" == xyes],
  [dnl
    AC_MSG_ERROR([the OCaml parser generator Menhir is enabled explicitly but is not installed])
  ])

  AC_MSG_NOTICE([pregenerated parsers will be required as substitute for Menhir])
  AC_SUBST([MENHIR], ["$COCCI_SRCDIR/setup/fake-menhir.sh menhir"])
])


dnl  ocaml script handling
dnl  variables:
dnl    enable_ocaml: whether to enable ocaml scripts
AC_ARG_ENABLE([ocaml], AS_HELP_STRING([--enable-ocaml], [enable ocaml scripting (default: auto)]))
AS_IF([test "x$OCAML_PKG_dynlink" == xno],
[dnl
  AS_IF([test -z "$enable_ocaml"],
  [dnl
    AC_SUBST([enable_ocaml],[no])
    AC_MSG_NOTICE([ocaml scripting is disabled because the 'dynlink' package is not installed])
  ], [test "x$enable_ocaml" != xno],
  [dnl
    AC_MSG_ERROR([the OCaml package dynlink is required for ocaml scripting])
  ])
])

AS_IF([test ! -z "$OCAMLFINDSUBSTITUTED"],
[dnl
  AS_IF([test -z "$enable_ocaml"],
  [dnl  this is perhaps a bit too strict
    AC_SUBST([enable_ocaml],no)
    AC_MSG_NOTICE([ocaml scripting is disabled because it depends on ocamlfind])
  ], [test "x$enable_ocaml" != xno],
  [dnl
    AC_MSG_NOTICE([warning: ocamlfind is not installed but may be required if ocaml scripts are used])
  ])
])

AS_IF([test "x$enable_ocaml" == xno],
[dnl
  AC_SUBST(OCAMLCOCCI_MODULE,[No_prepare_ocamlcocci])
  AC_SUBST(OCAMLCOCCI_FILE,[no_prepare_ocamlcocci.ml])
],
[dnl
  AC_SUBST([enable_ocaml],[yes])
  AC_SUBST(OCAMLCOCCI_MODULE,[Yes_prepare_ocamlcocci])
  AC_SUBST(OCAMLCOCCI_FILE,[no_prepare_ocamlcocci])
])


dnl  python handling
dnl  variables:
dnl    with_python: whether to enable the python feature (and what version)
dnl    OCAML_PKG_pycaml: if "local" use local pycaml package
AC_ARG_VAR([PYTHON], [path to python when the version is determined automatically])
AC_ARG_WITH([python], [AS_HELP_STRING([--with-python], [enable python scripting, version of python (e.g. 3.2, default: auto)])])
AS_IF([test "x$with_python" != xno],
[dnl
  AS_IF([test -z "$with_python" -o "x$with_python" == xyes],
  [dnl  determine version
    AC_COCCI_PYVER
  ],
  [dnl  version provided by user explicitly
    AC_SUBST([PYVER], [$with_python])
  ])

  AS_IF([test -z "$PYVER"],
  [dnl  PYVER undetermined
    AS_IF([test "x$with_python" == xyes],
    [dnl
      AC_MSG_ERROR([python scripting enabled explicitly but version could not be determined])
    ])
  ],
  [dnl
    PKG_CHECK_MODULES([PYTHON], [python-$PYVER],[AC_SUBST(HAVE_PYTHON,[yes])],[AC_SUBST(HAVE_PYTHON,[no])])

    AS_IF([test "x$HAVE_PYTHON" != xyes -a "x$with_python" != xyes],
    [dnl  fallback if the above failed
      AC_MSG_NOTICE([trying the default python version as fallback])
      PKG_CHECK_MODULES([PYTHON], [python],[AC_SUBST(HAVE_PYTHON,[yes])],[AC_SUBST(HAVE_PYTHON,[no])])
    ])
  ])

dnl  AS_IF([test "x$HAVE_PYTHON" != xyes]),
dnl  [dnl  fallback case
dnl    PKG_CHECK_MODULES([PYTHON], [python],[AC_SUBST(HAVE_PYTHON,[yes])],[AC_SUBST(HAVE_PYTHON,[no])])
dnl  ])
])

AS_IF([test -z "$with_python"],
[dnl
  AS_IF([test "x$HAVE_PYTHON" == xyes],
  [dnl
    AC_SUBST([with_python],[yes])
  ],
  [dnl
    AC_SUBST([with_python],[no])
  ])
])

AS_IF([test "x$with_python" != xno],
[dnl
  AS_IF([test "x$HAVE_PYTHON" == xyes],
  [dnl
    AC_MSG_NOTICE([support for python scripts is enabled])
  ],
  [dnl
    AC_MSG_ERROR([the python scripts feature is enabled but the pkg-config python library is not found])
  ])

  AC_REQ_COCCI_EXTPKG([pycaml])
  AC_SUBST(PYCOCCI_MODULE, [Yes_pycocci])
  AC_SUBST(PYCOCCI_FILE,[yes_pycocci.ml])
],
[dnl
  AC_SUBST(OCAML_PKG_pycaml, [no])
  AC_SUBST(PYCOCCI_MODULE, [No_pycocci])
  AC_SUBST(PYCOCCI_FILE,[no_pycocci.ml])
])


dnl  pcre handling
dnl  variables:
dnl    enable_pcre: whether to enable the pcre feature
dnl    OCAML_PKG_pcre: if "local" use str package
AC_ARG_ENABLE([pcre-syntax], AS_HELP_STRING([--enable-pcre-syntax], [enable pcre regular expression syntax (default: auto)]))
AS_IF([test "x$enable_pcre_syntax" != "xno"],
[dnl
  PKG_CHECK_MODULES([PCRE], [libpcre],[AC_SUBST([HAVE_PCRE],[yes])],[AC_SUBST([HAVE_PCRE],[no])])
  AS_IF([test "x$enable_pcre_syntax" == x -a "x$HAVE_PCRE" != xyes], [AC_SUBST([enable_pcre_syntax],[no])])
  AC_CHECK_COCCI_EXTPKG([pcre])  dnl  will set $enable_pcre to 'yes', 'no', or 'local'
  enable_pcre_syntax=$enable_pcre
])

AS_IF([test "x$enable_pcre_syntax" != xno],
[dnl
  AS_IF([test "x$HAVE_PCRE" == xyes],
  [dnl
    AC_MSG_NOTICE([support for pcre syntax is enabled])
  ],
  [dnl
    AC_MSG_ERROR([the pcre feature is enabled but the pkg-config libpcre library is not found])
  ])

  AC_SUBST(REGEXP_MODULE, [Regexp_pcre])
  AC_SUBST(REGEXP_FILE,[regexp_pcre.ml])
],
[dnl
  AC_SUBST(OCAML_PKG_pcre, [no])
  AC_SUBST(REGEXP_MODULE, [Regexp_str])
  AC_SUBST(REGEXP_FILE,[regexp_str.ml])
])


AC_CACHE_SAVE


dnl
dnl  backwards compatibility
dnl  defines some variables needed by the Make infrastructure
dnl

AC_SUBST(FEATURE_TARZAN,[1])  

AS_IF([test "x$with_python" != xno],
[dnl
  AC_SUBST(FEATURE_PYTHON,[1])
],
[dnl
  AC_SUBST(FEATURE_PYTHON,[0])
])


dnl
dnl  generating configuration
dnl

AC_CONFIG_FILES([Makefile.config])
AC_CONFIG_FILES([version.ml])
AC_CONFIG_FILES([globals/config.ml])
AC_CONFIG_FILES([globals/regexp.ml])
AC_CONFIG_FILES([python/pycocci.ml])
AC_CONFIG_FILES([ocaml/prepare_ocamlcocci.ml])

AC_OUTPUT

AC_MSG_NOTICE([configuration completed])

cat << EOF
------------------------------------------------------------------------------
Summary

findlib:          $OCAMLFIND
menhir:           $MENHIR
menhirLib module: $OCAML_PKG_menhirLib

ocaml scripting:  $enable_ocaml
python scripting: $with_python
pycaml module:    $OCAML_PKG_pycaml

pcre regexes:     $enable_pcre_syntax
pcre module:      $OCAML_PKG_pcre
pcre library:     $HAVE_PCRE

EOF

cat << EOF
------------------------------------------------------------------------------
Coccinelle can now be compiled and installed.


Prior to compilation, run:
  \$ make depend

To compile coccinelle, run:
  \$ make all

Or alternatively, for the optimized version:
  \$ make all.opt
If you want both, you could use:
  \$ make world


To install coccinelle, run:
  \$ make install

Then, to test coccinelle run for example:
  \$ spatch -sp_file demos/simple.cocci demos/simple.c -o /tmp/new_simple.c
EOF

if test "x$with_python" != "xno"; then
cat << EOF
------------------------------------------------------------------------------
To use python scripts, install in addition the coccilib runtime library:

  \$ make install-python

You may need to set some environment variables so that the python
libraries are found. For example:

  \$ export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:$prefix/lib
  \$ export PYTHONPATH=\$PYTHONPATH:$prefix/share/python

EOF
fi

cat << EOF
------------------------------------------------------------------------------
EOF

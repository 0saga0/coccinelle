COCCIDIR=../..
SPATCH=$(COCCIDIR)/spatch
ISOFILE=-iso_file $(COCCIDIR)/standard.iso
SPATCH=../../spatch
SPATCH=../../spatch.opt  # for the bench !!!

ARGS=-no_show_ctl_text -no_show_transinfo -no_parse_error_msg -no_show_misc


SPATCHCMD=$(SPATCH) $(ISOFILE) -compare_with_expected -cocci_file $(SP) $(ARGS)

OBJS = $(SOURCES:.c=.ok)

all: $(OBJS)
	ls *.ok || true
	ls *.failed || true
#	find . -name "*.ok" -print
#	find . -name "*.failed" -print

#pad: 
#    .SUFFIXES: .c .ok
#    .c.ok: $(SPATCH) $(SP)
# does not work because the old suffix rule does not allow additionnal
# dependencies (at the right of ':'). Cf make info manual.

%.ok: %.c $(SPATCH) $(SP)
	/bin/rm -f $(<:.c=.ok) $(<:.c=.failed) /tmp/output.c
	(time $(SPATCHCMD) $<) 2> $(<:.c=.ok) || \
	(test -e $(<:.c=.ok) && mv $(<:.c=.ok) $(<:.c=.failed)) || \
	touch $(<:.c=.failed)
	(test -e /tmp/output.c && test -e $(<:.c=.ok) && \
	((diff -b -B -w /tmp/output.c $(<:.c=.res) >> $(<:.c=.ok)) || \
	true)) || true
	(test -e /tmp/output.c && test -e $(<:.c=.failed) && \
	((diff -b -B -w /tmp/output.c $(<:.c=.res) >> $(<:.c=.failed)) || \
	true)) || true


#-----------------------------------------------------------------------------
# Pad stuff
#-----------------------------------------------------------------------------
clean::
	rm -f *.ok *.failed

clean2::
	find -name "*.ok" | xargs rm -f
	find -name "*.failed" | xargs rm -f


%.ok2: %.c $(SPATCH) $(SP)
	$(SPATCH) -iso_file ../../standard.iso -cocci_file $(SP) \
	-compare_with_expected -debug_cpp \
	 $<

score:
	-ls -l *.ok | wc -l
	-ls -l *.failed | wc -l

info_order:
	set -e; for i in $(SOURCES); do ../../scripts/extract_info_ok_failed.pl $$i.ok $$i.failed; done 

info2:
	-ls *.ok
	-ls *.failed
	make info_ok
	make info_failed

info_ok:
	../../scripts/extract_info_ok_failed.pl *.ok

info_failed:
	../../scripts/extract_info_ok_failed.pl *.failed



#!!!! This means that your coccinelle source must be in ~/coccinelle !!!!
#!!!! So if this is not the case, at least make a symbolic link !!!!!
COCCIDIR=~/coccinelle

ISOFILE=-iso_file $(COCCIDIR)/standard.iso
SPATCH=$(COCCIDIR)/spatch.opt  # for the bench !!! can also use 'make opt'
#SPATCH=$(COCCIDIR)/spatch

ARGS=-no_show_ctl_text -no_show_transinfo -no_parse_error_msg -no_show_misc \
-no_type_error_msg -partial_match -timeout 60

ARGS=-no_show_ctl_text -no_show_transinfo -no_parse_error_msg -no_show_misc \
-no_type_error_msg

#-include ../my_generic_makefile # for the bench comment !!!

SPATCHCMD=$(SPATCH) $(ISOFILE) -compare_with_expected -cocci_file $(SP) $(ARGS)

RECOMPARE=$(SPATCH) -action compare_c /tmp/output.c

OBJS = $(SOURCES:.c=.ok)

all: $(OBJS)
	ls *.ok || true
	ls *.spatch_ok || true
	ls *.failed || true
	ls *.gave_up || true


%.ok: %.c $(SPATCH) $(SP)
	echo $<
	/bin/rm -f $(<:.c=.ok) $(<:.c=.failed) $(<:.c=.spatch_ok) /tmp/output.c
	(if ( test -e $(<:.c=.var) ) ; \
	then (time $(SPATCHCMD) $<) < $(<:.c=.var) 2> $(<:.c=.ok) ; \
	else (time $(SPATCHCMD) $<) 2> $(<:.c=.ok) ; \
	fi) || \
	(test -e $(<:.c=.ok) && mv $(<:.c=.ok) $(<:.c=.spatch_ok) && \
	test -e corrected_$(<:.c=.res) && test -e /tmp/output.c && \
	$(RECOMPARE) corrected_$(<:.c=.res) 2>> $(<:.c=.spatch_ok)) || \
	(test -e $(<:.c=.spatch_ok) && \
		mv $(<:.c=.spatch_ok) $(<:.c=.failed)) || \
	touch $(<:.c=.failed)
	(test -e /tmp/output.c && test -e $(<:.c=.ok) && \
	((diff -b -B -w /tmp/output.c $(<:.c=.res) >> $(<:.c=.ok)) || \
	true)) || true
	(test -e /tmp/output.c && test -e $(<:.c=.spatch_ok) && \
	((diff -b -B -w /tmp/output.c corrected_$(<:.c=.res) >> \
		$(<:.c=.spatch_ok)) || \
	true)) || true
	(test -e /tmp/output.c && test -e $(<:.c=.failed) && \
	((diff -b -B -w /tmp/output.c $(<:.c=.res) >> $(<:.c=.failed)) || \
	true)) || true
	(if (test -e $(<:.c=.gave_up) ) ; \
	then (if (test -e $(<:.c=.failed) ) ; \
	then mv $(<:.c=.failed) $(<:.c=.gave_up) ; \
	else /bin/rm $(<:.c=.gave_up) ; fi) \
	else true ; fi)

#-----------------------------------------------------------------------------
# Pad stuff
#-----------------------------------------------------------------------------
#    .SUFFIXES: .c .ok
#    .c.ok: $(SPATCH) $(SP)
# does not work because the old suffix rule does not allow additionnal
# dependencies (at the right of ':'). Cf make info manual.


clean::
	rm -f *.ok *.spatch_ok *.failed

clean2::
	find -name "*.ok" | xargs rm -f
	find -name "*.spatch_ok" | xargs rm -f
	find -name "*.failed" | xargs rm -f


%.ok2: %.c $(SPATCH) $(SP)
	$(SPATCH) -iso_file $(COCCIDIR)/standard.iso -cocci_file $(SP) \
	-compare_with_expected -debug_cpp \
	 $<

score:
	find -name "*.ok" | wc -l
	find -name "*.spatch_ok" | wc -l
	find -name "*ok" | wc -l
	find -name "*.failed" | wc -l
	find -name "*.gave_up" | wc -l


info_order:
	set -e; for i in $(SOURCES); do $(COCCIDIR)/scripts/extract_info_ok_failed.pl $$i.ok $$i.failed; done 

info2:
	-ls *.ok
	-ls *.failed
	make info_ok
	make info_failed

info_ok:
	$(COCCIDIR)/scripts/extract_info_ok_failed.pl *.ok

info_failed:
	$(COCCIDIR)/scripts/extract_info_ok_failed.pl *.failed

patch_size: 
	~/coccinelle/scripts/patch_from_c_and_res.pl $(SOURCES)



#-----------------------------------------------------------------------------
# for stat_directory.pl
#-----------------------------------------------------------------------------


source_files: 
	@echo $(SOURCES)

sp_file: 
	@echo $(SP)

ce_descr:
	@echo $(CEDESCRIPTION)
COCCIDIR=~/coccinelle
ISOFILE=-iso_file $(COCCIDIR)/standard.iso
SPATCH=$(COCCIDIR)/spatch.opt  # for the bench !!! can also use 'make opt'
#SPATCH=$(COCCIDIR)/spatch

ARGS=-no_show_ctl_text -no_show_transinfo -no_parse_error_msg -no_show_misc \
-no_type_error_msg


SPATCHCMD=$(SPATCH) $(ISOFILE) -compare_with_expected -cocci_file $(SP) $(ARGS)

OBJS = $(SOURCES:.c=.ok)

all: $(OBJS)
	ls *.ok || true
	ls *.spatch_ok || true
	ls *.failed || true


%.ok: %.c $(SPATCH) $(SP)
	/bin/rm -f $(<:.c=.ok) $(<:.c=.failed) $(<:.c=.spatch_ok) /tmp/output.c
	(if ( test -e $(<:.c=.var) ) ; \
	then (time $(SPATCHCMD) $<) < $(<:.c=.var) 2> $(<:.c=.ok) ; \
	else (time $(SPATCHCMD) $<) 2> $(<:.c=.ok) ; \
	fi) || \
	(test -e $(<:.c=.ok) && mv $(<:.c=.ok) $(<:.c=.spatch_ok) && \
	test -e corrected_$(<:.c=.res) && \
	cp $< corrected_$< && \
	(if ( test -e $(<:.c=.var) ) ; \
	then (time $(SPATCHCMD) corrected_$<) < $(<:.c=.var) 2> $(<:.c=.spatch_ok) ; \
	else (time $(SPATCHCMD) corrected_$<) 2> $(<:.c=.spatch_ok) ; \
	fi) && \
	/bin/rm corrected_$<) || \
	(/bin/rm -f corrected_$< && test -e $(<:.c=.spatch_ok) && \
		mv $(<:.c=.spatch_ok) $(<:.c=.failed)) || \
	touch $(<:.c=.failed)
	(test -e /tmp/output.c && test -e $(<:.c=.ok) && \
	((diff -b -B -w /tmp/output.c $(<:.c=.res) >> $(<:.c=.ok)) || \
	true)) || true
	(test -e /tmp/output.c && test -e $(<:.c=.spatch_ok) && \
	((diff -b -B -w /tmp/output.c corrected_$(<:.c=.res) >> \
		$(<:.c=.spatch_ok)) || \
	true)) || true
	(test -e /tmp/output.c && test -e $(<:.c=.failed) && \
	((diff -b -B -w /tmp/output.c $(<:.c=.res) >> $(<:.c=.failed)) || \
	true)) || true

#-----------------------------------------------------------------------------
# Pad stuff
#-----------------------------------------------------------------------------
#pad: 
#    .SUFFIXES: .c .ok
#    .c.ok: $(SPATCH) $(SP)
# does not work because the old suffix rule does not allow additionnal
# dependencies (at the right of ':'). Cf make info manual.


clean::
	rm -f *.ok *.spatch_ok *.failed

clean2::
	find -name "*.ok" | xargs rm -f
	find -name "*.failed" | xargs rm -f


%.ok2: %.c $(SPATCH) $(SP)
	$(SPATCH) -iso_file $(COCCIDIR)/standard.iso -cocci_file $(SP) \
	-compare_with_expected -debug_cpp \
	 $<

score:
	-ls -l *.ok | wc -l
	-ls -l *.failed | wc -l

#	find . -name "*.ok" -print
#	find . -name "*.failed" -print


info_order:
	set -e; for i in $(SOURCES); do $(COCCIDIR)/scripts/extract_info_ok_failed.pl $$i.ok $$i.failed; done 

info2:
	-ls *.ok
	-ls *.failed
	make info_ok
	make info_failed

info_ok:
	$(COCCIDIR)/scripts/extract_info_ok_failed.pl *.ok

info_failed:
	$(COCCIDIR)/scripts/extract_info_ok_failed.pl *.failed



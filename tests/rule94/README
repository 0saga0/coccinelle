Semantic patch in rule94.cocci
OK result for 21 files out of 28, including 4 files where the CE was
omitted in some cases.
Get the wrong answer in 6 cases; in all cases some transformation was not
done, either because the pattern didn't match or the enclosing function
couldn't be parsed.
Have an error in one case, because can't unparse the transformed function,
although the unparsing problem has nothing to do with the collateral
evolution.

USB files

auerswald.c
 * [status] bugs, spatch-ok
 by hand, two cases were updated and two were not.  all are updated by
 coccinelle

cp2101.c
 * [status] ok

cypress_m8.c
 * [status] ok

ehci-mem.c
 * [status] spatch-ok
 the hand transformation additionally inverts the sense of an if to move a
 return into the then branch, and drop a goto that now would just go to the
 next line.

ehci-sched.c
 * [status] wrong 
 the sense of the normal null test is inverted, so that it tests whether
 the result is not null, and does the memset there, rather than testing for
 null, returning if the result is true, and calling memset afterwards.

ftdi_sio.c
 * [status] ok

garmin_gps.c
 * [status] ok

hc_crisv10.c
 * [status] ok

io_edgeport.c
 * [status] bugs, spatch-ok
 by hand, one case was updated and one was not.  all are update by coccinelle 

io_ti.c
 * [status] wrong
 programmer seems to know that zeroing is not necessary, because the whole
 structure will subsequently be initialized

ir-usb.c
 * [status] ok

keyspan.c
 * [status] ok

kobil_sct.c
 * [status] wrong
 in one case, we don't drop an else branch that becomes empty
 in another case the first argument of kmalloc doesn't match the third
 argument of memset (a multiplication, as in the first rule, is further
 multiplied by sizeof(char))

mct_u232.c
 * [status] ok

mon_main.c
 * [status] ok

mon_text.c
 * [status] ok

option.c
 * [status] wrong
 need to be able to access the type of the expression matched by a
 metavariable

ov511.c
 * [status] ok

pl2303.c
 * [status] wrong
 need to be able to match 7 to 0x07, not a constant in SP

pwc-if.c
 * [status] spatch_ok
 not updated until sometime after 2.6.17.13 and before 2.6.18
 one kmalloc site seems like it could use kcalloc, but used kmalloc with
 the multiplication instead

se401.c
 * [status] ok

stv680.c
 * [status] ok

ti_usb_3410_5052.c
 * [status] bugs, spatch_ok
 by hand, one case was updated and one was not.  all are update by coccinelle 

usblcd.c
 * [status] ok

usb-serial.c
 * [status] ok

usbtest.c
 * [status] spatch_ok
 in the .c file, parentheses are missing around the argument of sizeof.
 this is added by hand, but not by coccinelle

visor.c
 * [status] ok

zd1201.c
 * [status] bugs, spatch_ok
 by hand, two cases was updated and one was not.  all are update by coccinelle 
 a pair of braces dropped around an if branch containing only one statement
 no connection to the collateral evolution

Bluetooth files

All files are transformed as they were by the programmer.  Both coccinelle
and the programmer miss one case where the transformation should be performed.

bcm203x.c
 * [status] ok

bfusb.c
 * [status] ok

bluecard_cs.c
 * [status] ok

bpa10x.c
 * [status] ok

bt3c_cs.c
 * [status] ok

btuart_cs.c
 * [status] ok

dtl1_cs.c
 * [status] ok

hci_bcsp.c
 * [status] ok

hci_h4.c
 * [status] ok

hci_ldisc.c
 * [status] ok

hci_usb.c
 * [status] wrong
 both we and the person who did the collateral evolution missed a case
 where the call to kmalloc is in a variable initialization and the memset
 branch is in the then branch of a non-null testing if.

hci_vhci.c
 * [status] ok


Key: ok means a .ok file is generated
     spatch_ok means that the result is different in inessential ways
     wrong means that the result is wrong
     error means that coccinelle crashes
     bugs refers to cases where the hand transformation is wrong.

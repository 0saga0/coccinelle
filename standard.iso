// ---------------------------------------------------------------------------
// Spacing (include comments) isomorphisms
// ---------------------------------------------------------------------------
// They are handled at lex time

// ---------------------------------------------------------------------------
// Iso-by-absence (optional qualifier, storage, sign) isomorphisms
// ---------------------------------------------------------------------------
// Some of them are handled in pattern.ml and transformation.ml.

// Some of them handled here.
Declaration
@@ identifier Z; @@
int Z; => signed int Z;

// ---------------------------------------------------------------------------
// Arithmetic isomorphisms
// ---------------------------------------------------------------------------

Expression
@@ expression X, Y; @@
X + Y <=> Y + X

// ---------------------------------------------------------------------------
// Boolean isomorphisms
// ---------------------------------------------------------------------------
Expression
@@ int X; @@
X == 0 <=> !X <=> 0 == X

Expression
@@ expression X; @@
X != 0 <=> 0 != X => X


Expression
@@ expression *X; @@
X == NULL <=> !X <=> NULL == X


// ---------------------------------------------------------------------------
// Increment isomorphisms
// ---------------------------------------------------------------------------

// equivalences between i++, +=1, ...

// ---------------------------------------------------------------------------
// Statement isomorphisms
// ---------------------------------------------------------------------------

Statement
@@
int X;
statement S1, S2;
@@
if (X) S1 else S2 => if (X != 0) S1 else S2

Statement
@@
int X;
statement S;
@@
if (X) S => if (X != 0) S <=> if (0 != X) S


Statement
@@
expression X;
statement S1, S2;
@@
if (X) S1 else S2 <=> if (!X) S2 else S1


// pad: does not work well. cf when use with rule9.cocci.
// Statement
// @@
// expression X;
// statement S;
// @@
// if (X) { S } <=>/ if (X) S


// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
Declaration
@@
type T;
identifier Z;
@@
T Z = ...; <=> T Z;



// ---------------------------------------------------------------------------
// Branch (or compound) isomorphisms
// ---------------------------------------------------------------------------
// maybe a cocci patch should require something that looks like what is on
// the left above to occur in a if or while

Statement
@@ expression E; @@
{ ... return E; } => return E;

Statement
@@ expression E; @@
{ return E; } => return E;

//pad: seems redundant. Is it because 'E' subsume (unify) '...' ?
//Statement
//@@ @@
//{ ... return ...; } => return ...;



// ---------------------------------------------------------------------------
// ---------------------------------------------------------------------------
//Expression
//@@ expression E; @@
// E => (E)
//// E => ((E))

// todo: isomorphism avec les () around ? cf sizeof 3.



// ---------------------------------------------------------------------------
// Pointer/Array isomorphisms
// ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
// Pointer/Structure isomorphisms
// ---------------------------------------------------------------------------

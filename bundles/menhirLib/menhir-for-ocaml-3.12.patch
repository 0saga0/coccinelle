diff -ruN menhir-20171013/src/Engine.ml menhir-20171013-b/src/Engine.ml
--- menhir-20171013/src/Engine.ml	2017-10-13 18:14:06.000000000 +0200
+++ menhir-20171013-b/src/Engine.ml	2017-11-29 13:33:12.000000000 +0100
@@ -252,8 +252,8 @@
 
     (* This [match/with/exception] construct requires OCaml 4.02. *)
 
-    match T.semantic_action prod env with
-    | stack ->
+    match try Some (T.semantic_action prod env) with Error -> None with
+    | Some stack ->
 
         (* By our convention, the semantic action has produced an updated
            stack. The state now found in the top stack cell is the return
@@ -267,7 +267,7 @@
         let env = { env with stack; current } in
         run env false
 
-    | exception Error ->
+    | None ->
         initiate env
 
   and accept env prod =
@@ -650,8 +650,13 @@
      If desired, they could now be implemented outside Menhir, by relying on
      the functions [top] and [pop]. *)
 
-  type element =
-    | Element: 'a lr1state * 'a * position * position -> element
+  type 'b element_picker = {
+      pick_element : 'a . 'a lr1state * 'a * position * position -> 'b
+    }
+
+  type element = {
+      element : 'b . 'b element_picker -> 'b
+    }
 
   open General
 
@@ -680,12 +685,13 @@
            type-checker thinks ['a] is [semantic_value] and considers this code
            well-typed. Outside, we will use magic to provide the user with a way
            of inspecting states and recovering the value of ['a]. *)
-        let element = Element (
+        let element = {
+          element = fun picker -> picker.pick_element (
           current,
           cell.semv,
           cell.startp,
           cell.endp
-        ) in
+        ) } in
         Cons (element, stack next cell.state)
     )
 
@@ -702,7 +708,9 @@
     if next == cell then
       None
     else
-      Some (Element (env.current, cell.semv, cell.startp, cell.endp))
+      Some ({
+        element = fun picker -> picker.pick_element
+          (env.current, cell.semv, cell.startp, cell.endp)})
 
   (* [equal] compares the stacks for physical equality, and compares the
      current states via their numbers (this seems cleaner than using OCaml's
diff -ruN menhir-20171013/src/IO.ml menhir-20171013-b/src/IO.ml
--- menhir-20171013/src/IO.ml	2017-10-13 18:14:06.000000000 +0200
+++ menhir-20171013-b/src/IO.ml	2017-11-29 12:58:11.000000000 +0100
@@ -13,6 +13,8 @@
 
 (* Input-output utilities. *)
 
+open Stdcompat
+
 (* ------------------------------------------------------------------------- *)
 (* [try/finally] has the same semantics as in Java. *)
 
diff -ruN menhir-20171013/src/IncrementalEngine.ml menhir-20171013-b/src/IncrementalEngine.ml
--- menhir-20171013/src/IncrementalEngine.ml	2017-10-13 18:14:06.000000000 +0200
+++ menhir-20171013-b/src/IncrementalEngine.ml	2017-11-29 13:10:55.000000000 +0100
@@ -210,8 +210,13 @@
      for some type ['a], the state [s] has type ['a lr1state] and the value [v]
      has type ['a]. In other words, the type [element] is an existential type. *)
 
-  type element =
-    | Element: 'a lr1state * 'a * position * position -> element
+  type 'b element_picker = {
+      pick_element : 'a . 'a lr1state * 'a * position * position -> 'b
+    }
+
+  type element = {
+      element : 'b . 'b element_picker -> 'b
+    }
 
   (* The parser's stack is (or, more precisely, can be viewed as) a stream of
      elements. The type [stream] is defined by the module [General]. *)
@@ -339,15 +344,20 @@
      the disjoint union of the types ['a terminal] and ['a nonterminal]. *)
 
   type 'a symbol =
-    | T : 'a terminal -> 'a symbol
-    | N : 'a nonterminal -> 'a symbol
+    | T of 'a terminal
+    | N of 'a nonterminal
 
   (* The type [xsymbol] is an existentially quantified version of the type
      ['a symbol]. This type is useful in situations where the index ['a]
      is not statically known. *)
 
-  type xsymbol =
-    | X : 'a symbol -> xsymbol
+  type 'b xsymbol_picker = {
+      pick_symbol : 'a . 'a symbol -> 'b
+    }
+
+  type xsymbol = {
+      xsymbol : 'b . 'b xsymbol_picker -> 'b
+    }
 
 end
 
diff -ruN menhir-20171013/src/InspectionTableInterpreter.ml menhir-20171013-b/src/InspectionTableInterpreter.ml
--- menhir-20171013/src/InspectionTableInterpreter.ml	2017-10-13 18:14:06.000000000 +0200
+++ menhir-20171013-b/src/InspectionTableInterpreter.ml	2017-11-29 13:11:59.000000000 +0100
@@ -28,11 +28,16 @@
      where these types are defined. *)
 
   type 'a symbol =
-    | T : 'a terminal -> 'a symbol
-    | N : 'a nonterminal -> 'a symbol
+    | T of 'a terminal
+    | N of 'a nonterminal
 
-  type xsymbol =
-    | X : 'a symbol -> xsymbol
+  type 'b xsymbol_picker = {
+      pick_symbol : 'a . 'a symbol -> 'b
+    }
+
+  type xsymbol = {
+      xsymbol : 'b . 'b xsymbol_picker -> 'b
+    }
 
 end
 
diff -ruN menhir-20171013/src/LRijkstra.ml menhir-20171013-b/src/LRijkstra.ml
--- menhir-20171013/src/LRijkstra.ml	2017-10-13 18:14:06.000000000 +0200
+++ menhir-20171013-b/src/LRijkstra.ml	2017-11-29 13:16:41.000000000 +0100
@@ -11,6 +11,8 @@
 (*                                                                            *)
 (******************************************************************************)
 
+open Stdcompat
+
 (* The purpose of this algorithm is to find, for each pair of a state [s]
    and a terminal symbol [z] such that looking at [z] in state [s] causes
    an error, a minimal path (starting in some initial state) that actually
@@ -243,10 +245,10 @@
       grammar_uses_error := true;
       false
   | a :: w ->
-      match SymbolMap.find a (Lr1.transitions s) with
-      | s ->
+      match SymbolMap.find_opt a (Lr1.transitions s) with
+      | Some s ->
           reduction_path_exists s w prod
-      | exception Not_found ->
+      | None ->
           false
 
 (* ------------------------------------------------------------------------ *)
@@ -369,10 +371,10 @@
         assert (can_reduce t.current prod);
         t.productions <- prod :: t.productions
     | a :: w ->
-        match SymbolMap.find a (Lr1.transitions t.current) with
-        | exception Not_found ->
+        match SymbolMap.find_opt a (Lr1.transitions t.current) with
+        | None ->
             assert false
-        | successor ->
+        | Some successor ->
             (* Find our child at [a], or create it. *)
             let t' =
               try
@@ -911,9 +913,9 @@
       foreach (fun z ->
         assert (Terminal.real z);
         let key = pack nt a z in
-        match H.find m key with
-        | w -> f w z
-        | exception Not_found -> ()
+        match H.find_opt m key with
+        | Some w -> f w z
+        | None -> ()
       )
 
   let size () =
@@ -944,8 +946,8 @@
     F.query s (W.first w z) (fun fact ->
       assert (compatible (lookahead fact) (W.first w z));
       (* ... try to take one step in the trie along an edge labeled [nt]. *)
-      match Trie.step sym (position fact) with
-      | position ->
+      match try Some (Trie.step sym (position fact)) with Not_found -> None with
+      | Some position ->
           (* This takes us to a new state whose incoming symbol is [nt].
              Hence, this state is not solid. In order to satisfy invariant 2,
              we must create fact whose lookahead assumption is not [any].
@@ -956,7 +958,7 @@
           if not (causes_an_error (Trie.current position) z) then
             let word = W.append (word fact) w in
             enqueue position word z
-      | exception Not_found ->
+      | None ->
           (* Could not take a step in the trie. This means this branch
              leads nowhere of interest, and was pruned when the trie
              was constructed. *)
@@ -998,15 +1000,15 @@
   Lr1.transitions current |> SymbolMap.iter (fun sym target ->
     (* ... try to follow this transition in the trie [position],
        down to a child which we call [child]. *)
-    match Trie.step sym position, sym with
+    match try Some (Trie.step sym position, sym) with Not_found -> None with
 
-    | exception Not_found ->
+    | None ->
 
         (* Could not take a step in the trie. This means this transition
            leads nowhere of interest. *)
         ()
 
-    | child, Symbol.T t ->
+    | Some (child, Symbol.T t) ->
 
         (* 1a. The transition exists in the trie, and [sym] is in fact a
            terminal symbol [t]. We note that [t] cannot be the [error] token,
@@ -1029,7 +1031,7 @@
           let word = W.append word (W.singleton t) in
           enqueue child word any
 
-    | child, Symbol.N nt ->
+    | Some (child, Symbol.N nt) ->
 
         (* 1b. The transition exists in the trie, and [sym] is in fact a
            nonterminal symbol [nt]. *)
diff -ruN menhir-20171013/src/PackedIntArray.ml menhir-20171013-b/src/PackedIntArray.ml
--- menhir-20171013/src/PackedIntArray.ml	2017-10-13 18:14:06.000000000 +0200
+++ menhir-20171013-b/src/PackedIntArray.ml	2017-11-29 13:28:39.000000000 +0100
@@ -11,6 +11,8 @@
 (*                                                                            *)
 (******************************************************************************)
 
+open Stdcompat
+
 (* A packed integer array is represented as a pair of an integer [k] and
    a string [s]. The integer [k] is the number of bits per integer that we
    use. The string [s] is just an array of bits, which is read in 8-bit
diff -ruN menhir-20171013/src/cmly_read.ml menhir-20171013-b/src/cmly_read.ml
--- menhir-20171013/src/cmly_read.ml	2017-10-13 18:14:06.000000000 +0200
+++ menhir-20171013-b/src/cmly_read.ml	2017-11-29 15:22:36.000000000 +0100
@@ -11,6 +11,8 @@
 (*                                                                            *)
 (******************************************************************************)
 
+open Stdcompat
+
 open Cmly_format
 open Cmly_api
 
@@ -37,11 +39,11 @@
 
 let read (filename : string) : grammar =
   let ic = open_in_bin filename in
-  match read ic with
-  | x ->
+  match try Ok (read ic) with exn -> Pervasives.Error exn with
+  | Ok x ->
       close_in_noerr ic;
       x
-  | exception exn ->
+  | Pervasives.Error exn ->
       close_in_noerr ic;
       raise exn
 
diff -ruN menhir-20171013/src/grammarFunctor.ml menhir-20171013-b/src/grammarFunctor.ml
--- menhir-20171013/src/grammarFunctor.ml	2017-10-13 18:14:06.000000000 +0200
+++ menhir-20171013-b/src/grammarFunctor.ml	2017-11-29 13:13:49.000000000 +0100
@@ -11,6 +11,8 @@
 (*                                                                            *)
 (******************************************************************************)
 
+open Stdcompat
+
 open UnparameterizedSyntax
 open Syntax
 open Positions
diff -ruN menhir-20171013/src/grammarFunctor.mli menhir-20171013-b/src/grammarFunctor.mli
--- menhir-20171013/src/grammarFunctor.mli	2017-10-13 18:14:06.000000000 +0200
+++ menhir-20171013-b/src/grammarFunctor.mli	2017-11-29 13:26:23.000000000 +0100
@@ -127,7 +127,11 @@
 
 module NonterminalMap : GMap.S with type key = Nonterminal.t
 
-module NonterminalSet = NonterminalMap.Domain
+module NonterminalSet : sig
+  include module type of struct
+    include NonterminalMap.Domain
+  end
+end
 
 (* ------------------------------------------------------------------------ *)
 (* Terminals. *)
@@ -319,6 +323,6 @@
 
   (* All of the operations documented in [Map] are available. *)
 
-  include Map.S with type key = Symbol.t
+  include Stdcompat.Map.S with type key = Symbol.t
 
   val domain: 'a t -> key list

diff -ruN menhir-20171013/src/interpret.ml menhir-20171013-b/src/interpret.ml
--- menhir-20171013/src/interpret.ml	2017-10-13 18:14:06.000000000 +0200
+++ menhir-20171013-b/src/interpret.ml	2017-11-29 15:20:35.000000000 +0100
@@ -11,6 +11,8 @@
 (*                                                                            *)
 (******************************************************************************)
 
+open Stdcompat
+
 module I = Invariant (* artificial dependency *)
 module D = Default   (* artificial dependency *)
 
@@ -508,12 +510,15 @@
          loop (Comment comments :: accu) segments
     | (Segment, _, lexbuf) :: segments ->
         (* Read a series of located sentences. *)
-        match SentenceParser.entry SentenceLexer.lex lexbuf with
-        | exception Parsing.Parse_error ->
+        match
+          try Some (SentenceParser.entry SentenceLexer.lex lexbuf)
+          with Parsing.Parse_error -> None
+        with
+        | None ->
             Error.error
               [Positions.cpos lexbuf]
               "ill-formed sentence."
-        | sentences ->
+        | Some sentences ->
             (* In principle, we should now find a segment of whitespace
                followed with a segment of text. By construction, the two
                kinds of segments alternate. *)
@@ -549,14 +554,14 @@
     List.fold_left (fun table (sentences_and_states, message) ->
       List.fold_left (fun table (sentence2, target) ->
         let s = target2state target in
-        match Lr1.NodeMap.find s table with
-        | sentence1, _ ->
+        match Lr1.NodeMap.find_opt s table with
+        | Some (sentence1, _) ->
             if detect_redundancy then
               Error.signal (fst sentence1 @ fst sentence2)
                    "these sentences both cause an error in state %d."
                    (Lr1.number s);
             table
-        | exception Not_found ->
+        | None ->
             Lr1.NodeMap.add s (sentence2, message) table
       ) table sentences_and_states
     ) Lr1.NodeMap.empty runs
diff -ruN menhir-20171013/src/keyword.ml menhir-20171013-b/src/keyword.ml
--- menhir-20171013/src/keyword.ml	2017-10-13 18:14:06.000000000 +0200
+++ menhir-20171013-b/src/keyword.ml	2017-11-29 12:58:56.000000000 +0100
@@ -15,6 +15,8 @@
    that help deal with the keywords that we recognize within
    semantic actions. *)
 
+open Stdcompat
+
 (* ------------------------------------------------------------------------- *)
 (* Types. *)
 
diff -ruN menhir-20171013/src/keyword.mli menhir-20171013-b/src/keyword.mli
--- menhir-20171013/src/keyword.mli	2017-10-13 18:14:06.000000000 +0200
+++ menhir-20171013-b/src/keyword.mli	2017-11-29 12:59:25.000000000 +0100
@@ -61,6 +61,6 @@
 (* Sets of keywords. *)
 
 module KeywordSet : sig
-  include Set.S with type elt = keyword
+  include Stdcompat.Set.S with type elt = keyword
   val map: (keyword -> keyword) -> t -> t
 end
diff -ruN menhir-20171013/src/lexer.mll menhir-20171013-b/src/lexer.mll
--- menhir-20171013/src/lexer.mll	2017-10-13 18:14:06.000000000 +0200
+++ menhir-20171013-b/src/lexer.mll	2017-11-29 13:35:38.000000000 +0100
@@ -13,6 +13,8 @@
 
 {
 
+open Stdcompat
+
 open Lexing
 open Parser
 open Positions
diff -ruN menhir-20171013/src/lr1.ml menhir-20171013-b/src/lr1.ml
--- menhir-20171013/src/lr1.ml	2017-10-13 18:14:06.000000000 +0200
+++ menhir-20171013-b/src/lr1.ml	2017-11-29 13:22:06.000000000 +0100
@@ -11,6 +11,8 @@
 (*                                                                            *)
 (******************************************************************************)
 
+open Stdcompat
+
 open Grammar
 module S = Slr (* artificial dependency; ensures that [Slr] runs first *)
 
diff -ruN menhir-20171013/src/lr1.mli menhir-20171013-b/src/lr1.mli
--- menhir-20171013/src/lr1.mli	2017-10-13 18:14:06.000000000 +0200
+++ menhir-20171013-b/src/lr1.mli	2017-11-29 13:21:53.000000000 +0100
@@ -36,7 +36,7 @@
 
 module NodeSet : Set.S with type elt = node
 
-module NodeMap : Map.S with type key = node
+module NodeMap : Stdcompat.Map.S with type key = node
 
 (* These are the automaton's entry states, indexed by the start productions. *)
 
diff -ruN menhir-20171013/src/misc.ml menhir-20171013-b/src/misc.ml
--- menhir-20171013/src/misc.ml	2017-10-13 18:14:06.000000000 +0200
+++ menhir-20171013-b/src/misc.ml	2017-11-29 12:59:44.000000000 +0100
@@ -11,6 +11,8 @@
 (*                                                                            *)
 (******************************************************************************)
 
+open Stdcompat
+
 let ( $$ ) x f = f x
 
 let unSome = function
diff -ruN menhir-20171013/src/nonTerminalDefinitionInlining.ml menhir-20171013-b/src/nonTerminalDefinitionInlining.ml
--- menhir-20171013/src/nonTerminalDefinitionInlining.ml	2017-10-13 18:14:06.000000000 +0200
+++ menhir-20171013-b/src/nonTerminalDefinitionInlining.ml	2017-11-29 13:37:09.000000000 +0100
@@ -11,6 +11,8 @@
 (*                                                                            *)
 (******************************************************************************)
 
+open Stdcompat
+
 open Keyword
 open UnparameterizedSyntax
 open ListMonad
diff -ruN menhir-20171013/src/parameterizedGrammar.ml menhir-20171013-b/src/parameterizedGrammar.ml
--- menhir-20171013/src/parameterizedGrammar.ml	2017-10-13 18:14:06.000000000 +0200
+++ menhir-20171013-b/src/parameterizedGrammar.ml	2017-11-29 13:22:37.000000000 +0100
@@ -683,11 +683,11 @@
   (* Instantiate the branches of sym for a particular set of actual
      parameters. *)
   and expand_branches subst sym actual_parameters : symbol =
-    match StringMap.find (Positions.value sym) p_grammar.p_rules with
-    | exception Not_found ->
+    match StringMap.find_opt (Positions.value sym) p_grammar.p_rules with
+    | None ->
         (* [sym] is a terminal symbol. Expansion is not needed. *)
         Positions.value sym
-    | prule ->
+    | Some prule ->
         let nsym = name_of sym actual_parameters in
         (* Check up front if [nsym] is marked, so as to deal with it just once. *)
         if Hashtbl.mem expanded_rules nsym then
diff -ruN menhir-20171013/src/parserAux.ml menhir-20171013-b/src/parserAux.ml
--- menhir-20171013/src/parserAux.ml	2017-10-13 18:14:06.000000000 +0200
+++ menhir-20171013-b/src/parserAux.ml	2017-11-29 13:35:12.000000000 +0100
@@ -11,6 +11,8 @@
 (*                                                                            *)
 (******************************************************************************)
 
+open Stdcompat
+
 open Positions
 open Syntax
 
diff -ruN menhir-20171013/src/partialGrammar.ml menhir-20171013-b/src/partialGrammar.ml
--- menhir-20171013/src/partialGrammar.ml	2017-10-13 18:14:06.000000000 +0200
+++ menhir-20171013-b/src/partialGrammar.ml	2017-11-29 13:36:00.000000000 +0100
@@ -11,6 +11,8 @@
 (*                                                                            *)
 (******************************************************************************)
 
+open Stdcompat
+
 open Misc
 open Syntax
 open Positions
@@ -315,26 +317,28 @@
   Hashtbl.create 13
 
 let store_symbol (symbols : symbol_table) symbol kind =
-  match find_symbol symbols symbol, kind with
+  match try Some (find_symbol symbols symbol, kind) with Not_found -> None with
 
   (* The symbol is not known so far. Add it. *)
-  | exception Not_found ->
+  | None ->
       add_in_symbol_table symbols symbol kind
 
   (* There are two definitions of this symbol in one grammatical unit
      (that is, one .mly file), and at least one of them is private.
      This is forbidden. *)
-  | PrivateNonTerminal p, PrivateNonTerminal p'
+  | Some (
+    PrivateNonTerminal p, PrivateNonTerminal p'
   | PublicNonTerminal p, PrivateNonTerminal p'
-  | PrivateNonTerminal p, PublicNonTerminal p' ->
+  | PrivateNonTerminal p, PublicNonTerminal p') ->
       Error.error [ p; p']
         "the nonterminal symbol %s is multiply defined.\n\
          Only %%public symbols can have split definitions."
         symbol
 
   (* The symbol is known to be a token but declared as a nonterminal.*)
-  | Token tkp, (PrivateNonTerminal p | PublicNonTerminal p)
-  | (PrivateNonTerminal p | PublicNonTerminal p), Token tkp ->
+  | Some (
+    Token tkp, (PrivateNonTerminal p | PublicNonTerminal p)
+  | (PrivateNonTerminal p | PublicNonTerminal p), Token tkp) ->
       Error.error [ p; tkp.tk_position ]
            "the identifier %s is a reference to a token."
            symbol
@@ -343,13 +347,14 @@
      As of 2017/03/29, splitting the definition of a %public nonterminal
      symbol is permitted. (It used to be permitted over multiple units,
      but forbidden within a single unit.) *)
-  | _, DontKnow _
+  | Some (
+    _, DontKnow _
   | Token _, Token _
-  | PublicNonTerminal _, PublicNonTerminal _ ->
+  | PublicNonTerminal _, PublicNonTerminal _) ->
       symbols
 
   (* We learn that the symbol is a nonterminal or a token. *)
-  | DontKnow _, _ ->
+  | Some (DontKnow _, _) ->
       replace_in_symbol_table symbols symbol kind
 
 let store_used_symbol position tokens symbols symbol =
diff -ruN menhir-20171013/src/pprint.ml menhir-20171013-b/src/pprint.ml
--- menhir-20171013/src/pprint.ml	2017-10-13 18:14:06.000000000 +0200
+++ menhir-20171013-b/src/pprint.ml	2017-11-29 13:39:42.000000000 +0100
@@ -11,6 +11,8 @@
 (*                                                                            *)
 (******************************************************************************)
 
+open Stdcompat
+
 (* This is an adaptation of Daan Leijen's [PPrint] library, which itself is
    based on the ideas developed by Philip Wadler in ``A Prettier Printer''.
    For more information, see:
diff -ruN menhir-20171013/src/printer.ml menhir-20171013-b/src/printer.ml
--- menhir-20171013/src/printer.ml	2017-10-13 18:14:06.000000000 +0200
+++ menhir-20171013-b/src/printer.ml	2017-11-29 12:57:44.000000000 +0100
@@ -13,6 +13,8 @@
 
 (* A pretty-printer for [IL]. *)
 
+open Stdcompat
+
 open IL
 
 module PreliminaryMake (X : sig
diff -ruN menhir-20171013/src/referenceInterpreter.ml menhir-20171013-b/src/referenceInterpreter.ml
--- menhir-20171013/src/referenceInterpreter.ml	2017-10-13 18:14:06.000000000 +0200
+++ menhir-20171013-b/src/referenceInterpreter.ml	2017-11-29 15:08:42.000000000 +0100
@@ -316,8 +316,8 @@
     match E.top env with
     | None ->
         entry
-    | Some (E.Element (s, _, _, _)) ->
-        s
+    | Some element ->
+        element.E.element { E.pick_element = fun (s, _, _, _) -> (s : E.state) }
   in
 
   (* Set up a function that delivers tokens one by one. *)
diff -ruN menhir-20171013/src/stringMap.ml menhir-20171013-b/src/stringMap.ml
--- menhir-20171013/src/stringMap.ml	2017-10-13 18:14:06.000000000 +0200
+++ menhir-20171013-b/src/stringMap.ml	2017-11-29 13:20:54.000000000 +0100
@@ -11,7 +11,7 @@
 (*                                                                            *)
 (******************************************************************************)
 
-include Map.Make (String)
+include Stdcompat.Map.Make (String)
 
 let cardinal s =
   fold (fun _ _ x -> x + 1) s 0
diff -ruN menhir-20171013/src/stringMap.mli menhir-20171013-b/src/stringMap.mli
--- menhir-20171013/src/stringMap.mli	2017-10-13 18:14:06.000000000 +0200
+++ menhir-20171013-b/src/stringMap.mli	2017-11-29 13:20:40.000000000 +0100
@@ -11,7 +11,7 @@
 (*                                                                            *)
 (******************************************************************************)
 
-include Map.S with type key = string
+include Stdcompat.Map.S with type key = string
 
 val cardinal : 'a t -> int
 
diff -ruN menhir-20171013/src/unparameterizedPrinter.ml menhir-20171013-b/src/unparameterizedPrinter.ml
--- menhir-20171013/src/unparameterizedPrinter.ml	2017-10-13 18:14:06.000000000 +0200
+++ menhir-20171013-b/src/unparameterizedPrinter.ml	2017-11-29 13:39:18.000000000 +0100
@@ -11,6 +11,8 @@
 (*                                                                            *)
 (******************************************************************************)
 
+open Stdcompat
+
 open Printf
 open Positions
 open Syntax

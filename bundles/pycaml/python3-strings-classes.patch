diff -Naur chemoelectric-pycaml-8614105/pycaml.ml chemoelectric-pycaml-8614105.patched/pycaml.ml
--- chemoelectric-pycaml-8614105/pycaml.ml	2016-05-12 00:15:15.000000000 +0200
+++ chemoelectric-pycaml-8614105.patched/pycaml.ml	2016-05-12 00:14:40.000000000 +0200
@@ -205,6 +205,9 @@
 external pynumber_absolute : pyobject -> pyobject = "PyNumber_Absolute_wrapper"
 external pynumber_invert : pyobject -> pyobject = "PyNumber_Invert_wrapper"
 external pyiter_next : pyobject -> pyobject = "PyIter_Next_wrapper"
+IFDEF PYMAJOR3 THEN
+external pyinstancemethod_new : pyobject -> pyobject = "PyInstanceMethod_New_wrapper"
+END
 
 (* Type15 *)
 external pyobject_richcompare : (pyobject * pyobject * int) -> pyobject = "PyObject_RichCompare_wrapper"
@@ -277,7 +280,9 @@
 external pyiter_check : pyobject -> int = "PyIter_Check_wrapper"
 IFDEF PYMAJOR3 THEN
 external pyunicode_getsize : pyobject -> int = "PyUnicode_GetSize_wrapper"
+external pyunicode_check : pyobject -> int = "PyUnicode_Check_wrapper"
 END
+external pybytes_check : pyobject -> int = "PyBytes_Check_wrapper"
 
 (* Type19 *)
 external pyobject_hasattr : (pyobject * pyobject) -> int = "PyObject_HasAttr_wrapper"
@@ -301,6 +306,7 @@
 external pyobject_setattrstring : (pyobject * string * pyobject) -> int = "PyObject_SetAttrString_wrapper"
 external pydict_setitemstring : (pyobject * string * pyobject) -> int = "PyDict_SetItemString_wrapper"
 external pymapping_setitemstring : (pyobject * string * pyobject) -> int = "PyMapping_SetItemString_wrapper"
+external pymodule_addobject : (pyobject * string * pyobject) -> int = "PyModule_AddObject_wrapper"
 
 (* Type22 *)
 external pymapping_haskeystring : (pyobject * string) -> int = "PyMapping_HasKeyString_wrapper"
@@ -323,7 +329,9 @@
 
 (* Type26 *)
 external pybytes_asstring : pyobject -> string = "PyBytes_AsString_wrapper"
+IFDEF PYMAJOR2 THEN
 external pystring_asstring : pyobject -> string = "PyBytes_AsString_wrapper" (* Legacy support *)
+END
 external pymodule_getfilename : pyobject -> string = "PyModule_GetFilename_wrapper"
 external pymodule_getname : pyobject -> string = "PyModule_GetName_wrapper"
 
@@ -438,6 +446,7 @@
 (* TypeUTF8Decoder *)
 IFDEF PYMAJOR3 THEN
 external pyunicode_decodeutf8 : (string * string option) -> pyobject = "PyUnicode_DecodeUTF8_wrapper"
+external pyunicode_asencodedstring : (pyobject * string * string) -> pyobject = "PyUnicode_AsEncodedString_wrapper"
 END
 
 (*-----------------------------------------------------------------------*)
@@ -480,6 +489,55 @@
 
 external pyrefcount: pyobject -> int = "pyrefcount"
 
+let pycheck_not_null v =
+  if v = pynull () then
+    failwith "pycheck_not_null";
+  v
+
+let pycheck_int i =
+  if i = -1 then
+    failwith "pycheck_int"
+
+let pyclass_init classname parents fields methods =
+  let dict = pycheck_not_null (pydict_new ()) in
+  let add_field (name, value) =
+    pycheck_int (pydict_setitemstring (dict, name, value)) in
+  List.iter add_field fields;
+IFDEF PYMAJOR2 THEN
+  let c = pycheck_not_null (pyclass_new (parents, dict, classname)) in
+  let add_method (name, closure) =
+    let m = pycheck_not_null (pymethod_new (pywrap_closure closure, pynull (), c)) in
+    add_field (name, m) in
+  List.iter add_method methods;
+  c
+ELSE
+  let add_method (name, closure) =
+    let m = pycheck_not_null (pyinstancemethod_new (pywrap_closure closure)) in
+    add_field (name, m) in
+  List.iter add_method methods;
+  pycheck_not_null (pyclass_new (parents, dict, classname))
+END
+
+IFDEF PYMAJOR3 THEN
+let pystring_asstring obj =
+  if pyunicode_check obj != 0 then
+    let bytes = pyunicode_asencodedstring (obj, "UTF8", "strict") in
+    if bytes = pynull () then
+      failwith "pystring_asstring: encoding failure";
+    pybytes_asstring bytes
+  else if pybytes_check obj != 0 then
+    pybytes_asstring obj
+  else
+    failwith "pystring_asstring: not a string"
+END
+
+let pystring_check obj =
+IFDEF PYMAJOR2 THEN
+  pybytes_check obj != 0
+ELSE
+  pyunicode_check obj != 0 || pybytes_check obj != 0
+END
+
 let _py_profile_hash = ((Hashtbl.create 100):(string, float array) Hashtbl.t)
 let _py_profiling_active=ref false
 (* The profiling hash and switch are strictly internal! *)
diff -Naur chemoelectric-pycaml-8614105/pycaml_stubs.c chemoelectric-pycaml-8614105.patched/pycaml_stubs.c
--- chemoelectric-pycaml-8614105/pycaml_stubs.c	2016-05-12 00:15:15.000000000 +0200
+++ chemoelectric-pycaml-8614105.patched/pycaml_stubs.c	2016-05-12 00:14:40.000000000 +0200
@@ -229,8 +229,13 @@
     CAMLparam0();
     CAMLlocal1(v);
 
-    if (obj != NULL)
-        Py_INCREF(obj);
+    if (obj == NULL)
+        CAMLreturn(Val_int(0));
+
+    if (obj == Py_None)
+        CAMLreturn(Val_int(1));
+
+    Py_INCREF(obj);
 
     v = caml_alloc_custom( &pyops, sizeof( PyObject * ), 100, 30000000 );
     *((PyObject **)Data_custom_val(v)) = obj;
@@ -243,6 +248,12 @@
     CAMLparam0();
     CAMLlocal1(v);
 
+    if (obj == NULL)
+        CAMLreturn(Val_int(0));
+
+    if (obj == Py_None)
+        CAMLreturn(Val_int(1));
+
     v = caml_alloc_custom( &pyops, sizeof( PyObject * ), 100, 30000000 );
     *((PyObject **)Data_custom_val(v)) = obj;
     CAMLreturn(v);
@@ -251,6 +262,14 @@
 static PyObject *
 pyunwrap( value v )
 {
+    if (Is_long(v))
+        switch (Int_val(v)) {
+        case 0:
+            return NULL;
+        case 1:
+            return Py_None;
+        }
+
     return *((PyObject **)Data_custom_val(v));
 }
 
@@ -811,6 +830,9 @@
 Type14(PyNumber_Absolute, pywrap_steal)
 Type14(PyNumber_Invert, pywrap_steal)
 Type14(PyIter_Next, pywrap_steal)
+#if PY_MAJOR_VERSION >= 3
+Type14(PyInstanceMethod_New, pywrap_steal);
+#endif
 
 Type14a(PyObject_Unicode, PyObject_Str, pywrap_steal)
 Type14a(PyNumber_Int, PyNumber_Long, pywrap_steal)
@@ -941,7 +963,10 @@
 Type18(PyIter_Check)
 #if PY_MAJOR_VERSION >= 3
 Type18(PyUnicode_GetSize)
+Type18(PyUnicode_Check)
 #endif
+Type18(PyBytes_Check)
+
 
 /*-----------------------------------------------------------------------*/
 
@@ -1000,6 +1025,7 @@
 Type21(PyObject_SetAttrString)
 Type21(PyDict_SetItemString)
 Type21(PyMapping_SetItemString)
+Type21(PyModule_AddObject)
 
 /*-----------------------------------------------------------------------*/
 
@@ -1612,6 +1638,19 @@
     CAMLreturn(result);
 }
 #endif
+
+CAMLprim value PyUnicode_AsEncodedString_wrapper(value py_args)
+{
+    CAMLparam1(py_args);
+
+    PyObject *result = PyUnicode_AsEncodedString(
+        pyunwrap(Field(py_args, 0)),
+        String_val(Field(py_args, 1)),
+        String_val(Field(py_args, 2)));
+
+    CAMLreturn(pywrap_steal(result));
+}
+
 /*-----------------------------------------------------------------------*/
 
 /* Value -> Pyobject */
